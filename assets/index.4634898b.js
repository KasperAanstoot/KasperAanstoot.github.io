const lp=function(){const t=document.createElement("link").relList;return t&&t.supports&&t.supports("modulepreload")?"modulepreload":"preload"}(),Aa={},ap="/",Tn=function(t,n){return!n||n.length===0?t():Promise.all(n.map(s=>{if(s=`${ap}${s}`,s in Aa)return;Aa[s]=!0;const i=s.endsWith(".css"),r=i?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${s}"]${r}`))return;const o=document.createElement("link");if(o.rel=i?"stylesheet":lp,i||(o.as="script",o.crossOrigin=""),o.href=s,document.head.appendChild(o),i)return new Promise((l,a)=>{o.addEventListener("load",l),o.addEventListener("error",()=>a(new Error(`Unable to preload CSS for ${s}`)))})})).then(()=>t())};/**
* @vue/shared v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function gt(e,t){const n=new Set(e.split(","));return t?s=>n.has(s.toLowerCase()):s=>n.has(s)}const me={},fs=[],$e=()=>{},Xi=()=>!1,Gn=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),bl=e=>e.startsWith("onUpdate:"),pe=Object.assign,_l=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},cp=Object.prototype.hasOwnProperty,he=(e,t)=>cp.call(e,t),J=Array.isArray,ds=e=>Ps(e)==="[object Map]",Qn=e=>Ps(e)==="[object Set]",Pa=e=>Ps(e)==="[object Date]",up=e=>Ps(e)==="[object RegExp]",se=e=>typeof e=="function",le=e=>typeof e=="string",Nt=e=>typeof e=="symbol",Se=e=>e!==null&&typeof e=="object",Sl=e=>(Se(e)||se(e))&&se(e.then)&&se(e.catch),Mu=Object.prototype.toString,Ps=e=>Mu.call(e),fp=e=>Ps(e).slice(8,-1),Iu=e=>Ps(e)==="[object Object]",wl=e=>le(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,pn=gt(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),dp=gt("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),$r=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},hp=/-(\w)/g,Ae=$r(e=>e.replace(hp,(t,n)=>n?n.toUpperCase():"")),pp=/\B([A-Z])/g,pt=$r(e=>e.replace(pp,"-$1").toLowerCase()),Yn=$r(e=>e.charAt(0).toUpperCase()+e.slice(1)),hs=$r(e=>e?`on${Yn(e)}`:""),Mt=(e,t)=>!Object.is(e,t),ps=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},fr=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},Zs=e=>{const t=parseFloat(e);return isNaN(t)?e:t},dr=e=>{const t=le(e)?Number(e):NaN;return isNaN(t)?e:t};let Oa;const Lu=()=>Oa||(Oa=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:{}),mp="Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error",gp=gt(mp);function yi(e){if(J(e)){const t={};for(let n=0;n<e.length;n++){const s=e[n],i=le(s)?$u(s):yi(s);if(i)for(const r in i)t[r]=i[r]}return t}else if(le(e)||Se(e))return e}const vp=/;(?![^(]*\))/g,yp=/:([^]+)/,bp=/\/\*[^]*?\*\//g;function $u(e){const t={};return e.replace(bp,"").split(vp).forEach(n=>{if(n){const s=n.split(yp);s.length>1&&(t[s[0].trim()]=s[1].trim())}}),t}function bi(e){let t="";if(le(e))t=e;else if(J(e))for(let n=0;n<e.length;n++){const s=bi(e[n]);s&&(t+=s+" ")}else if(Se(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function _p(e){if(!e)return null;let{class:t,style:n}=e;return t&&!le(t)&&(e.class=bi(t)),n&&(e.style=yi(n)),e}const Sp="html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot",wp="svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view",Cp="annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics",Ep="area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr",kp=gt(Sp),xp=gt(wp),Tp=gt(Cp),Rp=gt(Ep),Ap="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Pp=gt(Ap);function Vu(e){return!!e||e===""}function Op(e,t){if(e.length!==t.length)return!1;let n=!0;for(let s=0;n&&s<e.length;s++)n=vn(e[s],t[s]);return n}function vn(e,t){if(e===t)return!0;let n=Pa(e),s=Pa(t);if(n||s)return n&&s?e.getTime()===t.getTime():!1;if(n=Nt(e),s=Nt(t),n||s)return e===t;if(n=J(e),s=J(t),n||s)return n&&s?Op(e,t):!1;if(n=Se(e),s=Se(t),n||s){if(!n||!s)return!1;const i=Object.keys(e).length,r=Object.keys(t).length;if(i!==r)return!1;for(const o in e){const l=e.hasOwnProperty(o),a=t.hasOwnProperty(o);if(l&&!a||!l&&a||!vn(e[o],t[o]))return!1}}return String(e)===String(t)}function Vr(e,t){return e.findIndex(n=>vn(n,t))}const Np=e=>le(e)?e:e==null?"":J(e)||Se(e)&&(e.toString===Mu||!se(e.toString))?JSON.stringify(e,Fu,2):String(e),Fu=(e,t)=>t&&t.__v_isRef?Fu(e,t.value):ds(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((n,[s,i],r)=>(n[ro(s,r)+" =>"]=i,n),{})}:Qn(t)?{[`Set(${t.size})`]:[...t.values()].map(n=>ro(n))}:Nt(t)?ro(t):Se(t)&&!J(t)&&!Iu(t)?String(t):t,ro=(e,t="")=>{var n;return Nt(e)?`Symbol(${(n=e.description)!=null?n:t})`:e};/**
* @vue/reactivity v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let ft;class Cl{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=ft,!t&&ft&&(this.index=(ft.scopes||(ft.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const n=ft;try{return ft=this,t()}finally{ft=n}}}on(){ft=this}off(){ft=this.parent}stop(t){if(this._active){let n,s;for(n=0,s=this.effects.length;n<s;n++)this.effects[n].stop();for(n=0,s=this.cleanups.length;n<s;n++)this.cleanups[n]();if(this.scopes)for(n=0,s=this.scopes.length;n<s;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!t){const i=this.parent.scopes.pop();i&&i!==this&&(this.parent.scopes[this.index]=i,i.index=this.index)}this.parent=void 0,this._active=!1}}}function El(e){return new Cl(e)}function qu(e,t=ft){t&&t.active&&t.effects.push(e)}function kl(){return ft}function Bu(e){ft&&ft.cleanups.push(e)}let Mn;class bs{constructor(t,n,s,i){this.fn=t,this.trigger=n,this.scheduler=s,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,qu(this,i)}get dirty(){if(this._dirtyLevel===2||this._dirtyLevel===3){this._dirtyLevel=1,Jn();for(let t=0;t<this._depsLength;t++){const n=this.deps[t];if(n.computed&&(Mp(n.computed),this._dirtyLevel>=4))break}this._dirtyLevel===1&&(this._dirtyLevel=0),Zn()}return this._dirtyLevel>=4}set dirty(t){this._dirtyLevel=t?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let t=mn,n=Mn;try{return mn=!0,Mn=this,this._runnings++,Na(this),this.fn()}finally{Ma(this),this._runnings--,Mn=n,mn=t}}stop(){var t;this.active&&(Na(this),Ma(this),(t=this.onStop)==null||t.call(this),this.active=!1)}}function Mp(e){return e.value}function Na(e){e._trackId++,e._depsLength=0}function Ma(e){if(e.deps.length>e._depsLength){for(let t=e._depsLength;t<e.deps.length;t++)Du(e.deps[t],e);e.deps.length=e._depsLength}}function Du(e,t){const n=e.get(t);n!==void 0&&t._trackId!==n&&(e.delete(t),e.size===0&&e.cleanup())}function Ip(e,t){e.effect instanceof bs&&(e=e.effect.fn);const n=new bs(e,$e,()=>{n.dirty&&n.run()});t&&(pe(n,t),t.scope&&qu(n,t.scope)),(!t||!t.lazy)&&n.run();const s=n.run.bind(n);return s.effect=n,s}function Lp(e){e.effect.stop()}let mn=!0,No=0;const Hu=[];function Jn(){Hu.push(mn),mn=!1}function Zn(){const e=Hu.pop();mn=e===void 0?!0:e}function xl(){No++}function Tl(){for(No--;!No&&Mo.length;)Mo.shift()()}function ju(e,t,n){if(t.get(e)!==e._trackId){t.set(e,e._trackId);const s=e.deps[e._depsLength];s!==t?(s&&Du(s,e),e.deps[e._depsLength++]=t):e._depsLength++}}const Mo=[];function Uu(e,t,n){xl();for(const s of e.keys()){let i;s._dirtyLevel<t&&(i!=null?i:i=e.get(s)===s._trackId)&&(s._shouldSchedule||(s._shouldSchedule=s._dirtyLevel===0),s._dirtyLevel=t),s._shouldSchedule&&(i!=null?i:i=e.get(s)===s._trackId)&&(s.trigger(),(!s._runnings||s.allowRecurse)&&s._dirtyLevel!==2&&(s._shouldSchedule=!1,s.scheduler&&Mo.push(s.scheduler)))}Tl()}const Ku=(e,t)=>{const n=new Map;return n.cleanup=e,n.computed=t,n},hr=new WeakMap,In=Symbol(""),Io=Symbol("");function ct(e,t,n){if(mn&&Mn){let s=hr.get(e);s||hr.set(e,s=new Map);let i=s.get(n);i||s.set(n,i=Ku(()=>s.delete(n))),ju(Mn,i)}}function zt(e,t,n,s,i,r){const o=hr.get(e);if(!o)return;let l=[];if(t==="clear")l=[...o.values()];else if(n==="length"&&J(e)){const a=Number(s);o.forEach((c,u)=>{(u==="length"||!Nt(u)&&u>=a)&&l.push(c)})}else switch(n!==void 0&&l.push(o.get(n)),t){case"add":J(e)?wl(n)&&l.push(o.get("length")):(l.push(o.get(In)),ds(e)&&l.push(o.get(Io)));break;case"delete":J(e)||(l.push(o.get(In)),ds(e)&&l.push(o.get(Io)));break;case"set":ds(e)&&l.push(o.get(In));break}xl();for(const a of l)a&&Uu(a,4);Tl()}function $p(e,t){var n;return(n=hr.get(e))==null?void 0:n.get(t)}const Vp=gt("__proto__,__v_isRef,__isVue"),zu=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Nt)),Ia=Fp();function Fp(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...n){const s=ie(this);for(let r=0,o=this.length;r<o;r++)ct(s,"get",r+"");const i=s[t](...n);return i===-1||i===!1?s[t](...n.map(ie)):i}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...n){Jn(),xl();const s=ie(this)[t].apply(this,n);return Tl(),Zn(),s}}),e}function qp(e){const t=ie(this);return ct(t,"has",e),t.hasOwnProperty(e)}class Wu{constructor(t=!1,n=!1){this._isReadonly=t,this._isShallow=n}get(t,n,s){const i=this._isReadonly,r=this._isShallow;if(n==="__v_isReactive")return!i;if(n==="__v_isReadonly")return i;if(n==="__v_isShallow")return r;if(n==="__v_raw")return s===(i?r?Xu:Zu:r?Ju:Yu).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(s)?t:void 0;const o=J(t);if(!i){if(o&&he(Ia,n))return Reflect.get(Ia,n,s);if(n==="hasOwnProperty")return qp}const l=Reflect.get(t,n,s);return(Nt(n)?zu.has(n):Vp(n))||(i||ct(t,"get",n),r)?l:Me(l)?o&&wl(n)?l:l.value:Se(l)?i?Pl(l):Sn(l):l}}class Gu extends Wu{constructor(t=!1){super(!1,t)}set(t,n,s,i){let r=t[n];if(!this._isShallow){const a=Dn(r);if(!Xs(s)&&!Dn(s)&&(r=ie(r),s=ie(s)),!J(t)&&Me(r)&&!Me(s))return a?!1:(r.value=s,!0)}const o=J(t)&&wl(n)?Number(n)<t.length:he(t,n),l=Reflect.set(t,n,s,i);return t===ie(i)&&(o?Mt(s,r)&&zt(t,"set",n,s):zt(t,"add",n,s)),l}deleteProperty(t,n){const s=he(t,n);t[n];const i=Reflect.deleteProperty(t,n);return i&&s&&zt(t,"delete",n,void 0),i}has(t,n){const s=Reflect.has(t,n);return(!Nt(n)||!zu.has(n))&&ct(t,"has",n),s}ownKeys(t){return ct(t,"iterate",J(t)?"length":In),Reflect.ownKeys(t)}}class Qu extends Wu{constructor(t=!1){super(!0,t)}set(t,n){return!0}deleteProperty(t,n){return!0}}const Bp=new Gu,Dp=new Qu,Hp=new Gu(!0),jp=new Qu(!0),Rl=e=>e,Fr=e=>Reflect.getPrototypeOf(e);function Ni(e,t,n=!1,s=!1){e=e.__v_raw;const i=ie(e),r=ie(t);n||(Mt(t,r)&&ct(i,"get",t),ct(i,"get",r));const{has:o}=Fr(i),l=s?Rl:n?Nl:ei;if(o.call(i,t))return l(e.get(t));if(o.call(i,r))return l(e.get(r));e!==i&&e.get(t)}function Mi(e,t=!1){const n=this.__v_raw,s=ie(n),i=ie(e);return t||(Mt(e,i)&&ct(s,"has",e),ct(s,"has",i)),e===i?n.has(e):n.has(e)||n.has(i)}function Ii(e,t=!1){return e=e.__v_raw,!t&&ct(ie(e),"iterate",In),Reflect.get(e,"size",e)}function La(e){e=ie(e);const t=ie(this);return Fr(t).has.call(t,e)||(t.add(e),zt(t,"add",e,e)),this}function $a(e,t){t=ie(t);const n=ie(this),{has:s,get:i}=Fr(n);let r=s.call(n,e);r||(e=ie(e),r=s.call(n,e));const o=i.call(n,e);return n.set(e,t),r?Mt(t,o)&&zt(n,"set",e,t):zt(n,"add",e,t),this}function Va(e){const t=ie(this),{has:n,get:s}=Fr(t);let i=n.call(t,e);i||(e=ie(e),i=n.call(t,e)),s&&s.call(t,e);const r=t.delete(e);return i&&zt(t,"delete",e,void 0),r}function Fa(){const e=ie(this),t=e.size!==0,n=e.clear();return t&&zt(e,"clear",void 0,void 0),n}function Li(e,t){return function(s,i){const r=this,o=r.__v_raw,l=ie(o),a=t?Rl:e?Nl:ei;return!e&&ct(l,"iterate",In),o.forEach((c,u)=>s.call(i,a(c),a(u),r))}}function $i(e,t,n){return function(...s){const i=this.__v_raw,r=ie(i),o=ds(r),l=e==="entries"||e===Symbol.iterator&&o,a=e==="keys"&&o,c=i[e](...s),u=n?Rl:t?Nl:ei;return!t&&ct(r,"iterate",a?Io:In),{next(){const{value:f,done:d}=c.next();return d?{value:f,done:d}:{value:l?[u(f[0]),u(f[1])]:u(f),done:d}},[Symbol.iterator](){return this}}}}function Xt(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function Up(){const e={get(r){return Ni(this,r)},get size(){return Ii(this)},has:Mi,add:La,set:$a,delete:Va,clear:Fa,forEach:Li(!1,!1)},t={get(r){return Ni(this,r,!1,!0)},get size(){return Ii(this)},has:Mi,add:La,set:$a,delete:Va,clear:Fa,forEach:Li(!1,!0)},n={get(r){return Ni(this,r,!0)},get size(){return Ii(this,!0)},has(r){return Mi.call(this,r,!0)},add:Xt("add"),set:Xt("set"),delete:Xt("delete"),clear:Xt("clear"),forEach:Li(!0,!1)},s={get(r){return Ni(this,r,!0,!0)},get size(){return Ii(this,!0)},has(r){return Mi.call(this,r,!0)},add:Xt("add"),set:Xt("set"),delete:Xt("delete"),clear:Xt("clear"),forEach:Li(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(r=>{e[r]=$i(r,!1,!1),n[r]=$i(r,!0,!1),t[r]=$i(r,!1,!0),s[r]=$i(r,!0,!0)}),[e,n,t,s]}const[Kp,zp,Wp,Gp]=Up();function qr(e,t){const n=t?e?Gp:Wp:e?zp:Kp;return(s,i,r)=>i==="__v_isReactive"?!e:i==="__v_isReadonly"?e:i==="__v_raw"?s:Reflect.get(he(n,i)&&i in s?n:s,i,r)}const Qp={get:qr(!1,!1)},Yp={get:qr(!1,!0)},Jp={get:qr(!0,!1)},Zp={get:qr(!0,!0)},Yu=new WeakMap,Ju=new WeakMap,Zu=new WeakMap,Xu=new WeakMap;function Xp(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function em(e){return e.__v_skip||!Object.isExtensible(e)?0:Xp(fp(e))}function Sn(e){return Dn(e)?e:Br(e,!1,Bp,Qp,Yu)}function Al(e){return Br(e,!1,Hp,Yp,Ju)}function Pl(e){return Br(e,!0,Dp,Jp,Zu)}function tm(e){return Br(e,!0,jp,Zp,Xu)}function Br(e,t,n,s,i){if(!Se(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const r=i.get(e);if(r)return r;const o=em(e);if(o===0)return e;const l=new Proxy(e,o===2?s:n);return i.set(e,l),l}function Wt(e){return Dn(e)?Wt(e.__v_raw):!!(e&&e.__v_isReactive)}function Dn(e){return!!(e&&e.__v_isReadonly)}function Xs(e){return!!(e&&e.__v_isShallow)}function Ol(e){return Wt(e)||Dn(e)}function ie(e){const t=e&&e.__v_raw;return t?ie(t):e}function Jt(e){return Object.isExtensible(e)&&fr(e,"__v_skip",!0),e}const ei=e=>Se(e)?Sn(e):e,Nl=e=>Se(e)?Pl(e):e;class ef{constructor(t,n,s,i){this.getter=t,this._setter=n,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new bs(()=>t(this._value),()=>ms(this,this.effect._dirtyLevel===2?2:3)),this.effect.computed=this,this.effect.active=this._cacheable=!i,this.__v_isReadonly=s}get value(){const t=ie(this);return(!t._cacheable||t.effect.dirty)&&Mt(t._value,t._value=t.effect.run())&&ms(t,4),Ml(t),t.effect._dirtyLevel>=2&&ms(t,2),t._value}set value(t){this._setter(t)}get _dirty(){return this.effect.dirty}set _dirty(t){this.effect.dirty=t}}function nm(e,t,n=!1){let s,i;const r=se(e);return r?(s=e,i=$e):(s=e.get,i=e.set),new ef(s,i,r||!i,n)}function Ml(e){var t;mn&&Mn&&(e=ie(e),ju(Mn,(t=e.dep)!=null?t:e.dep=Ku(()=>e.dep=void 0,e instanceof ef?e:void 0)))}function ms(e,t=4,n){e=ie(e);const s=e.dep;s&&Uu(s,t)}function Me(e){return!!(e&&e.__v_isRef===!0)}function ce(e){return nf(e,!1)}function tf(e){return nf(e,!0)}function nf(e,t){return Me(e)?e:new sm(e,t)}class sm{constructor(t,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?t:ie(t),this._value=n?t:ei(t)}get value(){return Ml(this),this._value}set value(t){const n=this.__v_isShallow||Xs(t)||Dn(t);t=n?t:ie(t),Mt(t,this._rawValue)&&(this._rawValue=t,this._value=n?t:ei(t),ms(this,4))}}function im(e){ms(e,4)}function Gt(e){return Me(e)?e.value:e}function rm(e){return se(e)?e():Gt(e)}const om={get:(e,t,n)=>Gt(Reflect.get(e,t,n)),set:(e,t,n,s)=>{const i=e[t];return Me(i)&&!Me(n)?(i.value=n,!0):Reflect.set(e,t,n,s)}};function Il(e){return Wt(e)?e:new Proxy(e,om)}class lm{constructor(t){this.dep=void 0,this.__v_isRef=!0;const{get:n,set:s}=t(()=>Ml(this),()=>ms(this));this._get=n,this._set=s}get value(){return this._get()}set value(t){this._set(t)}}function sf(e){return new lm(e)}function rf(e){const t=J(e)?new Array(e.length):{};for(const n in e)t[n]=of(e,n);return t}class am{constructor(t,n,s){this._object=t,this._key=n,this._defaultValue=s,this.__v_isRef=!0}get value(){const t=this._object[this._key];return t===void 0?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return $p(ie(this._object),this._key)}}class cm{constructor(t){this._getter=t,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function um(e,t,n){return Me(e)?e:se(e)?new cm(e):Se(e)&&arguments.length>1?of(e,t,n):ce(e)}function of(e,t,n){const s=e[t];return Me(s)?s:new am(e,t,n)}const fm={GET:"get",HAS:"has",ITERATE:"iterate"},dm={SET:"set",ADD:"add",DELETE:"delete",CLEAR:"clear"};/**
* @vue/runtime-core v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function hm(e,t){}const pm={SETUP_FUNCTION:0,0:"SETUP_FUNCTION",RENDER_FUNCTION:1,1:"RENDER_FUNCTION",WATCH_GETTER:2,2:"WATCH_GETTER",WATCH_CALLBACK:3,3:"WATCH_CALLBACK",WATCH_CLEANUP:4,4:"WATCH_CLEANUP",NATIVE_EVENT_HANDLER:5,5:"NATIVE_EVENT_HANDLER",COMPONENT_EVENT_HANDLER:6,6:"COMPONENT_EVENT_HANDLER",VNODE_HOOK:7,7:"VNODE_HOOK",DIRECTIVE_HOOK:8,8:"DIRECTIVE_HOOK",TRANSITION_HOOK:9,9:"TRANSITION_HOOK",APP_ERROR_HANDLER:10,10:"APP_ERROR_HANDLER",APP_WARN_HANDLER:11,11:"APP_WARN_HANDLER",FUNCTION_REF:12,12:"FUNCTION_REF",ASYNC_COMPONENT_LOADER:13,13:"ASYNC_COMPONENT_LOADER",SCHEDULER:14,14:"SCHEDULER"},mm={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",[0]:"setup function",[1]:"render function",[2]:"watcher getter",[3]:"watcher callback",[4]:"watcher cleanup function",[5]:"native event handler",[6]:"component event handler",[7]:"vnode hook",[8]:"directive hook",[9]:"transition hook",[10]:"app errorHandler",[11]:"app warnHandler",[12]:"ref function",[13]:"async component loader",[14]:"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://github.com/vuejs/core ."};function Qt(e,t,n,s){try{return s?e(...s):e()}catch(i){Xn(i,t,n)}}function mt(e,t,n,s){if(se(e)){const r=Qt(e,t,n,s);return r&&Sl(r)&&r.catch(o=>{Xn(o,t,n)}),r}const i=[];for(let r=0;r<e.length;r++)i.push(mt(e[r],t,n,s));return i}function Xn(e,t,n,s=!0){const i=t?t.vnode:null;if(t){let r=t.parent;const o=t.proxy,l=`https://vuejs.org/error-reference/#runtime-${n}`;for(;r;){const c=r.ec;if(c){for(let u=0;u<c.length;u++)if(c[u](e,o,l)===!1)return}r=r.parent}const a=t.appContext.config.errorHandler;if(a){Qt(a,null,10,[e,o,l]);return}}gm(e,n,i,s)}function gm(e,t,n,s=!0){console.error(e)}let ti=!1,Lo=!1;const Ze=[];let Vt=0;const gs=[];let ln=null,xn=0;const lf=Promise.resolve();let Ll=null;function Ge(e){const t=Ll||lf;return e?t.then(this?e.bind(this):e):t}function vm(e){let t=Vt+1,n=Ze.length;for(;t<n;){const s=t+n>>>1,i=Ze[s],r=ni(i);r<e||r===e&&i.pre?t=s+1:n=s}return t}function Dr(e){(!Ze.length||!Ze.includes(e,ti&&e.allowRecurse?Vt+1:Vt))&&(e.id==null?Ze.push(e):Ze.splice(vm(e.id),0,e),af())}function af(){!ti&&!Lo&&(Lo=!0,Ll=lf.then(cf))}function ym(e){const t=Ze.indexOf(e);t>Vt&&Ze.splice(t,1)}function pr(e){J(e)?gs.push(...e):(!ln||!ln.includes(e,e.allowRecurse?xn+1:xn))&&gs.push(e),af()}function qa(e,t,n=ti?Vt+1:0){for(;n<Ze.length;n++){const s=Ze[n];if(s&&s.pre){if(e&&s.id!==e.uid)continue;Ze.splice(n,1),n--,s()}}}function mr(e){if(gs.length){const t=[...new Set(gs)].sort((n,s)=>ni(n)-ni(s));if(gs.length=0,ln){ln.push(...t);return}for(ln=t,xn=0;xn<ln.length;xn++)ln[xn]();ln=null,xn=0}}const ni=e=>e.id==null?1/0:e.id,bm=(e,t)=>{const n=ni(e)-ni(t);if(n===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function cf(e){Lo=!1,ti=!0,Ze.sort(bm);const t=$e;try{for(Vt=0;Vt<Ze.length;Vt++){const n=Ze[Vt];n&&n.active!==!1&&Qt(n,null,14)}}finally{Vt=0,Ze.length=0,mr(),ti=!1,Ll=null,(Ze.length||gs.length)&&cf()}}let as,Vi=[];function uf(e,t){var n,s;as=e,as?(as.enabled=!0,Vi.forEach(({event:i,args:r})=>as.emit(i,...r)),Vi=[]):typeof window!="undefined"&&window.HTMLElement&&!((s=(n=window.navigator)==null?void 0:n.userAgent)!=null&&s.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push(r=>{uf(r,t)}),setTimeout(()=>{as||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,Vi=[])},3e3)):Vi=[]}function _m(e,t,...n){if(e.isUnmounted)return;const s=e.vnode.props||me;let i=n;const r=t.startsWith("update:"),o=r&&t.slice(7);if(o&&o in s){const u=`${o==="modelValue"?"model":o}Modifiers`,{number:f,trim:d}=s[u]||me;d&&(i=n.map(h=>le(h)?h.trim():h)),f&&(i=n.map(Zs))}let l,a=s[l=hs(t)]||s[l=hs(Ae(t))];!a&&r&&(a=s[l=hs(pt(t))]),a&&mt(a,e,6,i);const c=s[l+"Once"];if(c){if(!e.emitted)e.emitted={};else if(e.emitted[l])return;e.emitted[l]=!0,mt(c,e,6,i)}}function ff(e,t,n=!1){const s=t.emitsCache,i=s.get(e);if(i!==void 0)return i;const r=e.emits;let o={},l=!1;if(!se(e)){const a=c=>{const u=ff(c,t,!0);u&&(l=!0,pe(o,u))};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return!r&&!l?(Se(e)&&s.set(e,null),null):(J(r)?r.forEach(a=>o[a]=null):pe(o,r),Se(e)&&s.set(e,o),o)}function Hr(e,t){return!e||!Gn(t)?!1:(t=t.slice(2).replace(/Once$/,""),he(e,t[0].toLowerCase()+t.slice(1))||he(e,pt(t))||he(e,t))}let Ve=null,jr=null;function si(e){const t=Ve;return Ve=e,jr=e&&e.type.__scopeId||null,t}function Sm(e){jr=e}function wm(){jr=null}const Cm=e=>$l;function $l(e,t=Ve,n){if(!t||e._n)return e;const s=(...i)=>{s._d&&jo(-1);const r=si(t);let o;try{o=e(...i)}finally{si(r),s._d&&jo(1)}return o};return s._n=!0,s._c=!0,s._d=!0,s}function er(e){const{type:t,vnode:n,proxy:s,withProxy:i,props:r,propsOptions:[o],slots:l,attrs:a,emit:c,render:u,renderCache:f,data:d,setupState:h,ctx:g,inheritAttrs:T}=e;let x,A;const v=si(e);try{if(n.shapeFlag&4){const E=i||s,w=E;x=ht(u.call(w,E,f,r,h,d,g)),A=a}else{const E=t;x=ht(E.length>1?E(r,{attrs:a,slots:l,emit:c}):E(r,null)),A=t.props?a:km(a)}}catch(E){zs.length=0,Xn(E,e,1),x=ke(Xe)}let p=x;if(A&&T!==!1){const E=Object.keys(A),{shapeFlag:w}=p;E.length&&w&7&&(o&&E.some(bl)&&(A=xm(A,o)),p=qt(p,A))}return n.dirs&&(p=qt(p),p.dirs=p.dirs?p.dirs.concat(n.dirs):n.dirs),n.transition&&(p.transition=n.transition),x=p,si(v),x}function Em(e,t=!0){let n;for(let s=0;s<e.length;s++){const i=e[s];if(yn(i)){if(i.type!==Xe||i.children==="v-if"){if(n)return;n=i}}else return}return n}const km=e=>{let t;for(const n in e)(n==="class"||n==="style"||Gn(n))&&((t||(t={}))[n]=e[n]);return t},xm=(e,t)=>{const n={};for(const s in e)(!bl(s)||!(s.slice(9)in t))&&(n[s]=e[s]);return n};function Tm(e,t,n){const{props:s,children:i,component:r}=e,{props:o,children:l,patchFlag:a}=t,c=r.emitsOptions;if(t.dirs||t.transition)return!0;if(n&&a>=0){if(a&1024)return!0;if(a&16)return s?Ba(s,o,c):!!o;if(a&8){const u=t.dynamicProps;for(let f=0;f<u.length;f++){const d=u[f];if(o[d]!==s[d]&&!Hr(c,d))return!0}}}else return(i||l)&&(!l||!l.$stable)?!0:s===o?!1:s?o?Ba(s,o,c):!0:!!o;return!1}function Ba(e,t,n){const s=Object.keys(t);if(s.length!==Object.keys(e).length)return!0;for(let i=0;i<s.length;i++){const r=s[i];if(t[r]!==e[r]&&!Hr(n,r))return!0}return!1}function Vl({vnode:e,parent:t},n){for(;t;){const s=t.subTree;if(s.suspense&&s.suspense.activeBranch===e&&(s.el=e.el),s===e)(e=t.vnode).el=n,t=t.parent;else break}}const Fl="components",Rm="directives";function df(e,t){return ql(Fl,e,!0,t)||e}const hf=Symbol.for("v-ndc");function Am(e){return le(e)?ql(Fl,e,!1)||e:e||hf}function Pm(e){return ql(Rm,e)}function ql(e,t,n=!0,s=!1){const i=Ve||Be;if(i){const r=i.type;if(e===Fl){const l=Go(r,!1);if(l&&(l===t||l===Ae(t)||l===Yn(Ae(t))))return r}const o=Da(i[e]||r[e],t)||Da(i.appContext[e],t);return!o&&s?r:o}}function Da(e,t){return e&&(e[t]||e[Ae(t)]||e[Yn(Ae(t))])}const pf=e=>e.__isSuspense;let $o=0;const Om={name:"Suspense",__isSuspense:!0,process(e,t,n,s,i,r,o,l,a,c){if(e==null)Mm(t,n,s,i,r,o,l,a,c);else{if(r&&r.deps>0&&!e.suspense.isInFallback){t.suspense=e.suspense,t.suspense.vnode=t,t.el=e.el;return}Im(e,t,n,s,i,o,l,a,c)}},hydrate:Lm,create:Bl,normalize:$m},Nm=Om;function ii(e,t){const n=e.props&&e.props[t];se(n)&&n()}function Mm(e,t,n,s,i,r,o,l,a){const{p:c,o:{createElement:u}}=a,f=u("div"),d=e.suspense=Bl(e,i,s,t,f,n,r,o,l,a);c(null,d.pendingBranch=e.ssContent,f,null,s,d,r,o),d.deps>0?(ii(e,"onPending"),ii(e,"onFallback"),c(null,e.ssFallback,t,n,s,null,r,o),vs(d,e.ssFallback)):d.resolve(!1,!0)}function Im(e,t,n,s,i,r,o,l,{p:a,um:c,o:{createElement:u}}){const f=t.suspense=e.suspense;f.vnode=t,t.el=e.el;const d=t.ssContent,h=t.ssFallback,{activeBranch:g,pendingBranch:T,isInFallback:x,isHydrating:A}=f;if(T)f.pendingBranch=d,At(d,T)?(a(T,d,f.hiddenContainer,null,i,f,r,o,l),f.deps<=0?f.resolve():x&&(A||(a(g,h,n,s,i,null,r,o,l),vs(f,h)))):(f.pendingId=$o++,A?(f.isHydrating=!1,f.activeBranch=T):c(T,i,f),f.deps=0,f.effects.length=0,f.hiddenContainer=u("div"),x?(a(null,d,f.hiddenContainer,null,i,f,r,o,l),f.deps<=0?f.resolve():(a(g,h,n,s,i,null,r,o,l),vs(f,h))):g&&At(d,g)?(a(g,d,n,s,i,f,r,o,l),f.resolve(!0)):(a(null,d,f.hiddenContainer,null,i,f,r,o,l),f.deps<=0&&f.resolve()));else if(g&&At(d,g))a(g,d,n,s,i,f,r,o,l),vs(f,d);else if(ii(t,"onPending"),f.pendingBranch=d,d.shapeFlag&512?f.pendingId=d.component.suspenseId:f.pendingId=$o++,a(null,d,f.hiddenContainer,null,i,f,r,o,l),f.deps<=0)f.resolve();else{const{timeout:v,pendingId:p}=f;v>0?setTimeout(()=>{f.pendingId===p&&f.fallback(h)},v):v===0&&f.fallback(h)}}function Bl(e,t,n,s,i,r,o,l,a,c,u=!1){const{p:f,m:d,um:h,n:g,o:{parentNode:T,remove:x}}=c;let A;const v=Vm(e);v&&t!=null&&t.pendingBranch&&(A=t.pendingId,t.deps++);const p=e.props?dr(e.props.timeout):void 0,E=r,w={vnode:e,parent:t,parentComponent:n,namespace:o,container:s,hiddenContainer:i,deps:0,pendingId:$o++,timeout:typeof p=="number"?p:-1,activeBranch:null,pendingBranch:null,isInFallback:!u,isHydrating:u,isUnmounted:!1,effects:[],resolve(k=!1,N=!1){const{vnode:C,activeBranch:y,pendingBranch:S,pendingId:R,effects:b,parentComponent:$,container:P}=w;let D=!1;w.isHydrating?w.isHydrating=!1:k||(D=y&&S.transition&&S.transition.mode==="out-in",D&&(y.transition.afterLeave=()=>{R===w.pendingId&&(d(S,P,r===E?g(y):r,0),pr(b))}),y&&(T(y.el)!==w.hiddenContainer&&(r=g(y)),h(y,$,w,!0)),D||d(S,P,r,0)),vs(w,S),w.pendingBranch=null,w.isInFallback=!1;let V=w.parent,M=!1;for(;V;){if(V.pendingBranch){V.effects.push(...b),M=!0;break}V=V.parent}!M&&!D&&pr(b),w.effects=[],v&&t&&t.pendingBranch&&A===t.pendingId&&(t.deps--,t.deps===0&&!N&&t.resolve()),ii(C,"onResolve")},fallback(k){if(!w.pendingBranch)return;const{vnode:N,activeBranch:C,parentComponent:y,container:S,namespace:R}=w;ii(N,"onFallback");const b=g(C),$=()=>{!w.isInFallback||(f(null,k,S,b,y,null,R,l,a),vs(w,k))},P=k.transition&&k.transition.mode==="out-in";P&&(C.transition.afterLeave=$),w.isInFallback=!0,h(C,y,null,!0),P||$()},move(k,N,C){w.activeBranch&&d(w.activeBranch,k,N,C),w.container=k},next(){return w.activeBranch&&g(w.activeBranch)},registerDep(k,N){const C=!!w.pendingBranch;C&&w.deps++;const y=k.vnode.el;k.asyncDep.catch(S=>{Xn(S,k,0)}).then(S=>{if(k.isUnmounted||w.isUnmounted||w.pendingId!==k.suspenseId)return;k.asyncResolved=!0;const{vnode:R}=k;zo(k,S,!1),y&&(R.el=y);const b=!y&&k.subTree.el;N(k,R,T(y||k.subTree.el),y?null:g(k.subTree),w,o,a),b&&x(b),Vl(k,R.el),C&&--w.deps===0&&w.resolve()})},unmount(k,N){w.isUnmounted=!0,w.activeBranch&&h(w.activeBranch,n,k,N),w.pendingBranch&&h(w.pendingBranch,n,k,N)}};return w}function Lm(e,t,n,s,i,r,o,l,a){const c=t.suspense=Bl(t,s,n,e.parentNode,document.createElement("div"),null,i,r,o,l,!0),u=a(e,c.pendingBranch=t.ssContent,n,c,r,o);return c.deps===0&&c.resolve(!1,!0),u}function $m(e){const{shapeFlag:t,children:n}=e,s=t&32;e.ssContent=Ha(s?n.default:n),e.ssFallback=s?Ha(n.fallback):ke(Xe)}function Ha(e){let t;if(se(e)){const n=Un&&e._c;n&&(e._d=!1,Ei()),e=e(),n&&(e._d=!0,t=ot,zf())}return J(e)&&(e=Em(e)),e=ht(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter(n=>n!==e)),e}function mf(e,t){t&&t.pendingBranch?J(e)?t.effects.push(...e):t.effects.push(e):pr(e)}function vs(e,t){e.activeBranch=t;const{vnode:n,parentComponent:s}=e;let i=t.el;for(;!i&&t.component;)t=t.component.subTree,i=t.el;n.el=i,s&&s.subTree===n&&(s.vnode.el=i,Vl(s,i))}function Vm(e){var t;return((t=e.props)==null?void 0:t.suspensible)!=null&&e.props.suspensible!==!1}const gf=Symbol.for("v-scx"),vf=()=>at(gf);function Fm(e,t){return _i(e,null,t)}function yf(e,t){return _i(e,null,{flush:"post"})}function bf(e,t){return _i(e,null,{flush:"sync"})}const Fi={};function Ce(e,t,n){return _i(e,t,n)}function _i(e,t,{immediate:n,deep:s,flush:i,once:r,onTrack:o,onTrigger:l}=me){if(t&&r){const k=t;t=(...N)=>{k(...N),w()}}const a=Be,c=k=>s===!0?k:Rn(k,s===!1?1:void 0);let u,f=!1,d=!1;if(Me(e)?(u=()=>e.value,f=Xs(e)):Wt(e)?(u=()=>c(e),f=!0):J(e)?(d=!0,f=e.some(k=>Wt(k)||Xs(k)),u=()=>e.map(k=>{if(Me(k))return k.value;if(Wt(k))return c(k);if(se(k))return Qt(k,a,2)})):se(e)?t?u=()=>Qt(e,a,2):u=()=>(h&&h(),mt(e,a,3,[g])):u=$e,t&&s){const k=u;u=()=>Rn(k())}let h,g=k=>{h=p.onStop=()=>{Qt(k,a,4),h=p.onStop=void 0}},T;if(ki)if(g=$e,t?n&&mt(t,a,3,[u(),d?[]:void 0,g]):u(),i==="sync"){const k=vf();T=k.__watcherHandles||(k.__watcherHandles=[])}else return $e;let x=d?new Array(e.length).fill(Fi):Fi;const A=()=>{if(!(!p.active||!p.dirty))if(t){const k=p.run();(s||f||(d?k.some((N,C)=>Mt(N,x[C])):Mt(k,x)))&&(h&&h(),mt(t,a,3,[k,x===Fi?void 0:d&&x[0]===Fi?[]:x,g]),x=k)}else p.run()};A.allowRecurse=!!t;let v;i==="sync"?v=A:i==="post"?v=()=>ze(A,a&&a.suspense):(A.pre=!0,a&&(A.id=a.uid),v=()=>Dr(A));const p=new bs(u,$e,v),E=kl(),w=()=>{p.stop(),E&&_l(E.effects,p)};return t?n?A():x=p.run():i==="post"?ze(p.run.bind(p),a&&a.suspense):p.run(),T&&T.push(w),w}function qm(e,t,n){const s=this.proxy,i=le(e)?e.includes(".")?_f(s,e):()=>s[e]:e.bind(s,s);let r;se(t)?r=t:(r=t.handler,n=t);const o=Kn(this),l=_i(i,r.bind(s),n);return o(),l}function _f(e,t){const n=t.split(".");return()=>{let s=e;for(let i=0;i<n.length&&s;i++)s=s[n[i]];return s}}function Rn(e,t,n=0,s){if(!Se(e)||e.__v_skip)return e;if(t&&t>0){if(n>=t)return e;n++}if(s=s||new Set,s.has(e))return e;if(s.add(e),Me(e))Rn(e.value,t,n,s);else if(J(e))for(let i=0;i<e.length;i++)Rn(e[i],t,n,s);else if(Qn(e)||ds(e))e.forEach(i=>{Rn(i,t,n,s)});else if(Iu(e))for(const i in e)Rn(e[i],t,n,s);return e}function Dl(e,t){if(Ve===null)return e;const n=Qr(Ve)||Ve.proxy,s=e.dirs||(e.dirs=[]);for(let i=0;i<t.length;i++){let[r,o,l,a=me]=t[i];r&&(se(r)&&(r={mounted:r,updated:r}),r.deep&&Rn(o),s.push({dir:r,instance:n,value:o,oldValue:void 0,arg:l,modifiers:a}))}return e}function $t(e,t,n,s){const i=e.dirs,r=t&&t.dirs;for(let o=0;o<i.length;o++){const l=i[o];r&&(l.oldValue=r[o].value);let a=l.dir[s];a&&(Jn(),mt(a,n,8,[e.el,l,e,t]),Zn())}}const an=Symbol("_leaveCb"),qi=Symbol("_enterCb");function Hl(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Bt(()=>{e.isMounted=!0}),vt(()=>{e.isUnmounting=!0}),e}const bt=[Function,Array],jl={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:bt,onEnter:bt,onAfterEnter:bt,onEnterCancelled:bt,onBeforeLeave:bt,onLeave:bt,onAfterLeave:bt,onLeaveCancelled:bt,onBeforeAppear:bt,onAppear:bt,onAfterAppear:bt,onAppearCancelled:bt},Bm={name:"BaseTransition",props:jl,setup(e,{slots:t}){const n=Ee(),s=Hl();return()=>{const i=t.default&&Ur(t.default(),!0);if(!i||!i.length)return;let r=i[0];if(i.length>1){for(const d of i)if(d.type!==Xe){r=d;break}}const o=ie(e),{mode:l}=o;if(s.isLeaving)return oo(r);const a=ja(r);if(!a)return oo(r);const c=_s(a,o,s,n);Hn(a,c);const u=n.subTree,f=u&&ja(u);if(f&&f.type!==Xe&&!At(a,f)){const d=_s(f,o,s,n);if(Hn(f,d),l==="out-in")return s.isLeaving=!0,d.afterLeave=()=>{s.isLeaving=!1,n.update.active!==!1&&(n.effect.dirty=!0,n.update())},oo(r);l==="in-out"&&a.type!==Xe&&(d.delayLeave=(h,g,T)=>{const x=wf(s,f);x[String(f.key)]=f,h[an]=()=>{g(),h[an]=void 0,delete c.delayedLeave},c.delayedLeave=T})}return r}}},Sf=Bm;function wf(e,t){const{leavingVNodes:n}=e;let s=n.get(t.type);return s||(s=Object.create(null),n.set(t.type,s)),s}function _s(e,t,n,s){const{appear:i,mode:r,persisted:o=!1,onBeforeEnter:l,onEnter:a,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:f,onLeave:d,onAfterLeave:h,onLeaveCancelled:g,onBeforeAppear:T,onAppear:x,onAfterAppear:A,onAppearCancelled:v}=t,p=String(e.key),E=wf(n,e),w=(C,y)=>{C&&mt(C,s,9,y)},k=(C,y)=>{const S=y[1];w(C,y),J(C)?C.every(R=>R.length<=1)&&S():C.length<=1&&S()},N={mode:r,persisted:o,beforeEnter(C){let y=l;if(!n.isMounted)if(i)y=T||l;else return;C[an]&&C[an](!0);const S=E[p];S&&At(e,S)&&S.el[an]&&S.el[an](),w(y,[C])},enter(C){let y=a,S=c,R=u;if(!n.isMounted)if(i)y=x||a,S=A||c,R=v||u;else return;let b=!1;const $=C[qi]=P=>{b||(b=!0,P?w(R,[C]):w(S,[C]),N.delayedLeave&&N.delayedLeave(),C[qi]=void 0)};y?k(y,[C,$]):$()},leave(C,y){const S=String(e.key);if(C[qi]&&C[qi](!0),n.isUnmounting)return y();w(f,[C]);let R=!1;const b=C[an]=$=>{R||(R=!0,y(),$?w(g,[C]):w(h,[C]),C[an]=void 0,E[S]===e&&delete E[S])};E[S]=e,d?k(d,[C,b]):b()},clone(C){return _s(C,t,n,s)}};return N}function oo(e){if(Si(e))return e=qt(e),e.children=null,e}function ja(e){return Si(e)?e.children?e.children[0]:void 0:e}function Hn(e,t){e.shapeFlag&6&&e.component?Hn(e.component.subTree,t):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ur(e,t=!1,n){let s=[],i=0;for(let r=0;r<e.length;r++){let o=e[r];const l=n==null?o.key:String(n)+String(o.key!=null?o.key:r);o.type===We?(o.patchFlag&128&&i++,s=s.concat(Ur(o.children,t,l))):(t||o.type!==Xe)&&s.push(l!=null?qt(o,{key:l}):o)}if(i>1)for(let r=0;r<s.length;r++)s[r].patchFlag=-2;return s}/*! #__NO_SIDE_EFFECTS__ */function Os(e,t){return se(e)?(()=>pe({name:e.name},t,{setup:e}))():e}const Ln=e=>!!e.type.__asyncLoader;/*! #__NO_SIDE_EFFECTS__ */function Dm(e){se(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:s,delay:i=200,timeout:r,suspensible:o=!0,onError:l}=e;let a=null,c,u=0;const f=()=>(u++,a=null,d()),d=()=>{let h;return a||(h=a=t().catch(g=>{if(g=g instanceof Error?g:new Error(String(g)),l)return new Promise((T,x)=>{l(g,()=>T(f()),()=>x(g),u+1)});throw g}).then(g=>h!==a&&a?a:(g&&(g.__esModule||g[Symbol.toStringTag]==="Module")&&(g=g.default),c=g,g)))};return Os({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return c},setup(){const h=Be;if(c)return()=>lo(c,h);const g=v=>{a=null,Xn(v,h,13,!s)};if(o&&h.suspense||ki)return d().then(v=>()=>lo(v,h)).catch(v=>(g(v),()=>s?ke(s,{error:v}):null));const T=ce(!1),x=ce(),A=ce(!!i);return i&&setTimeout(()=>{A.value=!1},i),r!=null&&setTimeout(()=>{if(!T.value&&!x.value){const v=new Error(`Async component timed out after ${r}ms.`);g(v),x.value=v}},r),d().then(()=>{T.value=!0,h.parent&&Si(h.parent.vnode)&&(h.parent.effect.dirty=!0,Dr(h.parent.update))}).catch(v=>{g(v),x.value=v}),()=>{if(T.value&&c)return lo(c,h);if(x.value&&s)return ke(s,{error:x.value});if(n&&!A.value)return ke(n)}}})}function lo(e,t){const{ref:n,props:s,children:i,ce:r}=t.vnode,o=ke(e,s,i);return o.ref=n,o.ce=r,delete t.vnode.ce,o}const Si=e=>e.type.__isKeepAlive,Hm={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=Ee(),s=n.ctx;if(!s.renderer)return()=>{const v=t.default&&t.default();return v&&v.length===1?v[0]:v};const i=new Map,r=new Set;let o=null;const l=n.suspense,{renderer:{p:a,m:c,um:u,o:{createElement:f}}}=s,d=f("div");s.activate=(v,p,E,w,k)=>{const N=v.component;c(v,p,E,0,l),a(N.vnode,v,p,E,N,l,w,v.slotScopeIds,k),ze(()=>{N.isDeactivated=!1,N.a&&ps(N.a);const C=v.props&&v.props.onVnodeMounted;C&&it(C,N.parent,v)},l)},s.deactivate=v=>{const p=v.component;c(v,d,null,1,l),ze(()=>{p.da&&ps(p.da);const E=v.props&&v.props.onVnodeUnmounted;E&&it(E,p.parent,v),p.isDeactivated=!0},l)};function h(v){ao(v),u(v,n,l,!0)}function g(v){i.forEach((p,E)=>{const w=Go(p.type);w&&(!v||!v(w))&&T(E)})}function T(v){const p=i.get(v);!o||!At(p,o)?h(p):o&&ao(o),i.delete(v),r.delete(v)}Ce(()=>[e.include,e.exclude],([v,p])=>{v&&g(E=>Bs(v,E)),p&&g(E=>!Bs(p,E))},{flush:"post",deep:!0});let x=null;const A=()=>{x!=null&&i.set(x,co(n.subTree))};return Bt(A),zr(A),vt(()=>{i.forEach(v=>{const{subTree:p,suspense:E}=n,w=co(p);if(v.type===w.type&&v.key===w.key){ao(w);const k=w.component.da;k&&ze(k,E);return}h(v)})}),()=>{if(x=null,!t.default)return null;const v=t.default(),p=v[0];if(v.length>1)return o=null,v;if(!yn(p)||!(p.shapeFlag&4)&&!(p.shapeFlag&128))return o=null,p;let E=co(p);const w=E.type,k=Go(Ln(E)?E.type.__asyncResolved||{}:w),{include:N,exclude:C,max:y}=e;if(N&&(!k||!Bs(N,k))||C&&k&&Bs(C,k))return o=E,p;const S=E.key==null?w:E.key,R=i.get(S);return E.el&&(E=qt(E),p.shapeFlag&128&&(p.ssContent=E)),x=S,R?(E.el=R.el,E.component=R.component,E.transition&&Hn(E,E.transition),E.shapeFlag|=512,r.delete(S),r.add(S)):(r.add(S),y&&r.size>parseInt(y,10)&&T(r.values().next().value)),E.shapeFlag|=256,o=E,pf(p.type)?p:E}}},jm=Hm;function Bs(e,t){return J(e)?e.some(n=>Bs(n,t)):le(e)?e.split(",").includes(t):up(e)?e.test(t):!1}function Ul(e,t){Cf(e,"a",t)}function wi(e,t){Cf(e,"da",t)}function Cf(e,t,n=Be){const s=e.__wdc||(e.__wdc=()=>{let i=n;for(;i;){if(i.isDeactivated)return;i=i.parent}return e()});if(Kr(t,s,n),n){let i=n.parent;for(;i&&i.parent;)Si(i.parent.vnode)&&Um(s,t,n,i),i=i.parent}}function Um(e,t,n,s){const i=Kr(t,e,s,!0);Ci(()=>{_l(s[t],i)},n)}function ao(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function co(e){return e.shapeFlag&128?e.ssContent:e}function Kr(e,t,n=Be,s=!1){if(n){const i=n[e]||(n[e]=[]),r=t.__weh||(t.__weh=(...o)=>{if(n.isUnmounted)return;Jn();const l=Kn(n),a=mt(t,n,e,o);return l(),Zn(),a});return s?i.unshift(r):i.push(r),r}}const Zt=e=>(t,n=Be)=>(!ki||e==="sp")&&Kr(e,(...s)=>t(...s),n),Ef=Zt("bm"),Bt=Zt("m"),Kl=Zt("bu"),zr=Zt("u"),vt=Zt("bum"),Ci=Zt("um"),kf=Zt("sp"),xf=Zt("rtg"),Tf=Zt("rtc");function Rf(e,t=Be){Kr("ec",e,t)}function Km(e,t,n,s){let i;const r=n&&n[s];if(J(e)||le(e)){i=new Array(e.length);for(let o=0,l=e.length;o<l;o++)i[o]=t(e[o],o,void 0,r&&r[o])}else if(typeof e=="number"){i=new Array(e);for(let o=0;o<e;o++)i[o]=t(o+1,o,void 0,r&&r[o])}else if(Se(e))if(e[Symbol.iterator])i=Array.from(e,(o,l)=>t(o,l,void 0,r&&r[l]));else{const o=Object.keys(e);i=new Array(o.length);for(let l=0,a=o.length;l<a;l++){const c=o[l];i[l]=t(e[c],c,l,r&&r[l])}}else i=[];return n&&(n[s]=i),i}function zm(e,t){for(let n=0;n<t.length;n++){const s=t[n];if(J(s))for(let i=0;i<s.length;i++)e[s[i].name]=s[i].fn;else s&&(e[s.name]=s.key?(...i)=>{const r=s.fn(...i);return r&&(r.key=s.key),r}:s.fn)}return e}function Wm(e,t,n={},s,i){if(Ve.isCE||Ve.parent&&Ln(Ve.parent)&&Ve.parent.isCE)return t!=="default"&&(n.name=t),ke("slot",n,s&&s());let r=e[t];r&&r._c&&(r._d=!1),Ei();const o=r&&Af(r(n)),l=Wr(We,{key:n.key||o&&o.key||`_${t}`},o||(s?s():[]),o&&e._===1?64:-2);return!i&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),r&&r._c&&(r._d=!0),l}function Af(e){return e.some(t=>yn(t)?!(t.type===Xe||t.type===We&&!Af(t.children)):!0)?e:null}function Gm(e,t){const n={};for(const s in e)n[t&&/[A-Z]/.test(s)?`on:${s}`:hs(s)]=e[s];return n}const Vo=e=>e?Zf(e)?Qr(e)||e.proxy:Vo(e.parent):null,js=pe(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Vo(e.parent),$root:e=>Vo(e.root),$emit:e=>e.emit,$options:e=>zl(e),$forceUpdate:e=>e.f||(e.f=()=>{e.effect.dirty=!0,Dr(e.update)}),$nextTick:e=>e.n||(e.n=Ge.bind(e.proxy)),$watch:e=>qm.bind(e)}),uo=(e,t)=>e!==me&&!e.__isScriptSetup&&he(e,t),Fo={get({_:e},t){const{ctx:n,setupState:s,data:i,props:r,accessCache:o,type:l,appContext:a}=e;let c;if(t[0]!=="$"){const h=o[t];if(h!==void 0)switch(h){case 1:return s[t];case 2:return i[t];case 4:return n[t];case 3:return r[t]}else{if(uo(s,t))return o[t]=1,s[t];if(i!==me&&he(i,t))return o[t]=2,i[t];if((c=e.propsOptions[0])&&he(c,t))return o[t]=3,r[t];if(n!==me&&he(n,t))return o[t]=4,n[t];qo&&(o[t]=0)}}const u=js[t];let f,d;if(u)return t==="$attrs"&&ct(e,"get",t),u(e);if((f=l.__cssModules)&&(f=f[t]))return f;if(n!==me&&he(n,t))return o[t]=4,n[t];if(d=a.config.globalProperties,he(d,t))return d[t]},set({_:e},t,n){const{data:s,setupState:i,ctx:r}=e;return uo(i,t)?(i[t]=n,!0):s!==me&&he(s,t)?(s[t]=n,!0):he(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(r[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:s,appContext:i,propsOptions:r}},o){let l;return!!n[o]||e!==me&&he(e,o)||uo(t,o)||(l=r[0])&&he(l,o)||he(s,o)||he(js,o)||he(i.config.globalProperties,o)},defineProperty(e,t,n){return n.get!=null?e._.accessCache[t]=0:he(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}},Qm=pe({},Fo,{get(e,t){if(t!==Symbol.unscopables)return Fo.get(e,t,e)},has(e,t){return t[0]!=="_"&&!gp(t)}});function Ym(){return null}function Jm(){return null}function Zm(e){}function Xm(e){}function eg(){return null}function tg(){}function ng(e,t){return null}function sg(){return Pf().slots}function ig(){return Pf().attrs}function Pf(){const e=Ee();return e.setupContext||(e.setupContext=nd(e))}function ri(e){return J(e)?e.reduce((t,n)=>(t[n]=null,t),{}):e}function rg(e,t){const n=ri(e);for(const s in t){if(s.startsWith("__skip"))continue;let i=n[s];i?J(i)||se(i)?i=n[s]={type:i,default:t[s]}:i.default=t[s]:i===null&&(i=n[s]={default:t[s]}),i&&t[`__skip_${s}`]&&(i.skipFactory=!0)}return n}function og(e,t){return!e||!t?e||t:J(e)&&J(t)?e.concat(t):pe({},ri(e),ri(t))}function lg(e,t){const n={};for(const s in e)t.includes(s)||Object.defineProperty(n,s,{enumerable:!0,get:()=>e[s]});return n}function ag(e){const t=Ee();let n=e();return Ko(),Sl(n)&&(n=n.catch(s=>{throw Kn(t),s})),[n,()=>Kn(t)]}let qo=!0;function cg(e){const t=zl(e),n=e.proxy,s=e.ctx;qo=!1,t.beforeCreate&&Ua(t.beforeCreate,e,"bc");const{data:i,computed:r,methods:o,watch:l,provide:a,inject:c,created:u,beforeMount:f,mounted:d,beforeUpdate:h,updated:g,activated:T,deactivated:x,beforeDestroy:A,beforeUnmount:v,destroyed:p,unmounted:E,render:w,renderTracked:k,renderTriggered:N,errorCaptured:C,serverPrefetch:y,expose:S,inheritAttrs:R,components:b,directives:$,filters:P}=t;if(c&&ug(c,s,null),o)for(const M in o){const H=o[M];se(H)&&(s[M]=H.bind(n))}if(i){const M=i.call(n,n);Se(M)&&(e.data=Sn(M))}if(qo=!0,r)for(const M in r){const H=r[M],ge=se(H)?H.bind(n,n):se(H.get)?H.get.bind(n,n):$e,re=!se(H)&&se(H.set)?H.set.bind(n):$e,fe=L({get:ge,set:re});Object.defineProperty(s,M,{enumerable:!0,configurable:!0,get:()=>fe.value,set:j=>fe.value=j})}if(l)for(const M in l)Of(l[M],s,n,M);if(a){const M=se(a)?a.call(n):a;Reflect.ownKeys(M).forEach(H=>{Us(H,M[H])})}u&&Ua(u,e,"c");function V(M,H){J(H)?H.forEach(ge=>M(ge.bind(n))):H&&M(H.bind(n))}if(V(Ef,f),V(Bt,d),V(Kl,h),V(zr,g),V(Ul,T),V(wi,x),V(Rf,C),V(Tf,k),V(xf,N),V(vt,v),V(Ci,E),V(kf,y),J(S))if(S.length){const M=e.exposed||(e.exposed={});S.forEach(H=>{Object.defineProperty(M,H,{get:()=>n[H],set:ge=>n[H]=ge})})}else e.exposed||(e.exposed={});w&&e.render===$e&&(e.render=w),R!=null&&(e.inheritAttrs=R),b&&(e.components=b),$&&(e.directives=$)}function ug(e,t,n=$e){J(e)&&(e=Bo(e));for(const s in e){const i=e[s];let r;Se(i)?"default"in i?r=at(i.from||s,i.default,!0):r=at(i.from||s):r=at(i),Me(r)?Object.defineProperty(t,s,{enumerable:!0,configurable:!0,get:()=>r.value,set:o=>r.value=o}):t[s]=r}}function Ua(e,t,n){mt(J(e)?e.map(s=>s.bind(t.proxy)):e.bind(t.proxy),t,n)}function Of(e,t,n,s){const i=s.includes(".")?_f(n,s):()=>n[s];if(le(e)){const r=t[e];se(r)&&Ce(i,r)}else if(se(e))Ce(i,e.bind(n));else if(Se(e))if(J(e))e.forEach(r=>Of(r,t,n,s));else{const r=se(e.handler)?e.handler.bind(n):t[e.handler];se(r)&&Ce(i,r,e)}}function zl(e){const t=e.type,{mixins:n,extends:s}=t,{mixins:i,optionsCache:r,config:{optionMergeStrategies:o}}=e.appContext,l=r.get(t);let a;return l?a=l:!i.length&&!n&&!s?a=t:(a={},i.length&&i.forEach(c=>gr(a,c,o,!0)),gr(a,t,o)),Se(t)&&r.set(t,a),a}function gr(e,t,n,s=!1){const{mixins:i,extends:r}=t;r&&gr(e,r,n,!0),i&&i.forEach(o=>gr(e,o,n,!0));for(const o in t)if(!(s&&o==="expose")){const l=fg[o]||n&&n[o];e[o]=l?l(e[o],t[o]):t[o]}return e}const fg={data:Ka,props:za,emits:za,methods:Ds,computed:Ds,beforeCreate:nt,created:nt,beforeMount:nt,mounted:nt,beforeUpdate:nt,updated:nt,beforeDestroy:nt,beforeUnmount:nt,destroyed:nt,unmounted:nt,activated:nt,deactivated:nt,errorCaptured:nt,serverPrefetch:nt,components:Ds,directives:Ds,watch:hg,provide:Ka,inject:dg};function Ka(e,t){return t?e?function(){return pe(se(e)?e.call(this,this):e,se(t)?t.call(this,this):t)}:t:e}function dg(e,t){return Ds(Bo(e),Bo(t))}function Bo(e){if(J(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function nt(e,t){return e?[...new Set([].concat(e,t))]:t}function Ds(e,t){return e?pe(Object.create(null),e,t):t}function za(e,t){return e?J(e)&&J(t)?[...new Set([...e,...t])]:pe(Object.create(null),ri(e),ri(t!=null?t:{})):t}function hg(e,t){if(!e)return t;if(!t)return e;const n=pe(Object.create(null),e);for(const s in t)n[s]=nt(e[s],t[s]);return n}function Nf(){return{app:null,config:{isNativeTag:Xi,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let pg=0;function mg(e,t){return function(s,i=null){se(s)||(s=pe({},s)),i!=null&&!Se(i)&&(i=null);const r=Nf(),o=new WeakSet;let l=!1;const a=r.app={_uid:pg++,_component:s,_props:i,_container:null,_context:r,_instance:null,version:id,get config(){return r.config},set config(c){},use(c,...u){return o.has(c)||(c&&se(c.install)?(o.add(c),c.install(a,...u)):se(c)&&(o.add(c),c(a,...u))),a},mixin(c){return r.mixins.includes(c)||r.mixins.push(c),a},component(c,u){return u?(r.components[c]=u,a):r.components[c]},directive(c,u){return u?(r.directives[c]=u,a):r.directives[c]},mount(c,u,f){if(!l){const d=ke(s,i);return d.appContext=r,f===!0?f="svg":f===!1&&(f=void 0),u&&t?t(d,c):e(d,c,f),l=!0,a._container=c,c.__vue_app__=a,Qr(d.component)||d.component.proxy}},unmount(){l&&(e(null,a._container),delete a._container.__vue_app__)},provide(c,u){return r.provides[c]=u,a},runWithContext(c){const u=ys;ys=a;try{return c()}finally{ys=u}}};return a}}let ys=null;function Us(e,t){if(Be){let n=Be.provides;const s=Be.parent&&Be.parent.provides;s===n&&(n=Be.provides=Object.create(s)),n[e]=t}}function at(e,t,n=!1){const s=Be||Ve;if(s||ys){const i=s?s.parent==null?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides:ys._context.provides;if(i&&e in i)return i[e];if(arguments.length>1)return n&&se(t)?t.call(s&&s.proxy):t}}function Mf(){return!!(Be||Ve||ys)}function gg(e,t,n,s=!1){const i={},r={};fr(r,Gr,1),e.propsDefaults=Object.create(null),If(e,t,i,r);for(const o in e.propsOptions[0])o in i||(i[o]=void 0);n?e.props=s?i:Al(i):e.type.props?e.props=i:e.props=r,e.attrs=r}function vg(e,t,n,s){const{props:i,attrs:r,vnode:{patchFlag:o}}=e,l=ie(i),[a]=e.propsOptions;let c=!1;if((s||o>0)&&!(o&16)){if(o&8){const u=e.vnode.dynamicProps;for(let f=0;f<u.length;f++){let d=u[f];if(Hr(e.emitsOptions,d))continue;const h=t[d];if(a)if(he(r,d))h!==r[d]&&(r[d]=h,c=!0);else{const g=Ae(d);i[g]=Do(a,l,g,h,e,!1)}else h!==r[d]&&(r[d]=h,c=!0)}}}else{If(e,t,i,r)&&(c=!0);let u;for(const f in l)(!t||!he(t,f)&&((u=pt(f))===f||!he(t,u)))&&(a?n&&(n[f]!==void 0||n[u]!==void 0)&&(i[f]=Do(a,l,f,void 0,e,!0)):delete i[f]);if(r!==l)for(const f in r)(!t||!he(t,f)&&!0)&&(delete r[f],c=!0)}c&&zt(e,"set","$attrs")}function If(e,t,n,s){const[i,r]=e.propsOptions;let o=!1,l;if(t)for(let a in t){if(pn(a))continue;const c=t[a];let u;i&&he(i,u=Ae(a))?!r||!r.includes(u)?n[u]=c:(l||(l={}))[u]=c:Hr(e.emitsOptions,a)||(!(a in s)||c!==s[a])&&(s[a]=c,o=!0)}if(r){const a=ie(n),c=l||me;for(let u=0;u<r.length;u++){const f=r[u];n[f]=Do(i,a,f,c[f],e,!he(c,f))}}return o}function Do(e,t,n,s,i,r){const o=e[n];if(o!=null){const l=he(o,"default");if(l&&s===void 0){const a=o.default;if(o.type!==Function&&!o.skipFactory&&se(a)){const{propsDefaults:c}=i;if(n in c)s=c[n];else{const u=Kn(i);s=c[n]=a.call(null,t),u()}}else s=a}o[0]&&(r&&!l?s=!1:o[1]&&(s===""||s===pt(n))&&(s=!0))}return s}function Lf(e,t,n=!1){const s=t.propsCache,i=s.get(e);if(i)return i;const r=e.props,o={},l=[];let a=!1;if(!se(e)){const u=f=>{a=!0;const[d,h]=Lf(f,t,!0);pe(o,d),h&&l.push(...h)};!n&&t.mixins.length&&t.mixins.forEach(u),e.extends&&u(e.extends),e.mixins&&e.mixins.forEach(u)}if(!r&&!a)return Se(e)&&s.set(e,fs),fs;if(J(r))for(let u=0;u<r.length;u++){const f=Ae(r[u]);Wa(f)&&(o[f]=me)}else if(r)for(const u in r){const f=Ae(u);if(Wa(f)){const d=r[u],h=o[f]=J(d)||se(d)?{type:d}:pe({},d);if(h){const g=Ya(Boolean,h.type),T=Ya(String,h.type);h[0]=g>-1,h[1]=T<0||g<T,(g>-1||he(h,"default"))&&l.push(f)}}}const c=[o,l];return Se(e)&&s.set(e,c),c}function Wa(e){return e[0]!=="$"&&!pn(e)}function Ga(e){return e===null?"null":typeof e=="function"?e.name||"":typeof e=="object"&&e.constructor&&e.constructor.name||""}function Qa(e,t){return Ga(e)===Ga(t)}function Ya(e,t){return J(t)?t.findIndex(n=>Qa(n,e)):se(t)&&Qa(t,e)?0:-1}const $f=e=>e[0]==="_"||e==="$stable",Wl=e=>J(e)?e.map(ht):[ht(e)],yg=(e,t,n)=>{if(t._n)return t;const s=$l((...i)=>Wl(t(...i)),n);return s._c=!1,s},Vf=(e,t,n)=>{const s=e._ctx;for(const i in e){if($f(i))continue;const r=e[i];if(se(r))t[i]=yg(i,r,s);else if(r!=null){const o=Wl(r);t[i]=()=>o}}},Ff=(e,t)=>{const n=Wl(t);e.slots.default=()=>n},bg=(e,t)=>{if(e.vnode.shapeFlag&32){const n=t._;n?(e.slots=ie(t),fr(t,"_",n)):Vf(t,e.slots={})}else e.slots={},t&&Ff(e,t);fr(e.slots,Gr,1)},_g=(e,t,n)=>{const{vnode:s,slots:i}=e;let r=!0,o=me;if(s.shapeFlag&32){const l=t._;l?n&&l===1?r=!1:(pe(i,t),!n&&l===1&&delete i._):(r=!t.$stable,Vf(t,i)),o=t}else t&&(Ff(e,t),o={default:1});if(r)for(const l in i)!$f(l)&&o[l]==null&&delete i[l]};function vr(e,t,n,s,i=!1){if(J(e)){e.forEach((d,h)=>vr(d,t&&(J(t)?t[h]:t),n,s,i));return}if(Ln(s)&&!i)return;const r=s.shapeFlag&4?Qr(s.component)||s.component.proxy:s.el,o=i?null:r,{i:l,r:a}=e,c=t&&t.r,u=l.refs===me?l.refs={}:l.refs,f=l.setupState;if(c!=null&&c!==a&&(le(c)?(u[c]=null,he(f,c)&&(f[c]=null)):Me(c)&&(c.value=null)),se(a))Qt(a,l,12,[o,u]);else{const d=le(a),h=Me(a);if(d||h){const g=()=>{if(e.f){const T=d?he(f,a)?f[a]:u[a]:a.value;i?J(T)&&_l(T,r):J(T)?T.includes(r)||T.push(r):d?(u[a]=[r],he(f,a)&&(f[a]=u[a])):(a.value=[r],e.k&&(u[e.k]=a.value))}else d?(u[a]=o,he(f,a)&&(f[a]=o)):h&&(a.value=o,e.k&&(u[e.k]=o))};o?(g.id=-1,ze(g,n)):g()}}}let en=!1;const Sg=e=>e.namespaceURI.includes("svg")&&e.tagName!=="foreignObject",wg=e=>e.namespaceURI.includes("MathML"),Bi=e=>{if(Sg(e))return"svg";if(wg(e))return"mathml"},Di=e=>e.nodeType===8;function Cg(e){const{mt:t,p:n,o:{patchProp:s,createText:i,nextSibling:r,parentNode:o,remove:l,insert:a,createComment:c}}=e,u=(p,E)=>{if(!E.hasChildNodes()){n(null,p,E),mr(),E._vnode=p;return}en=!1,f(E.firstChild,p,null,null,null),mr(),E._vnode=p,en&&console.error("Hydration completed but contains mismatches.")},f=(p,E,w,k,N,C=!1)=>{const y=Di(p)&&p.data==="[",S=()=>T(p,E,w,k,N,y),{type:R,ref:b,shapeFlag:$,patchFlag:P}=E;let D=p.nodeType;E.el=p,P===-2&&(C=!1,E.dynamicChildren=null);let V=null;switch(R){case jn:D!==3?E.children===""?(a(E.el=i(""),o(p),p),V=p):V=S():(p.data!==E.children&&(en=!0,p.data=E.children),V=r(p));break;case Xe:v(p)?(V=r(p),A(E.el=p.content.firstChild,p,w)):D!==8||y?V=S():V=r(p);break;case $n:if(y&&(p=r(p),D=p.nodeType),D===1||D===3){V=p;const M=!E.children.length;for(let H=0;H<E.staticCount;H++)M&&(E.children+=V.nodeType===1?V.outerHTML:V.data),H===E.staticCount-1&&(E.anchor=V),V=r(V);return y?r(V):V}else S();break;case We:y?V=g(p,E,w,k,N,C):V=S();break;default:if($&1)(D!==1||E.type.toLowerCase()!==p.tagName.toLowerCase())&&!v(p)?V=S():V=d(p,E,w,k,N,C);else if($&6){E.slotScopeIds=N;const M=o(p);if(y?V=x(p):Di(p)&&p.data==="teleport start"?V=x(p,p.data,"teleport end"):V=r(p),t(E,M,null,w,k,Bi(M),C),Ln(E)){let H;y?(H=ke(We),H.anchor=V?V.previousSibling:M.lastChild):H=p.nodeType===3?Yl(""):ke("div"),H.el=p,E.component.subTree=H}}else $&64?D!==8?V=S():V=E.type.hydrate(p,E,w,k,N,C,e,h):$&128&&(V=E.type.hydrate(p,E,w,k,Bi(o(p)),N,C,e,f))}return b!=null&&vr(b,null,k,E),V},d=(p,E,w,k,N,C)=>{C=C||!!E.dynamicChildren;const{type:y,props:S,patchFlag:R,shapeFlag:b,dirs:$,transition:P}=E,D=y==="input"||y==="option";if(D||R!==-1){$&&$t(E,null,w,"created");let V=!1;if(v(p)){V=Hf(k,P)&&w&&w.vnode.props&&w.vnode.props.appear;const H=p.content.firstChild;V&&P.beforeEnter(H),A(H,p,w),E.el=p=H}if(b&16&&!(S&&(S.innerHTML||S.textContent))){let H=h(p.firstChild,E,p,w,k,N,C);for(;H;){en=!0;const ge=H;H=H.nextSibling,l(ge)}}else b&8&&p.textContent!==E.children&&(en=!0,p.textContent=E.children);if(S)if(D||!C||R&48)for(const H in S)(D&&(H.endsWith("value")||H==="indeterminate")||Gn(H)&&!pn(H)||H[0]===".")&&s(p,H,null,S[H],void 0,void 0,w);else S.onClick&&s(p,"onClick",null,S.onClick,void 0,void 0,w);let M;(M=S&&S.onVnodeBeforeMount)&&it(M,w,E),$&&$t(E,null,w,"beforeMount"),((M=S&&S.onVnodeMounted)||$||V)&&mf(()=>{M&&it(M,w,E),V&&P.enter(p),$&&$t(E,null,w,"mounted")},k)}return p.nextSibling},h=(p,E,w,k,N,C,y)=>{y=y||!!E.dynamicChildren;const S=E.children,R=S.length;for(let b=0;b<R;b++){const $=y?S[b]:S[b]=ht(S[b]);if(p)p=f(p,$,k,N,C,y);else{if($.type===jn&&!$.children)continue;en=!0,n(null,$,w,null,k,N,Bi(w),C)}}return p},g=(p,E,w,k,N,C)=>{const{slotScopeIds:y}=E;y&&(N=N?N.concat(y):y);const S=o(p),R=h(r(p),E,S,w,k,N,C);return R&&Di(R)&&R.data==="]"?r(E.anchor=R):(en=!0,a(E.anchor=c("]"),S,R),R)},T=(p,E,w,k,N,C)=>{if(en=!0,E.el=null,C){const R=x(p);for(;;){const b=r(p);if(b&&b!==R)l(b);else break}}const y=r(p),S=o(p);return l(p),n(null,E,S,y,w,k,Bi(S),N),y},x=(p,E="[",w="]")=>{let k=0;for(;p;)if(p=r(p),p&&Di(p)&&(p.data===E&&k++,p.data===w)){if(k===0)return r(p);k--}return p},A=(p,E,w)=>{const k=E.parentNode;k&&k.replaceChild(p,E);let N=w;for(;N;)N.vnode.el===E&&(N.vnode.el=N.subTree.el=p),N=N.parent},v=p=>p.nodeType===1&&p.tagName.toLowerCase()==="template";return[u,f]}const ze=mf;function qf(e){return Df(e)}function Bf(e){return Df(e,Cg)}function Df(e,t){const n=Lu();n.__VUE__=!0;const{insert:s,remove:i,patchProp:r,createElement:o,createText:l,createComment:a,setText:c,setElementText:u,parentNode:f,nextSibling:d,setScopeId:h=$e,insertStaticContent:g}=e,T=(m,_,O,B=null,q=null,z=null,Q=void 0,K=null,W=!!_.dynamicChildren)=>{if(m===_)return;m&&!At(m,_)&&(B=I(m),j(m,q,z,!0),m=null),_.patchFlag===-2&&(W=!1,_.dynamicChildren=null);const{type:U,ref:Z,shapeFlag:ne}=_;switch(U){case jn:x(m,_,O,B);break;case Xe:A(m,_,O,B);break;case $n:m==null&&v(_,O,B,Q);break;case We:b(m,_,O,B,q,z,Q,K,W);break;default:ne&1?w(m,_,O,B,q,z,Q,K,W):ne&6?$(m,_,O,B,q,z,Q,K,W):(ne&64||ne&128)&&U.process(m,_,O,B,q,z,Q,K,W,ee)}Z!=null&&q&&vr(Z,m&&m.ref,z,_||m,!_)},x=(m,_,O,B)=>{if(m==null)s(_.el=l(_.children),O,B);else{const q=_.el=m.el;_.children!==m.children&&c(q,_.children)}},A=(m,_,O,B)=>{m==null?s(_.el=a(_.children||""),O,B):_.el=m.el},v=(m,_,O,B)=>{[m.el,m.anchor]=g(m.children,_,O,B,m.el,m.anchor)},p=({el:m,anchor:_},O,B)=>{let q;for(;m&&m!==_;)q=d(m),s(m,O,B),m=q;s(_,O,B)},E=({el:m,anchor:_})=>{let O;for(;m&&m!==_;)O=d(m),i(m),m=O;i(_)},w=(m,_,O,B,q,z,Q,K,W)=>{_.type==="svg"?Q="svg":_.type==="math"&&(Q="mathml"),m==null?k(_,O,B,q,z,Q,K,W):y(m,_,q,z,Q,K,W)},k=(m,_,O,B,q,z,Q,K)=>{let W,U;const{props:Z,shapeFlag:ne,transition:te,dirs:oe}=m;if(W=m.el=o(m.type,z,Z&&Z.is,Z),ne&8?u(W,m.children):ne&16&&C(m.children,W,null,B,q,fo(m,z),Q,K),oe&&$t(m,null,B,"created"),N(W,m,m.scopeId,Q,B),Z){for(const we in Z)we!=="value"&&!pn(we)&&r(W,we,null,Z[we],z,m.children,B,q,X);"value"in Z&&r(W,"value",null,Z.value,z),(U=Z.onVnodeBeforeMount)&&it(U,B,m)}oe&&$t(m,null,B,"beforeMount");const ue=Hf(q,te);ue&&te.beforeEnter(W),s(W,_,O),((U=Z&&Z.onVnodeMounted)||ue||oe)&&ze(()=>{U&&it(U,B,m),ue&&te.enter(W),oe&&$t(m,null,B,"mounted")},q)},N=(m,_,O,B,q)=>{if(O&&h(m,O),B)for(let z=0;z<B.length;z++)h(m,B[z]);if(q){let z=q.subTree;if(_===z){const Q=q.vnode;N(m,Q,Q.scopeId,Q.slotScopeIds,q.parent)}}},C=(m,_,O,B,q,z,Q,K,W=0)=>{for(let U=W;U<m.length;U++){const Z=m[U]=K?cn(m[U]):ht(m[U]);T(null,Z,_,O,B,q,z,Q,K)}},y=(m,_,O,B,q,z,Q)=>{const K=_.el=m.el;let{patchFlag:W,dynamicChildren:U,dirs:Z}=_;W|=m.patchFlag&16;const ne=m.props||me,te=_.props||me;let oe;if(O&&wn(O,!1),(oe=te.onVnodeBeforeUpdate)&&it(oe,O,_,m),Z&&$t(_,m,O,"beforeUpdate"),O&&wn(O,!0),U?S(m.dynamicChildren,U,K,O,B,fo(_,q),z):Q||H(m,_,K,null,O,B,fo(_,q),z,!1),W>0){if(W&16)R(K,_,ne,te,O,B,q);else if(W&2&&ne.class!==te.class&&r(K,"class",null,te.class,q),W&4&&r(K,"style",ne.style,te.style,q),W&8){const ue=_.dynamicProps;for(let we=0;we<ue.length;we++){const Te=ue[we],je=ne[Te],kt=te[Te];(kt!==je||Te==="value")&&r(K,Te,je,kt,q,m.children,O,B,X)}}W&1&&m.children!==_.children&&u(K,_.children)}else!Q&&U==null&&R(K,_,ne,te,O,B,q);((oe=te.onVnodeUpdated)||Z)&&ze(()=>{oe&&it(oe,O,_,m),Z&&$t(_,m,O,"updated")},B)},S=(m,_,O,B,q,z,Q)=>{for(let K=0;K<_.length;K++){const W=m[K],U=_[K],Z=W.el&&(W.type===We||!At(W,U)||W.shapeFlag&70)?f(W.el):O;T(W,U,Z,null,B,q,z,Q,!0)}},R=(m,_,O,B,q,z,Q)=>{if(O!==B){if(O!==me)for(const K in O)!pn(K)&&!(K in B)&&r(m,K,O[K],null,Q,_.children,q,z,X);for(const K in B){if(pn(K))continue;const W=B[K],U=O[K];W!==U&&K!=="value"&&r(m,K,U,W,Q,_.children,q,z,X)}"value"in B&&r(m,"value",O.value,B.value,Q)}},b=(m,_,O,B,q,z,Q,K,W)=>{const U=_.el=m?m.el:l(""),Z=_.anchor=m?m.anchor:l("");let{patchFlag:ne,dynamicChildren:te,slotScopeIds:oe}=_;oe&&(K=K?K.concat(oe):oe),m==null?(s(U,O,B),s(Z,O,B),C(_.children||[],O,Z,q,z,Q,K,W)):ne>0&&ne&64&&te&&m.dynamicChildren?(S(m.dynamicChildren,te,O,q,z,Q,K),(_.key!=null||q&&_===q.subTree)&&Gl(m,_,!0)):H(m,_,O,Z,q,z,Q,K,W)},$=(m,_,O,B,q,z,Q,K,W)=>{_.slotScopeIds=K,m==null?_.shapeFlag&512?q.ctx.activate(_,O,B,Q,W):P(_,O,B,q,z,Q,W):D(m,_,W)},P=(m,_,O,B,q,z,Q)=>{const K=m.component=Jf(m,B,q);if(Si(m)&&(K.ctx.renderer=ee),Xf(K),K.asyncDep){if(q&&q.registerDep(K,V),!m.el){const W=K.subTree=ke(Xe);A(null,W,_,O)}}else V(K,m,_,O,q,z,Q)},D=(m,_,O)=>{const B=_.component=m.component;if(Tm(m,_,O))if(B.asyncDep&&!B.asyncResolved){M(B,_,O);return}else B.next=_,ym(B.update),B.effect.dirty=!0,B.update();else _.el=m.el,B.vnode=_},V=(m,_,O,B,q,z,Q)=>{const K=()=>{if(m.isMounted){let{next:Z,bu:ne,u:te,parent:oe,vnode:ue}=m;{const ns=jf(m);if(ns){Z&&(Z.el=ue.el,M(m,Z,Q)),ns.asyncDep.then(()=>{m.isUnmounted||K()});return}}let we=Z,Te;wn(m,!1),Z?(Z.el=ue.el,M(m,Z,Q)):Z=ue,ne&&ps(ne),(Te=Z.props&&Z.props.onVnodeBeforeUpdate)&&it(Te,oe,Z,ue),wn(m,!0);const je=er(m),kt=m.subTree;m.subTree=je,T(kt,je,f(kt.el),I(kt),m,q,z),Z.el=je.el,we===null&&Vl(m,je.el),te&&ze(te,q),(Te=Z.props&&Z.props.onVnodeUpdated)&&ze(()=>it(Te,oe,Z,ue),q)}else{let Z;const{el:ne,props:te}=_,{bm:oe,m:ue,parent:we}=m,Te=Ln(_);if(wn(m,!1),oe&&ps(oe),!Te&&(Z=te&&te.onVnodeBeforeMount)&&it(Z,we,_),wn(m,!0),ne&&xe){const je=()=>{m.subTree=er(m),xe(ne,m.subTree,m,q,null)};Te?_.type.__asyncLoader().then(()=>!m.isUnmounted&&je()):je()}else{const je=m.subTree=er(m);T(null,je,O,B,m,q,z),_.el=je.el}if(ue&&ze(ue,q),!Te&&(Z=te&&te.onVnodeMounted)){const je=_;ze(()=>it(Z,we,je),q)}(_.shapeFlag&256||we&&Ln(we.vnode)&&we.vnode.shapeFlag&256)&&m.a&&ze(m.a,q),m.isMounted=!0,_=O=B=null}},W=m.effect=new bs(K,$e,()=>Dr(U),m.scope),U=m.update=()=>{W.dirty&&W.run()};U.id=m.uid,wn(m,!0),U()},M=(m,_,O)=>{_.component=m;const B=m.vnode.props;m.vnode=_,m.next=null,vg(m,_.props,B,O),_g(m,_.children,O),Jn(),qa(m),Zn()},H=(m,_,O,B,q,z,Q,K,W=!1)=>{const U=m&&m.children,Z=m?m.shapeFlag:0,ne=_.children,{patchFlag:te,shapeFlag:oe}=_;if(te>0){if(te&128){re(U,ne,O,B,q,z,Q,K,W);return}else if(te&256){ge(U,ne,O,B,q,z,Q,K,W);return}}oe&8?(Z&16&&X(U,q,z),ne!==U&&u(O,ne)):Z&16?oe&16?re(U,ne,O,B,q,z,Q,K,W):X(U,q,z,!0):(Z&8&&u(O,""),oe&16&&C(ne,O,B,q,z,Q,K,W))},ge=(m,_,O,B,q,z,Q,K,W)=>{m=m||fs,_=_||fs;const U=m.length,Z=_.length,ne=Math.min(U,Z);let te;for(te=0;te<ne;te++){const oe=_[te]=W?cn(_[te]):ht(_[te]);T(m[te],oe,O,null,q,z,Q,K,W)}U>Z?X(m,q,z,!0,!1,ne):C(_,O,B,q,z,Q,K,W,ne)},re=(m,_,O,B,q,z,Q,K,W)=>{let U=0;const Z=_.length;let ne=m.length-1,te=Z-1;for(;U<=ne&&U<=te;){const oe=m[U],ue=_[U]=W?cn(_[U]):ht(_[U]);if(At(oe,ue))T(oe,ue,O,null,q,z,Q,K,W);else break;U++}for(;U<=ne&&U<=te;){const oe=m[ne],ue=_[te]=W?cn(_[te]):ht(_[te]);if(At(oe,ue))T(oe,ue,O,null,q,z,Q,K,W);else break;ne--,te--}if(U>ne){if(U<=te){const oe=te+1,ue=oe<Z?_[oe].el:B;for(;U<=te;)T(null,_[U]=W?cn(_[U]):ht(_[U]),O,ue,q,z,Q,K,W),U++}}else if(U>te)for(;U<=ne;)j(m[U],q,z,!0),U++;else{const oe=U,ue=U,we=new Map;for(U=ue;U<=te;U++){const ut=_[U]=W?cn(_[U]):ht(_[U]);ut.key!=null&&we.set(ut.key,U)}let Te,je=0;const kt=te-ue+1;let ns=!1,xa=0;const Ms=new Array(kt);for(U=0;U<kt;U++)Ms[U]=0;for(U=oe;U<=ne;U++){const ut=m[U];if(je>=kt){j(ut,q,z,!0);continue}let Lt;if(ut.key!=null)Lt=we.get(ut.key);else for(Te=ue;Te<=te;Te++)if(Ms[Te-ue]===0&&At(ut,_[Te])){Lt=Te;break}Lt===void 0?j(ut,q,z,!0):(Ms[Lt-ue]=U+1,Lt>=xa?xa=Lt:ns=!0,T(ut,_[Lt],O,null,q,z,Q,K,W),je++)}const Ta=ns?Eg(Ms):fs;for(Te=Ta.length-1,U=kt-1;U>=0;U--){const ut=ue+U,Lt=_[ut],Ra=ut+1<Z?_[ut+1].el:B;Ms[U]===0?T(null,Lt,O,Ra,q,z,Q,K,W):ns&&(Te<0||U!==Ta[Te]?fe(Lt,O,Ra,2):Te--)}}},fe=(m,_,O,B,q=null)=>{const{el:z,type:Q,transition:K,children:W,shapeFlag:U}=m;if(U&6){fe(m.component.subTree,_,O,B);return}if(U&128){m.suspense.move(_,O,B);return}if(U&64){Q.move(m,_,O,ee);return}if(Q===We){s(z,_,O);for(let ne=0;ne<W.length;ne++)fe(W[ne],_,O,B);s(m.anchor,_,O);return}if(Q===$n){p(m,_,O);return}if(B!==2&&U&1&&K)if(B===0)K.beforeEnter(z),s(z,_,O),ze(()=>K.enter(z),q);else{const{leave:ne,delayLeave:te,afterLeave:oe}=K,ue=()=>s(z,_,O),we=()=>{ne(z,()=>{ue(),oe&&oe()})};te?te(z,ue,we):we()}else s(z,_,O)},j=(m,_,O,B=!1,q=!1)=>{const{type:z,props:Q,ref:K,children:W,dynamicChildren:U,shapeFlag:Z,patchFlag:ne,dirs:te}=m;if(K!=null&&vr(K,null,O,m,!0),Z&256){_.ctx.deactivate(m);return}const oe=Z&1&&te,ue=!Ln(m);let we;if(ue&&(we=Q&&Q.onVnodeBeforeUnmount)&&it(we,_,m),Z&6)He(m.component,O,B);else{if(Z&128){m.suspense.unmount(O,B);return}oe&&$t(m,null,_,"beforeUnmount"),Z&64?m.type.remove(m,_,O,q,ee,B):U&&(z!==We||ne>0&&ne&64)?X(U,_,O,!1,!0):(z===We&&ne&384||!q&&Z&16)&&X(W,_,O),B&&ve(m)}(ue&&(we=Q&&Q.onVnodeUnmounted)||oe)&&ze(()=>{we&&it(we,_,m),oe&&$t(m,null,_,"unmounted")},O)},ve=m=>{const{type:_,el:O,anchor:B,transition:q}=m;if(_===We){Ie(O,B);return}if(_===$n){E(m);return}const z=()=>{i(O),q&&!q.persisted&&q.afterLeave&&q.afterLeave()};if(m.shapeFlag&1&&q&&!q.persisted){const{leave:Q,delayLeave:K}=q,W=()=>Q(O,z);K?K(m.el,z,W):W()}else z()},Ie=(m,_)=>{let O;for(;m!==_;)O=d(m),i(m),m=O;i(_)},He=(m,_,O)=>{const{bum:B,scope:q,update:z,subTree:Q,um:K}=m;B&&ps(B),q.stop(),z&&(z.active=!1,j(Q,m,_,O)),K&&ze(K,_),ze(()=>{m.isUnmounted=!0},_),_&&_.pendingBranch&&!_.isUnmounted&&m.asyncDep&&!m.asyncResolved&&m.suspenseId===_.pendingId&&(_.deps--,_.deps===0&&_.resolve())},X=(m,_,O,B=!1,q=!1,z=0)=>{for(let Q=z;Q<m.length;Q++)j(m[Q],_,O,B,q)},I=m=>m.shapeFlag&6?I(m.component.subTree):m.shapeFlag&128?m.suspense.next():d(m.anchor||m.el);let Y=!1;const G=(m,_,O)=>{m==null?_._vnode&&j(_._vnode,null,null,!0):T(_._vnode||null,m,_,null,null,null,O),Y||(Y=!0,qa(),mr(),Y=!1),_._vnode=m},ee={p:T,um:j,m:fe,r:ve,mt:P,mc:C,pc:H,pbc:S,n:I,o:e};let be,xe;return t&&([be,xe]=t(ee)),{render:G,hydrate:be,createApp:mg(G,be)}}function fo({type:e,props:t},n){return n==="svg"&&e==="foreignObject"||n==="mathml"&&e==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function wn({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function Hf(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function Gl(e,t,n=!1){const s=e.children,i=t.children;if(J(s)&&J(i))for(let r=0;r<s.length;r++){const o=s[r];let l=i[r];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=i[r]=cn(i[r]),l.el=o.el),n||Gl(o,l)),l.type===jn&&(l.el=o.el)}}function Eg(e){const t=e.slice(),n=[0];let s,i,r,o,l;const a=e.length;for(s=0;s<a;s++){const c=e[s];if(c!==0){if(i=n[n.length-1],e[i]<c){t[s]=i,n.push(s);continue}for(r=0,o=n.length-1;r<o;)l=r+o>>1,e[n[l]]<c?r=l+1:o=l;c<e[n[r]]&&(r>0&&(t[s]=n[r-1]),n[r]=s)}}for(r=n.length,o=n[r-1];r-- >0;)n[r]=o,o=t[o];return n}function jf(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:jf(t)}const kg=e=>e.__isTeleport,Ks=e=>e&&(e.disabled||e.disabled===""),Ja=e=>typeof SVGElement!="undefined"&&e instanceof SVGElement,Za=e=>typeof MathMLElement=="function"&&e instanceof MathMLElement,Ho=(e,t)=>{const n=e&&e.to;return le(n)?t?t(n):null:n},xg={name:"Teleport",__isTeleport:!0,process(e,t,n,s,i,r,o,l,a,c){const{mc:u,pc:f,pbc:d,o:{insert:h,querySelector:g,createText:T,createComment:x}}=c,A=Ks(t.props);let{shapeFlag:v,children:p,dynamicChildren:E}=t;if(e==null){const w=t.el=T(""),k=t.anchor=T("");h(w,n,s),h(k,n,s);const N=t.target=Ho(t.props,g),C=t.targetAnchor=T("");N&&(h(C,N),o==="svg"||Ja(N)?o="svg":(o==="mathml"||Za(N))&&(o="mathml"));const y=(S,R)=>{v&16&&u(p,S,R,i,r,o,l,a)};A?y(n,k):N&&y(N,C)}else{t.el=e.el;const w=t.anchor=e.anchor,k=t.target=e.target,N=t.targetAnchor=e.targetAnchor,C=Ks(e.props),y=C?n:k,S=C?w:N;if(o==="svg"||Ja(k)?o="svg":(o==="mathml"||Za(k))&&(o="mathml"),E?(d(e.dynamicChildren,E,y,i,r,o,l),Gl(e,t,!0)):a||f(e,t,y,S,i,r,o,l,!1),A)C?t.props&&e.props&&t.props.to!==e.props.to&&(t.props.to=e.props.to):Hi(t,n,w,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const R=t.target=Ho(t.props,g);R&&Hi(t,R,null,c,0)}else C&&Hi(t,k,N,c,1)}Kf(t)},remove(e,t,n,s,{um:i,o:{remove:r}},o){const{shapeFlag:l,children:a,anchor:c,targetAnchor:u,target:f,props:d}=e;if(f&&r(u),o&&r(c),l&16){const h=o||!Ks(d);for(let g=0;g<a.length;g++){const T=a[g];i(T,t,n,h,!!T.dynamicChildren)}}},move:Hi,hydrate:Tg};function Hi(e,t,n,{o:{insert:s},m:i},r=2){r===0&&s(e.targetAnchor,t,n);const{el:o,anchor:l,shapeFlag:a,children:c,props:u}=e,f=r===2;if(f&&s(o,t,n),(!f||Ks(u))&&a&16)for(let d=0;d<c.length;d++)i(c[d],t,n,2);f&&s(l,t,n)}function Tg(e,t,n,s,i,r,{o:{nextSibling:o,parentNode:l,querySelector:a}},c){const u=t.target=Ho(t.props,a);if(u){const f=u._lpa||u.firstChild;if(t.shapeFlag&16)if(Ks(t.props))t.anchor=c(o(e),t,l(e),n,s,i,r),t.targetAnchor=f;else{t.anchor=o(e);let d=f;for(;d;)if(d=o(d),d&&d.nodeType===8&&d.data==="teleport anchor"){t.targetAnchor=d,u._lpa=t.targetAnchor&&o(t.targetAnchor);break}c(f,t,u,n,s,i,r)}Kf(t)}return t.anchor&&o(t.anchor)}const Uf=xg;function Kf(e){const t=e.ctx;if(t&&t.ut){let n=e.children[0].el;for(;n&&n!==e.targetAnchor;)n.nodeType===1&&n.setAttribute("data-v-owner",t.uid),n=n.nextSibling;t.ut()}}const We=Symbol.for("v-fgt"),jn=Symbol.for("v-txt"),Xe=Symbol.for("v-cmt"),$n=Symbol.for("v-stc"),zs=[];let ot=null;function Ei(e=!1){zs.push(ot=e?null:[])}function zf(){zs.pop(),ot=zs[zs.length-1]||null}let Un=1;function jo(e){Un+=e}function Wf(e){return e.dynamicChildren=Un>0?ot||fs:null,zf(),Un>0&&ot&&ot.push(e),e}function Rg(e,t,n,s,i,r){return Wf(Ql(e,t,n,s,i,r,!0))}function Wr(e,t,n,s,i){return Wf(ke(e,t,n,s,i,!0))}function yn(e){return e?e.__v_isVNode===!0:!1}function At(e,t){return e.type===t.type&&e.key===t.key}function Ag(e){}const Gr="__vInternal",Gf=({key:e})=>e!=null?e:null,tr=({ref:e,ref_key:t,ref_for:n})=>(typeof e=="number"&&(e=""+e),e!=null?le(e)||Me(e)||se(e)?{i:Ve,r:e,k:t,f:!!n}:e:null);function Ql(e,t=null,n=null,s=0,i=null,r=e===We?0:1,o=!1,l=!1){const a={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Gf(t),ref:t&&tr(t),scopeId:jr,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:s,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:Ve};return l?(Jl(a,n),r&128&&e.normalize(a)):n&&(a.shapeFlag|=le(n)?8:16),Un>0&&!o&&ot&&(a.patchFlag>0||r&6)&&a.patchFlag!==32&&ot.push(a),a}const ke=Pg;function Pg(e,t=null,n=null,s=0,i=null,r=!1){if((!e||e===hf)&&(e=Xe),yn(e)){const l=qt(e,t,!0);return n&&Jl(l,n),Un>0&&!r&&ot&&(l.shapeFlag&6?ot[ot.indexOf(e)]=l:ot.push(l)),l.patchFlag|=-2,l}if(Fg(e)&&(e=e.__vccOpts),t){t=Qf(t);let{class:l,style:a}=t;l&&!le(l)&&(t.class=bi(l)),Se(a)&&(Ol(a)&&!J(a)&&(a=pe({},a)),t.style=yi(a))}const o=le(e)?1:pf(e)?128:kg(e)?64:Se(e)?4:se(e)?2:0;return Ql(e,t,n,s,i,o,r,!0)}function Qf(e){return e?Ol(e)||Gr in e?pe({},e):e:null}function qt(e,t,n=!1){const{props:s,ref:i,patchFlag:r,children:o}=e,l=t?Yf(s||{},t):s;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&Gf(l),ref:t&&t.ref?n&&i?J(i)?i.concat(tr(t)):[i,tr(t)]:tr(t):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==We?r===-1?16:r|16:r,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&qt(e.ssContent),ssFallback:e.ssFallback&&qt(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function Yl(e=" ",t=0){return ke(jn,null,e,t)}function Og(e,t){const n=ke($n,null,e);return n.staticCount=t,n}function Ng(e="",t=!1){return t?(Ei(),Wr(Xe,null,e)):ke(Xe,null,e)}function ht(e){return e==null||typeof e=="boolean"?ke(Xe):J(e)?ke(We,null,e.slice()):typeof e=="object"?cn(e):ke(jn,null,String(e))}function cn(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:qt(e)}function Jl(e,t){let n=0;const{shapeFlag:s}=e;if(t==null)t=null;else if(J(t))n=16;else if(typeof t=="object")if(s&65){const i=t.default;i&&(i._c&&(i._d=!1),Jl(e,i()),i._c&&(i._d=!0));return}else{n=32;const i=t._;!i&&!(Gr in t)?t._ctx=Ve:i===3&&Ve&&(Ve.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else se(t)?(t={default:t,_ctx:Ve},n=32):(t=String(t),s&64?(n=16,t=[Yl(t)]):n=8);e.children=t,e.shapeFlag|=n}function Yf(...e){const t={};for(let n=0;n<e.length;n++){const s=e[n];for(const i in s)if(i==="class")t.class!==s.class&&(t.class=bi([t.class,s.class]));else if(i==="style")t.style=yi([t.style,s.style]);else if(Gn(i)){const r=t[i],o=s[i];o&&r!==o&&!(J(r)&&r.includes(o))&&(t[i]=r?[].concat(r,o):o)}else i!==""&&(t[i]=s[i])}return t}function it(e,t,n,s=null){mt(e,t,7,[n,s])}const Mg=Nf();let Ig=0;function Jf(e,t,n){const s=e.type,i=(t?t.appContext:e.appContext)||Mg,r={uid:Ig++,vnode:e,type:s,parent:t,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,scope:new Cl(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Lf(s,i),emitsOptions:ff(s,i),emit:null,emitted:null,propsDefaults:me,inheritAttrs:s.inheritAttrs,ctx:me,data:me,props:me,attrs:me,slots:me,refs:me,setupState:me,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return r.ctx={_:r},r.root=t?t.root:r,r.emit=_m.bind(null,r),e.ce&&e.ce(r),r}let Be=null;const Ee=()=>Be||Ve;let yr,Uo;{const e=Lu(),t=(n,s)=>{let i;return(i=e[n])||(i=e[n]=[]),i.push(s),r=>{i.length>1?i.forEach(o=>o(r)):i[0](r)}};yr=t("__VUE_INSTANCE_SETTERS__",n=>Be=n),Uo=t("__VUE_SSR_SETTERS__",n=>ki=n)}const Kn=e=>{const t=Be;return yr(e),e.scope.on(),()=>{e.scope.off(),yr(t)}},Ko=()=>{Be&&Be.scope.off(),yr(null)};function Zf(e){return e.vnode.shapeFlag&4}let ki=!1;function Xf(e,t=!1){t&&Uo(t);const{props:n,children:s}=e.vnode,i=Zf(e);gg(e,n,i,t),bg(e,s);const r=i?Lg(e,t):void 0;return t&&Uo(!1),r}function Lg(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=Jt(new Proxy(e.ctx,Fo));const{setup:s}=n;if(s){const i=e.setupContext=s.length>1?nd(e):null,r=Kn(e);Jn();const o=Qt(s,e,0,[e.props,i]);if(Zn(),r(),Sl(o)){if(o.then(Ko,Ko),t)return o.then(l=>{zo(e,l,t)}).catch(l=>{Xn(l,e,0)});e.asyncDep=o}else zo(e,o,t)}else td(e,t)}function zo(e,t,n){se(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:Se(t)&&(e.setupState=Il(t)),td(e,n)}let br,Wo;function ed(e){br=e,Wo=t=>{t.render._rc&&(t.withProxy=new Proxy(t.ctx,Qm))}}const $g=()=>!br;function td(e,t,n){const s=e.type;if(!e.render){if(!t&&br&&!s.render){const i=s.template||zl(e).template;if(i){const{isCustomElement:r,compilerOptions:o}=e.appContext.config,{delimiters:l,compilerOptions:a}=s,c=pe(pe({isCustomElement:r,delimiters:l},o),a);s.render=br(i,c)}}e.render=s.render||$e,Wo&&Wo(e)}{const i=Kn(e);Jn();try{cg(e)}finally{Zn(),i()}}}function Vg(e){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,{get(t,n){return ct(e,"get","$attrs"),t[n]}}))}function nd(e){const t=n=>{e.exposed=n||{}};return{get attrs(){return Vg(e)},slots:e.slots,emit:e.emit,expose:t}}function Qr(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(Il(Jt(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in js)return js[n](e)},has(t,n){return n in t||n in js}}))}function Go(e,t=!0){return se(e)?e.displayName||e.name:e.name||t&&e.__name}function Fg(e){return se(e)&&"__vccOpts"in e}const L=(e,t)=>nm(e,t,ki);function qg(e,t,n=me){const s=Ee(),i=Ae(t),r=pt(t),o=sf((a,c)=>{let u;return bf(()=>{const f=e[t];Mt(u,f)&&(u=f,c())}),{get(){return a(),n.get?n.get(u):u},set(f){const d=s.vnode.props;!(d&&(t in d||i in d||r in d)&&(`onUpdate:${t}`in d||`onUpdate:${i}`in d||`onUpdate:${r}`in d))&&Mt(f,u)&&(u=f,c()),s.emit(`update:${t}`,n.set?n.set(f):f)}}}),l=t==="modelValue"?"modelModifiers":`${t}Modifiers`;return o[Symbol.iterator]=()=>{let a=0;return{next(){return a<2?{value:a++?e[l]||{}:o,done:!1}:{done:!0}}}},o}function F(e,t,n){const s=arguments.length;return s===2?Se(t)&&!J(t)?yn(t)?ke(e,null,[t]):ke(e,t):ke(e,null,t):(s>3?n=Array.prototype.slice.call(arguments,2):s===3&&yn(n)&&(n=[n]),ke(e,t,n))}function Bg(){}function Dg(e,t,n,s){const i=n[s];if(i&&sd(i,e))return i;const r=t();return r.memo=e.slice(),n[s]=r}function sd(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let s=0;s<n.length;s++)if(Mt(n[s],t[s]))return!1;return Un>0&&ot&&ot.push(e),!0}const id="3.4.21",Hg=$e,jg=mm,Ug=as,Kg=uf,zg={createComponentInstance:Jf,setupComponent:Xf,renderComponentRoot:er,setCurrentRenderingInstance:si,isVNode:yn,normalizeVNode:ht},Wg=zg,Gg=null,Qg=null,Yg=null;/**
* @vue/runtime-dom v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Jg="http://www.w3.org/2000/svg",Zg="http://www.w3.org/1998/Math/MathML",un=typeof document!="undefined"?document:null,Xa=un&&un.createElement("template"),Xg={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,s)=>{const i=t==="svg"?un.createElementNS(Jg,e):t==="mathml"?un.createElementNS(Zg,e):un.createElement(e,n?{is:n}:void 0);return e==="select"&&s&&s.multiple!=null&&i.setAttribute("multiple",s.multiple),i},createText:e=>un.createTextNode(e),createComment:e=>un.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>un.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,s,i,r){const o=n?n.previousSibling:t.lastChild;if(i&&(i===r||i.nextSibling))for(;t.insertBefore(i.cloneNode(!0),n),!(i===r||!(i=i.nextSibling)););else{Xa.innerHTML=s==="svg"?`<svg>${e}</svg>`:s==="mathml"?`<math>${e}</math>`:e;const l=Xa.content;if(s==="svg"||s==="mathml"){const a=l.firstChild;for(;a.firstChild;)l.appendChild(a.firstChild);l.removeChild(a)}t.insertBefore(l,n)}return[o?o.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},tn="transition",Is="animation",Ss=Symbol("_vtc"),zn=(e,{slots:t})=>F(Sf,od(e),t);zn.displayName="Transition";const rd={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},ev=zn.props=pe({},jl,rd),Cn=(e,t=[])=>{J(e)?e.forEach(n=>n(...t)):e&&e(...t)},ec=e=>e?J(e)?e.some(t=>t.length>1):e.length>1:!1;function od(e){const t={};for(const b in e)b in rd||(t[b]=e[b]);if(e.css===!1)return t;const{name:n="v",type:s,duration:i,enterFromClass:r=`${n}-enter-from`,enterActiveClass:o=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:a=r,appearActiveClass:c=o,appearToClass:u=l,leaveFromClass:f=`${n}-leave-from`,leaveActiveClass:d=`${n}-leave-active`,leaveToClass:h=`${n}-leave-to`}=e,g=tv(i),T=g&&g[0],x=g&&g[1],{onBeforeEnter:A,onEnter:v,onEnterCancelled:p,onLeave:E,onLeaveCancelled:w,onBeforeAppear:k=A,onAppear:N=v,onAppearCancelled:C=p}=t,y=(b,$,P)=>{rn(b,$?u:l),rn(b,$?c:o),P&&P()},S=(b,$)=>{b._isLeaving=!1,rn(b,f),rn(b,h),rn(b,d),$&&$()},R=b=>($,P)=>{const D=b?N:v,V=()=>y($,b,P);Cn(D,[$,V]),tc(()=>{rn($,b?a:r),jt($,b?u:l),ec(D)||nc($,s,T,V)})};return pe(t,{onBeforeEnter(b){Cn(A,[b]),jt(b,r),jt(b,o)},onBeforeAppear(b){Cn(k,[b]),jt(b,a),jt(b,c)},onEnter:R(!1),onAppear:R(!0),onLeave(b,$){b._isLeaving=!0;const P=()=>S(b,$);jt(b,f),ad(),jt(b,d),tc(()=>{!b._isLeaving||(rn(b,f),jt(b,h),ec(E)||nc(b,s,x,P))}),Cn(E,[b,P])},onEnterCancelled(b){y(b,!1),Cn(p,[b])},onAppearCancelled(b){y(b,!0),Cn(C,[b])},onLeaveCancelled(b){S(b),Cn(w,[b])}})}function tv(e){if(e==null)return null;if(Se(e))return[ho(e.enter),ho(e.leave)];{const t=ho(e);return[t,t]}}function ho(e){return dr(e)}function jt(e,t){t.split(/\s+/).forEach(n=>n&&e.classList.add(n)),(e[Ss]||(e[Ss]=new Set)).add(t)}function rn(e,t){t.split(/\s+/).forEach(s=>s&&e.classList.remove(s));const n=e[Ss];n&&(n.delete(t),n.size||(e[Ss]=void 0))}function tc(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let nv=0;function nc(e,t,n,s){const i=e._endId=++nv,r=()=>{i===e._endId&&s()};if(n)return setTimeout(r,n);const{type:o,timeout:l,propCount:a}=ld(e,t);if(!o)return s();const c=o+"end";let u=0;const f=()=>{e.removeEventListener(c,d),r()},d=h=>{h.target===e&&++u>=a&&f()};setTimeout(()=>{u<a&&f()},l+1),e.addEventListener(c,d)}function ld(e,t){const n=window.getComputedStyle(e),s=g=>(n[g]||"").split(", "),i=s(`${tn}Delay`),r=s(`${tn}Duration`),o=sc(i,r),l=s(`${Is}Delay`),a=s(`${Is}Duration`),c=sc(l,a);let u=null,f=0,d=0;t===tn?o>0&&(u=tn,f=o,d=r.length):t===Is?c>0&&(u=Is,f=c,d=a.length):(f=Math.max(o,c),u=f>0?o>c?tn:Is:null,d=u?u===tn?r.length:a.length:0);const h=u===tn&&/\b(transform|all)(,|$)/.test(s(`${tn}Property`).toString());return{type:u,timeout:f,propCount:d,hasTransform:h}}function sc(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((n,s)=>ic(n)+ic(e[s])))}function ic(e){return e==="auto"?0:Number(e.slice(0,-1).replace(",","."))*1e3}function ad(){return document.body.offsetHeight}function sv(e,t,n){const s=e[Ss];s&&(t=(t?[t,...s]:[...s]).join(" ")),t==null?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}const _r=Symbol("_vod"),cd=Symbol("_vsh"),ud={beforeMount(e,{value:t},{transition:n}){e[_r]=e.style.display==="none"?"":e.style.display,n&&t?n.beforeEnter(e):Ls(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:s}){!t!=!n&&(s?t?(s.beforeEnter(e),Ls(e,!0),s.enter(e)):s.leave(e,()=>{Ls(e,!1)}):Ls(e,t))},beforeUnmount(e,{value:t}){Ls(e,t)}};function Ls(e,t){e.style.display=t?e[_r]:"none",e[cd]=!t}function iv(){ud.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}}}const fd=Symbol("");function rv(e){const t=Ee();if(!t)return;const n=t.ut=(i=e(t.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${t.uid}"]`)).forEach(r=>Yo(r,i))},s=()=>{const i=e(t.proxy);Qo(t.subTree,i),n(i)};yf(s),Bt(()=>{const i=new MutationObserver(s);i.observe(t.subTree.el.parentNode,{childList:!0}),Ci(()=>i.disconnect())})}function Qo(e,t){if(e.shapeFlag&128){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push(()=>{Qo(n.activeBranch,t)})}for(;e.component;)e=e.component.subTree;if(e.shapeFlag&1&&e.el)Yo(e.el,t);else if(e.type===We)e.children.forEach(n=>Qo(n,t));else if(e.type===$n){let{el:n,anchor:s}=e;for(;n&&(Yo(n,t),n!==s);)n=n.nextSibling}}function Yo(e,t){if(e.nodeType===1){const n=e.style;let s="";for(const i in t)n.setProperty(`--${i}`,t[i]),s+=`--${i}: ${t[i]};`;n[fd]=s}}const ov=/(^|;)\s*display\s*:/;function lv(e,t,n){const s=e.style,i=le(n);let r=!1;if(n&&!i){if(t)if(le(t))for(const o of t.split(";")){const l=o.slice(0,o.indexOf(":")).trim();n[l]==null&&nr(s,l,"")}else for(const o in t)n[o]==null&&nr(s,o,"");for(const o in n)o==="display"&&(r=!0),nr(s,o,n[o])}else if(i){if(t!==n){const o=s[fd];o&&(n+=";"+o),s.cssText=n,r=ov.test(n)}}else t&&e.removeAttribute("style");_r in e&&(e[_r]=r?s.display:"",e[cd]&&(s.display="none"))}const rc=/\s*!important$/;function nr(e,t,n){if(J(n))n.forEach(s=>nr(e,t,s));else if(n==null&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const s=av(e,t);rc.test(n)?e.setProperty(pt(s),n.replace(rc,""),"important"):e[s]=n}}const oc=["Webkit","Moz","ms"],po={};function av(e,t){const n=po[t];if(n)return n;let s=Ae(t);if(s!=="filter"&&s in e)return po[t]=s;s=Yn(s);for(let i=0;i<oc.length;i++){const r=oc[i]+s;if(r in e)return po[t]=r}return t}const lc="http://www.w3.org/1999/xlink";function cv(e,t,n,s,i){if(s&&t.startsWith("xlink:"))n==null?e.removeAttributeNS(lc,t.slice(6,t.length)):e.setAttributeNS(lc,t,n);else{const r=Pp(t);n==null||r&&!Vu(n)?e.removeAttribute(t):e.setAttribute(t,r?"":n)}}function uv(e,t,n,s,i,r,o){if(t==="innerHTML"||t==="textContent"){s&&o(s,i,r),e[t]=n==null?"":n;return}const l=e.tagName;if(t==="value"&&l!=="PROGRESS"&&!l.includes("-")){const c=l==="OPTION"?e.getAttribute("value")||"":e.value,u=n==null?"":n;(c!==u||!("_value"in e))&&(e.value=u),n==null&&e.removeAttribute(t),e._value=n;return}let a=!1;if(n===""||n==null){const c=typeof e[t];c==="boolean"?n=Vu(n):n==null&&c==="string"?(n="",a=!0):c==="number"&&(n=0,a=!0)}try{e[t]=n}catch{}a&&e.removeAttribute(t)}function Kt(e,t,n,s){e.addEventListener(t,n,s)}function fv(e,t,n,s){e.removeEventListener(t,n,s)}const ac=Symbol("_vei");function dv(e,t,n,s,i=null){const r=e[ac]||(e[ac]={}),o=r[t];if(s&&o)o.value=s;else{const[l,a]=hv(t);if(s){const c=r[t]=gv(s,i);Kt(e,l,c,a)}else o&&(fv(e,l,o,a),r[t]=void 0)}}const cc=/(?:Once|Passive|Capture)$/;function hv(e){let t;if(cc.test(e)){t={};let s;for(;s=e.match(cc);)e=e.slice(0,e.length-s[0].length),t[s[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):pt(e.slice(2)),t]}let mo=0;const pv=Promise.resolve(),mv=()=>mo||(pv.then(()=>mo=0),mo=Date.now());function gv(e,t){const n=s=>{if(!s._vts)s._vts=Date.now();else if(s._vts<=n.attached)return;mt(vv(s,n.value),t,5,[s])};return n.value=e,n.attached=mv(),n}function vv(e,t){if(J(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(s=>i=>!i._stopped&&s&&s(i))}else return t}const uc=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,yv=(e,t,n,s,i,r,o,l,a)=>{const c=i==="svg";t==="class"?sv(e,s,c):t==="style"?lv(e,n,s):Gn(t)?bl(t)||dv(e,t,n,s,o):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):bv(e,t,s,c))?uv(e,t,s,r,o,l,a):(t==="true-value"?e._trueValue=s:t==="false-value"&&(e._falseValue=s),cv(e,t,s,c))};function bv(e,t,n,s){if(s)return!!(t==="innerHTML"||t==="textContent"||t in e&&uc(t)&&se(n));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const i=e.tagName;if(i==="IMG"||i==="VIDEO"||i==="CANVAS"||i==="SOURCE")return!1}return uc(t)&&le(n)?!1:t in e}/*! #__NO_SIDE_EFFECTS__ */function dd(e,t){const n=Os(e);class s extends Yr{constructor(r){super(n,r,t)}}return s.def=n,s}/*! #__NO_SIDE_EFFECTS__ */const _v=e=>dd(e,Ed),Sv=typeof HTMLElement!="undefined"?HTMLElement:class{};class Yr extends Sv{constructor(t,n={},s){super(),this._def=t,this._props=n,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this._ob=null,this.shadowRoot&&s?s(this._createVNode(),this.shadowRoot):(this.attachShadow({mode:"open"}),this._def.__asyncLoader||this._resolveProps(this._def))}connectedCallback(){this._connected=!0,this._instance||(this._resolved?this._update():this._resolveDef())}disconnectedCallback(){this._connected=!1,this._ob&&(this._ob.disconnect(),this._ob=null),Ge(()=>{this._connected||(Jo(null,this.shadowRoot),this._instance=null)})}_resolveDef(){this._resolved=!0;for(let s=0;s<this.attributes.length;s++)this._setAttr(this.attributes[s].name);this._ob=new MutationObserver(s=>{for(const i of s)this._setAttr(i.attributeName)}),this._ob.observe(this,{attributes:!0});const t=(s,i=!1)=>{const{props:r,styles:o}=s;let l;if(r&&!J(r))for(const a in r){const c=r[a];(c===Number||c&&c.type===Number)&&(a in this._props&&(this._props[a]=dr(this._props[a])),(l||(l=Object.create(null)))[Ae(a)]=!0)}this._numberProps=l,i&&this._resolveProps(s),this._applyStyles(o),this._update()},n=this._def.__asyncLoader;n?n().then(s=>t(s,!0)):t(this._def)}_resolveProps(t){const{props:n}=t,s=J(n)?n:Object.keys(n||{});for(const i of Object.keys(this))i[0]!=="_"&&s.includes(i)&&this._setProp(i,this[i],!0,!1);for(const i of s.map(Ae))Object.defineProperty(this,i,{get(){return this._getProp(i)},set(r){this._setProp(i,r)}})}_setAttr(t){let n=this.getAttribute(t);const s=Ae(t);this._numberProps&&this._numberProps[s]&&(n=dr(n)),this._setProp(s,n,!1)}_getProp(t){return this._props[t]}_setProp(t,n,s=!0,i=!0){n!==this._props[t]&&(this._props[t]=n,i&&this._instance&&this._update(),s&&(n===!0?this.setAttribute(pt(t),""):typeof n=="string"||typeof n=="number"?this.setAttribute(pt(t),n+""):n||this.removeAttribute(pt(t))))}_update(){Jo(this._createVNode(),this.shadowRoot)}_createVNode(){const t=ke(this._def,pe({},this._props));return this._instance||(t.ce=n=>{this._instance=n,n.isCE=!0;const s=(r,o)=>{this.dispatchEvent(new CustomEvent(r,{detail:o}))};n.emit=(r,...o)=>{s(r,o),pt(r)!==r&&s(pt(r),o)};let i=this;for(;i=i&&(i.parentNode||i.host);)if(i instanceof Yr){n.parent=i._instance,n.provides=i._instance.provides;break}}),t}_applyStyles(t){t&&t.forEach(n=>{const s=document.createElement("style");s.textContent=n,this.shadowRoot.appendChild(s)})}}function wv(e="$style"){{const t=Ee();if(!t)return me;const n=t.type.__cssModules;if(!n)return me;const s=n[e];return s||me}}const hd=new WeakMap,pd=new WeakMap,Sr=Symbol("_moveCb"),fc=Symbol("_enterCb"),md={name:"TransitionGroup",props:pe({},ev,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=Ee(),s=Hl();let i,r;return zr(()=>{if(!i.length)return;const o=e.moveClass||`${e.name||"v"}-move`;if(!Tv(i[0].el,n.vnode.el,o))return;i.forEach(Ev),i.forEach(kv);const l=i.filter(xv);ad(),l.forEach(a=>{const c=a.el,u=c.style;jt(c,o),u.transform=u.webkitTransform=u.transitionDuration="";const f=c[Sr]=d=>{d&&d.target!==c||(!d||/transform$/.test(d.propertyName))&&(c.removeEventListener("transitionend",f),c[Sr]=null,rn(c,o))};c.addEventListener("transitionend",f)})}),()=>{const o=ie(e),l=od(o);let a=o.tag||We;i=r,r=t.default?Ur(t.default()):[];for(let c=0;c<r.length;c++){const u=r[c];u.key!=null&&Hn(u,_s(u,l,s,n))}if(i)for(let c=0;c<i.length;c++){const u=i[c];Hn(u,_s(u,l,s,n)),hd.set(u,u.el.getBoundingClientRect())}return ke(a,null,r)}}},Cv=e=>delete e.mode;md.props;const gd=md;function Ev(e){const t=e.el;t[Sr]&&t[Sr](),t[fc]&&t[fc]()}function kv(e){pd.set(e,e.el.getBoundingClientRect())}function xv(e){const t=hd.get(e),n=pd.get(e),s=t.left-n.left,i=t.top-n.top;if(s||i){const r=e.el.style;return r.transform=r.webkitTransform=`translate(${s}px,${i}px)`,r.transitionDuration="0s",e}}function Tv(e,t,n){const s=e.cloneNode(),i=e[Ss];i&&i.forEach(l=>{l.split(/\s+/).forEach(a=>a&&s.classList.remove(a))}),n.split(/\s+/).forEach(l=>l&&s.classList.add(l)),s.style.display="none";const r=t.nodeType===1?t:t.parentNode;r.appendChild(s);const{hasTransform:o}=ld(s);return r.removeChild(s),o}const bn=e=>{const t=e.props["onUpdate:modelValue"]||!1;return J(t)?n=>ps(t,n):t};function Rv(e){e.target.composing=!0}function dc(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Et=Symbol("_assign"),wr={created(e,{modifiers:{lazy:t,trim:n,number:s}},i){e[Et]=bn(i);const r=s||i.props&&i.props.type==="number";Kt(e,t?"change":"input",o=>{if(o.target.composing)return;let l=e.value;n&&(l=l.trim()),r&&(l=Zs(l)),e[Et](l)}),n&&Kt(e,"change",()=>{e.value=e.value.trim()}),t||(Kt(e,"compositionstart",Rv),Kt(e,"compositionend",dc),Kt(e,"change",dc))},mounted(e,{value:t}){e.value=t==null?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:s,number:i}},r){if(e[Et]=bn(r),e.composing)return;const o=i||e.type==="number"?Zs(e.value):e.value,l=t==null?"":t;o!==l&&(document.activeElement===e&&e.type!=="range"&&(n||s&&e.value.trim()===l)||(e.value=l))}},Zl={deep:!0,created(e,t,n){e[Et]=bn(n),Kt(e,"change",()=>{const s=e._modelValue,i=ws(e),r=e.checked,o=e[Et];if(J(s)){const l=Vr(s,i),a=l!==-1;if(r&&!a)o(s.concat(i));else if(!r&&a){const c=[...s];c.splice(l,1),o(c)}}else if(Qn(s)){const l=new Set(s);r?l.add(i):l.delete(i),o(l)}else o(yd(e,r))})},mounted:hc,beforeUpdate(e,t,n){e[Et]=bn(n),hc(e,t,n)}};function hc(e,{value:t,oldValue:n},s){e._modelValue=t,J(t)?e.checked=Vr(t,s.props.value)>-1:Qn(t)?e.checked=t.has(s.props.value):t!==n&&(e.checked=vn(t,yd(e,!0)))}const Xl={created(e,{value:t},n){e.checked=vn(t,n.props.value),e[Et]=bn(n),Kt(e,"change",()=>{e[Et](ws(e))})},beforeUpdate(e,{value:t,oldValue:n},s){e[Et]=bn(s),t!==n&&(e.checked=vn(t,s.props.value))}},vd={deep:!0,created(e,{value:t,modifiers:{number:n}},s){const i=Qn(t);Kt(e,"change",()=>{const r=Array.prototype.filter.call(e.options,o=>o.selected).map(o=>n?Zs(ws(o)):ws(o));e[Et](e.multiple?i?new Set(r):r:r[0]),e._assigning=!0,Ge(()=>{e._assigning=!1})}),e[Et]=bn(s)},mounted(e,{value:t,modifiers:{number:n}}){pc(e,t,n)},beforeUpdate(e,t,n){e[Et]=bn(n)},updated(e,{value:t,modifiers:{number:n}}){e._assigning||pc(e,t,n)}};function pc(e,t,n){const s=e.multiple,i=J(t);if(!(s&&!i&&!Qn(t))){for(let r=0,o=e.options.length;r<o;r++){const l=e.options[r],a=ws(l);if(s)if(i){const c=typeof a;c==="string"||c==="number"?l.selected=t.includes(n?Zs(a):a):l.selected=Vr(t,a)>-1}else l.selected=t.has(a);else if(vn(ws(l),t)){e.selectedIndex!==r&&(e.selectedIndex=r);return}}!s&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function ws(e){return"_value"in e?e._value:e.value}function yd(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const bd={created(e,t,n){ji(e,t,n,null,"created")},mounted(e,t,n){ji(e,t,n,null,"mounted")},beforeUpdate(e,t,n,s){ji(e,t,n,s,"beforeUpdate")},updated(e,t,n,s){ji(e,t,n,s,"updated")}};function _d(e,t){switch(e){case"SELECT":return vd;case"TEXTAREA":return wr;default:switch(t){case"checkbox":return Zl;case"radio":return Xl;default:return wr}}}function ji(e,t,n,s,i){const o=_d(e.tagName,n.props&&n.props.type)[i];o&&o(e,t,n,s)}function Av(){wr.getSSRProps=({value:e})=>({value:e}),Xl.getSSRProps=({value:e},t)=>{if(t.props&&vn(t.props.value,e))return{checked:!0}},Zl.getSSRProps=({value:e},t)=>{if(J(e)){if(t.props&&Vr(e,t.props.value)>-1)return{checked:!0}}else if(Qn(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},bd.getSSRProps=(e,t)=>{if(typeof t.type!="string")return;const n=_d(t.type.toUpperCase(),t.props&&t.props.type);if(n.getSSRProps)return n.getSSRProps(e,t)}}const Pv=["ctrl","shift","alt","meta"],Ov={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>Pv.some(n=>e[`${n}Key`]&&!t.includes(n))},Nv=(e,t)=>{const n=e._withMods||(e._withMods={}),s=t.join(".");return n[s]||(n[s]=(i,...r)=>{for(let o=0;o<t.length;o++){const l=Ov[t[o]];if(l&&l(i,t))return}return e(i,...r)})},Mv={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Iv=(e,t)=>{const n=e._withKeys||(e._withKeys={}),s=t.join(".");return n[s]||(n[s]=i=>{if(!("key"in i))return;const r=pt(i.key);if(t.some(o=>o===r||Mv[o]===r))return e(i)})},Sd=pe({patchProp:yv},Xg);let Ws,mc=!1;function wd(){return Ws||(Ws=qf(Sd))}function Cd(){return Ws=mc?Ws:Bf(Sd),mc=!0,Ws}const Jo=(...e)=>{wd().render(...e)},Ed=(...e)=>{Cd().hydrate(...e)},ea=(...e)=>{const t=wd().createApp(...e),{mount:n}=t;return t.mount=s=>{const i=xd(s);if(!i)return;const r=t._component;!se(r)&&!r.render&&!r.template&&(r.template=i.innerHTML),i.innerHTML="";const o=n(i,!1,kd(i));return i instanceof Element&&(i.removeAttribute("v-cloak"),i.setAttribute("data-v-app","")),o},t},Lv=(...e)=>{const t=Cd().createApp(...e),{mount:n}=t;return t.mount=s=>{const i=xd(s);if(i)return n(i,!0,kd(i))},t};function kd(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function xd(e){return le(e)?document.querySelector(e):e}let gc=!1;const $v=()=>{gc||(gc=!0,Av(),iv())};var Vv=Object.freeze(Object.defineProperty({__proto__:null,Transition:zn,TransitionGroup:gd,VueElement:Yr,createApp:ea,createSSRApp:Lv,defineCustomElement:dd,defineSSRCustomElement:_v,hydrate:Ed,initDirectivesForSSR:$v,render:Jo,useCssModule:wv,useCssVars:rv,vModelCheckbox:Zl,vModelDynamic:bd,vModelRadio:Xl,vModelSelect:vd,vModelText:wr,vShow:ud,withKeys:Iv,withModifiers:Nv,EffectScope:Cl,ReactiveEffect:bs,TrackOpTypes:fm,TriggerOpTypes:dm,customRef:sf,effect:Ip,effectScope:El,getCurrentScope:kl,isProxy:Ol,isReactive:Wt,isReadonly:Dn,isRef:Me,isShallow:Xs,markRaw:Jt,onScopeDispose:Bu,proxyRefs:Il,reactive:Sn,readonly:Pl,ref:ce,shallowReactive:Al,shallowReadonly:tm,shallowRef:tf,stop:Lp,toRaw:ie,toRef:um,toRefs:rf,toValue:rm,triggerRef:im,unref:Gt,camelize:Ae,capitalize:Yn,normalizeClass:bi,normalizeProps:_p,normalizeStyle:yi,toDisplayString:Np,toHandlerKey:hs,BaseTransition:Sf,BaseTransitionPropsValidators:jl,Comment:Xe,DeprecationTypes:Yg,ErrorCodes:pm,ErrorTypeStrings:jg,Fragment:We,KeepAlive:jm,Static:$n,Suspense:Nm,Teleport:Uf,Text:jn,assertNumber:hm,callWithAsyncErrorHandling:mt,callWithErrorHandling:Qt,cloneVNode:qt,compatUtils:Qg,computed:L,createBlock:Wr,createCommentVNode:Ng,createElementBlock:Rg,createElementVNode:Ql,createHydrationRenderer:Bf,createPropsRestProxy:lg,createRenderer:qf,createSlots:zm,createStaticVNode:Og,createTextVNode:Yl,createVNode:ke,defineAsyncComponent:Dm,defineComponent:Os,defineEmits:Jm,defineExpose:Zm,defineModel:tg,defineOptions:Xm,defineProps:Ym,defineSlots:eg,devtools:Ug,getCurrentInstance:Ee,getTransitionRawChildren:Ur,guardReactiveProps:Qf,h:F,handleError:Xn,hasInjectionContext:Mf,initCustomFormatter:Bg,inject:at,isMemoSame:sd,isRuntimeOnly:$g,isVNode:yn,mergeDefaults:rg,mergeModels:og,mergeProps:Yf,nextTick:Ge,onActivated:Ul,onBeforeMount:Ef,onBeforeUnmount:vt,onBeforeUpdate:Kl,onDeactivated:wi,onErrorCaptured:Rf,onMounted:Bt,onRenderTracked:Tf,onRenderTriggered:xf,onServerPrefetch:kf,onUnmounted:Ci,onUpdated:zr,openBlock:Ei,popScopeId:wm,provide:Us,pushScopeId:Sm,queuePostFlushCb:pr,registerRuntimeCompiler:ed,renderList:Km,renderSlot:Wm,resolveComponent:df,resolveDirective:Pm,resolveDynamicComponent:Am,resolveFilter:Gg,resolveTransitionHooks:_s,setBlockTracking:jo,setDevtoolsHook:Kg,setTransitionHooks:Hn,ssrContextKey:gf,ssrUtils:Wg,toHandlers:Gm,transformVNodeArgs:Ag,useAttrs:ig,useModel:qg,useSSRContext:vf,useSlots:sg,useTransitionState:Hl,version:id,warn:Hg,watch:Ce,watchEffect:Fm,watchPostEffect:yf,watchSyncEffect:bf,withAsyncContext:ag,withCtx:$l,withDefaults:ng,withDirectives:Dl,withMemo:Dg,withScopeId:Cm},Symbol.toStringTag,{value:"Module"}));/**
* @vue/compiler-core v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const oi=Symbol(""),Gs=Symbol(""),ta=Symbol(""),Cr=Symbol(""),Td=Symbol(""),Wn=Symbol(""),Rd=Symbol(""),Ad=Symbol(""),na=Symbol(""),sa=Symbol(""),xi=Symbol(""),ia=Symbol(""),Pd=Symbol(""),ra=Symbol(""),oa=Symbol(""),la=Symbol(""),aa=Symbol(""),ca=Symbol(""),ua=Symbol(""),Od=Symbol(""),Nd=Symbol(""),Jr=Symbol(""),Er=Symbol(""),fa=Symbol(""),da=Symbol(""),li=Symbol(""),Ti=Symbol(""),ha=Symbol(""),Zo=Symbol(""),Fv=Symbol(""),Xo=Symbol(""),kr=Symbol(""),qv=Symbol(""),Bv=Symbol(""),pa=Symbol(""),Dv=Symbol(""),Hv=Symbol(""),ma=Symbol(""),Md=Symbol(""),Cs={[oi]:"Fragment",[Gs]:"Teleport",[ta]:"Suspense",[Cr]:"KeepAlive",[Td]:"BaseTransition",[Wn]:"openBlock",[Rd]:"createBlock",[Ad]:"createElementBlock",[na]:"createVNode",[sa]:"createElementVNode",[xi]:"createCommentVNode",[ia]:"createTextVNode",[Pd]:"createStaticVNode",[ra]:"resolveComponent",[oa]:"resolveDynamicComponent",[la]:"resolveDirective",[aa]:"resolveFilter",[ca]:"withDirectives",[ua]:"renderList",[Od]:"renderSlot",[Nd]:"createSlots",[Jr]:"toDisplayString",[Er]:"mergeProps",[fa]:"normalizeClass",[da]:"normalizeStyle",[li]:"normalizeProps",[Ti]:"guardReactiveProps",[ha]:"toHandlers",[Zo]:"camelize",[Fv]:"capitalize",[Xo]:"toHandlerKey",[kr]:"setBlockTracking",[qv]:"pushScopeId",[Bv]:"popScopeId",[pa]:"withCtx",[Dv]:"unref",[Hv]:"isRef",[ma]:"withMemo",[Md]:"isMemoSame"};function jv(e){Object.getOwnPropertySymbols(e).forEach(t=>{Cs[t]=e[t]})}const yt={start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0},source:""};function Uv(e,t=""){return{type:0,source:t,children:e,helpers:new Set,components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:yt}}function ai(e,t,n,s,i,r,o,l=!1,a=!1,c=!1,u=yt){return e&&(l?(e.helper(Wn),e.helper(xs(e.inSSR,c))):e.helper(ks(e.inSSR,c)),o&&e.helper(ca)),{type:13,tag:t,props:n,children:s,patchFlag:i,dynamicProps:r,directives:o,isBlock:l,disableTracking:a,isComponent:c,loc:u}}function Ri(e,t=yt){return{type:17,loc:t,elements:e}}function wt(e,t=yt){return{type:15,loc:t,properties:e}}function Ne(e,t){return{type:16,loc:yt,key:le(e)?ae(e,!0):e,value:t}}function ae(e,t=!1,n=yt,s=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:s}}function Ot(e,t=yt){return{type:8,loc:t,children:e}}function qe(e,t=[],n=yt){return{type:14,loc:n,callee:e,arguments:t}}function Es(e,t=void 0,n=!1,s=!1,i=yt){return{type:18,params:e,returns:t,newline:n,isSlot:s,loc:i}}function el(e,t,n,s=!0){return{type:19,test:e,consequent:t,alternate:n,newline:s,loc:yt}}function Kv(e,t,n=!1){return{type:20,index:e,value:t,isVNode:n,loc:yt}}function zv(e){return{type:21,body:e,loc:yt}}function ks(e,t){return e||t?na:sa}function xs(e,t){return e||t?Rd:Ad}function ga(e,{helper:t,removeHelper:n,inSSR:s}){e.isBlock||(e.isBlock=!0,n(ks(s,e.isComponent)),t(Wn),t(xs(s,e.isComponent)))}const vc=new Uint8Array([123,123]),yc=new Uint8Array([125,125]);function bc(e){return e>=97&&e<=122||e>=65&&e<=90}function dt(e){return e===32||e===10||e===9||e===12||e===13}function nn(e){return e===47||e===62||dt(e)}function xr(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}const Qe={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101]),TextareaEnd:new Uint8Array([60,47,116,101,120,116,97,114,101,97])};class Wv{constructor(t,n){this.stack=t,this.cbs=n,this.state=1,this.buffer="",this.sectionStart=0,this.index=0,this.entityStart=0,this.baseState=1,this.inRCDATA=!1,this.inXML=!1,this.inVPre=!1,this.newlines=[],this.mode=0,this.delimiterOpen=vc,this.delimiterClose=yc,this.delimiterIndex=-1,this.currentSequence=void 0,this.sequenceIndex=0}get inSFCRoot(){return this.mode===2&&this.stack.length===0}reset(){this.state=1,this.mode=0,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=1,this.inRCDATA=!1,this.currentSequence=void 0,this.newlines.length=0,this.delimiterOpen=vc,this.delimiterClose=yc}getPos(t){let n=1,s=t+1;for(let i=this.newlines.length-1;i>=0;i--){const r=this.newlines[i];if(t>r){n=i+2,s=t-r;break}}return{column:s,line:n,offset:t}}peek(){return this.buffer.charCodeAt(this.index+1)}stateText(t){t===60?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=5,this.sectionStart=this.index):!this.inVPre&&t===this.delimiterOpen[0]&&(this.state=2,this.delimiterIndex=0,this.stateInterpolationOpen(t))}stateInterpolationOpen(t){if(t===this.delimiterOpen[this.delimiterIndex])if(this.delimiterIndex===this.delimiterOpen.length-1){const n=this.index+1-this.delimiterOpen.length;n>this.sectionStart&&this.cbs.ontext(this.sectionStart,n),this.state=3,this.sectionStart=n}else this.delimiterIndex++;else this.inRCDATA?(this.state=32,this.stateInRCDATA(t)):(this.state=1,this.stateText(t))}stateInterpolation(t){t===this.delimiterClose[0]&&(this.state=4,this.delimiterIndex=0,this.stateInterpolationClose(t))}stateInterpolationClose(t){t===this.delimiterClose[this.delimiterIndex]?this.delimiterIndex===this.delimiterClose.length-1?(this.cbs.oninterpolation(this.sectionStart,this.index+1),this.inRCDATA?this.state=32:this.state=1,this.sectionStart=this.index+1):this.delimiterIndex++:(this.state=3,this.stateInterpolation(t))}stateSpecialStartSequence(t){const n=this.sequenceIndex===this.currentSequence.length;if(!(n?nn(t):(t|32)===this.currentSequence[this.sequenceIndex]))this.inRCDATA=!1;else if(!n){this.sequenceIndex++;return}this.sequenceIndex=0,this.state=6,this.stateInTagName(t)}stateInRCDATA(t){if(this.sequenceIndex===this.currentSequence.length){if(t===62||dt(t)){const n=this.index-this.currentSequence.length;if(this.sectionStart<n){const s=this.index;this.index=n,this.cbs.ontext(this.sectionStart,n),this.index=s}this.sectionStart=n+2,this.stateInClosingTagName(t),this.inRCDATA=!1;return}this.sequenceIndex=0}(t|32)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:this.sequenceIndex===0?this.currentSequence===Qe.TitleEnd||this.currentSequence===Qe.TextareaEnd&&!this.inSFCRoot?t===this.delimiterOpen[0]&&(this.state=2,this.delimiterIndex=0,this.stateInterpolationOpen(t)):this.fastForwardTo(60)&&(this.sequenceIndex=1):this.sequenceIndex=Number(t===60)}stateCDATASequence(t){t===Qe.Cdata[this.sequenceIndex]?++this.sequenceIndex===Qe.Cdata.length&&(this.state=28,this.currentSequence=Qe.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=23,this.stateInDeclaration(t))}fastForwardTo(t){for(;++this.index<this.buffer.length;){const n=this.buffer.charCodeAt(this.index);if(n===10&&this.newlines.push(this.index),n===t)return!0}return this.index=this.buffer.length-1,!1}stateInCommentLike(t){t===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===Qe.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index-2):this.cbs.oncomment(this.sectionStart,this.index-2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=1):this.sequenceIndex===0?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):t!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)}startSpecial(t,n){this.enterRCDATA(t,n),this.state=31}enterRCDATA(t,n){this.inRCDATA=!0,this.currentSequence=t,this.sequenceIndex=n}stateBeforeTagName(t){t===33?(this.state=22,this.sectionStart=this.index+1):t===63?(this.state=24,this.sectionStart=this.index+1):bc(t)?(this.sectionStart=this.index,this.mode===0?this.state=6:this.inSFCRoot?this.state=34:this.inXML?this.state=6:t===116?this.state=30:this.state=t===115?29:6):t===47?this.state=8:(this.state=1,this.stateText(t))}stateInTagName(t){nn(t)&&this.handleTagName(t)}stateInSFCRootTagName(t){if(nn(t)){const n=this.buffer.slice(this.sectionStart,this.index);n!=="template"&&this.enterRCDATA(xr("</"+n),0),this.handleTagName(t)}}handleTagName(t){this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=11,this.stateBeforeAttrName(t)}stateBeforeClosingTagName(t){dt(t)||(t===62?(this.state=1,this.sectionStart=this.index+1):(this.state=bc(t)?9:27,this.sectionStart=this.index))}stateInClosingTagName(t){(t===62||dt(t))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=10,this.stateAfterClosingTagName(t))}stateAfterClosingTagName(t){t===62&&(this.state=1,this.sectionStart=this.index+1)}stateBeforeAttrName(t){t===62?(this.cbs.onopentagend(this.index),this.inRCDATA?this.state=32:this.state=1,this.sectionStart=this.index+1):t===47?this.state=7:t===60&&this.peek()===47?(this.cbs.onopentagend(this.index),this.state=5,this.sectionStart=this.index):dt(t)||this.handleAttrStart(t)}handleAttrStart(t){t===118&&this.peek()===45?(this.state=13,this.sectionStart=this.index):t===46||t===58||t===64||t===35?(this.cbs.ondirname(this.index,this.index+1),this.state=14,this.sectionStart=this.index+1):(this.state=12,this.sectionStart=this.index)}stateInSelfClosingTag(t){t===62?(this.cbs.onselfclosingtag(this.index),this.state=1,this.sectionStart=this.index+1,this.inRCDATA=!1):dt(t)||(this.state=11,this.stateBeforeAttrName(t))}stateInAttrName(t){(t===61||nn(t))&&(this.cbs.onattribname(this.sectionStart,this.index),this.handleAttrNameEnd(t))}stateInDirName(t){t===61||nn(t)?(this.cbs.ondirname(this.sectionStart,this.index),this.handleAttrNameEnd(t)):t===58?(this.cbs.ondirname(this.sectionStart,this.index),this.state=14,this.sectionStart=this.index+1):t===46&&(this.cbs.ondirname(this.sectionStart,this.index),this.state=16,this.sectionStart=this.index+1)}stateInDirArg(t){t===61||nn(t)?(this.cbs.ondirarg(this.sectionStart,this.index),this.handleAttrNameEnd(t)):t===91?this.state=15:t===46&&(this.cbs.ondirarg(this.sectionStart,this.index),this.state=16,this.sectionStart=this.index+1)}stateInDynamicDirArg(t){t===93?this.state=14:(t===61||nn(t))&&(this.cbs.ondirarg(this.sectionStart,this.index+1),this.handleAttrNameEnd(t))}stateInDirModifier(t){t===61||nn(t)?(this.cbs.ondirmodifier(this.sectionStart,this.index),this.handleAttrNameEnd(t)):t===46&&(this.cbs.ondirmodifier(this.sectionStart,this.index),this.sectionStart=this.index+1)}handleAttrNameEnd(t){this.sectionStart=this.index,this.state=17,this.cbs.onattribnameend(this.index),this.stateAfterAttrName(t)}stateAfterAttrName(t){t===61?this.state=18:t===47||t===62?(this.cbs.onattribend(0,this.sectionStart),this.sectionStart=-1,this.state=11,this.stateBeforeAttrName(t)):dt(t)||(this.cbs.onattribend(0,this.sectionStart),this.handleAttrStart(t))}stateBeforeAttrValue(t){t===34?(this.state=19,this.sectionStart=this.index+1):t===39?(this.state=20,this.sectionStart=this.index+1):dt(t)||(this.sectionStart=this.index,this.state=21,this.stateInAttrValueNoQuotes(t))}handleInAttrValue(t,n){(t===n||this.fastForwardTo(n))&&(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(n===34?3:2,this.index+1),this.state=11)}stateInAttrValueDoubleQuotes(t){this.handleInAttrValue(t,34)}stateInAttrValueSingleQuotes(t){this.handleInAttrValue(t,39)}stateInAttrValueNoQuotes(t){dt(t)||t===62?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(1,this.index),this.state=11,this.stateBeforeAttrName(t)):(t===39||t===60||t===61||t===96)&&this.cbs.onerr(18,this.index)}stateBeforeDeclaration(t){t===91?(this.state=26,this.sequenceIndex=0):this.state=t===45?25:23}stateInDeclaration(t){(t===62||this.fastForwardTo(62))&&(this.state=1,this.sectionStart=this.index+1)}stateInProcessingInstruction(t){(t===62||this.fastForwardTo(62))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=1,this.sectionStart=this.index+1)}stateBeforeComment(t){t===45?(this.state=28,this.currentSequence=Qe.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=23}stateInSpecialComment(t){(t===62||this.fastForwardTo(62))&&(this.cbs.oncomment(this.sectionStart,this.index),this.state=1,this.sectionStart=this.index+1)}stateBeforeSpecialS(t){t===Qe.ScriptEnd[3]?this.startSpecial(Qe.ScriptEnd,4):t===Qe.StyleEnd[3]?this.startSpecial(Qe.StyleEnd,4):(this.state=6,this.stateInTagName(t))}stateBeforeSpecialT(t){t===Qe.TitleEnd[3]?this.startSpecial(Qe.TitleEnd,4):t===Qe.TextareaEnd[3]?this.startSpecial(Qe.TextareaEnd,4):(this.state=6,this.stateInTagName(t))}startEntity(){}stateInEntity(){}parse(t){for(this.buffer=t;this.index<this.buffer.length;){const n=this.buffer.charCodeAt(this.index);switch(n===10&&this.newlines.push(this.index),this.state){case 1:{this.stateText(n);break}case 2:{this.stateInterpolationOpen(n);break}case 3:{this.stateInterpolation(n);break}case 4:{this.stateInterpolationClose(n);break}case 31:{this.stateSpecialStartSequence(n);break}case 32:{this.stateInRCDATA(n);break}case 26:{this.stateCDATASequence(n);break}case 19:{this.stateInAttrValueDoubleQuotes(n);break}case 12:{this.stateInAttrName(n);break}case 13:{this.stateInDirName(n);break}case 14:{this.stateInDirArg(n);break}case 15:{this.stateInDynamicDirArg(n);break}case 16:{this.stateInDirModifier(n);break}case 28:{this.stateInCommentLike(n);break}case 27:{this.stateInSpecialComment(n);break}case 11:{this.stateBeforeAttrName(n);break}case 6:{this.stateInTagName(n);break}case 34:{this.stateInSFCRootTagName(n);break}case 9:{this.stateInClosingTagName(n);break}case 5:{this.stateBeforeTagName(n);break}case 17:{this.stateAfterAttrName(n);break}case 20:{this.stateInAttrValueSingleQuotes(n);break}case 18:{this.stateBeforeAttrValue(n);break}case 8:{this.stateBeforeClosingTagName(n);break}case 10:{this.stateAfterClosingTagName(n);break}case 29:{this.stateBeforeSpecialS(n);break}case 30:{this.stateBeforeSpecialT(n);break}case 21:{this.stateInAttrValueNoQuotes(n);break}case 7:{this.stateInSelfClosingTag(n);break}case 23:{this.stateInDeclaration(n);break}case 22:{this.stateBeforeDeclaration(n);break}case 25:{this.stateBeforeComment(n);break}case 24:{this.stateInProcessingInstruction(n);break}case 33:{this.stateInEntity();break}}this.index++}this.cleanup(),this.finish()}cleanup(){this.sectionStart!==this.index&&(this.state===1||this.state===32&&this.sequenceIndex===0?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):(this.state===19||this.state===20||this.state===21)&&(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}finish(){this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const t=this.buffer.length;this.sectionStart>=t||(this.state===28?this.currentSequence===Qe.CdataEnd?this.cbs.oncdata(this.sectionStart,t):this.cbs.oncomment(this.sectionStart,t):this.state===6||this.state===11||this.state===18||this.state===17||this.state===12||this.state===13||this.state===14||this.state===15||this.state===16||this.state===20||this.state===19||this.state===21||this.state===9||this.cbs.ontext(this.sectionStart,t))}emitCodePoint(t,n){}}function _c(e,{compatConfig:t}){const n=t&&t[e];return e==="MODE"?n||3:n}function Vn(e,t){const n=_c("MODE",t),s=_c(e,t);return n===3?s===!0:s!==!1}function ci(e,t,n,...s){return Vn(e,t)}function va(e){throw e}function Id(e){}function Re(e,t,n,s){const i=`https://vuejs.org/error-reference/#compiler-${e}`,r=new SyntaxError(String(i));return r.code=e,r.loc=t,r}const lt=e=>e.type===4&&e.isStatic;function Ld(e){switch(e){case"Teleport":case"teleport":return Gs;case"Suspense":case"suspense":return ta;case"KeepAlive":case"keep-alive":return Cr;case"BaseTransition":case"base-transition":return Td}}const Gv=/^\d|[^\$\w]/,ya=e=>!Gv.test(e),Qv=/[A-Za-z_$\xA0-\uFFFF]/,Yv=/[\.\?\w$\xA0-\uFFFF]/,Jv=/\s+[.[]\s*|\s*[.[]\s+/g,Zv=e=>{e=e.trim().replace(Jv,o=>o.trim());let t=0,n=[],s=0,i=0,r=null;for(let o=0;o<e.length;o++){const l=e.charAt(o);switch(t){case 0:if(l==="[")n.push(t),t=1,s++;else if(l==="(")n.push(t),t=2,i++;else if(!(o===0?Qv:Yv).test(l))return!1;break;case 1:l==="'"||l==='"'||l==="`"?(n.push(t),t=3,r=l):l==="["?s++:l==="]"&&(--s||(t=n.pop()));break;case 2:if(l==="'"||l==='"'||l==="`")n.push(t),t=3,r=l;else if(l==="(")i++;else if(l===")"){if(o===e.length-1)return!1;--i||(t=n.pop())}break;case 3:l===r&&(t=n.pop(),r=null);break}}return!s&&!i},$d=Zv;function Rt(e,t,n=!1){for(let s=0;s<e.props.length;s++){const i=e.props[s];if(i.type===7&&(n||i.exp)&&(le(t)?i.name===t:t.test(i.name)))return i}}function Zr(e,t,n=!1,s=!1){for(let i=0;i<e.props.length;i++){const r=e.props[i];if(r.type===6){if(n)continue;if(r.name===t&&(r.value||s))return r}else if(r.name==="bind"&&(r.exp||s)&&An(r.arg,t))return r}}function An(e,t){return!!(e&&lt(e)&&e.content===t)}function Xv(e){return e.props.some(t=>t.type===7&&t.name==="bind"&&(!t.arg||t.arg.type!==4||!t.arg.isStatic))}function go(e){return e.type===5||e.type===2}function ey(e){return e.type===7&&e.name==="slot"}function Tr(e){return e.type===1&&e.tagType===3}function Rr(e){return e.type===1&&e.tagType===2}const ty=new Set([li,Ti]);function Vd(e,t=[]){if(e&&!le(e)&&e.type===14){const n=e.callee;if(!le(n)&&ty.has(n))return Vd(e.arguments[0],t.concat(e))}return[e,t]}function Ar(e,t,n){let s,i=e.type===13?e.props:e.arguments[2],r=[],o;if(i&&!le(i)&&i.type===14){const l=Vd(i);i=l[0],r=l[1],o=r[r.length-1]}if(i==null||le(i))s=wt([t]);else if(i.type===14){const l=i.arguments[0];!le(l)&&l.type===15?Sc(t,l)||l.properties.unshift(t):i.callee===ha?s=qe(n.helper(Er),[wt([t]),i]):i.arguments.unshift(wt([t])),!s&&(s=i)}else i.type===15?(Sc(t,i)||i.properties.unshift(t),s=i):(s=qe(n.helper(Er),[wt([t]),i]),o&&o.callee===Ti&&(o=r[r.length-2]));e.type===13?o?o.arguments[0]=s:e.props=s:o?o.arguments[0]=s:e.arguments[2]=s}function Sc(e,t){let n=!1;if(e.key.type===4){const s=e.key.content;n=t.properties.some(i=>i.key.type===4&&i.key.content===s)}return n}function ui(e,t){return`_${t}_${e.replace(/[^\w]/g,(n,s)=>n==="-"?"_":e.charCodeAt(s).toString())}`}function ny(e){return e.type===14&&e.callee===ma?e.arguments[1].returns:e}const sy=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Fd={parseMode:"base",ns:0,delimiters:["{{","}}"],getNamespace:()=>0,isVoidTag:Xi,isPreTag:Xi,isCustomElement:Xi,onError:va,onWarn:Id,comments:!1,prefixIdentifiers:!1};let ye=Fd,fi=null,Fn="",Je=null,de=null,st="",Ut=-1,kn=-1,Pr=0,fn=!1,tl=null;const Pe=[],Oe=new Wv(Pe,{onerr:Dt,ontext(e,t){Ui(Ke(e,t),e,t)},ontextentity(e,t,n){Ui(e,t,n)},oninterpolation(e,t){if(fn)return Ui(Ke(e,t),e,t);let n=e+Oe.delimiterOpen.length,s=t-Oe.delimiterClose.length;for(;dt(Fn.charCodeAt(n));)n++;for(;dt(Fn.charCodeAt(s-1));)s--;let i=Ke(n,s);i.includes("&")&&(i=ye.decodeEntities(i,!1)),nl({type:5,content:ir(i,!1,Fe(n,s)),loc:Fe(e,t)})},onopentagname(e,t){const n=Ke(e,t);Je={type:1,tag:n,ns:ye.getNamespace(n,Pe[0],ye.ns),tagType:0,props:[],children:[],loc:Fe(e-1,t),codegenNode:void 0}},onopentagend(e){Cc(e)},onclosetag(e,t){const n=Ke(e,t);if(!ye.isVoidTag(n)){let s=!1;for(let i=0;i<Pe.length;i++)if(Pe[i].tag.toLowerCase()===n.toLowerCase()){s=!0,i>0&&Dt(24,Pe[0].loc.start.offset);for(let o=0;o<=i;o++){const l=Pe.shift();sr(l,t,o<i)}break}s||Dt(23,qd(e,60))}},onselfclosingtag(e){var t;const n=Je.tag;Je.isSelfClosing=!0,Cc(e),((t=Pe[0])==null?void 0:t.tag)===n&&sr(Pe.shift(),e)},onattribname(e,t){de={type:6,name:Ke(e,t),nameLoc:Fe(e,t),value:void 0,loc:Fe(e)}},ondirname(e,t){const n=Ke(e,t),s=n==="."||n===":"?"bind":n==="@"?"on":n==="#"?"slot":n.slice(2);if(!fn&&s===""&&Dt(26,e),fn||s==="")de={type:6,name:n,nameLoc:Fe(e,t),value:void 0,loc:Fe(e)};else if(de={type:7,name:s,rawName:n,exp:void 0,arg:void 0,modifiers:n==="."?["prop"]:[],loc:Fe(e)},s==="pre"){fn=Oe.inVPre=!0,tl=Je;const i=Je.props;for(let r=0;r<i.length;r++)i[r].type===7&&(i[r]=dy(i[r]))}},ondirarg(e,t){if(e===t)return;const n=Ke(e,t);if(fn)de.name+=n,Pn(de.nameLoc,t);else{const s=n[0]!=="[";de.arg=ir(s?n:n.slice(1,-1),s,Fe(e,t),s?3:0)}},ondirmodifier(e,t){const n=Ke(e,t);if(fn)de.name+="."+n,Pn(de.nameLoc,t);else if(de.name==="slot"){const s=de.arg;s&&(s.content+="."+n,Pn(s.loc,t))}else de.modifiers.push(n)},onattribdata(e,t){st+=Ke(e,t),Ut<0&&(Ut=e),kn=t},onattribentity(e,t,n){st+=e,Ut<0&&(Ut=t),kn=n},onattribnameend(e){const t=de.loc.start.offset,n=Ke(t,e);de.type===7&&(de.rawName=n),Je.props.some(s=>(s.type===7?s.rawName:s.name)===n)&&Dt(2,t)},onattribend(e,t){if(Je&&de){if(Pn(de.loc,t),e!==0)if(st.includes("&")&&(st=ye.decodeEntities(st,!0)),de.type===6)de.name==="class"&&(st=Dd(st).trim()),e===1&&!st&&Dt(13,t),de.value={type:2,content:st,loc:e===1?Fe(Ut,kn):Fe(Ut-1,kn+1)},Oe.inSFCRoot&&Je.tag==="template"&&de.name==="lang"&&st&&st!=="html"&&Oe.enterRCDATA(xr("</template"),0);else{let n=0;de.exp=ir(st,!1,Fe(Ut,kn),0,n),de.name==="for"&&(de.forParseResult=ry(de.exp));let s=-1;de.name==="bind"&&(s=de.modifiers.indexOf("sync"))>-1&&ci("COMPILER_V_BIND_SYNC",ye,de.loc,de.rawName)&&(de.name="model",de.modifiers.splice(s,1))}(de.type!==7||de.name!=="pre")&&Je.props.push(de)}st="",Ut=kn=-1},oncomment(e,t){ye.comments&&nl({type:3,content:Ke(e,t),loc:Fe(e-4,t+3)})},onend(){const e=Fn.length;for(let t=0;t<Pe.length;t++)sr(Pe[t],e-1),Dt(24,Pe[t].loc.start.offset)},oncdata(e,t){Pe[0].ns!==0?Ui(Ke(e,t),e,t):Dt(1,e-9)},onprocessinginstruction(e){(Pe[0]?Pe[0].ns:ye.ns)===0&&Dt(21,e-1)}}),wc=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,iy=/^\(|\)$/g;function ry(e){const t=e.loc,n=e.content,s=n.match(sy);if(!s)return;const[,i,r]=s,o=(f,d,h=!1)=>{const g=t.start.offset+d,T=g+f.length;return ir(f,!1,Fe(g,T),0,h?1:0)},l={source:o(r.trim(),n.indexOf(r,i.length)),value:void 0,key:void 0,index:void 0,finalized:!1};let a=i.trim().replace(iy,"").trim();const c=i.indexOf(a),u=a.match(wc);if(u){a=a.replace(wc,"").trim();const f=u[1].trim();let d;if(f&&(d=n.indexOf(f,c+a.length),l.key=o(f,d,!0)),u[2]){const h=u[2].trim();h&&(l.index=o(h,n.indexOf(h,l.key?d+f.length:c+a.length),!0))}}return a&&(l.value=o(a,c,!0)),l}function Ke(e,t){return Fn.slice(e,t)}function Cc(e){Oe.inSFCRoot&&(Je.innerLoc=Fe(e+1,e+1)),nl(Je);const{tag:t,ns:n}=Je;n===0&&ye.isPreTag(t)&&Pr++,ye.isVoidTag(t)?sr(Je,e):(Pe.unshift(Je),(n===1||n===2)&&(Oe.inXML=!0)),Je=null}function Ui(e,t,n){var s;{const o=(s=Pe[0])==null?void 0:s.tag;o!=="script"&&o!=="style"&&e.includes("&")&&(e=ye.decodeEntities(e,!1))}const i=Pe[0]||fi,r=i.children[i.children.length-1];(r==null?void 0:r.type)===2?(r.content+=e,Pn(r.loc,n)):i.children.push({type:2,content:e,loc:Fe(t,n)})}function sr(e,t,n=!1){n?Pn(e.loc,qd(t,60)):Pn(e.loc,t+1),Oe.inSFCRoot&&(e.children.length?e.innerLoc.end=pe({},e.children[e.children.length-1].loc.end):e.innerLoc.end=pe({},e.innerLoc.start),e.innerLoc.source=Ke(e.innerLoc.start.offset,e.innerLoc.end.offset));const{tag:s,ns:i}=e;fn||(s==="slot"?e.tagType=2:Ec(e)?e.tagType=3:ly(e)&&(e.tagType=1)),Oe.inRCDATA||(e.children=Bd(e.children,e.tag)),i===0&&ye.isPreTag(s)&&Pr--,tl===e&&(fn=Oe.inVPre=!1,tl=null),Oe.inXML&&(Pe[0]?Pe[0].ns:ye.ns)===0&&(Oe.inXML=!1);{const r=e.props;if(!Oe.inSFCRoot&&Vn("COMPILER_NATIVE_TEMPLATE",ye)&&e.tag==="template"&&!Ec(e)){const l=Pe[0]||fi,a=l.children.indexOf(e);l.children.splice(a,1,...e.children)}const o=r.find(l=>l.type===6&&l.name==="inline-template");o&&ci("COMPILER_INLINE_TEMPLATE",ye,o.loc)&&e.children.length&&(o.value={type:2,content:Ke(e.children[0].loc.start.offset,e.children[e.children.length-1].loc.end.offset),loc:o.loc})}}function qd(e,t){let n=e;for(;Fn.charCodeAt(n)!==t&&n>=0;)n--;return n}const oy=new Set(["if","else","else-if","for","slot"]);function Ec({tag:e,props:t}){if(e==="template"){for(let n=0;n<t.length;n++)if(t[n].type===7&&oy.has(t[n].name))return!0}return!1}function ly({tag:e,props:t}){var n;if(ye.isCustomElement(e))return!1;if(e==="component"||ay(e.charCodeAt(0))||Ld(e)||((n=ye.isBuiltInComponent)==null?void 0:n.call(ye,e))||ye.isNativeTag&&!ye.isNativeTag(e))return!0;for(let s=0;s<t.length;s++){const i=t[s];if(i.type===6){if(i.name==="is"&&i.value){if(i.value.content.startsWith("vue:"))return!0;if(ci("COMPILER_IS_ON_ELEMENT",ye,i.loc))return!0}}else if(i.name==="bind"&&An(i.arg,"is")&&ci("COMPILER_IS_ON_ELEMENT",ye,i.loc))return!0}return!1}function ay(e){return e>64&&e<91}const cy=/\r\n/g;function Bd(e,t){var n,s;const i=ye.whitespace!=="preserve";let r=!1;for(let o=0;o<e.length;o++){const l=e[o];if(l.type===2)if(Pr)l.content=l.content.replace(cy,`
`);else if(uy(l.content)){const a=(n=e[o-1])==null?void 0:n.type,c=(s=e[o+1])==null?void 0:s.type;!a||!c||i&&(a===3&&(c===3||c===1)||a===1&&(c===3||c===1&&fy(l.content)))?(r=!0,e[o]=null):l.content=" "}else i&&(l.content=Dd(l.content))}if(Pr&&t&&ye.isPreTag(t)){const o=e[0];o&&o.type===2&&(o.content=o.content.replace(/^\r?\n/,""))}return r?e.filter(Boolean):e}function uy(e){for(let t=0;t<e.length;t++)if(!dt(e.charCodeAt(t)))return!1;return!0}function fy(e){for(let t=0;t<e.length;t++){const n=e.charCodeAt(t);if(n===10||n===13)return!0}return!1}function Dd(e){let t="",n=!1;for(let s=0;s<e.length;s++)dt(e.charCodeAt(s))?n||(t+=" ",n=!0):(t+=e[s],n=!1);return t}function nl(e){(Pe[0]||fi).children.push(e)}function Fe(e,t){return{start:Oe.getPos(e),end:t==null?t:Oe.getPos(t),source:t==null?t:Ke(e,t)}}function Pn(e,t){e.end=Oe.getPos(t),e.source=Ke(e.start.offset,t)}function dy(e){const t={type:6,name:e.rawName,nameLoc:Fe(e.loc.start.offset,e.loc.start.offset+e.rawName.length),value:void 0,loc:e.loc};if(e.exp){const n=e.exp.loc;n.end.offset<e.loc.end.offset&&(n.start.offset--,n.start.column--,n.end.offset++,n.end.column++),t.value={type:2,content:e.exp.content,loc:n}}return t}function ir(e,t=!1,n,s=0,i=0){return ae(e,t,n,s)}function Dt(e,t,n){ye.onError(Re(e,Fe(t,t)))}function hy(){Oe.reset(),Je=null,de=null,st="",Ut=-1,kn=-1,Pe.length=0}function py(e,t){if(hy(),Fn=e,ye=pe({},Fd),t){let i;for(i in t)t[i]!=null&&(ye[i]=t[i])}Oe.mode=ye.parseMode==="html"?1:ye.parseMode==="sfc"?2:0,Oe.inXML=ye.ns===1||ye.ns===2;const n=t==null?void 0:t.delimiters;n&&(Oe.delimiterOpen=xr(n[0]),Oe.delimiterClose=xr(n[1]));const s=fi=Uv([],e);return Oe.parse(Fn),s.loc=Fe(0,e.length),s.children=Bd(s.children),fi=null,s}function my(e,t){rr(e,t,Hd(e,e.children[0]))}function Hd(e,t){const{children:n}=e;return n.length===1&&t.type===1&&!Rr(t)}function rr(e,t,n=!1){const{children:s}=e,i=s.length;let r=0;for(let o=0;o<s.length;o++){const l=s[o];if(l.type===1&&l.tagType===0){const a=n?0:Ct(l,t);if(a>0){if(a>=2){l.codegenNode.patchFlag=-1+"",l.codegenNode=t.hoist(l.codegenNode),r++;continue}}else{const c=l.codegenNode;if(c.type===13){const u=zd(c);if((!u||u===512||u===1)&&Ud(l,t)>=2){const f=Kd(l);f&&(c.props=t.hoist(f))}c.dynamicProps&&(c.dynamicProps=t.hoist(c.dynamicProps))}}}if(l.type===1){const a=l.tagType===1;a&&t.scopes.vSlot++,rr(l,t),a&&t.scopes.vSlot--}else if(l.type===11)rr(l,t,l.children.length===1);else if(l.type===9)for(let a=0;a<l.branches.length;a++)rr(l.branches[a],t,l.branches[a].children.length===1)}if(r&&t.transformHoist&&t.transformHoist(s,t,e),r&&r===i&&e.type===1&&e.tagType===0&&e.codegenNode&&e.codegenNode.type===13&&J(e.codegenNode.children)){const o=t.hoist(Ri(e.codegenNode.children));t.hmr&&(o.content=`[...${o.content}]`),e.codegenNode.children=o}}function Ct(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(e.tagType!==0)return 0;const s=n.get(e);if(s!==void 0)return s;const i=e.codegenNode;if(i.type!==13||i.isBlock&&e.tag!=="svg"&&e.tag!=="foreignObject")return 0;if(zd(i))return n.set(e,0),0;{let l=3;const a=Ud(e,t);if(a===0)return n.set(e,0),0;a<l&&(l=a);for(let c=0;c<e.children.length;c++){const u=Ct(e.children[c],t);if(u===0)return n.set(e,0),0;u<l&&(l=u)}if(l>1)for(let c=0;c<e.props.length;c++){const u=e.props[c];if(u.type===7&&u.name==="bind"&&u.exp){const f=Ct(u.exp,t);if(f===0)return n.set(e,0),0;f<l&&(l=f)}}if(i.isBlock){for(let c=0;c<e.props.length;c++)if(e.props[c].type===7)return n.set(e,0),0;t.removeHelper(Wn),t.removeHelper(xs(t.inSSR,i.isComponent)),i.isBlock=!1,t.helper(ks(t.inSSR,i.isComponent))}return n.set(e,l),l}case 2:case 3:return 3;case 9:case 11:case 10:return 0;case 5:case 12:return Ct(e.content,t);case 4:return e.constType;case 8:let o=3;for(let l=0;l<e.children.length;l++){const a=e.children[l];if(le(a)||Nt(a))continue;const c=Ct(a,t);if(c===0)return 0;c<o&&(o=c)}return o;default:return 0}}const gy=new Set([fa,da,li,Ti]);function jd(e,t){if(e.type===14&&!le(e.callee)&&gy.has(e.callee)){const n=e.arguments[0];if(n.type===4)return Ct(n,t);if(n.type===14)return jd(n,t)}return 0}function Ud(e,t){let n=3;const s=Kd(e);if(s&&s.type===15){const{properties:i}=s;for(let r=0;r<i.length;r++){const{key:o,value:l}=i[r],a=Ct(o,t);if(a===0)return a;a<n&&(n=a);let c;if(l.type===4?c=Ct(l,t):l.type===14?c=jd(l,t):c=0,c===0)return c;c<n&&(n=c)}}return n}function Kd(e){const t=e.codegenNode;if(t.type===13)return t.props}function zd(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function vy(e,{filename:t="",prefixIdentifiers:n=!1,hoistStatic:s=!1,hmr:i=!1,cacheHandlers:r=!1,nodeTransforms:o=[],directiveTransforms:l={},transformHoist:a=null,isBuiltInComponent:c=$e,isCustomElement:u=$e,expressionPlugins:f=[],scopeId:d=null,slotted:h=!0,ssr:g=!1,inSSR:T=!1,ssrCssVars:x="",bindingMetadata:A=me,inline:v=!1,isTS:p=!1,onError:E=va,onWarn:w=Id,compatConfig:k}){const N=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),C={filename:t,selfName:N&&Yn(Ae(N[1])),prefixIdentifiers:n,hoistStatic:s,hmr:i,cacheHandlers:r,nodeTransforms:o,directiveTransforms:l,transformHoist:a,isBuiltInComponent:c,isCustomElement:u,expressionPlugins:f,scopeId:d,slotted:h,ssr:g,inSSR:T,ssrCssVars:x,bindingMetadata:A,inline:v,isTS:p,onError:E,onWarn:w,compatConfig:k,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new WeakMap,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(y){const S=C.helpers.get(y)||0;return C.helpers.set(y,S+1),y},removeHelper(y){const S=C.helpers.get(y);if(S){const R=S-1;R?C.helpers.set(y,R):C.helpers.delete(y)}},helperString(y){return`_${Cs[C.helper(y)]}`},replaceNode(y){C.parent.children[C.childIndex]=C.currentNode=y},removeNode(y){const S=C.parent.children,R=y?S.indexOf(y):C.currentNode?C.childIndex:-1;!y||y===C.currentNode?(C.currentNode=null,C.onNodeRemoved()):C.childIndex>R&&(C.childIndex--,C.onNodeRemoved()),C.parent.children.splice(R,1)},onNodeRemoved:$e,addIdentifiers(y){},removeIdentifiers(y){},hoist(y){le(y)&&(y=ae(y)),C.hoists.push(y);const S=ae(`_hoisted_${C.hoists.length}`,!1,y.loc,2);return S.hoisted=y,S},cache(y,S=!1){return Kv(C.cached++,y,S)}};return C.filters=new Set,C}function yy(e,t){const n=vy(e,t);Xr(e,n),t.hoistStatic&&my(e,n),t.ssr||by(e,n),e.helpers=new Set([...n.helpers.keys()]),e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached,e.transformed=!0,e.filters=[...n.filters]}function by(e,t){const{helper:n}=t,{children:s}=e;if(s.length===1){const i=s[0];if(Hd(e,i)&&i.codegenNode){const r=i.codegenNode;r.type===13&&ga(r,t),e.codegenNode=r}else e.codegenNode=i}else if(s.length>1){let i=64;e.codegenNode=ai(t,n(oi),void 0,e.children,i+"",void 0,void 0,!0,void 0,!1)}}function _y(e,t){let n=0;const s=()=>{n--};for(;n<e.children.length;n++){const i=e.children[n];le(i)||(t.parent=e,t.childIndex=n,t.onNodeRemoved=s,Xr(i,t))}}function Xr(e,t){t.currentNode=e;const{nodeTransforms:n}=t,s=[];for(let r=0;r<n.length;r++){const o=n[r](e,t);if(o&&(J(o)?s.push(...o):s.push(o)),t.currentNode)e=t.currentNode;else return}switch(e.type){case 3:t.ssr||t.helper(xi);break;case 5:t.ssr||t.helper(Jr);break;case 9:for(let r=0;r<e.branches.length;r++)Xr(e.branches[r],t);break;case 10:case 11:case 1:case 0:_y(e,t);break}t.currentNode=e;let i=s.length;for(;i--;)s[i]()}function Wd(e,t){const n=le(e)?s=>s===e:s=>e.test(s);return(s,i)=>{if(s.type===1){const{props:r}=s;if(s.tagType===3&&r.some(ey))return;const o=[];for(let l=0;l<r.length;l++){const a=r[l];if(a.type===7&&n(a.name)){r.splice(l,1),l--;const c=t(s,a,i);c&&o.push(c)}}return o}}}const eo="/*#__PURE__*/",Gd=e=>`${Cs[e]}: _${Cs[e]}`;function Sy(e,{mode:t="function",prefixIdentifiers:n=t==="module",sourceMap:s=!1,filename:i="template.vue.html",scopeId:r=null,optimizeImports:o=!1,runtimeGlobalName:l="Vue",runtimeModuleName:a="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:f=!1,inSSR:d=!1}){const h={mode:t,prefixIdentifiers:n,sourceMap:s,filename:i,scopeId:r,optimizeImports:o,runtimeGlobalName:l,runtimeModuleName:a,ssrRuntimeModuleName:c,ssr:u,isTS:f,inSSR:d,source:e.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper(T){return`_${Cs[T]}`},push(T,x=-2,A){h.code+=T},indent(){g(++h.indentLevel)},deindent(T=!1){T?--h.indentLevel:g(--h.indentLevel)},newline(){g(h.indentLevel)}};function g(T){h.push(`
`+"  ".repeat(T),0)}return h}function wy(e,t={}){const n=Sy(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:s,push:i,prefixIdentifiers:r,indent:o,deindent:l,newline:a,scopeId:c,ssr:u}=n,f=Array.from(e.helpers),d=f.length>0,h=!r&&s!=="module";Cy(e,n);const T=u?"ssrRender":"render",A=(u?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ");if(i(`function ${T}(${A}) {`),o(),h&&(i("with (_ctx) {"),o(),d&&(i(`const { ${f.map(Gd).join(", ")} } = _Vue
`,-1),a())),e.components.length&&(vo(e.components,"component",n),(e.directives.length||e.temps>0)&&a()),e.directives.length&&(vo(e.directives,"directive",n),e.temps>0&&a()),e.filters&&e.filters.length&&(a(),vo(e.filters,"filter",n),a()),e.temps>0){i("let ");for(let v=0;v<e.temps;v++)i(`${v>0?", ":""}_temp${v}`)}return(e.components.length||e.directives.length||e.temps)&&(i(`
`,0),a()),u||i("return "),e.codegenNode?et(e.codegenNode,n):i("null"),h&&(l(),i("}")),l(),i("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}function Cy(e,t){const{ssr:n,prefixIdentifiers:s,push:i,newline:r,runtimeModuleName:o,runtimeGlobalName:l,ssrRuntimeModuleName:a}=t,c=l,u=Array.from(e.helpers);if(u.length>0&&(i(`const _Vue = ${c}
`,-1),e.hoists.length)){const f=[na,sa,xi,ia,Pd].filter(d=>u.includes(d)).map(Gd).join(", ");i(`const { ${f} } = _Vue
`,-1)}Ey(e.hoists,t),r(),i("return ")}function vo(e,t,{helper:n,push:s,newline:i,isTS:r}){const o=n(t==="filter"?aa:t==="component"?ra:la);for(let l=0;l<e.length;l++){let a=e[l];const c=a.endsWith("__self");c&&(a=a.slice(0,-6)),s(`const ${ui(a,t)} = ${o}(${JSON.stringify(a)}${c?", true":""})${r?"!":""}`),l<e.length-1&&i()}}function Ey(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:s,helper:i,scopeId:r,mode:o}=t;s();for(let l=0;l<e.length;l++){const a=e[l];a&&(n(`const _hoisted_${l+1} = `),et(a,t),s())}t.pure=!1}function ba(e,t){const n=e.length>3||!1;t.push("["),n&&t.indent(),Ai(e,t,n),n&&t.deindent(),t.push("]")}function Ai(e,t,n=!1,s=!0){const{push:i,newline:r}=t;for(let o=0;o<e.length;o++){const l=e[o];le(l)?i(l,-3):J(l)?ba(l,t):et(l,t),o<e.length-1&&(n?(s&&i(","),r()):s&&i(", "))}}function et(e,t){if(le(e)){t.push(e,-3);return}if(Nt(e)){t.push(t.helper(e));return}switch(e.type){case 1:case 9:case 11:et(e.codegenNode,t);break;case 2:ky(e,t);break;case 4:Qd(e,t);break;case 5:xy(e,t);break;case 12:et(e.codegenNode,t);break;case 8:Yd(e,t);break;case 3:Ry(e,t);break;case 13:Ay(e,t);break;case 14:Oy(e,t);break;case 15:Ny(e,t);break;case 17:My(e,t);break;case 18:Iy(e,t);break;case 19:Ly(e,t);break;case 20:$y(e,t);break;case 21:Ai(e.body,t,!0,!1);break}}function ky(e,t){t.push(JSON.stringify(e.content),-3,e)}function Qd(e,t){const{content:n,isStatic:s}=e;t.push(s?JSON.stringify(n):n,-3,e)}function xy(e,t){const{push:n,helper:s,pure:i}=t;i&&n(eo),n(`${s(Jr)}(`),et(e.content,t),n(")")}function Yd(e,t){for(let n=0;n<e.children.length;n++){const s=e.children[n];le(s)?t.push(s,-3):et(s,t)}}function Ty(e,t){const{push:n}=t;if(e.type===8)n("["),Yd(e,t),n("]");else if(e.isStatic){const s=ya(e.content)?e.content:JSON.stringify(e.content);n(s,-2,e)}else n(`[${e.content}]`,-3,e)}function Ry(e,t){const{push:n,helper:s,pure:i}=t;i&&n(eo),n(`${s(xi)}(${JSON.stringify(e.content)})`,-3,e)}function Ay(e,t){const{push:n,helper:s,pure:i}=t,{tag:r,props:o,children:l,patchFlag:a,dynamicProps:c,directives:u,isBlock:f,disableTracking:d,isComponent:h}=e;u&&n(s(ca)+"("),f&&n(`(${s(Wn)}(${d?"true":""}), `),i&&n(eo);const g=f?xs(t.inSSR,h):ks(t.inSSR,h);n(s(g)+"(",-2,e),Ai(Py([r,o,l,a,c]),t),n(")"),f&&n(")"),u&&(n(", "),et(u,t),n(")"))}function Py(e){let t=e.length;for(;t--&&e[t]==null;);return e.slice(0,t+1).map(n=>n||"null")}function Oy(e,t){const{push:n,helper:s,pure:i}=t,r=le(e.callee)?e.callee:s(e.callee);i&&n(eo),n(r+"(",-2,e),Ai(e.arguments,t),n(")")}function Ny(e,t){const{push:n,indent:s,deindent:i,newline:r}=t,{properties:o}=e;if(!o.length){n("{}",-2,e);return}const l=o.length>1||!1;n(l?"{":"{ "),l&&s();for(let a=0;a<o.length;a++){const{key:c,value:u}=o[a];Ty(c,t),n(": "),et(u,t),a<o.length-1&&(n(","),r())}l&&i(),n(l?"}":" }")}function My(e,t){ba(e.elements,t)}function Iy(e,t){const{push:n,indent:s,deindent:i}=t,{params:r,returns:o,body:l,newline:a,isSlot:c}=e;c&&n(`_${Cs[pa]}(`),n("(",-2,e),J(r)?Ai(r,t):r&&et(r,t),n(") => "),(a||l)&&(n("{"),s()),o?(a&&n("return "),J(o)?ba(o,t):et(o,t)):l&&et(l,t),(a||l)&&(i(),n("}")),c&&(e.isNonScopedSlot&&n(", undefined, true"),n(")"))}function Ly(e,t){const{test:n,consequent:s,alternate:i,newline:r}=e,{push:o,indent:l,deindent:a,newline:c}=t;if(n.type===4){const f=!ya(n.content);f&&o("("),Qd(n,t),f&&o(")")}else o("("),et(n,t),o(")");r&&l(),t.indentLevel++,r||o(" "),o("? "),et(s,t),t.indentLevel--,r&&c(),r||o(" "),o(": ");const u=i.type===19;u||t.indentLevel++,et(i,t),u||t.indentLevel--,r&&a(!0)}function $y(e,t){const{push:n,helper:s,indent:i,deindent:r,newline:o}=t;n(`_cache[${e.index}] || (`),e.isVNode&&(i(),n(`${s(kr)}(-1),`),o()),n(`_cache[${e.index}] = `),et(e.value,t),e.isVNode&&(n(","),o(),n(`${s(kr)}(1),`),o(),n(`_cache[${e.index}]`),r()),n(")")}new RegExp("\\b"+"arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield".split(",").join("\\b|\\b")+"\\b");const Vy=Wd(/^(if|else|else-if)$/,(e,t,n)=>Fy(e,t,n,(s,i,r)=>{const o=n.parent.children;let l=o.indexOf(s),a=0;for(;l-->=0;){const c=o[l];c&&c.type===9&&(a+=c.branches.length)}return()=>{if(r)s.codegenNode=xc(i,a,n);else{const c=qy(s.codegenNode);c.alternate=xc(i,a+s.branches.length-1,n)}}}));function Fy(e,t,n,s){if(t.name!=="else"&&(!t.exp||!t.exp.content.trim())){const i=t.exp?t.exp.loc:e.loc;n.onError(Re(28,t.loc)),t.exp=ae("true",!1,i)}if(t.name==="if"){const i=kc(e,t),r={type:9,loc:e.loc,branches:[i]};if(n.replaceNode(r),s)return s(r,i,!0)}else{const i=n.parent.children;let r=i.indexOf(e);for(;r-->=-1;){const o=i[r];if(o&&o.type===3){n.removeNode(o);continue}if(o&&o.type===2&&!o.content.trim().length){n.removeNode(o);continue}if(o&&o.type===9){t.name==="else-if"&&o.branches[o.branches.length-1].condition===void 0&&n.onError(Re(30,e.loc)),n.removeNode();const l=kc(e,t);o.branches.push(l);const a=s&&s(o,l,!1);Xr(l,n),a&&a(),n.currentNode=null}else n.onError(Re(30,e.loc));break}}}function kc(e,t){const n=e.tagType===3;return{type:10,loc:e.loc,condition:t.name==="else"?void 0:t.exp,children:n&&!Rt(e,"for")?e.children:[e],userKey:Zr(e,"key"),isTemplateIf:n}}function xc(e,t,n){return e.condition?el(e.condition,Tc(e,t,n),qe(n.helper(xi),['""',"true"])):Tc(e,t,n)}function Tc(e,t,n){const{helper:s}=n,i=Ne("key",ae(`${t}`,!1,yt,2)),{children:r}=e,o=r[0];if(r.length!==1||o.type!==1)if(r.length===1&&o.type===11){const a=o.codegenNode;return Ar(a,i,n),a}else{let a=64;return ai(n,s(oi),wt([i]),r,a+"",void 0,void 0,!0,!1,!1,e.loc)}else{const a=o.codegenNode,c=ny(a);return c.type===13&&ga(c,n),Ar(c,i,n),a}}function qy(e){for(;;)if(e.type===19)if(e.alternate.type===19)e=e.alternate;else return e;else e.type===20&&(e=e.value)}const By=Wd("for",(e,t,n)=>{const{helper:s,removeHelper:i}=n;return Dy(e,t,n,r=>{const o=qe(s(ua),[r.source]),l=Tr(e),a=Rt(e,"memo"),c=Zr(e,"key"),u=c&&(c.type===6?ae(c.value.content,!0):c.exp),f=c?Ne("key",u):null,d=r.source.type===4&&r.source.constType>0,h=d?64:c?128:256;return r.codegenNode=ai(n,s(oi),void 0,o,h+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let g;const{children:T}=r,x=T.length!==1||T[0].type!==1,A=Rr(e)?e:l&&e.children.length===1&&Rr(e.children[0])?e.children[0]:null;if(A?(g=A.codegenNode,l&&f&&Ar(g,f,n)):x?g=ai(n,s(oi),f?wt([f]):void 0,e.children,64+"",void 0,void 0,!0,void 0,!1):(g=T[0].codegenNode,l&&f&&Ar(g,f,n),g.isBlock!==!d&&(g.isBlock?(i(Wn),i(xs(n.inSSR,g.isComponent))):i(ks(n.inSSR,g.isComponent))),g.isBlock=!d,g.isBlock?(s(Wn),s(xs(n.inSSR,g.isComponent))):s(ks(n.inSSR,g.isComponent))),a){const v=Es(sl(r.parseResult,[ae("_cached")]));v.body=zv([Ot(["const _memo = (",a.exp,")"]),Ot(["if (_cached",...u?[" && _cached.key === ",u]:[],` && ${n.helperString(Md)}(_cached, _memo)) return _cached`]),Ot(["const _item = ",g]),ae("_item.memo = _memo"),ae("return _item")]),o.arguments.push(v,ae("_cache"),ae(String(n.cached++)))}else o.arguments.push(Es(sl(r.parseResult),g,!0))}})});function Dy(e,t,n,s){if(!t.exp){n.onError(Re(31,t.loc));return}const i=t.forParseResult;if(!i){n.onError(Re(32,t.loc));return}Jd(i);const{addIdentifiers:r,removeIdentifiers:o,scopes:l}=n,{source:a,value:c,key:u,index:f}=i,d={type:11,loc:t.loc,source:a,valueAlias:c,keyAlias:u,objectIndexAlias:f,parseResult:i,children:Tr(e)?e.children:[e]};n.replaceNode(d),l.vFor++;const h=s&&s(d);return()=>{l.vFor--,h&&h()}}function Jd(e,t){e.finalized||(e.finalized=!0)}function sl({value:e,key:t,index:n},s=[]){return Hy([e,t,n,...s])}function Hy(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map((n,s)=>n||ae("_".repeat(s+1),!1))}const Rc=ae("undefined",!1),jy=(e,t)=>{if(e.type===1&&(e.tagType===1||e.tagType===3)){const n=Rt(e,"slot");if(n)return n.exp,t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Uy=(e,t,n,s)=>Es(e,n,!1,!0,n.length?n[0].loc:s);function Ky(e,t,n=Uy){t.helper(pa);const{children:s,loc:i}=e,r=[],o=[];let l=t.scopes.vSlot>0||t.scopes.vFor>0;const a=Rt(e,"slot",!0);if(a){const{arg:x,exp:A}=a;x&&!lt(x)&&(l=!0),r.push(Ne(x||ae("default",!0),n(A,void 0,s,i)))}let c=!1,u=!1;const f=[],d=new Set;let h=0;for(let x=0;x<s.length;x++){const A=s[x];let v;if(!Tr(A)||!(v=Rt(A,"slot",!0))){A.type!==3&&f.push(A);continue}if(a){t.onError(Re(37,v.loc));break}c=!0;const{children:p,loc:E}=A,{arg:w=ae("default",!0),exp:k,loc:N}=v;let C;lt(w)?C=w?w.content:"default":l=!0;const y=Rt(A,"for"),S=n(k,y,p,E);let R,b;if(R=Rt(A,"if"))l=!0,o.push(el(R.exp,Ki(w,S,h++),Rc));else if(b=Rt(A,/^else(-if)?$/,!0)){let $=x,P;for(;$--&&(P=s[$],P.type===3););if(P&&Tr(P)&&Rt(P,"if")){s.splice(x,1),x--;let D=o[o.length-1];for(;D.alternate.type===19;)D=D.alternate;D.alternate=b.exp?el(b.exp,Ki(w,S,h++),Rc):Ki(w,S,h++)}else t.onError(Re(30,b.loc))}else if(y){l=!0;const $=y.forParseResult;$?(Jd($),o.push(qe(t.helper(ua),[$.source,Es(sl($),Ki(w,S),!0)]))):t.onError(Re(32,y.loc))}else{if(C){if(d.has(C)){t.onError(Re(38,N));continue}d.add(C),C==="default"&&(u=!0)}r.push(Ne(w,S))}}if(!a){const x=(A,v)=>{const p=n(A,void 0,v,i);return t.compatConfig&&(p.isNonScopedSlot=!0),Ne("default",p)};c?f.length&&f.some(A=>Zd(A))&&(u?t.onError(Re(39,f[0].loc)):r.push(x(void 0,f))):r.push(x(void 0,s))}const g=l?2:or(e.children)?3:1;let T=wt(r.concat(Ne("_",ae(g+"",!1))),i);return o.length&&(T=qe(t.helper(Nd),[T,Ri(o)])),{slots:T,hasDynamicSlots:l}}function Ki(e,t,n){const s=[Ne("name",e),Ne("fn",t)];return n!=null&&s.push(Ne("key",ae(String(n),!0))),wt(s)}function or(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(n.tagType===2||or(n.children))return!0;break;case 9:if(or(n.branches))return!0;break;case 10:case 11:if(or(n.children))return!0;break}}return!1}function Zd(e){return e.type!==2&&e.type!==12?!0:e.type===2?!!e.content.trim():Zd(e.content)}const Xd=new WeakMap,zy=(e,t)=>function(){if(e=t.currentNode,!(e.type===1&&(e.tagType===0||e.tagType===1)))return;const{tag:s,props:i}=e,r=e.tagType===1;let o=r?Wy(e,t):`"${s}"`;const l=Se(o)&&o.callee===oa;let a,c,u,f=0,d,h,g,T=l||o===Gs||o===ta||!r&&(s==="svg"||s==="foreignObject");if(i.length>0){const x=eh(e,t,void 0,r,l);a=x.props,f=x.patchFlag,h=x.dynamicPropNames;const A=x.directives;g=A&&A.length?Ri(A.map(v=>Qy(v,t))):void 0,x.shouldUseBlock&&(T=!0)}if(e.children.length>0)if(o===Cr&&(T=!0,f|=1024),r&&o!==Gs&&o!==Cr){const{slots:A,hasDynamicSlots:v}=Ky(e,t);c=A,v&&(f|=1024)}else if(e.children.length===1&&o!==Gs){const A=e.children[0],v=A.type,p=v===5||v===8;p&&Ct(A,t)===0&&(f|=1),p||v===2?c=A:c=e.children}else c=e.children;f!==0&&(u=String(f),h&&h.length&&(d=Yy(h))),e.codegenNode=ai(t,o,a,c,u,d,g,!!T,!1,r,e.loc)};function Wy(e,t,n=!1){let{tag:s}=e;const i=il(s),r=Zr(e,"is");if(r)if(i||Vn("COMPILER_IS_ON_ELEMENT",t)){const l=r.type===6?r.value&&ae(r.value.content,!0):r.exp;if(l)return qe(t.helper(oa),[l])}else r.type===6&&r.value.content.startsWith("vue:")&&(s=r.value.content.slice(4));const o=Ld(s)||t.isBuiltInComponent(s);return o?(n||t.helper(o),o):(t.helper(ra),t.components.add(s),ui(s,"component"))}function eh(e,t,n=e.props,s,i,r=!1){const{tag:o,loc:l,children:a}=e;let c=[];const u=[],f=[],d=a.length>0;let h=!1,g=0,T=!1,x=!1,A=!1,v=!1,p=!1,E=!1;const w=[],k=y=>{c.length&&(u.push(wt(Ac(c),l)),c=[]),y&&u.push(y)},N=({key:y,value:S})=>{if(lt(y)){const R=y.content,b=Gn(R);if(b&&(!s||i)&&R.toLowerCase()!=="onclick"&&R!=="onUpdate:modelValue"&&!pn(R)&&(v=!0),b&&pn(R)&&(E=!0),b&&S.type===14&&(S=S.arguments[0]),S.type===20||(S.type===4||S.type===8)&&Ct(S,t)>0)return;R==="ref"?T=!0:R==="class"?x=!0:R==="style"?A=!0:R!=="key"&&!w.includes(R)&&w.push(R),s&&(R==="class"||R==="style")&&!w.includes(R)&&w.push(R)}else p=!0};for(let y=0;y<n.length;y++){const S=n[y];if(S.type===6){const{loc:R,name:b,nameLoc:$,value:P}=S;let D=!0;if(b==="ref"&&(T=!0,t.scopes.vFor>0&&c.push(Ne(ae("ref_for",!0),ae("true")))),b==="is"&&(il(o)||P&&P.content.startsWith("vue:")||Vn("COMPILER_IS_ON_ELEMENT",t)))continue;c.push(Ne(ae(b,!0,$),ae(P?P.content:"",D,P?P.loc:R)))}else{const{name:R,arg:b,exp:$,loc:P,modifiers:D}=S,V=R==="bind",M=R==="on";if(R==="slot"){s||t.onError(Re(40,P));continue}if(R==="once"||R==="memo"||R==="is"||V&&An(b,"is")&&(il(o)||Vn("COMPILER_IS_ON_ELEMENT",t))||M&&r)continue;if((V&&An(b,"key")||M&&d&&An(b,"vue:before-update"))&&(h=!0),V&&An(b,"ref")&&t.scopes.vFor>0&&c.push(Ne(ae("ref_for",!0),ae("true"))),!b&&(V||M)){if(p=!0,$)if(V){if(k(),Vn("COMPILER_V_BIND_OBJECT_ORDER",t)){u.unshift($);continue}u.push($)}else k({type:14,loc:P,callee:t.helper(ha),arguments:s?[$]:[$,"true"]});else t.onError(Re(V?34:35,P));continue}V&&D.includes("prop")&&(g|=32);const H=t.directiveTransforms[R];if(H){const{props:ge,needRuntime:re}=H(S,e,t);!r&&ge.forEach(N),M&&b&&!lt(b)?k(wt(ge,l)):c.push(...ge),re&&(f.push(S),Nt(re)&&Xd.set(S,re))}else dp(R)||(f.push(S),d&&(h=!0))}}let C;if(u.length?(k(),u.length>1?C=qe(t.helper(Er),u,l):C=u[0]):c.length&&(C=wt(Ac(c),l)),p?g|=16:(x&&!s&&(g|=2),A&&!s&&(g|=4),w.length&&(g|=8),v&&(g|=32)),!h&&(g===0||g===32)&&(T||E||f.length>0)&&(g|=512),!t.inSSR&&C)switch(C.type){case 15:let y=-1,S=-1,R=!1;for(let P=0;P<C.properties.length;P++){const D=C.properties[P].key;lt(D)?D.content==="class"?y=P:D.content==="style"&&(S=P):D.isHandlerKey||(R=!0)}const b=C.properties[y],$=C.properties[S];R?C=qe(t.helper(li),[C]):(b&&!lt(b.value)&&(b.value=qe(t.helper(fa),[b.value])),$&&(A||$.value.type===4&&$.value.content.trim()[0]==="["||$.value.type===17)&&($.value=qe(t.helper(da),[$.value])));break;case 14:break;default:C=qe(t.helper(li),[qe(t.helper(Ti),[C])]);break}return{props:C,directives:f,patchFlag:g,dynamicPropNames:w,shouldUseBlock:h}}function Ac(e){const t=new Map,n=[];for(let s=0;s<e.length;s++){const i=e[s];if(i.key.type===8||!i.key.isStatic){n.push(i);continue}const r=i.key.content,o=t.get(r);o?(r==="style"||r==="class"||Gn(r))&&Gy(o,i):(t.set(r,i),n.push(i))}return n}function Gy(e,t){e.value.type===17?e.value.elements.push(t.value):e.value=Ri([e.value,t.value],e.loc)}function Qy(e,t){const n=[],s=Xd.get(e);s?n.push(t.helperString(s)):(t.helper(la),t.directives.add(e.name),n.push(ui(e.name,"directive")));const{loc:i}=e;if(e.exp&&n.push(e.exp),e.arg&&(e.exp||n.push("void 0"),n.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const r=ae("true",!1,i);n.push(wt(e.modifiers.map(o=>Ne(o,r)),i))}return Ri(n,e.loc)}function Yy(e){let t="[";for(let n=0,s=e.length;n<s;n++)t+=JSON.stringify(e[n]),n<s-1&&(t+=", ");return t+"]"}function il(e){return e==="component"||e==="Component"}const Jy=(e,t)=>{if(Rr(e)){const{children:n,loc:s}=e,{slotName:i,slotProps:r}=Zy(e,t),o=[t.prefixIdentifiers?"_ctx.$slots":"$slots",i,"{}","undefined","true"];let l=2;r&&(o[2]=r,l=3),n.length&&(o[3]=Es([],n,!1,!1,s),l=4),t.scopeId&&!t.slotted&&(l=5),o.splice(l),e.codegenNode=qe(t.helper(Od),o,s)}};function Zy(e,t){let n='"default"',s;const i=[];for(let r=0;r<e.props.length;r++){const o=e.props[r];if(o.type===6)o.value&&(o.name==="name"?n=JSON.stringify(o.value.content):(o.name=Ae(o.name),i.push(o)));else if(o.name==="bind"&&An(o.arg,"name")){if(o.exp)n=o.exp;else if(o.arg&&o.arg.type===4){const l=Ae(o.arg.content);n=o.exp=ae(l,!1,o.arg.loc)}}else o.name==="bind"&&o.arg&&lt(o.arg)&&(o.arg.content=Ae(o.arg.content)),i.push(o)}if(i.length>0){const{props:r,directives:o}=eh(e,t,i,!1,!1);s=r,o.length&&t.onError(Re(36,o[0].loc))}return{slotName:n,slotProps:s}}const Xy=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,th=(e,t,n,s)=>{const{loc:i,modifiers:r,arg:o}=e;!e.exp&&!r.length&&n.onError(Re(35,i));let l;if(o.type===4)if(o.isStatic){let f=o.content;f.startsWith("vue:")&&(f=`vnode-${f.slice(4)}`);const d=t.tagType!==0||f.startsWith("vnode")||!/[A-Z]/.test(f)?hs(Ae(f)):`on:${f}`;l=ae(d,!0,o.loc)}else l=Ot([`${n.helperString(Xo)}(`,o,")"]);else l=o,l.children.unshift(`${n.helperString(Xo)}(`),l.children.push(")");let a=e.exp;a&&!a.content.trim()&&(a=void 0);let c=n.cacheHandlers&&!a&&!n.inVOnce;if(a){const f=$d(a.content),d=!(f||Xy.test(a.content)),h=a.content.includes(";");(d||c&&f)&&(a=Ot([`${d?"$event":"(...args)"} => ${h?"{":"("}`,a,h?"}":")"]))}let u={props:[Ne(l,a||ae("() => {}",!1,i))]};return s&&(u=s(u)),c&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach(f=>f.key.isHandlerKey=!0),u},eb=(e,t,n)=>{const{modifiers:s,loc:i}=e,r=e.arg;let{exp:o}=e;if(o&&o.type===4&&!o.content.trim()&&(o=void 0),!o){if(r.type!==4||!r.isStatic)return n.onError(Re(52,r.loc)),{props:[Ne(r,ae("",!0,i))]};const l=Ae(r.content);o=e.exp=ae(l,!1,r.loc)}return r.type!==4?(r.children.unshift("("),r.children.push(') || ""')):r.isStatic||(r.content=`${r.content} || ""`),s.includes("camel")&&(r.type===4?r.isStatic?r.content=Ae(r.content):r.content=`${n.helperString(Zo)}(${r.content})`:(r.children.unshift(`${n.helperString(Zo)}(`),r.children.push(")"))),n.inSSR||(s.includes("prop")&&Pc(r,"."),s.includes("attr")&&Pc(r,"^")),{props:[Ne(r,o)]}},Pc=(e,t)=>{e.type===4?e.isStatic?e.content=t+e.content:e.content=`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},tb=(e,t)=>{if(e.type===0||e.type===1||e.type===11||e.type===10)return()=>{const n=e.children;let s,i=!1;for(let r=0;r<n.length;r++){const o=n[r];if(go(o)){i=!0;for(let l=r+1;l<n.length;l++){const a=n[l];if(go(a))s||(s=n[r]=Ot([o],o.loc)),s.children.push(" + ",a),n.splice(l,1),l--;else{s=void 0;break}}}}if(!(!i||n.length===1&&(e.type===0||e.type===1&&e.tagType===0&&!e.props.find(r=>r.type===7&&!t.directiveTransforms[r.name])&&e.tag!=="template")))for(let r=0;r<n.length;r++){const o=n[r];if(go(o)||o.type===8){const l=[];(o.type!==2||o.content!==" ")&&l.push(o),!t.ssr&&Ct(o,t)===0&&l.push(1+""),n[r]={type:12,content:o,loc:o.loc,codegenNode:qe(t.helper(ia),l)}}}}},Oc=new WeakSet,nb=(e,t)=>{if(e.type===1&&Rt(e,"once",!0))return Oc.has(e)||t.inVOnce||t.inSSR?void 0:(Oc.add(e),t.inVOnce=!0,t.helper(kr),()=>{t.inVOnce=!1;const n=t.currentNode;n.codegenNode&&(n.codegenNode=t.cache(n.codegenNode,!0))})},nh=(e,t,n)=>{const{exp:s,arg:i}=e;if(!s)return n.onError(Re(41,e.loc)),zi();const r=s.loc.source,o=s.type===4?s.content:r,l=n.bindingMetadata[r];if(l==="props"||l==="props-aliased")return n.onError(Re(44,s.loc)),zi();const a=!1;if(!o.trim()||!$d(o)&&!a)return n.onError(Re(42,s.loc)),zi();const c=i||ae("modelValue",!0),u=i?lt(i)?`onUpdate:${Ae(i.content)}`:Ot(['"onUpdate:" + ',i]):"onUpdate:modelValue";let f;const d=n.isTS?"($event: any)":"$event";f=Ot([`${d} => ((`,s,") = $event)"]);const h=[Ne(c,e.exp),Ne(u,f)];if(e.modifiers.length&&t.tagType===1){const g=e.modifiers.map(x=>(ya(x)?x:JSON.stringify(x))+": true").join(", "),T=i?lt(i)?`${i.content}Modifiers`:Ot([i,' + "Modifiers"']):"modelModifiers";h.push(Ne(T,ae(`{ ${g} }`,!1,e.loc,2)))}return zi(h)};function zi(e=[]){return{props:e}}const sb=/[\w).+\-_$\]]/,ib=(e,t)=>{!Vn("COMPILER_FILTERS",t)||(e.type===5&&Or(e.content,t),e.type===1&&e.props.forEach(n=>{n.type===7&&n.name!=="for"&&n.exp&&Or(n.exp,t)}))};function Or(e,t){if(e.type===4)Nc(e,t);else for(let n=0;n<e.children.length;n++){const s=e.children[n];typeof s=="object"&&(s.type===4?Nc(s,t):s.type===8?Or(e,t):s.type===5&&Or(s.content,t))}}function Nc(e,t){const n=e.content;let s=!1,i=!1,r=!1,o=!1,l=0,a=0,c=0,u=0,f,d,h,g,T=[];for(h=0;h<n.length;h++)if(d=f,f=n.charCodeAt(h),s)f===39&&d!==92&&(s=!1);else if(i)f===34&&d!==92&&(i=!1);else if(r)f===96&&d!==92&&(r=!1);else if(o)f===47&&d!==92&&(o=!1);else if(f===124&&n.charCodeAt(h+1)!==124&&n.charCodeAt(h-1)!==124&&!l&&!a&&!c)g===void 0?(u=h+1,g=n.slice(0,h).trim()):x();else{switch(f){case 34:i=!0;break;case 39:s=!0;break;case 96:r=!0;break;case 40:c++;break;case 41:c--;break;case 91:a++;break;case 93:a--;break;case 123:l++;break;case 125:l--;break}if(f===47){let A=h-1,v;for(;A>=0&&(v=n.charAt(A),v===" ");A--);(!v||!sb.test(v))&&(o=!0)}}g===void 0?g=n.slice(0,h).trim():u!==0&&x();function x(){T.push(n.slice(u,h).trim()),u=h+1}if(T.length){for(h=0;h<T.length;h++)g=rb(g,T[h],t);e.content=g}}function rb(e,t,n){n.helper(aa);const s=t.indexOf("(");if(s<0)return n.filters.add(t),`${ui(t,"filter")}(${e})`;{const i=t.slice(0,s),r=t.slice(s+1);return n.filters.add(i),`${ui(i,"filter")}(${e}${r!==")"?","+r:r}`}}const Mc=new WeakSet,ob=(e,t)=>{if(e.type===1){const n=Rt(e,"memo");return!n||Mc.has(e)?void 0:(Mc.add(e),()=>{const s=e.codegenNode||t.currentNode.codegenNode;s&&s.type===13&&(e.tagType!==1&&ga(s,t),e.codegenNode=qe(t.helper(ma),[n.exp,Es(void 0,s),"_cache",String(t.cached++)]))})}};function lb(e){return[[nb,Vy,ob,By,ib,Jy,zy,jy,tb],{on:th,bind:eb,model:nh}]}function ab(e,t={}){const n=t.onError||va,s=t.mode==="module";t.prefixIdentifiers===!0?n(Re(47)):s&&n(Re(48));const i=!1;t.cacheHandlers&&n(Re(49)),t.scopeId&&!s&&n(Re(50));const r=pe({},t,{prefixIdentifiers:i}),o=le(e)?py(e,r):e,[l,a]=lb();return yy(o,pe({},r,{nodeTransforms:[...l,...t.nodeTransforms||[]],directiveTransforms:pe({},a,t.directiveTransforms||{})})),wy(o,r)}const cb=()=>({props:[]});/**
* @vue/compiler-dom v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const sh=Symbol(""),ih=Symbol(""),rh=Symbol(""),oh=Symbol(""),rl=Symbol(""),lh=Symbol(""),ah=Symbol(""),ch=Symbol(""),uh=Symbol(""),fh=Symbol("");jv({[sh]:"vModelRadio",[ih]:"vModelCheckbox",[rh]:"vModelText",[oh]:"vModelSelect",[rl]:"vModelDynamic",[lh]:"withModifiers",[ah]:"withKeys",[ch]:"vShow",[uh]:"Transition",[fh]:"TransitionGroup"});let ss;function ub(e,t=!1){return ss||(ss=document.createElement("div")),t?(ss.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,ss.children[0].getAttribute("foo")):(ss.innerHTML=e,ss.textContent)}const fb={parseMode:"html",isVoidTag:Rp,isNativeTag:e=>kp(e)||xp(e)||Tp(e),isPreTag:e=>e==="pre",decodeEntities:ub,isBuiltInComponent:e=>{if(e==="Transition"||e==="transition")return uh;if(e==="TransitionGroup"||e==="transition-group")return fh},getNamespace(e,t,n){let s=t?t.ns:n;if(t&&s===2)if(t.tag==="annotation-xml"){if(e==="svg")return 1;t.props.some(i=>i.type===6&&i.name==="encoding"&&i.value!=null&&(i.value.content==="text/html"||i.value.content==="application/xhtml+xml"))&&(s=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&e!=="mglyph"&&e!=="malignmark"&&(s=0);else t&&s===1&&(t.tag==="foreignObject"||t.tag==="desc"||t.tag==="title")&&(s=0);if(s===0){if(e==="svg")return 1;if(e==="math")return 2}return s}},db=e=>{e.type===1&&e.props.forEach((t,n)=>{t.type===6&&t.name==="style"&&t.value&&(e.props[n]={type:7,name:"bind",arg:ae("style",!0,t.loc),exp:hb(t.value.content,t.loc),modifiers:[],loc:t.loc})})},hb=(e,t)=>{const n=$u(e);return ae(JSON.stringify(n),!1,t,3)};function gn(e,t){return Re(e,t)}const pb=(e,t,n)=>{const{exp:s,loc:i}=e;return s||n.onError(gn(53,i)),t.children.length&&(n.onError(gn(54,i)),t.children.length=0),{props:[Ne(ae("innerHTML",!0,i),s||ae("",!0))]}},mb=(e,t,n)=>{const{exp:s,loc:i}=e;return s||n.onError(gn(55,i)),t.children.length&&(n.onError(gn(56,i)),t.children.length=0),{props:[Ne(ae("textContent",!0),s?Ct(s,n)>0?s:qe(n.helperString(Jr),[s],i):ae("",!0))]}},gb=(e,t,n)=>{const s=nh(e,t,n);if(!s.props.length||t.tagType===1)return s;e.arg&&n.onError(gn(58,e.arg.loc));const{tag:i}=t,r=n.isCustomElement(i);if(i==="input"||i==="textarea"||i==="select"||r){let o=rh,l=!1;if(i==="input"||r){const a=Zr(t,"type");if(a){if(a.type===7)o=rl;else if(a.value)switch(a.value.content){case"radio":o=sh;break;case"checkbox":o=ih;break;case"file":l=!0,n.onError(gn(59,e.loc));break}}else Xv(t)&&(o=rl)}else i==="select"&&(o=oh);l||(s.needRuntime=n.helper(o))}else n.onError(gn(57,e.loc));return s.props=s.props.filter(o=>!(o.key.type===4&&o.key.content==="modelValue")),s},vb=gt("passive,once,capture"),yb=gt("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),bb=gt("left,right"),dh=gt("onkeyup,onkeydown,onkeypress",!0),_b=(e,t,n,s)=>{const i=[],r=[],o=[];for(let l=0;l<t.length;l++){const a=t[l];a==="native"&&ci("COMPILER_V_ON_NATIVE",n)||vb(a)?o.push(a):bb(a)?lt(e)?dh(e.content)?i.push(a):r.push(a):(i.push(a),r.push(a)):yb(a)?r.push(a):i.push(a)}return{keyModifiers:i,nonKeyModifiers:r,eventOptionModifiers:o}},Ic=(e,t)=>lt(e)&&e.content.toLowerCase()==="onclick"?ae(t,!0):e.type!==4?Ot(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Sb=(e,t,n)=>th(e,t,n,s=>{const{modifiers:i}=e;if(!i.length)return s;let{key:r,value:o}=s.props[0];const{keyModifiers:l,nonKeyModifiers:a,eventOptionModifiers:c}=_b(r,i,n,e.loc);if(a.includes("right")&&(r=Ic(r,"onContextmenu")),a.includes("middle")&&(r=Ic(r,"onMouseup")),a.length&&(o=qe(n.helper(lh),[o,JSON.stringify(a)])),l.length&&(!lt(r)||dh(r.content))&&(o=qe(n.helper(ah),[o,JSON.stringify(l)])),c.length){const u=c.map(Yn).join("");r=lt(r)?ae(`${r.content}${u}`,!0):Ot(["(",r,`) + "${u}"`])}return{props:[Ne(r,o)]}}),wb=(e,t,n)=>{const{exp:s,loc:i}=e;return s||n.onError(gn(61,i)),{props:[],needRuntime:n.helper(ch)}},Cb=(e,t)=>{e.type===1&&e.tagType===0&&(e.tag==="script"||e.tag==="style")&&t.removeNode()},Eb=[db],kb={cloak:cb,html:pb,text:mb,model:gb,on:Sb,show:wb};function xb(e,t={}){return ab(e,pe({},fb,t,{nodeTransforms:[Cb,...Eb,...t.nodeTransforms||[]],directiveTransforms:pe({},kb,t.directiveTransforms||{}),transformHoist:null}))}/**
* vue v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Lc=new WeakMap;function Tb(e){let t=Lc.get(e!=null?e:me);return t||(t=Object.create(null),Lc.set(e!=null?e:me,t)),t}function Rb(e,t){if(!le(e))if(e.nodeType)e=e.innerHTML;else return $e;const n=e,s=Tb(t),i=s[n];if(i)return i;if(e[0]==="#"){const a=document.querySelector(e);e=a?a.innerHTML:""}const r=pe({hoistStatic:!0,onError:void 0,onWarn:$e},t);!r.isCustomElement&&typeof customElements!="undefined"&&(r.isCustomElement=a=>!!customElements.get(a));const{code:o}=xb(e,r),l=new Function("Vue",o)(Vv);return l._rc=!0,s[n]=l}ed(Rb);function Ns(e,t,n,s){return Object.defineProperty(e,t,{get:n,set:s,enumerable:!0}),e}const _n=ce(!1);let ol;function Ab(e,t){const n=/(edg|edge|edga|edgios)\/([\w.]+)/.exec(e)||/(opr)[\/]([\w.]+)/.exec(e)||/(vivaldi)[\/]([\w.]+)/.exec(e)||/(chrome|crios)[\/]([\w.]+)/.exec(e)||/(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(e)||/(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(e)||/(firefox|fxios)[\/]([\w.]+)/.exec(e)||/(webkit)[\/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[\/]([\w.]+)/.exec(e)||[];return{browser:n[5]||n[3]||n[1]||"",version:n[2]||n[4]||"0",versionNumber:n[4]||n[2]||"0",platform:t[0]||""}}function Pb(e){return/(ipad)/.exec(e)||/(ipod)/.exec(e)||/(windows phone)/.exec(e)||/(iphone)/.exec(e)||/(kindle)/.exec(e)||/(silk)/.exec(e)||/(android)/.exec(e)||/(win)/.exec(e)||/(mac)/.exec(e)||/(linux)/.exec(e)||/(cros)/.exec(e)||/(playbook)/.exec(e)||/(bb)/.exec(e)||/(blackberry)/.exec(e)||[]}const hh="ontouchstart"in window||window.navigator.maxTouchPoints>0;function Ob(e){const t=e.toLowerCase(),n=Pb(t),s=Ab(t,n),i={};s.browser&&(i[s.browser]=!0,i.version=s.version,i.versionNumber=parseInt(s.versionNumber,10)),s.platform&&(i[s.platform]=!0);const r=i.android||i.ios||i.bb||i.blackberry||i.ipad||i.iphone||i.ipod||i.kindle||i.playbook||i.silk||i["windows phone"];if(r===!0||t.indexOf("mobile")!==-1?i.mobile=!0:i.desktop=!0,i["windows phone"]&&(i.winphone=!0,delete i["windows phone"]),i.edga||i.edgios?(i.edge=!0,s.browser="edge"):i.crios?(i.chrome=!0,s.browser="chrome"):i.fxios?(i.firefox=!0,s.browser="firefox"):(i.ipod||i.ipad||i.iphone)&&(i.ios=!0),i.vivaldi&&(s.browser="vivaldi",i.vivaldi=!0),(i.chrome||i.opr||i.safari||i.vivaldi||i.mobile===!0&&i.ios!==!0&&r!==!0)&&(i.webkit=!0),i.edg?(s.browser="edgechromium",i.edgeChromium=!0):i.opr&&(s.browser="opera",i.opera=!0),i.safari&&(i.blackberry||i.bb?(s.browser="blackberry",i.blackberry=!0):i.playbook?(s.browser="playbook",i.playbook=!0):i.android?(s.browser="android",i.android=!0):i.kindle?(s.browser="kindle",i.kindle=!0):i.silk&&(s.browser="silk",i.silk=!0)),i.name=s.browser,i.platform=s.platform,t.indexOf("electron")!==-1)i.electron=!0;else if(document.location.href.indexOf("-extension://")!==-1)i.bex=!0;else{if(window.Capacitor!==void 0?(i.capacitor=!0,i.nativeMobile=!0,i.nativeMobileWrapper="capacitor"):(window._cordovaNative!==void 0||window.cordova!==void 0)&&(i.cordova=!0,i.nativeMobile=!0,i.nativeMobileWrapper="cordova"),_n.value===!0&&(ol={is:{...i}}),hh===!0&&i.mac===!0&&(i.desktop===!0&&i.safari===!0||i.nativeMobile===!0&&i.android!==!0&&i.ios!==!0&&i.ipad!==!0)){delete i.mac,delete i.desktop;const o=Math.min(window.innerHeight,window.innerWidth)>414?"ipad":"iphone";Object.assign(i,{mobile:!0,ios:!0,platform:o,[o]:!0})}i.mobile!==!0&&window.navigator.userAgentData&&window.navigator.userAgentData.mobile&&(delete i.desktop,i.mobile=!0)}return i}const $c=navigator.userAgent||navigator.vendor||window.opera,Nb={has:{touch:!1,webStorage:!1},within:{iframe:!1}},De={userAgent:$c,is:Ob($c),has:{touch:hh},within:{iframe:window.self!==window.top}},ll={install(e){const{$q:t}=e;_n.value===!0?(e.onSSRHydrated.push(()=>{Object.assign(t.platform,De),_n.value=!1}),t.platform=Sn(this)):t.platform=this}};{let e;Ns(De.has,"webStorage",()=>{if(e!==void 0)return e;try{if(window.localStorage)return e=!0,!0}catch{}return e=!1,!1}),Object.assign(ll,De),_n.value===!0&&(Object.assign(ll,ol,Nb),ol=null)}var to=(e,t)=>{const n=Sn(e);for(const s in e)Ns(t,s,()=>n[s],i=>{n[s]=i});return t};const rt={hasPassive:!1,passiveCapture:!0,notPassiveCapture:!0};try{const e=Object.defineProperty({},"passive",{get(){Object.assign(rt,{hasPassive:!0,passive:{passive:!0},notPassive:{passive:!1},passiveCapture:{passive:!0,capture:!0},notPassiveCapture:{passive:!1,capture:!0}})}});window.addEventListener("qtest",null,e),window.removeEventListener("qtest",null,e)}catch{}function di(){}function dw(e){return e.button===0}function Mb(e){return e.touches&&e.touches[0]?e=e.touches[0]:e.changedTouches&&e.changedTouches[0]?e=e.changedTouches[0]:e.targetTouches&&e.targetTouches[0]&&(e=e.targetTouches[0]),{top:e.clientY,left:e.clientX}}function Ib(e){if(e.path)return e.path;if(e.composedPath)return e.composedPath();const t=[];let n=e.target;for(;n;){if(t.push(n),n.tagName==="HTML")return t.push(document),t.push(window),t;n=n.parentElement}}function Nr(e){e.stopPropagation()}function hn(e){e.cancelable!==!1&&e.preventDefault()}function St(e){e.cancelable!==!1&&e.preventDefault(),e.stopPropagation()}function hw(e,t){if(e===void 0||t===!0&&e.__dragPrevented===!0)return;const n=t===!0?s=>{s.__dragPrevented=!0,s.addEventListener("dragstart",hn,rt.notPassiveCapture)}:s=>{delete s.__dragPrevented,s.removeEventListener("dragstart",hn,rt.notPassiveCapture)};e.querySelectorAll("a, img").forEach(n)}function Lb(e,t,n){const s=`__q_${t}_evt`;e[s]=e[s]!==void 0?e[s].concat(n):n,n.forEach(i=>{i[0].addEventListener(i[1],e[i[2]],rt[i[3]])})}function $b(e,t){const n=`__q_${t}_evt`;e[n]!==void 0&&(e[n].forEach(s=>{s[0].removeEventListener(s[1],e[s[2]],rt[s[3]])}),e[n]=void 0)}function ph(e,t=250,n){let s=null;function i(){const r=arguments,o=()=>{s=null,n!==!0&&e.apply(this,r)};s!==null?clearTimeout(s):n===!0&&e.apply(this,r),s=setTimeout(o,t)}return i.cancel=()=>{s!==null&&clearTimeout(s)},i}const yo=["sm","md","lg","xl"],{passive:Vc}=rt;var Vb=to({width:0,height:0,name:"xs",sizes:{sm:600,md:1024,lg:1440,xl:1920},lt:{sm:!0,md:!0,lg:!0,xl:!0},gt:{xs:!1,sm:!1,md:!1,lg:!1},xs:!0,sm:!1,md:!1,lg:!1,xl:!1},{setSizes:di,setDebounce:di,install({$q:e,onSSRHydrated:t}){if(e.screen=this,this.__installed===!0){e.config.screen!==void 0&&(e.config.screen.bodyClasses===!1?document.body.classList.remove(`screen--${this.name}`):this.__update(!0));return}const{visualViewport:n}=window,s=n||window,i=document.scrollingElement||document.documentElement,r=n===void 0||De.is.mobile===!0?()=>[Math.max(window.innerWidth,i.clientWidth),Math.max(window.innerHeight,i.clientHeight)]:()=>[n.width*n.scale+window.innerWidth-i.clientWidth,n.height*n.scale+window.innerHeight-i.clientHeight],o=e.config.screen!==void 0&&e.config.screen.bodyClasses===!0;this.__update=f=>{const[d,h]=r();if(h!==this.height&&(this.height=h),d!==this.width)this.width=d;else if(f!==!0)return;let g=this.sizes;this.gt.xs=d>=g.sm,this.gt.sm=d>=g.md,this.gt.md=d>=g.lg,this.gt.lg=d>=g.xl,this.lt.sm=d<g.sm,this.lt.md=d<g.md,this.lt.lg=d<g.lg,this.lt.xl=d<g.xl,this.xs=this.lt.sm,this.sm=this.gt.xs===!0&&this.lt.md===!0,this.md=this.gt.sm===!0&&this.lt.lg===!0,this.lg=this.gt.md===!0&&this.lt.xl===!0,this.xl=this.gt.lg,g=this.xs===!0&&"xs"||this.sm===!0&&"sm"||this.md===!0&&"md"||this.lg===!0&&"lg"||"xl",g!==this.name&&(o===!0&&(document.body.classList.remove(`screen--${this.name}`),document.body.classList.add(`screen--${g}`)),this.name=g)};let l,a={},c=16;this.setSizes=f=>{yo.forEach(d=>{f[d]!==void 0&&(a[d]=f[d])})},this.setDebounce=f=>{c=f};const u=()=>{const f=getComputedStyle(document.body);f.getPropertyValue("--q-size-sm")&&yo.forEach(d=>{this.sizes[d]=parseInt(f.getPropertyValue(`--q-size-${d}`),10)}),this.setSizes=d=>{yo.forEach(h=>{d[h]&&(this.sizes[h]=d[h])}),this.__update(!0)},this.setDebounce=d=>{l!==void 0&&s.removeEventListener("resize",l,Vc),l=d>0?ph(this.__update,d):this.__update,s.addEventListener("resize",l,Vc)},this.setDebounce(c),Object.keys(a).length!==0?(this.setSizes(a),a=void 0):this.__update(),o===!0&&this.name==="xs"&&document.body.classList.add("screen--xs")};_n.value===!0?t.push(u):u()}});const Ye=to({isActive:!1,mode:!1},{__media:void 0,set(e){Ye.mode=e,e==="auto"?(Ye.__media===void 0&&(Ye.__media=window.matchMedia("(prefers-color-scheme: dark)"),Ye.__updateMedia=()=>{Ye.set("auto")},Ye.__media.addListener(Ye.__updateMedia)),e=Ye.__media.matches):Ye.__media!==void 0&&(Ye.__media.removeListener(Ye.__updateMedia),Ye.__media=void 0),Ye.isActive=e===!0,document.body.classList.remove(`body--${e===!0?"light":"dark"}`),document.body.classList.add(`body--${e===!0?"dark":"light"}`)},toggle(){Ye.set(Ye.isActive===!1)},install({$q:e,ssrContext:t}){const{dark:n}=e.config;e.dark=this,this.__installed!==!0&&this.set(n!==void 0?n:!1)}}),mh=()=>!0;function Fb(e){return typeof e=="string"&&e!==""&&e!=="/"&&e!=="#/"}function qb(e){return e.startsWith("#")===!0&&(e=e.substring(1)),e.startsWith("/")===!1&&(e="/"+e),e.endsWith("/")===!0&&(e=e.substring(0,e.length-1)),"#"+e}function Bb(e){if(e.backButtonExit===!1)return()=>!1;if(e.backButtonExit==="*")return mh;const t=["#/"];return Array.isArray(e.backButtonExit)===!0&&t.push(...e.backButtonExit.filter(Fb).map(qb)),()=>t.includes(window.location.hash)}var al={__history:[],add:di,remove:di,install({$q:e}){if(this.__installed===!0)return;const{cordova:t,capacitor:n}=De.is;if(t!==!0&&n!==!0)return;const s=e.config[t===!0?"cordova":"capacitor"];if(s!==void 0&&s.backButton===!1||n===!0&&(window.Capacitor===void 0||window.Capacitor.Plugins.App===void 0))return;this.add=o=>{o.condition===void 0&&(o.condition=mh),this.__history.push(o)},this.remove=o=>{const l=this.__history.indexOf(o);l>=0&&this.__history.splice(l,1)};const i=Bb(Object.assign({backButtonExit:!0},s)),r=()=>{if(this.__history.length){const o=this.__history[this.__history.length-1];o.condition()===!0&&(this.__history.pop(),o.handler())}else i()===!0?navigator.app.exitApp():window.history.back()};t===!0?document.addEventListener("deviceready",()=>{document.addEventListener("backbutton",r,!1)}):window.Capacitor.Plugins.App.addListener("backButton",r)}},Fc={isoName:"en-US",nativeName:"English (US)",label:{clear:"Clear",ok:"OK",cancel:"Cancel",close:"Close",set:"Set",select:"Select",reset:"Reset",remove:"Remove",update:"Update",create:"Create",search:"Search",filter:"Filter",refresh:"Refresh",expand:e=>e?`Expand "${e}"`:"Expand",collapse:e=>e?`Collapse "${e}"`:"Collapse"},date:{days:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),daysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),firstDayOfWeek:0,format24h:!1,pluralDay:"days"},table:{noData:"No data available",noResults:"No matching records found",loading:"Loading...",selectedRecords:e=>e===1?"1 record selected.":(e===0?"No":e)+" records selected.",recordsPerPage:"Records per page:",allRows:"All",pagination:(e,t,n)=>e+"-"+t+" of "+n,columns:"Columns"},editor:{url:"URL",bold:"Bold",italic:"Italic",strikethrough:"Strikethrough",underline:"Underline",unorderedList:"Unordered List",orderedList:"Ordered List",subscript:"Subscript",superscript:"Superscript",hyperlink:"Hyperlink",toggleFullscreen:"Toggle Fullscreen",quote:"Quote",left:"Left align",center:"Center align",right:"Right align",justify:"Justify align",print:"Print",outdent:"Decrease indentation",indent:"Increase indentation",removeFormat:"Remove formatting",formatting:"Formatting",fontSize:"Font Size",align:"Align",hr:"Insert Horizontal Rule",undo:"Undo",redo:"Redo",heading1:"Heading 1",heading2:"Heading 2",heading3:"Heading 3",heading4:"Heading 4",heading5:"Heading 5",heading6:"Heading 6",paragraph:"Paragraph",code:"Code",size1:"Very small",size2:"A bit small",size3:"Normal",size4:"Medium-large",size5:"Big",size6:"Very big",size7:"Maximum",defaultFont:"Default Font",viewSource:"View Source"},tree:{noNodes:"No nodes available",noResults:"No matching nodes found"}};function qc(){const e=Array.isArray(navigator.languages)===!0&&navigator.languages.length!==0?navigator.languages[0]:navigator.language;if(typeof e=="string")return e.split(/[-_]/).map((t,n)=>n===0?t.toLowerCase():n>1||t.length<4?t.toUpperCase():t[0].toUpperCase()+t.slice(1).toLowerCase()).join("-")}const xt=to({__langPack:{}},{getLocale:qc,set(e=Fc,t){const n={...e,rtl:e.rtl===!0,getLocale:qc};{if(n.set=xt.set,xt.__langConfig===void 0||xt.__langConfig.noHtmlAttrs!==!0){const s=document.documentElement;s.setAttribute("dir",n.rtl===!0?"rtl":"ltr"),s.setAttribute("lang",n.isoName)}Object.assign(xt.__langPack,n),xt.props=n,xt.isoName=n.isoName,xt.nativeName=n.nativeName}},install({$q:e,lang:t,ssrContext:n}){e.lang=xt.__langPack,xt.__langConfig=e.config.lang,this.__installed===!0?t!==void 0&&this.set(t):this.set(t||Fc)}});function Db(e,t,n=document.body){if(typeof e!="string")throw new TypeError("Expected a string as propName");if(typeof t!="string")throw new TypeError("Expected a string as value");if(!(n instanceof Element))throw new TypeError("Expected a DOM element");n.style.setProperty(`--q-${e}`,t)}let gh=!1;function Hb(e){gh=e.isComposing===!0}function vh(e){return gh===!0||e!==Object(e)||e.isComposing===!0||e.qKeyEvent===!0}function hi(e,t){return vh(e)===!0?!1:[].concat(t).includes(e.keyCode)}function yh(e){if(e.ios===!0)return"ios";if(e.android===!0)return"android"}function jb({is:e,has:t,within:n},s){const i=[e.desktop===!0?"desktop":"mobile",`${t.touch===!1?"no-":""}touch`];if(e.mobile===!0){const r=yh(e);r!==void 0&&i.push("platform-"+r)}if(e.nativeMobile===!0){const r=e.nativeMobileWrapper;i.push(r),i.push("native-mobile"),e.ios===!0&&(s[r]===void 0||s[r].iosStatusBarPadding!==!1)&&i.push("q-ios-padding")}else e.electron===!0?i.push("electron"):e.bex===!0&&i.push("bex");return n.iframe===!0&&i.push("within-iframe"),i}function Ub(){const{is:e}=De,t=document.body.className,n=new Set(t.replace(/ {2}/g," ").split(" "));if(e.nativeMobile!==!0&&e.electron!==!0&&e.bex!==!0){if(e.desktop===!0)n.delete("mobile"),n.delete("platform-ios"),n.delete("platform-android"),n.add("desktop");else if(e.mobile===!0){n.delete("desktop"),n.add("mobile"),n.delete("platform-ios"),n.delete("platform-android");const i=yh(e);i!==void 0&&n.add(`platform-${i}`)}}De.has.touch===!0&&(n.delete("no-touch"),n.add("touch")),De.within.iframe===!0&&n.add("within-iframe");const s=Array.from(n).join(" ");t!==s&&(document.body.className=s)}function Kb(e){for(const t in e)Db(t,e[t])}var zb={install(e){if(this.__installed!==!0){if(_n.value===!0)Ub();else{const{$q:t}=e;t.config.brand!==void 0&&Kb(t.config.brand);const n=jb(De,t.config);document.body.classList.add.apply(document.body.classList,n)}De.is.ios===!0&&document.body.addEventListener("touchstart",di),window.addEventListener("keydown",Hb,!0)}}},Wb={name:"material-icons",type:{positive:"check_circle",negative:"warning",info:"info",warning:"priority_high"},arrow:{up:"arrow_upward",right:"arrow_forward",down:"arrow_downward",left:"arrow_back",dropdown:"arrow_drop_down"},chevron:{left:"chevron_left",right:"chevron_right"},colorPicker:{spectrum:"gradient",tune:"tune",palette:"style"},pullToRefresh:{icon:"refresh"},carousel:{left:"chevron_left",right:"chevron_right",up:"keyboard_arrow_up",down:"keyboard_arrow_down",navigationIcon:"lens"},chip:{remove:"cancel",selected:"check"},datetime:{arrowLeft:"chevron_left",arrowRight:"chevron_right",now:"access_time",today:"today"},editor:{bold:"format_bold",italic:"format_italic",strikethrough:"strikethrough_s",underline:"format_underlined",unorderedList:"format_list_bulleted",orderedList:"format_list_numbered",subscript:"vertical_align_bottom",superscript:"vertical_align_top",hyperlink:"link",toggleFullscreen:"fullscreen",quote:"format_quote",left:"format_align_left",center:"format_align_center",right:"format_align_right",justify:"format_align_justify",print:"print",outdent:"format_indent_decrease",indent:"format_indent_increase",removeFormat:"format_clear",formatting:"text_format",fontSize:"format_size",align:"format_align_left",hr:"remove",undo:"undo",redo:"redo",heading:"format_size",code:"code",size:"format_size",font:"font_download",viewSource:"code"},expansionItem:{icon:"keyboard_arrow_down",denseIcon:"arrow_drop_down"},fab:{icon:"add",activeIcon:"close"},field:{clear:"cancel",error:"error"},pagination:{first:"first_page",prev:"keyboard_arrow_left",next:"keyboard_arrow_right",last:"last_page"},rating:{icon:"grade"},stepper:{done:"check",active:"edit",error:"warning"},tabs:{left:"chevron_left",right:"chevron_right",up:"keyboard_arrow_up",down:"keyboard_arrow_down"},table:{arrowUp:"arrow_upward",warning:"warning",firstPage:"first_page",prevPage:"chevron_left",nextPage:"chevron_right",lastPage:"last_page"},tree:{icon:"play_arrow"},uploader:{done:"done",clear:"clear",add:"add_box",upload:"cloud_upload",removeQueue:"clear_all",removeUploaded:"done_all"}};const Mr=to({iconMapFn:null,__icons:{}},{set(e,t){const n={...e,rtl:e.rtl===!0};n.set=Mr.set,Object.assign(Mr.__icons,n)},install({$q:e,iconSet:t,ssrContext:n}){e.config.iconMapFn!==void 0&&(this.iconMapFn=e.config.iconMapFn),e.iconSet=this.__icons,Ns(e,"iconMapFn",()=>this.iconMapFn,s=>{this.iconMapFn=s}),this.__installed===!0?t!==void 0&&this.set(t):this.set(t||Wb)}}),Gb="_q_",pw="_q_l_",mw="_q_pc_",Qb="_q_fo_",gw="_q_tabs_",vw=()=>{},Ir={};let bh=!1;function Yb(){bh=!0}function bo(e,t){if(e===t)return!0;if(e!==null&&t!==null&&typeof e=="object"&&typeof t=="object"){if(e.constructor!==t.constructor)return!1;let n,s;if(e.constructor===Array){if(n=e.length,n!==t.length)return!1;for(s=n;s--!==0;)if(bo(e[s],t[s])!==!0)return!1;return!0}if(e.constructor===Map){if(e.size!==t.size)return!1;let r=e.entries();for(s=r.next();s.done!==!0;){if(t.has(s.value[0])!==!0)return!1;s=r.next()}for(r=e.entries(),s=r.next();s.done!==!0;){if(bo(s.value[1],t.get(s.value[0]))!==!0)return!1;s=r.next()}return!0}if(e.constructor===Set){if(e.size!==t.size)return!1;const r=e.entries();for(s=r.next();s.done!==!0;){if(t.has(s.value[0])!==!0)return!1;s=r.next()}return!0}if(e.buffer!=null&&e.buffer.constructor===ArrayBuffer){if(n=e.length,n!==t.length)return!1;for(s=n;s--!==0;)if(e[s]!==t[s])return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();const i=Object.keys(e).filter(r=>e[r]!==void 0);if(n=i.length,n!==Object.keys(t).filter(r=>t[r]!==void 0).length)return!1;for(s=n;s--!==0;){const r=i[s];if(bo(e[r],t[r])!==!0)return!1}return!0}return e!==e&&t!==t}function Ft(e){return e!==null&&typeof e=="object"&&Array.isArray(e)!==!0}function yw(e){return Object.prototype.toString.call(e)==="[object Date]"}function bw(e){return typeof e=="number"&&isFinite(e)}const Bc=[ll,zb,Ye,Vb,al,xt,Mr];function _h(e,t){const n=ea(e);n.config.globalProperties=t.config.globalProperties;const{reload:s,...i}=t._context;return Object.assign(n._context,i),n}function Dc(e,t){t.forEach(n=>{n.install(e),n.__installed=!0})}function Jb(e,t,n){e.config.globalProperties.$q=n.$q,e.provide(Gb,n.$q),Dc(n,Bc),t.components!==void 0&&Object.values(t.components).forEach(s=>{Ft(s)===!0&&s.name!==void 0&&e.component(s.name,s)}),t.directives!==void 0&&Object.values(t.directives).forEach(s=>{Ft(s)===!0&&s.name!==void 0&&e.directive(s.name,s)}),t.plugins!==void 0&&Dc(n,Object.values(t.plugins).filter(s=>typeof s.install=="function"&&Bc.includes(s)===!1)),_n.value===!0&&(n.$q.onSSRHydrated=()=>{n.onSSRHydrated.forEach(s=>{s()}),n.$q.onSSRHydrated=()=>{}})}var Zb=function(e,t={}){const n={version:"2.15.0"};bh===!1?(t.config!==void 0&&Object.assign(Ir,t.config),n.config={...Ir},Yb()):n.config=t.config||{},Jb(e,t,{parentApp:e,$q:n,lang:t.lang,iconSet:t.iconSet,onSSRHydrated:[]})},Xb={version:"2.15.0",install:Zb,lang:xt,iconSet:Mr},e0=(e,t)=>{const n=e.__vccOpts||e;for(const[s,i]of t)n[s]=i;return n};const t0={};function n0(e,t){const n=df("router-view");return Ei(),Wr(n)}var s0=e0(t0,[["render",n0]]);function _w(e){return e}var i0=!1;/*!
 * pinia v2.1.7
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */let Sh;const no=e=>Sh=e,wh=Symbol();function cl(e){return e&&typeof e=="object"&&Object.prototype.toString.call(e)==="[object Object]"&&typeof e.toJSON!="function"}var Qs;(function(e){e.direct="direct",e.patchObject="patch object",e.patchFunction="patch function"})(Qs||(Qs={}));function r0(){const e=El(!0),t=e.run(()=>ce({}));let n=[],s=[];const i=Jt({install(r){no(i),i._a=r,r.provide(wh,i),r.config.globalProperties.$pinia=i,s.forEach(o=>n.push(o)),s=[]},use(r){return!this._a&&!i0?s.push(r):n.push(r),this},_p:n,_a:null,_e:e,_s:new Map,state:t});return i}const Ch=()=>{};function Hc(e,t,n,s=Ch){e.push(t);const i=()=>{const r=e.indexOf(t);r>-1&&(e.splice(r,1),s())};return!n&&kl()&&Bu(i),i}function is(e,...t){e.slice().forEach(n=>{n(...t)})}const o0=e=>e();function ul(e,t){e instanceof Map&&t instanceof Map&&t.forEach((n,s)=>e.set(s,n)),e instanceof Set&&t instanceof Set&&t.forEach(e.add,e);for(const n in t){if(!t.hasOwnProperty(n))continue;const s=t[n],i=e[n];cl(i)&&cl(s)&&e.hasOwnProperty(n)&&!Me(s)&&!Wt(s)?e[n]=ul(i,s):e[n]=s}return e}const l0=Symbol();function a0(e){return!cl(e)||!e.hasOwnProperty(l0)}const{assign:on}=Object;function c0(e){return!!(Me(e)&&e.effect)}function u0(e,t,n,s){const{state:i,actions:r,getters:o}=t,l=n.state.value[e];let a;function c(){l||(n.state.value[e]=i?i():{});const u=rf(n.state.value[e]);return on(u,r,Object.keys(o||{}).reduce((f,d)=>(f[d]=Jt(L(()=>{no(n);const h=n._s.get(e);return o[d].call(h,h)})),f),{}))}return a=Eh(e,c,t,n,s,!0),a}function Eh(e,t,n={},s,i,r){let o;const l=on({actions:{}},n),a={deep:!0};let c,u,f=[],d=[],h;const g=s.state.value[e];!r&&!g&&(s.state.value[e]={}),ce({});let T;function x(C){let y;c=u=!1,typeof C=="function"?(C(s.state.value[e]),y={type:Qs.patchFunction,storeId:e,events:h}):(ul(s.state.value[e],C),y={type:Qs.patchObject,payload:C,storeId:e,events:h});const S=T=Symbol();Ge().then(()=>{T===S&&(c=!0)}),u=!0,is(f,y,s.state.value[e])}const A=r?function(){const{state:y}=n,S=y?y():{};this.$patch(R=>{on(R,S)})}:Ch;function v(){o.stop(),f=[],d=[],s._s.delete(e)}function p(C,y){return function(){no(s);const S=Array.from(arguments),R=[],b=[];function $(V){R.push(V)}function P(V){b.push(V)}is(d,{args:S,name:C,store:w,after:$,onError:P});let D;try{D=y.apply(this&&this.$id===e?this:w,S)}catch(V){throw is(b,V),V}return D instanceof Promise?D.then(V=>(is(R,V),V)).catch(V=>(is(b,V),Promise.reject(V))):(is(R,D),D)}}const E={_p:s,$id:e,$onAction:Hc.bind(null,d),$patch:x,$reset:A,$subscribe(C,y={}){const S=Hc(f,C,y.detached,()=>R()),R=o.run(()=>Ce(()=>s.state.value[e],b=>{(y.flush==="sync"?u:c)&&C({storeId:e,type:Qs.direct,events:h},b)},on({},a,y)));return S},$dispose:v},w=Sn(E);s._s.set(e,w);const N=(s._a&&s._a.runWithContext||o0)(()=>s._e.run(()=>(o=El()).run(t)));for(const C in N){const y=N[C];if(Me(y)&&!c0(y)||Wt(y))r||(g&&a0(y)&&(Me(y)?y.value=g[C]:ul(y,g[C])),s.state.value[e][C]=y);else if(typeof y=="function"){const S=p(C,y);N[C]=S,l.actions[C]=y}}return on(w,N),on(ie(w),N),Object.defineProperty(w,"$state",{get:()=>s.state.value[e],set:C=>{x(y=>{on(y,C)})}}),s._p.forEach(C=>{on(w,o.run(()=>C({store:w,app:s._a,pinia:s,options:l})))}),g&&r&&n.hydrate&&n.hydrate(w.$state,g),c=!0,u=!0,w}function Sw(e,t,n){let s,i;const r=typeof t=="function";typeof e=="string"?(s=e,i=r?n:t):(i=e,s=e.id);function o(l,a){const c=Mf();return l=l||(c?at(wh,null):null),l&&no(l),l=Sh,l._s.has(s)||(r?Eh(s,t,i,l):u0(s,i,l)),l._s.get(s)}return o.$id=s,o}var _o=()=>r0();/*!
  * vue-router v4.3.0
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */const cs=typeof document!="undefined";function f0(e){return e.__esModule||e[Symbol.toStringTag]==="Module"}const _e=Object.assign;function So(e,t){const n={};for(const s in t){const i=t[s];n[s]=It(i)?i.map(e):e(i)}return n}const Ys=()=>{},It=Array.isArray,kh=/#/g,d0=/&/g,h0=/\//g,p0=/=/g,m0=/\?/g,xh=/\+/g,g0=/%5B/g,v0=/%5D/g,Th=/%5E/g,y0=/%60/g,Rh=/%7B/g,b0=/%7C/g,Ah=/%7D/g,_0=/%20/g;function _a(e){return encodeURI(""+e).replace(b0,"|").replace(g0,"[").replace(v0,"]")}function S0(e){return _a(e).replace(Rh,"{").replace(Ah,"}").replace(Th,"^")}function fl(e){return _a(e).replace(xh,"%2B").replace(_0,"+").replace(kh,"%23").replace(d0,"%26").replace(y0,"`").replace(Rh,"{").replace(Ah,"}").replace(Th,"^")}function w0(e){return fl(e).replace(p0,"%3D")}function C0(e){return _a(e).replace(kh,"%23").replace(m0,"%3F")}function E0(e){return e==null?"":C0(e).replace(h0,"%2F")}function pi(e){try{return decodeURIComponent(""+e)}catch{}return""+e}const k0=/\/$/,x0=e=>e.replace(k0,"");function wo(e,t,n="/"){let s,i={},r="",o="";const l=t.indexOf("#");let a=t.indexOf("?");return l<a&&l>=0&&(a=-1),a>-1&&(s=t.slice(0,a),r=t.slice(a+1,l>-1?l:t.length),i=e(r)),l>-1&&(s=s||t.slice(0,l),o=t.slice(l,t.length)),s=P0(s!=null?s:t,n),{fullPath:s+(r&&"?")+r+o,path:s,query:i,hash:pi(o)}}function T0(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}function jc(e,t){return!t||!e.toLowerCase().startsWith(t.toLowerCase())?e:e.slice(t.length)||"/"}function R0(e,t,n){const s=t.matched.length-1,i=n.matched.length-1;return s>-1&&s===i&&Ts(t.matched[s],n.matched[i])&&Ph(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function Ts(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function Ph(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!A0(e[n],t[n]))return!1;return!0}function A0(e,t){return It(e)?Uc(e,t):It(t)?Uc(t,e):e===t}function Uc(e,t){return It(t)?e.length===t.length&&e.every((n,s)=>n===t[s]):e.length===1&&e[0]===t}function P0(e,t){if(e.startsWith("/"))return e;if(!e)return t;const n=t.split("/"),s=e.split("/"),i=s[s.length-1];(i===".."||i===".")&&s.push("");let r=n.length-1,o,l;for(o=0;o<s.length;o++)if(l=s[o],l!==".")if(l==="..")r>1&&r--;else break;return n.slice(0,r).join("/")+"/"+s.slice(o).join("/")}var mi;(function(e){e.pop="pop",e.push="push"})(mi||(mi={}));var Js;(function(e){e.back="back",e.forward="forward",e.unknown=""})(Js||(Js={}));function O0(e){if(!e)if(cs){const t=document.querySelector("base");e=t&&t.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),x0(e)}const N0=/^[^#]+#/;function M0(e,t){return e.replace(N0,"#")+t}function I0(e,t){const n=document.documentElement.getBoundingClientRect(),s=e.getBoundingClientRect();return{behavior:t.behavior,left:s.left-n.left-(t.left||0),top:s.top-n.top-(t.top||0)}}const so=()=>({left:window.scrollX,top:window.scrollY});function L0(e){let t;if("el"in e){const n=e.el,s=typeof n=="string"&&n.startsWith("#"),i=typeof n=="string"?s?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!i)return;t=I0(i,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.scrollX,t.top!=null?t.top:window.scrollY)}function Kc(e,t){return(history.state?history.state.position-t:-1)+e}const dl=new Map;function $0(e,t){dl.set(e,t)}function V0(e){const t=dl.get(e);return dl.delete(e),t}let F0=()=>location.protocol+"//"+location.host;function Oh(e,t){const{pathname:n,search:s,hash:i}=t,r=e.indexOf("#");if(r>-1){let l=i.includes(e.slice(r))?e.slice(r).length:1,a=i.slice(l);return a[0]!=="/"&&(a="/"+a),jc(a,"")}return jc(n,e)+s+i}function q0(e,t,n,s){let i=[],r=[],o=null;const l=({state:d})=>{const h=Oh(e,location),g=n.value,T=t.value;let x=0;if(d){if(n.value=h,t.value=d,o&&o===g){o=null;return}x=T?d.position-T.position:0}else s(h);i.forEach(A=>{A(n.value,g,{delta:x,type:mi.pop,direction:x?x>0?Js.forward:Js.back:Js.unknown})})};function a(){o=n.value}function c(d){i.push(d);const h=()=>{const g=i.indexOf(d);g>-1&&i.splice(g,1)};return r.push(h),h}function u(){const{history:d}=window;!d.state||d.replaceState(_e({},d.state,{scroll:so()}),"")}function f(){for(const d of r)d();r=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",u)}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",u,{passive:!0}),{pauseListeners:a,listen:c,destroy:f}}function zc(e,t,n,s=!1,i=!1){return{back:e,current:t,forward:n,replaced:s,position:window.history.length,scroll:i?so():null}}function B0(e){const{history:t,location:n}=window,s={value:Oh(e,n)},i={value:t.state};i.value||r(s.value,{back:null,current:s.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function r(a,c,u){const f=e.indexOf("#"),d=f>-1?(n.host&&document.querySelector("base")?e:e.slice(f))+a:F0()+e+a;try{t[u?"replaceState":"pushState"](c,"",d),i.value=c}catch(h){console.error(h),n[u?"replace":"assign"](d)}}function o(a,c){const u=_e({},t.state,zc(i.value.back,a,i.value.forward,!0),c,{position:i.value.position});r(a,u,!0),s.value=a}function l(a,c){const u=_e({},i.value,t.state,{forward:a,scroll:so()});r(u.current,u,!0);const f=_e({},zc(s.value,a,null),{position:u.position+1},c);r(a,f,!1),s.value=a}return{location:s,state:i,push:l,replace:o}}function D0(e){e=O0(e);const t=B0(e),n=q0(e,t.state,t.location,t.replace);function s(r,o=!0){o||n.pauseListeners(),history.go(r)}const i=_e({location:"",base:e,go:s,createHref:M0.bind(null,e)},t,n);return Object.defineProperty(i,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(i,"state",{enumerable:!0,get:()=>t.state.value}),i}function H0(e){return typeof e=="string"||e&&typeof e=="object"}function Nh(e){return typeof e=="string"||typeof e=="symbol"}const sn={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},Mh=Symbol("");var Wc;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(Wc||(Wc={}));function Rs(e,t){return _e(new Error,{type:e,[Mh]:!0},t)}function Ht(e,t){return e instanceof Error&&Mh in e&&(t==null||!!(e.type&t))}const Gc="[^/]+?",j0={sensitive:!1,strict:!1,start:!0,end:!0},U0=/[.+*?^${}()[\]/\\]/g;function K0(e,t){const n=_e({},j0,t),s=[];let i=n.start?"^":"";const r=[];for(const c of e){const u=c.length?[]:[90];n.strict&&!c.length&&(i+="/");for(let f=0;f<c.length;f++){const d=c[f];let h=40+(n.sensitive?.25:0);if(d.type===0)f||(i+="/"),i+=d.value.replace(U0,"\\$&"),h+=40;else if(d.type===1){const{value:g,repeatable:T,optional:x,regexp:A}=d;r.push({name:g,repeatable:T,optional:x});const v=A||Gc;if(v!==Gc){h+=10;try{new RegExp(`(${v})`)}catch(E){throw new Error(`Invalid custom RegExp for param "${g}" (${v}): `+E.message)}}let p=T?`((?:${v})(?:/(?:${v}))*)`:`(${v})`;f||(p=x&&c.length<2?`(?:/${p})`:"/"+p),x&&(p+="?"),i+=p,h+=20,x&&(h+=-8),T&&(h+=-20),v===".*"&&(h+=-50)}u.push(h)}s.push(u)}if(n.strict&&n.end){const c=s.length-1;s[c][s[c].length-1]+=.7000000000000001}n.strict||(i+="/?"),n.end?i+="$":n.strict&&(i+="(?:/|$)");const o=new RegExp(i,n.sensitive?"":"i");function l(c){const u=c.match(o),f={};if(!u)return null;for(let d=1;d<u.length;d++){const h=u[d]||"",g=r[d-1];f[g.name]=h&&g.repeatable?h.split("/"):h}return f}function a(c){let u="",f=!1;for(const d of e){(!f||!u.endsWith("/"))&&(u+="/"),f=!1;for(const h of d)if(h.type===0)u+=h.value;else if(h.type===1){const{value:g,repeatable:T,optional:x}=h,A=g in c?c[g]:"";if(It(A)&&!T)throw new Error(`Provided param "${g}" is an array but it is not repeatable (* or + modifiers)`);const v=It(A)?A.join("/"):A;if(!v)if(x)d.length<2&&(u.endsWith("/")?u=u.slice(0,-1):f=!0);else throw new Error(`Missing required param "${g}"`);u+=v}}return u||"/"}return{re:o,score:s,keys:r,parse:l,stringify:a}}function z0(e,t){let n=0;for(;n<e.length&&n<t.length;){const s=t[n]-e[n];if(s)return s;n++}return e.length<t.length?e.length===1&&e[0]===40+40?-1:1:e.length>t.length?t.length===1&&t[0]===40+40?1:-1:0}function W0(e,t){let n=0;const s=e.score,i=t.score;for(;n<s.length&&n<i.length;){const r=z0(s[n],i[n]);if(r)return r;n++}if(Math.abs(i.length-s.length)===1){if(Qc(s))return 1;if(Qc(i))return-1}return i.length-s.length}function Qc(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const G0={type:0,value:""},Q0=/[a-zA-Z0-9_]/;function Y0(e){if(!e)return[[]];if(e==="/")return[[G0]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function t(h){throw new Error(`ERR (${n})/"${c}": ${h}`)}let n=0,s=n;const i=[];let r;function o(){r&&i.push(r),r=[]}let l=0,a,c="",u="";function f(){!c||(n===0?r.push({type:0,value:c}):n===1||n===2||n===3?(r.length>1&&(a==="*"||a==="+")&&t(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),r.push({type:1,value:c,regexp:u,repeatable:a==="*"||a==="+",optional:a==="*"||a==="?"})):t("Invalid state to consume buffer"),c="")}function d(){c+=a}for(;l<e.length;){if(a=e[l++],a==="\\"&&n!==2){s=n,n=4;continue}switch(n){case 0:a==="/"?(c&&f(),o()):a===":"?(f(),n=1):d();break;case 4:d(),n=s;break;case 1:a==="("?n=2:Q0.test(a)?d():(f(),n=0,a!=="*"&&a!=="?"&&a!=="+"&&l--);break;case 2:a===")"?u[u.length-1]=="\\"?u=u.slice(0,-1)+a:n=3:u+=a;break;case 3:f(),n=0,a!=="*"&&a!=="?"&&a!=="+"&&l--,u="";break;default:t("Unknown state");break}}return n===2&&t(`Unfinished custom RegExp for param "${c}"`),f(),o(),i}function J0(e,t,n){const s=K0(Y0(e.path),n),i=_e(s,{record:e,parent:t,children:[],alias:[]});return t&&!i.record.aliasOf==!t.record.aliasOf&&t.children.push(i),i}function Z0(e,t){const n=[],s=new Map;t=Zc({strict:!1,end:!0,sensitive:!1},t);function i(u){return s.get(u)}function r(u,f,d){const h=!d,g=X0(u);g.aliasOf=d&&d.record;const T=Zc(t,u),x=[g];if("alias"in u){const p=typeof u.alias=="string"?[u.alias]:u.alias;for(const E of p)x.push(_e({},g,{components:d?d.record.components:g.components,path:E,aliasOf:d?d.record:g}))}let A,v;for(const p of x){const{path:E}=p;if(f&&E[0]!=="/"){const w=f.record.path,k=w[w.length-1]==="/"?"":"/";p.path=f.record.path+(E&&k+E)}if(A=J0(p,f,T),d?d.alias.push(A):(v=v||A,v!==A&&v.alias.push(A),h&&u.name&&!Jc(A)&&o(u.name)),g.children){const w=g.children;for(let k=0;k<w.length;k++)r(w[k],A,d&&d.children[k])}d=d||A,(A.record.components&&Object.keys(A.record.components).length||A.record.name||A.record.redirect)&&a(A)}return v?()=>{o(v)}:Ys}function o(u){if(Nh(u)){const f=s.get(u);f&&(s.delete(u),n.splice(n.indexOf(f),1),f.children.forEach(o),f.alias.forEach(o))}else{const f=n.indexOf(u);f>-1&&(n.splice(f,1),u.record.name&&s.delete(u.record.name),u.children.forEach(o),u.alias.forEach(o))}}function l(){return n}function a(u){let f=0;for(;f<n.length&&W0(u,n[f])>=0&&(u.record.path!==n[f].record.path||!Ih(u,n[f]));)f++;n.splice(f,0,u),u.record.name&&!Jc(u)&&s.set(u.record.name,u)}function c(u,f){let d,h={},g,T;if("name"in u&&u.name){if(d=s.get(u.name),!d)throw Rs(1,{location:u});T=d.record.name,h=_e(Yc(f.params,d.keys.filter(v=>!v.optional).concat(d.parent?d.parent.keys.filter(v=>v.optional):[]).map(v=>v.name)),u.params&&Yc(u.params,d.keys.map(v=>v.name))),g=d.stringify(h)}else if(u.path!=null)g=u.path,d=n.find(v=>v.re.test(g)),d&&(h=d.parse(g),T=d.record.name);else{if(d=f.name?s.get(f.name):n.find(v=>v.re.test(f.path)),!d)throw Rs(1,{location:u,currentLocation:f});T=d.record.name,h=_e({},f.params,u.params),g=d.stringify(h)}const x=[];let A=d;for(;A;)x.unshift(A.record),A=A.parent;return{name:T,path:g,params:h,matched:x,meta:t_(x)}}return e.forEach(u=>r(u)),{addRoute:r,resolve:c,removeRoute:o,getRoutes:l,getRecordMatcher:i}}function Yc(e,t){const n={};for(const s of t)s in e&&(n[s]=e[s]);return n}function X0(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:e_(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}}}function e_(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const s in e.components)t[s]=typeof n=="object"?n[s]:n;return t}function Jc(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function t_(e){return e.reduce((t,n)=>_e(t,n.meta),{})}function Zc(e,t){const n={};for(const s in e)n[s]=s in t?t[s]:e[s];return n}function Ih(e,t){return t.children.some(n=>n===e||Ih(e,n))}function n_(e){const t={};if(e===""||e==="?")return t;const s=(e[0]==="?"?e.slice(1):e).split("&");for(let i=0;i<s.length;++i){const r=s[i].replace(xh," "),o=r.indexOf("="),l=pi(o<0?r:r.slice(0,o)),a=o<0?null:pi(r.slice(o+1));if(l in t){let c=t[l];It(c)||(c=t[l]=[c]),c.push(a)}else t[l]=a}return t}function Xc(e){let t="";for(let n in e){const s=e[n];if(n=w0(n),s==null){s!==void 0&&(t+=(t.length?"&":"")+n);continue}(It(s)?s.map(r=>r&&fl(r)):[s&&fl(s)]).forEach(r=>{r!==void 0&&(t+=(t.length?"&":"")+n,r!=null&&(t+="="+r))})}return t}function s_(e){const t={};for(const n in e){const s=e[n];s!==void 0&&(t[n]=It(s)?s.map(i=>i==null?null:""+i):s==null?s:""+s)}return t}const i_=Symbol(""),eu=Symbol(""),io=Symbol(""),Sa=Symbol(""),hl=Symbol("");function $s(){let e=[];function t(s){return e.push(s),()=>{const i=e.indexOf(s);i>-1&&e.splice(i,1)}}function n(){e=[]}return{add:t,list:()=>e.slice(),reset:n}}function dn(e,t,n,s,i,r=o=>o()){const o=s&&(s.enterCallbacks[i]=s.enterCallbacks[i]||[]);return()=>new Promise((l,a)=>{const c=d=>{d===!1?a(Rs(4,{from:n,to:t})):d instanceof Error?a(d):H0(d)?a(Rs(2,{from:t,to:d})):(o&&s.enterCallbacks[i]===o&&typeof d=="function"&&o.push(d),l())},u=r(()=>e.call(s&&s.instances[i],t,n,c));let f=Promise.resolve(u);e.length<3&&(f=f.then(c)),f.catch(d=>a(d))})}function Co(e,t,n,s,i=r=>r()){const r=[];for(const o of e)for(const l in o.components){let a=o.components[l];if(!(t!=="beforeRouteEnter"&&!o.instances[l]))if(r_(a)){const u=(a.__vccOpts||a)[t];u&&r.push(dn(u,n,s,o,l,i))}else{let c=a();r.push(()=>c.then(u=>{if(!u)return Promise.reject(new Error(`Couldn't resolve component "${l}" at "${o.path}"`));const f=f0(u)?u.default:u;o.components[l]=f;const h=(f.__vccOpts||f)[t];return h&&dn(h,n,s,o,l,i)()}))}}return r}function r_(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function tu(e){const t=at(io),n=at(Sa),s=L(()=>t.resolve(Gt(e.to))),i=L(()=>{const{matched:a}=s.value,{length:c}=a,u=a[c-1],f=n.matched;if(!u||!f.length)return-1;const d=f.findIndex(Ts.bind(null,u));if(d>-1)return d;const h=nu(a[c-2]);return c>1&&nu(u)===h&&f[f.length-1].path!==h?f.findIndex(Ts.bind(null,a[c-2])):d}),r=L(()=>i.value>-1&&c_(n.params,s.value.params)),o=L(()=>i.value>-1&&i.value===n.matched.length-1&&Ph(n.params,s.value.params));function l(a={}){return a_(a)?t[Gt(e.replace)?"replace":"push"](Gt(e.to)).catch(Ys):Promise.resolve()}return{route:s,href:L(()=>s.value.href),isActive:r,isExactActive:o,navigate:l}}const o_=Os({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:tu,setup(e,{slots:t}){const n=Sn(tu(e)),{options:s}=at(io),i=L(()=>({[su(e.activeClass,s.linkActiveClass,"router-link-active")]:n.isActive,[su(e.exactActiveClass,s.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive}));return()=>{const r=t.default&&t.default(n);return e.custom?r:F("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:i.value},r)}}}),l_=o_;function a_(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function c_(e,t){for(const n in t){const s=t[n],i=e[n];if(typeof s=="string"){if(s!==i)return!1}else if(!It(i)||i.length!==s.length||s.some((r,o)=>r!==i[o]))return!1}return!0}function nu(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const su=(e,t,n)=>e!=null?e:t!=null?t:n,u_=Os({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:n}){const s=at(hl),i=L(()=>e.route||s.value),r=at(eu,0),o=L(()=>{let c=Gt(r);const{matched:u}=i.value;let f;for(;(f=u[c])&&!f.components;)c++;return c}),l=L(()=>i.value.matched[o.value]);Us(eu,L(()=>o.value+1)),Us(i_,l),Us(hl,i);const a=ce();return Ce(()=>[a.value,l.value,e.name],([c,u,f],[d,h,g])=>{u&&(u.instances[f]=c,h&&h!==u&&c&&c===d&&(u.leaveGuards.size||(u.leaveGuards=h.leaveGuards),u.updateGuards.size||(u.updateGuards=h.updateGuards))),c&&u&&(!h||!Ts(u,h)||!d)&&(u.enterCallbacks[f]||[]).forEach(T=>T(c))},{flush:"post"}),()=>{const c=i.value,u=e.name,f=l.value,d=f&&f.components[u];if(!d)return iu(n.default,{Component:d,route:c});const h=f.props[u],g=h?h===!0?c.params:typeof h=="function"?h(c):h:null,x=F(d,_e({},g,t,{onVnodeUnmounted:A=>{A.component.isUnmounted&&(f.instances[u]=null)},ref:a}));return iu(n.default,{Component:x,route:c})||x}}});function iu(e,t){if(!e)return null;const n=e(t);return n.length===1?n[0]:n}const f_=u_;function d_(e){const t=Z0(e.routes,e),n=e.parseQuery||n_,s=e.stringifyQuery||Xc,i=e.history,r=$s(),o=$s(),l=$s(),a=tf(sn);let c=sn;cs&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const u=So.bind(null,I=>""+I),f=So.bind(null,E0),d=So.bind(null,pi);function h(I,Y){let G,ee;return Nh(I)?(G=t.getRecordMatcher(I),ee=Y):ee=I,t.addRoute(ee,G)}function g(I){const Y=t.getRecordMatcher(I);Y&&t.removeRoute(Y)}function T(){return t.getRoutes().map(I=>I.record)}function x(I){return!!t.getRecordMatcher(I)}function A(I,Y){if(Y=_e({},Y||a.value),typeof I=="string"){const _=wo(n,I,Y.path),O=t.resolve({path:_.path},Y),B=i.createHref(_.fullPath);return _e(_,O,{params:d(O.params),hash:pi(_.hash),redirectedFrom:void 0,href:B})}let G;if(I.path!=null)G=_e({},I,{path:wo(n,I.path,Y.path).path});else{const _=_e({},I.params);for(const O in _)_[O]==null&&delete _[O];G=_e({},I,{params:f(_)}),Y.params=f(Y.params)}const ee=t.resolve(G,Y),be=I.hash||"";ee.params=u(d(ee.params));const xe=T0(s,_e({},I,{hash:S0(be),path:ee.path})),m=i.createHref(xe);return _e({fullPath:xe,hash:be,query:s===Xc?s_(I.query):I.query||{}},ee,{redirectedFrom:void 0,href:m})}function v(I){return typeof I=="string"?wo(n,I,a.value.path):_e({},I)}function p(I,Y){if(c!==I)return Rs(8,{from:Y,to:I})}function E(I){return N(I)}function w(I){return E(_e(v(I),{replace:!0}))}function k(I){const Y=I.matched[I.matched.length-1];if(Y&&Y.redirect){const{redirect:G}=Y;let ee=typeof G=="function"?G(I):G;return typeof ee=="string"&&(ee=ee.includes("?")||ee.includes("#")?ee=v(ee):{path:ee},ee.params={}),_e({query:I.query,hash:I.hash,params:ee.path!=null?{}:I.params},ee)}}function N(I,Y){const G=c=A(I),ee=a.value,be=I.state,xe=I.force,m=I.replace===!0,_=k(G);if(_)return N(_e(v(_),{state:typeof _=="object"?_e({},be,_.state):be,force:xe,replace:m}),Y||G);const O=G;O.redirectedFrom=Y;let B;return!xe&&R0(s,ee,G)&&(B=Rs(16,{to:O,from:ee}),fe(ee,ee,!0,!1)),(B?Promise.resolve(B):S(O,ee)).catch(q=>Ht(q)?Ht(q,2)?q:re(q):H(q,O,ee)).then(q=>{if(q){if(Ht(q,2))return N(_e({replace:m},v(q.to),{state:typeof q.to=="object"?_e({},be,q.to.state):be,force:xe}),Y||O)}else q=b(O,ee,!0,m,be);return R(O,ee,q),q})}function C(I,Y){const G=p(I,Y);return G?Promise.reject(G):Promise.resolve()}function y(I){const Y=Ie.values().next().value;return Y&&typeof Y.runWithContext=="function"?Y.runWithContext(I):I()}function S(I,Y){let G;const[ee,be,xe]=h_(I,Y);G=Co(ee.reverse(),"beforeRouteLeave",I,Y);for(const _ of ee)_.leaveGuards.forEach(O=>{G.push(dn(O,I,Y))});const m=C.bind(null,I,Y);return G.push(m),X(G).then(()=>{G=[];for(const _ of r.list())G.push(dn(_,I,Y));return G.push(m),X(G)}).then(()=>{G=Co(be,"beforeRouteUpdate",I,Y);for(const _ of be)_.updateGuards.forEach(O=>{G.push(dn(O,I,Y))});return G.push(m),X(G)}).then(()=>{G=[];for(const _ of xe)if(_.beforeEnter)if(It(_.beforeEnter))for(const O of _.beforeEnter)G.push(dn(O,I,Y));else G.push(dn(_.beforeEnter,I,Y));return G.push(m),X(G)}).then(()=>(I.matched.forEach(_=>_.enterCallbacks={}),G=Co(xe,"beforeRouteEnter",I,Y,y),G.push(m),X(G))).then(()=>{G=[];for(const _ of o.list())G.push(dn(_,I,Y));return G.push(m),X(G)}).catch(_=>Ht(_,8)?_:Promise.reject(_))}function R(I,Y,G){l.list().forEach(ee=>y(()=>ee(I,Y,G)))}function b(I,Y,G,ee,be){const xe=p(I,Y);if(xe)return xe;const m=Y===sn,_=cs?history.state:{};G&&(ee||m?i.replace(I.fullPath,_e({scroll:m&&_&&_.scroll},be)):i.push(I.fullPath,be)),a.value=I,fe(I,Y,G,m),re()}let $;function P(){$||($=i.listen((I,Y,G)=>{if(!He.listening)return;const ee=A(I),be=k(ee);if(be){N(_e(be,{replace:!0}),ee).catch(Ys);return}c=ee;const xe=a.value;cs&&$0(Kc(xe.fullPath,G.delta),so()),S(ee,xe).catch(m=>Ht(m,12)?m:Ht(m,2)?(N(m.to,ee).then(_=>{Ht(_,20)&&!G.delta&&G.type===mi.pop&&i.go(-1,!1)}).catch(Ys),Promise.reject()):(G.delta&&i.go(-G.delta,!1),H(m,ee,xe))).then(m=>{m=m||b(ee,xe,!1),m&&(G.delta&&!Ht(m,8)?i.go(-G.delta,!1):G.type===mi.pop&&Ht(m,20)&&i.go(-1,!1)),R(ee,xe,m)}).catch(Ys)}))}let D=$s(),V=$s(),M;function H(I,Y,G){re(I);const ee=V.list();return ee.length?ee.forEach(be=>be(I,Y,G)):console.error(I),Promise.reject(I)}function ge(){return M&&a.value!==sn?Promise.resolve():new Promise((I,Y)=>{D.add([I,Y])})}function re(I){return M||(M=!I,P(),D.list().forEach(([Y,G])=>I?G(I):Y()),D.reset()),I}function fe(I,Y,G,ee){const{scrollBehavior:be}=e;if(!cs||!be)return Promise.resolve();const xe=!G&&V0(Kc(I.fullPath,0))||(ee||!G)&&history.state&&history.state.scroll||null;return Ge().then(()=>be(I,Y,xe)).then(m=>m&&L0(m)).catch(m=>H(m,I,Y))}const j=I=>i.go(I);let ve;const Ie=new Set,He={currentRoute:a,listening:!0,addRoute:h,removeRoute:g,hasRoute:x,getRoutes:T,resolve:A,options:e,push:E,replace:w,go:j,back:()=>j(-1),forward:()=>j(1),beforeEach:r.add,beforeResolve:o.add,afterEach:l.add,onError:V.add,isReady:ge,install(I){const Y=this;I.component("RouterLink",l_),I.component("RouterView",f_),I.config.globalProperties.$router=Y,Object.defineProperty(I.config.globalProperties,"$route",{enumerable:!0,get:()=>Gt(a)}),cs&&!ve&&a.value===sn&&(ve=!0,E(i.location).catch(be=>{}));const G={};for(const be in sn)Object.defineProperty(G,be,{get:()=>a.value[be],enumerable:!0});I.provide(io,Y),I.provide(Sa,Al(G)),I.provide(hl,a);const ee=I.unmount;Ie.add(I),I.unmount=function(){Ie.delete(I),Ie.size<1&&(c=sn,$&&$(),$=null,a.value=sn,ve=!1,M=!1),ee()}}};function X(I){return I.reduce((Y,G)=>Y.then(()=>y(G)),Promise.resolve())}return He}function h_(e,t){const n=[],s=[],i=[],r=Math.max(t.matched.length,e.matched.length);for(let o=0;o<r;o++){const l=t.matched[o];l&&(e.matched.find(c=>Ts(c,l))?s.push(l):n.push(l));const a=e.matched[o];a&&(t.matched.find(c=>Ts(c,a))||i.push(a))}return[n,s,i]}function ww(){return at(io)}function Cw(){return at(Sa)}const p_=[{path:"/",component:()=>Tn(()=>import("./MainLayout.350c1018.js"),["assets/MainLayout.350c1018.js","assets/MainLayout.3da459ba.css","assets/use-quasar.d6f10685.js","assets/OBtn.64a91a00.js","assets/index.55edfe91.js","assets/Node.9a909cb3.js"]),children:[{path:"",name:"home",component:()=>Tn(()=>import("./LandingPage.7705e3e3.js").then(function(e){return e.e}),["assets/LandingPage.7705e3e3.js","assets/LandingPage.957c1a7d.css","assets/index.55edfe91.js","assets/use-quasar.d6f10685.js","assets/index.a83e0e01.js"]),children:[{name:"editNode",path:":storeId/:fragment*",component:()=>Tn(()=>import("./NodeEditor.6e898362.js"),["assets/NodeEditor.6e898362.js","assets/NodeEditor.62a902b1.css","assets/use-quasar.d6f10685.js","assets/OBtn.64a91a00.js","assets/index.55edfe91.js","assets/Node.9a909cb3.js"]),props:{onError({router:e}){e.push({name:"home"})}}}]}]},{path:"/:catchAll(.*)*",component:()=>Tn(()=>import("./ErrorNotFound.915dafaa.js"),[])}];var Eo=function(){return d_({scrollBehavior:()=>({left:0,top:0}),routes:p_,history:D0("/")})};async function m_(e,t){const n=e(s0);n.use(Xb,t);const s=typeof _o=="function"?await _o({}):_o;n.use(s);const i=Jt(typeof Eo=="function"?await Eo({store:s}):Eo);return s.use(({store:r})=>{r.router=i}),{app:n,store:s,router:i}}function g_(e,t,n){let s;function i(){s!==void 0&&(al.remove(s),s=void 0)}return vt(()=>{e.value===!0&&i()}),{removeFromHistory:i,addToHistory(){s={condition:()=>n.value===!0,handler:t},al.add(s)}}}function lr(e){if(Object(e.$parent)===e.$parent)return e.$parent;let{parent:t}=e.$;for(;Object(t)===t;){if(Object(t.proxy)===t.proxy)return t.proxy;t=t.parent}}function Lh(e,t){typeof t.type=="symbol"?Array.isArray(t.children)===!0&&t.children.forEach(n=>{Lh(e,n)}):e.add(t)}function Ew(e){const t=new Set;return e.forEach(n=>{Lh(t,n)}),Array.from(t)}function $h(e){return e.appContext.config.globalProperties.$router!==void 0}function Vh(e){return e.isUnmounted===!0||e.isDeactivated===!0}function v_(){let e=null;const t=Ee();function n(){e!==null&&(clearTimeout(e),e=null)}return wi(n),vt(n),{removeTimeout:n,registerTimeout(s,i){n(),Vh(t)===!1&&(e=setTimeout(s,i))}}}function y_(){let e;const t=Ee();function n(){e=void 0}return wi(n),vt(n),{removeTick:n,registerTick(s){e=s,Ge(()=>{e===s&&(Vh(t)===!1&&e(),e=void 0)})}}}const b_={modelValue:{type:Boolean,default:null},"onUpdate:modelValue":[Function,Array]},__=["beforeShow","show","beforeHide","hide"];function S_({showing:e,canShow:t,hideOnRouteChange:n,handleShow:s,handleHide:i,processOnMount:r}){const o=Ee(),{props:l,emit:a,proxy:c}=o;let u;function f(v){e.value===!0?g(v):d(v)}function d(v){if(l.disable===!0||v!==void 0&&v.qAnchorHandled===!0||t!==void 0&&t(v)!==!0)return;const p=l["onUpdate:modelValue"]!==void 0;p===!0&&(a("update:modelValue",!0),u=v,Ge(()=>{u===v&&(u=void 0)})),(l.modelValue===null||p===!1)&&h(v)}function h(v){e.value!==!0&&(e.value=!0,a("beforeShow",v),s!==void 0?s(v):a("show",v))}function g(v){if(l.disable===!0)return;const p=l["onUpdate:modelValue"]!==void 0;p===!0&&(a("update:modelValue",!1),u=v,Ge(()=>{u===v&&(u=void 0)})),(l.modelValue===null||p===!1)&&T(v)}function T(v){e.value!==!1&&(e.value=!1,a("beforeHide",v),i!==void 0?i(v):a("hide",v))}function x(v){l.disable===!0&&v===!0?l["onUpdate:modelValue"]!==void 0&&a("update:modelValue",!1):v===!0!==e.value&&(v===!0?h:T)(u)}Ce(()=>l.modelValue,x),n!==void 0&&$h(o)===!0&&Ce(()=>c.$route.fullPath,()=>{n.value===!0&&e.value===!0&&g()}),r===!0&&Bt(()=>{x(l.modelValue)});const A={show:d,hide:g,toggle:f};return Object.assign(c,A),A}const w_={transitionShow:{type:String,default:"fade"},transitionHide:{type:String,default:"fade"},transitionDuration:{type:[String,Number],default:300}};function C_(e,t=()=>{},n=()=>{}){return{transitionProps:L(()=>{const s=`q-transition--${e.transitionShow||t()}`,i=`q-transition--${e.transitionHide||n()}`;return{appear:!0,enterFromClass:`${s}-enter-from`,enterActiveClass:`${s}-enter-active`,enterToClass:`${s}-enter-to`,leaveFromClass:`${i}-leave-from`,leaveActiveClass:`${i}-leave-active`,leaveToClass:`${i}-leave-to`}}),transitionStyle:L(()=>`--q-transition-duration: ${e.transitionDuration}ms`)}}let On=[],gi=[];function Fh(e){gi=gi.filter(t=>t!==e)}function E_(e){Fh(e),gi.push(e)}function ru(e){Fh(e),gi.length===0&&On.length!==0&&(On[On.length-1](),On=[])}function wa(e){gi.length===0?e():On.push(e)}function k_(e){On=On.filter(t=>t!==e)}let x_=1,T_=document.body;function Ca(e,t){const n=document.createElement("div");if(n.id=t!==void 0?`q-portal--${t}--${x_++}`:e,Ir.globalNodes!==void 0){const s=Ir.globalNodes.class;s!==void 0&&(n.className=s)}return T_.appendChild(n),n}function qh(e){e.remove()}const ar=[];function kw(e){return ar.find(t=>t.contentEl!==null&&t.contentEl.contains(e))}function R_(e,t){do{if(e.$options.name==="QMenu"){if(e.hide(t),e.$props.separateClosePopup===!0)return lr(e)}else if(e.__qPortal===!0){const n=lr(e);return n!==void 0&&n.$options.name==="QPopupProxy"?(e.hide(t),n):e}e=lr(e)}while(e!=null)}function xw(e,t,n){for(;n!==0&&e!==void 0&&e!==null;){if(e.__qPortal===!0){if(n--,e.$options.name==="QMenu"){e=R_(e,t);continue}e.hide(t)}e=lr(e)}}function A_(e){for(e=e.parent;e!=null;){if(e.type.name==="QGlobalDialog")return!0;if(e.type.name==="QDialog"||e.type.name==="QMenu")return!1;e=e.parent}return!1}function P_(e,t,n,s){const i=ce(!1),r=ce(!1);let o=null;const l={},a=s==="dialog"&&A_(e);function c(f){if(f===!0){ru(l),r.value=!0;return}r.value=!1,i.value===!1&&(a===!1&&o===null&&(o=Ca(!1,s)),i.value=!0,ar.push(e.proxy),E_(l))}function u(f){if(r.value=!1,f!==!0)return;ru(l),i.value=!1;const d=ar.indexOf(e.proxy);d!==-1&&ar.splice(d,1),o!==null&&(qh(o),o=null)}return Ci(()=>{u(!0)}),e.proxy.__qPortal=!0,Ns(e.proxy,"contentEl",()=>t.value),{showPortal:c,hidePortal:u,portalIsActive:i,portalIsAccessible:r,renderPortal:()=>a===!0?n():i.value===!0?[F(Uf,{to:o},n())]:void 0}}function pl(e,t){const n=e.style;for(const s in t)n[s]=t[s]}function O_(e){if(e==null)return;if(typeof e=="string")try{return document.querySelector(e)||void 0}catch{return}const t=Gt(e);if(t)return t.$el||t}function N_(e,t){if(e==null||e.contains(t)===!0)return!0;for(let n=e.nextElementSibling;n!==null;n=n.nextElementSibling)if(n.contains(t))return!0;return!1}const M_=[null,document,document.body,document.scrollingElement,document.documentElement];function Tw(e,t){let n=O_(t);if(n===void 0){if(e==null)return window;n=e.closest(".scroll,.scroll-y,.overflow-auto")}return M_.includes(n)?window:n}function I_(e){return e===window?window.pageYOffset||window.scrollY||document.body.scrollTop||0:e.scrollTop}function L_(e){return e===window?window.pageXOffset||window.scrollX||document.body.scrollLeft||0:e.scrollLeft}let Wi;function Rw(){if(Wi!==void 0)return Wi;const e=document.createElement("p"),t=document.createElement("div");pl(e,{width:"100%",height:"200px"}),pl(t,{position:"absolute",top:"0px",left:"0px",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),t.appendChild(e),document.body.appendChild(t);const n=e.offsetWidth;t.style.overflow="scroll";let s=e.offsetWidth;return n===s&&(s=t.clientWidth),t.remove(),Wi=n-s,Wi}function $_(e,t=!0){return!e||e.nodeType!==Node.ELEMENT_NODE?!1:t?e.scrollHeight>e.clientHeight&&(e.classList.contains("scroll")||e.classList.contains("overflow-auto")||["auto","scroll"].includes(window.getComputedStyle(e)["overflow-y"])):e.scrollWidth>e.clientWidth&&(e.classList.contains("scroll")||e.classList.contains("overflow-auto")||["auto","scroll"].includes(window.getComputedStyle(e)["overflow-x"]))}let Vs=0,ko,xo,Hs,To=!1,ou,lu,au,En=null;function V_(e){F_(e)&&St(e)}function F_(e){if(e.target===document.body||e.target.classList.contains("q-layout__backdrop"))return!0;const t=Ib(e),n=e.shiftKey&&!e.deltaX,s=!n&&Math.abs(e.deltaX)<=Math.abs(e.deltaY),i=n||s?e.deltaY:e.deltaX;for(let r=0;r<t.length;r++){const o=t[r];if($_(o,s))return s?i<0&&o.scrollTop===0?!0:i>0&&o.scrollTop+o.clientHeight===o.scrollHeight:i<0&&o.scrollLeft===0?!0:i>0&&o.scrollLeft+o.clientWidth===o.scrollWidth}return!0}function cu(e){e.target===document&&(document.scrollingElement.scrollTop=document.scrollingElement.scrollTop)}function Gi(e){To!==!0&&(To=!0,requestAnimationFrame(()=>{To=!1;const{height:t}=e.target,{clientHeight:n,scrollTop:s}=document.scrollingElement;(Hs===void 0||t!==window.innerHeight)&&(Hs=n-t,document.scrollingElement.scrollTop=s),s>Hs&&(document.scrollingElement.scrollTop-=Math.ceil((s-Hs)/8))}))}function uu(e){const t=document.body,n=window.visualViewport!==void 0;if(e==="add"){const{overflowY:s,overflowX:i}=window.getComputedStyle(t);ko=L_(window),xo=I_(window),ou=t.style.left,lu=t.style.top,au=window.location.href,t.style.left=`-${ko}px`,t.style.top=`-${xo}px`,i!=="hidden"&&(i==="scroll"||t.scrollWidth>window.innerWidth)&&t.classList.add("q-body--force-scrollbar-x"),s!=="hidden"&&(s==="scroll"||t.scrollHeight>window.innerHeight)&&t.classList.add("q-body--force-scrollbar-y"),t.classList.add("q-body--prevent-scroll"),document.qScrollPrevented=!0,De.is.ios===!0&&(n===!0?(window.scrollTo(0,0),window.visualViewport.addEventListener("resize",Gi,rt.passiveCapture),window.visualViewport.addEventListener("scroll",Gi,rt.passiveCapture),window.scrollTo(0,0)):window.addEventListener("scroll",cu,rt.passiveCapture))}De.is.desktop===!0&&De.is.mac===!0&&window[`${e}EventListener`]("wheel",V_,rt.notPassive),e==="remove"&&(De.is.ios===!0&&(n===!0?(window.visualViewport.removeEventListener("resize",Gi,rt.passiveCapture),window.visualViewport.removeEventListener("scroll",Gi,rt.passiveCapture)):window.removeEventListener("scroll",cu,rt.passiveCapture)),t.classList.remove("q-body--prevent-scroll"),t.classList.remove("q-body--force-scrollbar-x"),t.classList.remove("q-body--force-scrollbar-y"),document.qScrollPrevented=!1,t.style.left=ou,t.style.top=lu,window.location.href===au&&window.scrollTo(ko,xo),Hs=void 0)}function q_(e){let t="add";if(e===!0){if(Vs++,En!==null){clearTimeout(En),En=null;return}if(Vs>1)return}else{if(Vs===0||(Vs--,Vs>0))return;if(t="remove",De.is.ios===!0&&De.is.nativeMobile===!0){En!==null&&clearTimeout(En),En=setTimeout(()=>{uu(t),En=null},100);return}}uu(t)}function B_(){let e;return{preventBodyScroll(t){t!==e&&(e!==void 0||t===!0)&&(e=t,q_(t))}}}const tt=e=>Jt(Os(e)),D_=e=>Jt(e);function Pt(e,t){return e!==void 0&&e()||t}function Aw(e,t){if(e!==void 0){const n=e();if(n!=null)return n.slice()}return t}function Nn(e,t){return e!==void 0?t.concat(e()):t}function H_(e,t){return e===void 0?t:t!==void 0?t.concat(e()):e()}function Pw(e,t,n,s,i,r){t.key=s+i;const o=F(e,t,n);return i===!0?Dl(o,r()):o}const qn=[];let As;function j_(e){As=e.keyCode===27}function U_(){As===!0&&(As=!1)}function K_(e){As===!0&&(As=!1,hi(e,27)===!0&&qn[qn.length-1](e))}function Bh(e){window[e]("keydown",j_),window[e]("blur",U_),window[e]("keyup",K_),As=!1}function z_(e){De.is.desktop===!0&&(qn.push(e),qn.length===1&&Bh("addEventListener"))}function fu(e){const t=qn.indexOf(e);t!==-1&&(qn.splice(t,1),qn.length===0&&Bh("removeEventListener"))}const Bn=[];function Dh(e){Bn[Bn.length-1](e)}function W_(e){De.is.desktop===!0&&(Bn.push(e),Bn.length===1&&document.body.addEventListener("focusin",Dh))}function du(e){const t=Bn.indexOf(e);t!==-1&&(Bn.splice(t,1),Bn.length===0&&document.body.removeEventListener("focusin",Dh))}let Qi=0;const G_={standard:"fixed-full flex-center",top:"fixed-top justify-center",bottom:"fixed-bottom justify-center",right:"fixed-right items-center",left:"fixed-left items-center"},hu={standard:["scale","scale"],top:["slide-down","slide-up"],bottom:["slide-up","slide-down"],right:["slide-left","slide-right"],left:["slide-right","slide-left"]};var Q_=tt({name:"QDialog",inheritAttrs:!1,props:{...b_,...w_,transitionShow:String,transitionHide:String,persistent:Boolean,autoClose:Boolean,allowFocusOutside:Boolean,noEscDismiss:Boolean,noBackdropDismiss:Boolean,noRouteDismiss:Boolean,noRefocus:Boolean,noFocus:Boolean,noShake:Boolean,seamless:Boolean,maximized:Boolean,fullWidth:Boolean,fullHeight:Boolean,square:Boolean,backdropFilter:String,position:{type:String,default:"standard",validator:e=>e==="standard"||["top","bottom","left","right"].includes(e)}},emits:[...__,"shake","click","escapeKey"],setup(e,{slots:t,emit:n,attrs:s}){const i=Ee(),r=ce(null),o=ce(!1),l=ce(!1);let a=null,c=null,u,f;const d=L(()=>e.persistent!==!0&&e.noRouteDismiss!==!0&&e.seamless!==!0),{preventBodyScroll:h}=B_(),{registerTimeout:g}=v_(),{registerTick:T,removeTick:x}=y_(),{transitionProps:A,transitionStyle:v}=C_(e,()=>hu[e.position][0],()=>hu[e.position][1]),p=L(()=>v.value+(e.backdropFilter!==void 0?`;backdrop-filter:${e.backdropFilter};-webkit-backdrop-filter:${e.backdropFilter}`:"")),{showPortal:E,hidePortal:w,portalIsAccessible:k,renderPortal:N}=P_(i,r,He,"dialog"),{hide:C}=S_({showing:o,hideOnRouteChange:d,handleShow:D,handleHide:V,processOnMount:!0}),{addToHistory:y,removeFromHistory:S}=g_(o,C,d),R=L(()=>`q-dialog__inner flex no-pointer-events q-dialog__inner--${e.maximized===!0?"maximized":"minimized"} q-dialog__inner--${e.position} ${G_[e.position]}`+(l.value===!0?" q-dialog__inner--animating":"")+(e.fullWidth===!0?" q-dialog__inner--fullwidth":"")+(e.fullHeight===!0?" q-dialog__inner--fullheight":"")+(e.square===!0?" q-dialog__inner--square":"")),b=L(()=>o.value===!0&&e.seamless!==!0),$=L(()=>e.autoClose===!0?{onClick:j}:{}),P=L(()=>[`q-dialog fullscreen no-pointer-events q-dialog--${b.value===!0?"modal":"seamless"}`,s.class]);Ce(()=>e.maximized,X=>{o.value===!0&&fe(X)}),Ce(b,X=>{h(X),X===!0?(W_(Ie),z_(ge)):(du(Ie),fu(ge))});function D(X){y(),c=e.noRefocus===!1&&document.activeElement!==null?document.activeElement:null,fe(e.maximized),E(),l.value=!0,e.noFocus!==!0?(document.activeElement!==null&&document.activeElement.blur(),T(M)):x(),g(()=>{if(i.proxy.$q.platform.is.ios===!0){if(e.seamless!==!0&&document.activeElement){const{top:I,bottom:Y}=document.activeElement.getBoundingClientRect(),{innerHeight:G}=window,ee=window.visualViewport!==void 0?window.visualViewport.height:G;I>0&&Y>ee/2&&(document.scrollingElement.scrollTop=Math.min(document.scrollingElement.scrollHeight-ee,Y>=G?1/0:Math.ceil(document.scrollingElement.scrollTop+Y-ee/2))),document.activeElement.scrollIntoView()}f=!0,r.value.click(),f=!1}E(!0),l.value=!1,n("show",X)},e.transitionDuration)}function V(X){x(),S(),re(!0),l.value=!0,w(),c!==null&&(((X&&X.type.indexOf("key")===0?c.closest('[tabindex]:not([tabindex^="-"])'):void 0)||c).focus(),c=null),g(()=>{w(!0),l.value=!1,n("hide",X)},e.transitionDuration)}function M(X){wa(()=>{let I=r.value;I===null||I.contains(document.activeElement)===!0||(I=(X!==""?I.querySelector(X):null)||I.querySelector("[autofocus][tabindex], [data-autofocus][tabindex]")||I.querySelector("[autofocus] [tabindex], [data-autofocus] [tabindex]")||I.querySelector("[autofocus], [data-autofocus]")||I,I.focus({preventScroll:!0}))})}function H(X){X&&typeof X.focus=="function"?X.focus({preventScroll:!0}):M(),n("shake");const I=r.value;I!==null&&(I.classList.remove("q-animate--scale"),I.classList.add("q-animate--scale"),a!==null&&clearTimeout(a),a=setTimeout(()=>{a=null,r.value!==null&&(I.classList.remove("q-animate--scale"),M())},170))}function ge(){e.seamless!==!0&&(e.persistent===!0||e.noEscDismiss===!0?e.maximized!==!0&&e.noShake!==!0&&H():(n("escapeKey"),C()))}function re(X){a!==null&&(clearTimeout(a),a=null),(X===!0||o.value===!0)&&(fe(!1),e.seamless!==!0&&(h(!1),du(Ie),fu(ge))),X!==!0&&(c=null)}function fe(X){X===!0?u!==!0&&(Qi<1&&document.body.classList.add("q-body--dialog"),Qi++,u=!0):u===!0&&(Qi<2&&document.body.classList.remove("q-body--dialog"),Qi--,u=!1)}function j(X){f!==!0&&(C(X),n("click",X))}function ve(X){e.persistent!==!0&&e.noBackdropDismiss!==!0?C(X):e.noShake!==!0&&H()}function Ie(X){e.allowFocusOutside!==!0&&k.value===!0&&N_(r.value,X.target)!==!0&&M('[tabindex]:not([tabindex="-1"])')}Object.assign(i.proxy,{focus:M,shake:H,__updateRefocusTarget(X){c=X||null}}),vt(re);function He(){return F("div",{role:"dialog","aria-modal":b.value===!0?"true":"false",...s,class:P.value},[F(zn,{name:"q-transition--fade",appear:!0},()=>b.value===!0?F("div",{class:"q-dialog__backdrop fixed-full",style:p.value,"aria-hidden":"true",tabindex:-1,onClick:ve}):null),F(zn,A.value,()=>o.value===!0?F("div",{ref:r,class:R.value,style:v.value,tabindex:-1,...$.value},Pt(t.default)):null)])}return N}});const ml={xs:18,sm:24,md:32,lg:38,xl:46},Pi={size:String};function Oi(e,t=ml){return L(()=>e.size!==void 0?{fontSize:e.size in t?`${t[e.size]}px`:e.size}:null)}const pu="0 0 24 24",mu=e=>e,Ro=e=>`ionicons ${e}`,Hh={"mdi-":e=>`mdi ${e}`,"icon-":mu,"bt-":e=>`bt ${e}`,"eva-":e=>`eva ${e}`,"ion-md":Ro,"ion-ios":Ro,"ion-logo":Ro,"iconfont ":mu,"ti-":e=>`themify-icon ${e}`,"bi-":e=>`bootstrap-icons ${e}`},jh={o_:"-outlined",r_:"-round",s_:"-sharp"},Uh={sym_o_:"-outlined",sym_r_:"-rounded",sym_s_:"-sharp"},Y_=new RegExp("^("+Object.keys(Hh).join("|")+")"),J_=new RegExp("^("+Object.keys(jh).join("|")+")"),gu=new RegExp("^("+Object.keys(Uh).join("|")+")"),Z_=/^[Mm]\s?[-+]?\.?\d/,X_=/^img:/,eS=/^svguse:/,tS=/^ion-/,nS=/^(fa-(sharp|solid|regular|light|brands|duotone|thin)|[lf]a[srlbdk]?) /;var Yt=tt({name:"QIcon",props:{...Pi,tag:{type:String,default:"i"},name:String,color:String,left:Boolean,right:Boolean},setup(e,{slots:t}){const{proxy:{$q:n}}=Ee(),s=Oi(e),i=L(()=>"q-icon"+(e.left===!0?" on-left":"")+(e.right===!0?" on-right":"")+(e.color!==void 0?` text-${e.color}`:"")),r=L(()=>{let o,l=e.name;if(l==="none"||!l)return{none:!0};if(n.iconMapFn!==null){const u=n.iconMapFn(l);if(u!==void 0)if(u.icon!==void 0){if(l=u.icon,l==="none"||!l)return{none:!0}}else return{cls:u.cls,content:u.content!==void 0?u.content:" "}}if(Z_.test(l)===!0){const[u,f=pu]=l.split("|");return{svg:!0,viewBox:f,nodes:u.split("&&").map(d=>{const[h,g,T]=d.split("@@");return F("path",{style:g,d:h,transform:T})})}}if(X_.test(l)===!0)return{img:!0,src:l.substring(4)};if(eS.test(l)===!0){const[u,f=pu]=l.split("|");return{svguse:!0,src:u.substring(7),viewBox:f}}let a=" ";const c=l.match(Y_);if(c!==null)o=Hh[c[1]](l);else if(nS.test(l)===!0)o=l;else if(tS.test(l)===!0)o=`ionicons ion-${n.platform.is.ios===!0?"ios":"md"}${l.substring(3)}`;else if(gu.test(l)===!0){o="notranslate material-symbols";const u=l.match(gu);u!==null&&(l=l.substring(6),o+=Uh[u[1]]),a=l}else{o="notranslate material-icons";const u=l.match(J_);u!==null&&(l=l.substring(2),o+=jh[u[1]]),a=l}return{cls:o,content:a}});return()=>{const o={class:i.value,style:s.value,"aria-hidden":"true",role:"presentation"};return r.value.none===!0?F(e.tag,o,Pt(t.default)):r.value.img===!0?F(e.tag,o,Nn(t.default,[F("img",{src:r.value.src})])):r.value.svg===!0?F(e.tag,o,Nn(t.default,[F("svg",{viewBox:r.value.viewBox||"0 0 24 24"},r.value.nodes)])):r.value.svguse===!0?F(e.tag,o,Nn(t.default,[F("svg",{viewBox:r.value.viewBox},[F("use",{"xlink:href":r.value.src})])])):(r.value.cls!==void 0&&(o.class+=" "+r.value.cls),F(e.tag,o,Nn(t.default,[r.value.content])))}}});const sS={size:{type:[Number,String],default:"1em"},color:String};function iS(e){return{cSize:L(()=>e.size in ml?`${ml[e.size]}px`:e.size),classes:L(()=>"q-spinner"+(e.color?` text-${e.color}`:""))}}var vi=tt({name:"QSpinner",props:{...sS,thickness:{type:Number,default:5}},setup(e){const{cSize:t,classes:n}=iS(e);return()=>F("svg",{class:n.value+" q-spinner-mat",width:t.value,height:t.value,viewBox:"25 25 50 50"},[F("circle",{class:"path",cx:"50",cy:"50",r:"20",fill:"none",stroke:"currentColor","stroke-width":e.thickness,"stroke-miterlimit":"10"})])}});function rS(e,t=250){let n=!1,s;return function(){return n===!1&&(n=!0,setTimeout(()=>{n=!1},t),s=e.apply(this,arguments)),s}}function vu(e,t,n,s){n.modifiers.stop===!0&&Nr(e);const i=n.modifiers.color;let r=n.modifiers.center;r=r===!0||s===!0;const o=document.createElement("span"),l=document.createElement("span"),a=Mb(e),{left:c,top:u,width:f,height:d}=t.getBoundingClientRect(),h=Math.sqrt(f*f+d*d),g=h/2,T=`${(f-h)/2}px`,x=r?T:`${a.left-c-g}px`,A=`${(d-h)/2}px`,v=r?A:`${a.top-u-g}px`;l.className="q-ripple__inner",pl(l,{height:`${h}px`,width:`${h}px`,transform:`translate3d(${x},${v},0) scale3d(.2,.2,1)`,opacity:0}),o.className=`q-ripple${i?" text-"+i:""}`,o.setAttribute("dir","ltr"),o.appendChild(l),t.appendChild(o);const p=()=>{o.remove(),clearTimeout(E)};n.abort.push(p);let E=setTimeout(()=>{l.classList.add("q-ripple__inner--enter"),l.style.transform=`translate3d(${T},${A},0) scale3d(1,1,1)`,l.style.opacity=.2,E=setTimeout(()=>{l.classList.remove("q-ripple__inner--enter"),l.classList.add("q-ripple__inner--leave"),l.style.opacity=0,E=setTimeout(()=>{o.remove(),n.abort.splice(n.abort.indexOf(p),1)},275)},250)},50)}function yu(e,{modifiers:t,value:n,arg:s}){const i=Object.assign({},e.cfg.ripple,t,n);e.modifiers={early:i.early===!0,stop:i.stop===!0,center:i.center===!0,color:i.color||s,keyCodes:[].concat(i.keyCodes||13)}}var oS=D_({name:"ripple",beforeMount(e,t){const n=t.instance.$.appContext.config.globalProperties.$q.config||{};if(n.ripple===!1)return;const s={cfg:n,enabled:t.value!==!1,modifiers:{},abort:[],start(i){s.enabled===!0&&i.qSkipRipple!==!0&&i.type===(s.modifiers.early===!0?"pointerdown":"click")&&vu(i,e,s,i.qKeyEvent===!0)},keystart:rS(i=>{s.enabled===!0&&i.qSkipRipple!==!0&&hi(i,s.modifiers.keyCodes)===!0&&i.type===`key${s.modifiers.early===!0?"down":"up"}`&&vu(i,e,s,!0)},300)};yu(s,t),e.__qripple=s,Lb(s,"main",[[e,"pointerdown","start","passive"],[e,"click","start","passive"],[e,"keydown","keystart","passive"],[e,"keyup","keystart","passive"]])},updated(e,t){if(t.oldValue!==t.value){const n=e.__qripple;n!==void 0&&(n.enabled=t.value!==!1,n.enabled===!0&&Object(t.value)===t.value&&yu(n,t))}},beforeUnmount(e){const t=e.__qripple;t!==void 0&&(t.abort.forEach(n=>{n()}),$b(t,"main"),delete e._qripple)}});const Kh={left:"start",center:"center",right:"end",between:"between",around:"around",evenly:"evenly",stretch:"stretch"},lS=Object.keys(Kh),zh={align:{type:String,validator:e=>lS.includes(e)}};function Wh(e){return L(()=>{const t=e.align===void 0?e.vertical===!0?"stretch":"left":e.align;return`${e.vertical===!0?"items":"justify"}-${Kh[t]}`})}function bu(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}function _u(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function aS(e,t){for(const n in t){const s=t[n],i=e[n];if(typeof s=="string"){if(s!==i)return!1}else if(Array.isArray(i)===!1||i.length!==s.length||s.some((r,o)=>r!==i[o]))return!1}return!0}function Su(e,t){return Array.isArray(t)===!0?e.length===t.length&&e.every((n,s)=>n===t[s]):e.length===1&&e[0]===t}function cS(e,t){return Array.isArray(e)===!0?Su(e,t):Array.isArray(t)===!0?Su(t,e):e===t}function uS(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(cS(e[n],t[n])===!1)return!1;return!0}const fS={to:[String,Object],replace:Boolean,exact:Boolean,activeClass:{type:String,default:"q-router-link--active"},exactActiveClass:{type:String,default:"q-router-link--exact-active"},href:String,target:String,disable:Boolean};function dS({fallbackTag:e,useDisableForRouterLinkProps:t=!0}={}){const n=Ee(),{props:s,proxy:i,emit:r}=n,o=$h(n),l=L(()=>s.disable!==!0&&s.href!==void 0),a=L(t===!0?()=>o===!0&&s.disable!==!0&&l.value!==!0&&s.to!==void 0&&s.to!==null&&s.to!=="":()=>o===!0&&l.value!==!0&&s.to!==void 0&&s.to!==null&&s.to!==""),c=L(()=>a.value===!0?v(s.to):null),u=L(()=>c.value!==null),f=L(()=>l.value===!0||u.value===!0),d=L(()=>s.type==="a"||f.value===!0?"a":s.tag||e||"div"),h=L(()=>l.value===!0?{href:s.href,target:s.target}:u.value===!0?{href:c.value.href,target:s.target}:{}),g=L(()=>{if(u.value===!1)return-1;const{matched:w}=c.value,{length:k}=w,N=w[k-1];if(N===void 0)return-1;const C=i.$route.matched;if(C.length===0)return-1;const y=C.findIndex(_u.bind(null,N));if(y!==-1)return y;const S=bu(w[k-2]);return k>1&&bu(N)===S&&C[C.length-1].path!==S?C.findIndex(_u.bind(null,w[k-2])):y}),T=L(()=>u.value===!0&&g.value!==-1&&aS(i.$route.params,c.value.params)),x=L(()=>T.value===!0&&g.value===i.$route.matched.length-1&&uS(i.$route.params,c.value.params)),A=L(()=>u.value===!0?x.value===!0?` ${s.exactActiveClass} ${s.activeClass}`:s.exact===!0?"":T.value===!0?` ${s.activeClass}`:"":"");function v(w){try{return i.$router.resolve(w)}catch{}return null}function p(w,{returnRouterError:k,to:N=s.to,replace:C=s.replace}={}){if(s.disable===!0)return w.preventDefault(),Promise.resolve(!1);if(w.metaKey||w.altKey||w.ctrlKey||w.shiftKey||w.button!==void 0&&w.button!==0||s.target==="_blank")return Promise.resolve(!1);w.preventDefault();const y=i.$router[C===!0?"replace":"push"](N);return k===!0?y:y.then(()=>{}).catch(()=>{})}function E(w){if(u.value===!0){const k=N=>p(w,N);r("click",w,k),w.defaultPrevented!==!0&&k()}else r("click",w)}return{hasRouterLink:u,hasHrefLink:l,hasLink:f,linkTag:d,resolvedLink:c,linkIsActive:T,linkIsExactActive:x,linkClass:A,linkAttrs:h,getLink:v,navigateToRouterLink:p,navigateOnClick:E}}const wu={none:0,xs:4,sm:8,md:16,lg:24,xl:32},hS={xs:8,sm:10,md:14,lg:20,xl:24},pS=["button","submit","reset"],mS=/[^\s]\/[^\s]/,gS=["flat","outline","push","unelevated"],Gh=(e,t)=>e.flat===!0?"flat":e.outline===!0?"outline":e.push===!0?"push":e.unelevated===!0?"unelevated":t,Ow=e=>{const t=Gh(e);return t!==void 0?{[t]:!0}:{}},vS={...Pi,...fS,type:{type:String,default:"button"},label:[Number,String],icon:String,iconRight:String,...gS.reduce((e,t)=>(e[t]=Boolean)&&e,{}),square:Boolean,round:Boolean,rounded:Boolean,glossy:Boolean,size:String,fab:Boolean,fabMini:Boolean,padding:String,color:String,textColor:String,noCaps:Boolean,noWrap:Boolean,dense:Boolean,tabindex:[Number,String],ripple:{type:[Boolean,Object],default:!0},align:{...zh.align,default:"center"},stack:Boolean,stretch:Boolean,loading:{type:Boolean,default:null},disable:Boolean};function yS(e){const t=Oi(e,hS),n=Wh(e),{hasRouterLink:s,hasLink:i,linkTag:r,linkAttrs:o,navigateOnClick:l}=dS({fallbackTag:"button"}),a=L(()=>{const x=e.fab===!1&&e.fabMini===!1?t.value:{};return e.padding!==void 0?Object.assign({},x,{padding:e.padding.split(/\s+/).map(A=>A in wu?wu[A]+"px":A).join(" "),minWidth:"0",minHeight:"0"}):x}),c=L(()=>e.rounded===!0||e.fab===!0||e.fabMini===!0),u=L(()=>e.disable!==!0&&e.loading!==!0),f=L(()=>u.value===!0?e.tabindex||0:-1),d=L(()=>Gh(e,"standard")),h=L(()=>{const x={tabindex:f.value};return i.value===!0?Object.assign(x,o.value):pS.includes(e.type)===!0&&(x.type=e.type),r.value==="a"?(e.disable===!0?x["aria-disabled"]="true":x.href===void 0&&(x.role="button"),s.value!==!0&&mS.test(e.type)===!0&&(x.type=e.type)):e.disable===!0&&(x.disabled="",x["aria-disabled"]="true"),e.loading===!0&&e.percentage!==void 0&&Object.assign(x,{role:"progressbar","aria-valuemin":0,"aria-valuemax":100,"aria-valuenow":e.percentage}),x}),g=L(()=>{let x;e.color!==void 0?e.flat===!0||e.outline===!0?x=`text-${e.textColor||e.color}`:x=`bg-${e.color} text-${e.textColor||"white"}`:e.textColor&&(x=`text-${e.textColor}`);const A=e.round===!0?"round":`rectangle${c.value===!0?" q-btn--rounded":e.square===!0?" q-btn--square":""}`;return`q-btn--${d.value} q-btn--${A}`+(x!==void 0?" "+x:"")+(u.value===!0?" q-btn--actionable q-focusable q-hoverable":e.disable===!0?" disabled":"")+(e.fab===!0?" q-btn--fab":e.fabMini===!0?" q-btn--fab-mini":"")+(e.noCaps===!0?" q-btn--no-uppercase":"")+(e.dense===!0?" q-btn--dense":"")+(e.stretch===!0?" no-border-radius self-stretch":"")+(e.glossy===!0?" glossy":"")+(e.square?" q-btn--square":"")}),T=L(()=>n.value+(e.stack===!0?" column":" row")+(e.noWrap===!0?" no-wrap text-no-wrap":"")+(e.loading===!0?" q-btn__content--hidden":""));return{classes:g,style:a,innerClasses:T,attributes:h,hasLink:i,linkTag:r,navigateOnClick:l,isActionable:u}}const{passiveCapture:_t}=rt;let rs=null,os=null,ls=null;var gl=tt({name:"QBtn",props:{...vS,percentage:Number,darkPercentage:Boolean,onTouchstart:[Function,Array]},emits:["click","keydown","mousedown","keyup"],setup(e,{slots:t,emit:n}){const{proxy:s}=Ee(),{classes:i,style:r,innerClasses:o,attributes:l,hasLink:a,linkTag:c,navigateOnClick:u,isActionable:f}=yS(e),d=ce(null),h=ce(null);let g=null,T,x=null;const A=L(()=>e.label!==void 0&&e.label!==null&&e.label!==""),v=L(()=>e.disable===!0||e.ripple===!1?!1:{keyCodes:a.value===!0?[13,32]:[13],...e.ripple===!0?{}:e.ripple}),p=L(()=>({center:e.round})),E=L(()=>{const P=Math.max(0,Math.min(100,e.percentage));return P>0?{transition:"transform 0.6s",transform:`translateX(${P-100}%)`}:{}}),w=L(()=>{if(e.loading===!0)return{onMousedown:$,onTouchstart:$,onClick:$,onKeydown:$,onKeyup:$};if(f.value===!0){const P={onClick:N,onKeydown:C,onMousedown:S};if(s.$q.platform.has.touch===!0){const D=e.onTouchstart!==void 0?"":"Passive";P[`onTouchstart${D}`]=y}return P}return{onClick:St}}),k=L(()=>({ref:d,class:"q-btn q-btn-item non-selectable no-outline "+i.value,style:r.value,...l.value,...w.value}));function N(P){if(d.value!==null){if(P!==void 0){if(P.defaultPrevented===!0)return;const D=document.activeElement;if(e.type==="submit"&&D!==document.body&&d.value.contains(D)===!1&&D.contains(d.value)===!1){d.value.focus();const V=()=>{document.removeEventListener("keydown",St,!0),document.removeEventListener("keyup",V,_t),d.value!==null&&d.value.removeEventListener("blur",V,_t)};document.addEventListener("keydown",St,!0),document.addEventListener("keyup",V,_t),d.value.addEventListener("blur",V,_t)}}u(P)}}function C(P){d.value!==null&&(n("keydown",P),hi(P,[13,32])===!0&&os!==d.value&&(os!==null&&b(),P.defaultPrevented!==!0&&(d.value.focus(),os=d.value,d.value.classList.add("q-btn--active"),document.addEventListener("keyup",R,!0),d.value.addEventListener("blur",R,_t)),St(P)))}function y(P){d.value!==null&&(n("touchstart",P),P.defaultPrevented!==!0&&(rs!==d.value&&(rs!==null&&b(),rs=d.value,g=P.target,g.addEventListener("touchcancel",R,_t),g.addEventListener("touchend",R,_t)),T=!0,x!==null&&clearTimeout(x),x=setTimeout(()=>{x=null,T=!1},200)))}function S(P){d.value!==null&&(P.qSkipRipple=T===!0,n("mousedown",P),P.defaultPrevented!==!0&&ls!==d.value&&(ls!==null&&b(),ls=d.value,d.value.classList.add("q-btn--active"),document.addEventListener("mouseup",R,_t)))}function R(P){if(d.value!==null&&!(P!==void 0&&P.type==="blur"&&document.activeElement===d.value)){if(P!==void 0&&P.type==="keyup"){if(os===d.value&&hi(P,[13,32])===!0){const D=new MouseEvent("click",P);D.qKeyEvent=!0,P.defaultPrevented===!0&&hn(D),P.cancelBubble===!0&&Nr(D),d.value.dispatchEvent(D),St(P),P.qKeyEvent=!0}n("keyup",P)}b()}}function b(P){const D=h.value;P!==!0&&(rs===d.value||ls===d.value)&&D!==null&&D!==document.activeElement&&(D.setAttribute("tabindex",-1),D.focus()),rs===d.value&&(g!==null&&(g.removeEventListener("touchcancel",R,_t),g.removeEventListener("touchend",R,_t)),rs=g=null),ls===d.value&&(document.removeEventListener("mouseup",R,_t),ls=null),os===d.value&&(document.removeEventListener("keyup",R,!0),d.value!==null&&d.value.removeEventListener("blur",R,_t),os=null),d.value!==null&&d.value.classList.remove("q-btn--active")}function $(P){St(P),P.qSkipRipple=!0}return vt(()=>{b(!0)}),Object.assign(s,{click:N}),()=>{let P=[];e.icon!==void 0&&P.push(F(Yt,{name:e.icon,left:e.stack!==!0&&A.value===!0,role:"img","aria-hidden":"true"})),A.value===!0&&P.push(F("span",{class:"block"},[e.label])),P=Nn(t.default,P),e.iconRight!==void 0&&e.round===!1&&P.push(F(Yt,{name:e.iconRight,right:e.stack!==!0&&A.value===!0,role:"img","aria-hidden":"true"}));const D=[F("span",{class:"q-focus-helper",ref:h})];return e.loading===!0&&e.percentage!==void 0&&D.push(F("span",{class:"q-btn__progress absolute-full overflow-hidden"+(e.darkPercentage===!0?" q-btn__progress--dark":"")},[F("span",{class:"q-btn__progress-indicator fit block",style:E.value})])),D.push(F("span",{class:"q-btn__content text-center col items-center q-anchor--skip "+o.value},P)),e.loading!==null&&D.push(F(zn,{name:"q-transition--fade"},()=>e.loading===!0?[F("span",{key:"loading",class:"absolute-full flex flex-center"},t.loading!==void 0?t.loading():[F(vi)])]:null)),Dl(F(c.value,k.value,D),[[oS,v.value,void 0,p.value]])}}});const es={dark:{type:Boolean,default:null}};function ts(e,t){return L(()=>e.dark===null?t.dark.isActive:e.dark)}var bS=tt({name:"QCard",props:{...es,tag:{type:String,default:"div"},square:Boolean,flat:Boolean,bordered:Boolean},setup(e,{slots:t}){const{proxy:{$q:n}}=Ee(),s=ts(e,n),i=L(()=>"q-card"+(s.value===!0?" q-card--dark q-dark":"")+(e.bordered===!0?" q-card--bordered":"")+(e.square===!0?" q-card--square no-border-radius":"")+(e.flat===!0?" q-card--flat no-shadow":""));return()=>F(e.tag,{class:i.value},Pt(t.default))}}),Fs=tt({name:"QCardSection",props:{tag:{type:String,default:"div"},horizontal:Boolean},setup(e,{slots:t}){const n=L(()=>`q-card__section q-card__section--${e.horizontal===!0?"horiz row no-wrap":"vert"}`);return()=>F(e.tag,{class:n.value},Pt(t.default))}}),_S=tt({name:"QCardActions",props:{...zh,vertical:Boolean},setup(e,{slots:t}){const n=Wh(e),s=L(()=>`q-card__actions ${n.value} q-card__actions--${e.vertical===!0?"vert column":"horiz row"}`);return()=>F("div",{class:s.value},Pt(t.default))}});const SS={true:"inset",item:"item-inset","item-thumbnail":"item-thumbnail-inset"},Ao={xs:2,sm:4,md:8,lg:16,xl:24};var Cu=tt({name:"QSeparator",props:{...es,spaced:[Boolean,String],inset:[Boolean,String],vertical:Boolean,color:String,size:String},setup(e){const t=Ee(),n=ts(e,t.proxy.$q),s=L(()=>e.vertical===!0?"vertical":"horizontal"),i=L(()=>` q-separator--${s.value}`),r=L(()=>e.inset!==!1?`${i.value}-${SS[e.inset]}`:""),o=L(()=>`q-separator${i.value}${r.value}`+(e.color!==void 0?` bg-${e.color}`:"")+(n.value===!0?" q-separator--dark":"")),l=L(()=>{const a={};if(e.size!==void 0&&(a[e.vertical===!0?"width":"height"]=e.size),e.spaced!==!1){const c=e.spaced===!0?`${Ao.md}px`:e.spaced in Ao?`${Ao[e.spaced]}px`:e.spaced,u=e.vertical===!0?["Left","Right"]:["Top","Bottom"];a[`margin${u[0]}`]=a[`margin${u[1]}`]=c}return a});return()=>F("hr",{class:o.value,style:l.value,"aria-orientation":s.value})}});let Po,Yi=0;const Ue=new Array(256);for(let e=0;e<256;e++)Ue[e]=(e+256).toString(16).substring(1);const wS=(()=>{const e=typeof crypto!="undefined"?crypto:typeof window!="undefined"?window.crypto||window.msCrypto:void 0;if(e!==void 0){if(e.randomBytes!==void 0)return e.randomBytes;if(e.getRandomValues!==void 0)return t=>{const n=new Uint8Array(t);return e.getRandomValues(n),n}}return t=>{const n=[];for(let s=t;s>0;s--)n.push(Math.floor(Math.random()*256));return n}})(),Eu=4096;function vl(){(Po===void 0||Yi+16>Eu)&&(Yi=0,Po=wS(Eu));const e=Array.prototype.slice.call(Po,Yi,Yi+=16);return e[6]=e[6]&15|64,e[8]=e[8]&63|128,Ue[e[0]]+Ue[e[1]]+Ue[e[2]]+Ue[e[3]]+"-"+Ue[e[4]]+Ue[e[5]]+"-"+Ue[e[6]]+Ue[e[7]]+"-"+Ue[e[8]]+Ue[e[9]]+"-"+Ue[e[10]]+Ue[e[11]]+Ue[e[12]]+Ue[e[13]]+Ue[e[14]]+Ue[e[15]]}function CS(e){return e==null?null:e}function ku(e,t){return e==null?t===!0?`f_${vl()}`:null:e}function ES({getValue:e,required:t=!0}={}){if(_n.value===!0){const n=ce(e!==void 0?CS(e()):null);return t===!0&&n.value===null&&Bt(()=>{n.value=`f_${vl()}`}),e!==void 0&&Ce(e,s=>{n.value=ku(s,t)}),n}return e!==void 0?L(()=>ku(e(),t)):ce(`f_${vl()}`)}function kS({validate:e,resetValidation:t,requiresQForm:n}){const s=at(Qb,!1);if(s!==!1){const{props:i,proxy:r}=Ee();Object.assign(r,{validate:e,resetValidation:t}),Ce(()=>i.disable,o=>{o===!0?(typeof t=="function"&&t(),s.unbindComponent(r)):s.bindComponent(r)}),Bt(()=>{i.disable!==!0&&s.bindComponent(r)}),vt(()=>{i.disable!==!0&&s.unbindComponent(r)})}else n===!0&&console.error("Parent QForm not found on useFormChild()!")}const xu=/^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/,Tu=/^#[0-9a-fA-F]{4}([0-9a-fA-F]{4})?$/,Ru=/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/,Ji=/^rgb\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5])\)$/,Zi=/^rgba\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/,Oo={date:e=>/^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(e),time:e=>/^([0-1]?\d|2[0-3]):[0-5]\d$/.test(e),fulltime:e=>/^([0-1]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(e),timeOrFulltime:e=>/^([0-1]?\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/.test(e),email:e=>/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e),hexColor:e=>xu.test(e),hexaColor:e=>Tu.test(e),hexOrHexaColor:e=>Ru.test(e),rgbColor:e=>Ji.test(e),rgbaColor:e=>Zi.test(e),rgbOrRgbaColor:e=>Ji.test(e)||Zi.test(e),hexOrRgbColor:e=>xu.test(e)||Ji.test(e),hexaOrRgbaColor:e=>Tu.test(e)||Zi.test(e),anyColor:e=>Ru.test(e)||Ji.test(e)||Zi.test(e)},xS=[!0,!1,"ondemand"],TS={modelValue:{},error:{type:Boolean,default:null},errorMessage:String,noErrorIcon:Boolean,rules:Array,reactiveRules:Boolean,lazyRules:{type:[Boolean,String],default:!1,validator:e=>xS.includes(e)}};function RS(e,t){const{props:n,proxy:s}=Ee(),i=ce(!1),r=ce(null),o=ce(!1);kS({validate:T,resetValidation:g});let l=0,a;const c=L(()=>n.rules!==void 0&&n.rules!==null&&n.rules.length!==0),u=L(()=>n.disable!==!0&&c.value===!0&&t.value===!1),f=L(()=>n.error===!0||i.value===!0),d=L(()=>typeof n.errorMessage=="string"&&n.errorMessage.length!==0?n.errorMessage:r.value);Ce(()=>n.modelValue,()=>{o.value=!0,u.value===!0&&n.lazyRules===!1&&x()});function h(){n.lazyRules!=="ondemand"&&u.value===!0&&o.value===!0&&x()}Ce(()=>n.reactiveRules,A=>{A===!0?a===void 0&&(a=Ce(()=>n.rules,h,{immediate:!0,deep:!0})):a!==void 0&&(a(),a=void 0)},{immediate:!0}),Ce(()=>n.lazyRules,h),Ce(e,A=>{A===!0?o.value=!0:u.value===!0&&n.lazyRules!=="ondemand"&&x()});function g(){l++,t.value=!1,o.value=!1,i.value=!1,r.value=null,x.cancel()}function T(A=n.modelValue){if(n.disable===!0||c.value===!1)return!0;const v=++l,p=t.value!==!0?()=>{o.value=!0}:()=>{},E=(k,N)=>{k===!0&&p(),i.value=k,r.value=N||null,t.value=!1},w=[];for(let k=0;k<n.rules.length;k++){const N=n.rules[k];let C;if(typeof N=="function"?C=N(A,Oo):typeof N=="string"&&Oo[N]!==void 0&&(C=Oo[N](A)),C===!1||typeof C=="string")return E(!0,C),!1;C!==!0&&C!==void 0&&w.push(C)}return w.length===0?(E(!1),!0):(t.value=!0,Promise.all(w).then(k=>{if(k===void 0||Array.isArray(k)===!1||k.length===0)return v===l&&E(!1),!0;const N=k.find(C=>C===!1||typeof C=="string");return v===l&&E(N!==void 0,N),N===void 0},k=>(v===l&&(console.error(k),E(!0)),!1)))}const x=ph(T,0);return vt(()=>{a!==void 0&&a(),x.cancel()}),Object.assign(s,{resetValidation:g,validate:T}),Ns(s,"hasError",()=>f.value),{isDirtyModel:o,hasRules:c,hasError:f,errorMessage:d,validate:T,resetValidation:g}}const Au=/^on[A-Z]/;function AS(){const{attrs:e,vnode:t}=Ee(),n={listeners:ce({}),attributes:ce({})};function s(){const i={},r={};for(const o in e)o!=="class"&&o!=="style"&&Au.test(o)===!1&&(i[o]=e[o]);for(const o in t.props)Au.test(o)===!0&&(r[o]=t.props[o]);n.attributes.value=i,n.listeners.value=r}return Kl(s),s(),n}function yl(e){return e!=null&&(""+e).length!==0}const PS={...es,...TS,label:String,stackLabel:Boolean,hint:String,hideHint:Boolean,prefix:String,suffix:String,labelColor:String,color:String,bgColor:String,filled:Boolean,outlined:Boolean,borderless:Boolean,standout:[Boolean,String],square:Boolean,loading:Boolean,labelSlot:Boolean,bottomSlots:Boolean,hideBottomSpace:Boolean,rounded:Boolean,dense:Boolean,itemAligned:Boolean,counter:Boolean,clearable:Boolean,clearIcon:String,disable:Boolean,readonly:Boolean,autofocus:Boolean,for:String,maxlength:[Number,String]},OS=["update:modelValue","clear","focus","blur","popupShow","popupHide"];function NS({requiredForAttr:e=!0,tagProp:t}={}){const{props:n,proxy:s}=Ee(),i=ts(n,s.$q),r=ES({required:e,getValue:()=>n.for});return{requiredForAttr:e,tag:t===!0?L(()=>n.tag):{value:"label"},isDark:i,editable:L(()=>n.disable!==!0&&n.readonly!==!0),innerLoading:ce(!1),focused:ce(!1),hasPopupOpen:!1,splitAttrs:AS(),targetUid:r,rootRef:ce(null),targetRef:ce(null),controlRef:ce(null)}}function MS(e){const{props:t,emit:n,slots:s,attrs:i,proxy:r}=Ee(),{$q:o}=r;let l=null;e.hasValue===void 0&&(e.hasValue=L(()=>yl(t.modelValue))),e.emitValue===void 0&&(e.emitValue=M=>{n("update:modelValue",M)}),e.controlEvents===void 0&&(e.controlEvents={onFocusin:y,onFocusout:S}),Object.assign(e,{clearValue:R,onControlFocusin:y,onControlFocusout:S,focus:N}),e.computedCounter===void 0&&(e.computedCounter=L(()=>{if(t.counter!==!1){const M=typeof t.modelValue=="string"||typeof t.modelValue=="number"?(""+t.modelValue).length:Array.isArray(t.modelValue)===!0?t.modelValue.length:0,H=t.maxlength!==void 0?t.maxlength:t.maxValues;return M+(H!==void 0?" / "+H:"")}}));const{isDirtyModel:a,hasRules:c,hasError:u,errorMessage:f,resetValidation:d}=RS(e.focused,e.innerLoading),h=e.floatingLabel!==void 0?L(()=>t.stackLabel===!0||e.focused.value===!0||e.floatingLabel.value===!0):L(()=>t.stackLabel===!0||e.focused.value===!0||e.hasValue.value===!0),g=L(()=>t.bottomSlots===!0||t.hint!==void 0||c.value===!0||t.counter===!0||t.error!==null),T=L(()=>t.filled===!0?"filled":t.outlined===!0?"outlined":t.borderless===!0?"borderless":t.standout?"standout":"standard"),x=L(()=>`q-field row no-wrap items-start q-field--${T.value}`+(e.fieldClass!==void 0?` ${e.fieldClass.value}`:"")+(t.rounded===!0?" q-field--rounded":"")+(t.square===!0?" q-field--square":"")+(h.value===!0?" q-field--float":"")+(v.value===!0?" q-field--labeled":"")+(t.dense===!0?" q-field--dense":"")+(t.itemAligned===!0?" q-field--item-aligned q-item-type":"")+(e.isDark.value===!0?" q-field--dark":"")+(e.getControl===void 0?" q-field--auto-height":"")+(e.focused.value===!0?" q-field--focused":"")+(u.value===!0?" q-field--error":"")+(u.value===!0||e.focused.value===!0?" q-field--highlighted":"")+(t.hideBottomSpace!==!0&&g.value===!0?" q-field--with-bottom":"")+(t.disable===!0?" q-field--disabled":t.readonly===!0?" q-field--readonly":"")),A=L(()=>"q-field__control relative-position row no-wrap"+(t.bgColor!==void 0?` bg-${t.bgColor}`:"")+(u.value===!0?" text-negative":typeof t.standout=="string"&&t.standout.length!==0&&e.focused.value===!0?` ${t.standout}`:t.color!==void 0?` text-${t.color}`:"")),v=L(()=>t.labelSlot===!0||t.label!==void 0),p=L(()=>"q-field__label no-pointer-events absolute ellipsis"+(t.labelColor!==void 0&&u.value!==!0?` text-${t.labelColor}`:"")),E=L(()=>({id:e.targetUid.value,editable:e.editable.value,focused:e.focused.value,floatingLabel:h.value,modelValue:t.modelValue,emitValue:e.emitValue})),w=L(()=>{const M={};return e.targetUid.value&&(M.for=e.targetUid.value),t.disable===!0&&(M["aria-disabled"]="true"),M});function k(){const M=document.activeElement;let H=e.targetRef!==void 0&&e.targetRef.value;H&&(M===null||M.id!==e.targetUid.value)&&(H.hasAttribute("tabindex")===!0||(H=H.querySelector("[tabindex]")),H&&H!==M&&H.focus({preventScroll:!0}))}function N(){wa(k)}function C(){k_(k);const M=document.activeElement;M!==null&&e.rootRef.value.contains(M)&&M.blur()}function y(M){l!==null&&(clearTimeout(l),l=null),e.editable.value===!0&&e.focused.value===!1&&(e.focused.value=!0,n("focus",M))}function S(M,H){l!==null&&clearTimeout(l),l=setTimeout(()=>{l=null,!(document.hasFocus()===!0&&(e.hasPopupOpen===!0||e.controlRef===void 0||e.controlRef.value===null||e.controlRef.value.contains(document.activeElement)!==!1))&&(e.focused.value===!0&&(e.focused.value=!1,n("blur",M)),H!==void 0&&H())})}function R(M){St(M),o.platform.is.mobile!==!0?(e.targetRef!==void 0&&e.targetRef.value||e.rootRef.value).focus():e.rootRef.value.contains(document.activeElement)===!0&&document.activeElement.blur(),t.type==="file"&&(e.inputRef.value.value=null),n("update:modelValue",null),n("clear",t.modelValue),Ge(()=>{const H=a.value;d(),a.value=H})}function b(){const M=[];return s.prepend!==void 0&&M.push(F("div",{class:"q-field__prepend q-field__marginal row no-wrap items-center",key:"prepend",onClick:hn},s.prepend())),M.push(F("div",{class:"q-field__control-container col relative-position row no-wrap q-anchor--skip"},$())),u.value===!0&&t.noErrorIcon===!1&&M.push(D("error",[F(Yt,{name:o.iconSet.field.error,color:"negative"})])),t.loading===!0||e.innerLoading.value===!0?M.push(D("inner-loading-append",s.loading!==void 0?s.loading():[F(vi,{color:t.color})])):t.clearable===!0&&e.hasValue.value===!0&&e.editable.value===!0&&M.push(D("inner-clearable-append",[F(Yt,{class:"q-field__focusable-action",tag:"button",name:t.clearIcon||o.iconSet.field.clear,tabindex:0,type:"button","aria-hidden":null,role:null,onClick:R})])),s.append!==void 0&&M.push(F("div",{class:"q-field__append q-field__marginal row no-wrap items-center",key:"append",onClick:hn},s.append())),e.getInnerAppend!==void 0&&M.push(D("inner-append",e.getInnerAppend())),e.getControlChild!==void 0&&M.push(e.getControlChild()),M}function $(){const M=[];return t.prefix!==void 0&&t.prefix!==null&&M.push(F("div",{class:"q-field__prefix no-pointer-events row items-center"},t.prefix)),e.getShadowControl!==void 0&&e.hasShadow.value===!0&&M.push(e.getShadowControl()),e.getControl!==void 0?M.push(e.getControl()):s.rawControl!==void 0?M.push(s.rawControl()):s.control!==void 0&&M.push(F("div",{ref:e.targetRef,class:"q-field__native row",tabindex:-1,...e.splitAttrs.attributes.value,"data-autofocus":t.autofocus===!0||void 0},s.control(E.value))),v.value===!0&&M.push(F("div",{class:p.value},Pt(s.label,t.label))),t.suffix!==void 0&&t.suffix!==null&&M.push(F("div",{class:"q-field__suffix no-pointer-events row items-center"},t.suffix)),M.concat(Pt(s.default))}function P(){let M,H;u.value===!0?f.value!==null?(M=[F("div",{role:"alert"},f.value)],H=`q--slot-error-${f.value}`):(M=Pt(s.error),H="q--slot-error"):(t.hideHint!==!0||e.focused.value===!0)&&(t.hint!==void 0?(M=[F("div",t.hint)],H=`q--slot-hint-${t.hint}`):(M=Pt(s.hint),H="q--slot-hint"));const ge=t.counter===!0||s.counter!==void 0;if(t.hideBottomSpace===!0&&ge===!1&&M===void 0)return;const re=F("div",{key:H,class:"q-field__messages col"},M);return F("div",{class:"q-field__bottom row items-start q-field__bottom--"+(t.hideBottomSpace!==!0?"animated":"stale"),onClick:hn},[t.hideBottomSpace===!0?re:F(zn,{name:"q-transition--field-message"},()=>re),ge===!0?F("div",{class:"q-field__counter"},s.counter!==void 0?s.counter():e.computedCounter.value):null])}function D(M,H){return H===null?null:F("div",{key:M,class:"q-field__append q-field__marginal row no-wrap items-center q-anchor--skip"},H)}let V=!1;return wi(()=>{V=!0}),Ul(()=>{V===!0&&t.autofocus===!0&&r.focus()}),t.autofocus===!0&&Bt(()=>{r.focus()}),vt(()=>{l!==null&&clearTimeout(l)}),Object.assign(r,{focus:N,blur:C}),function(){const H=e.getControl===void 0&&s.control===void 0?{...e.splitAttrs.attributes.value,"data-autofocus":t.autofocus===!0||void 0,...w.value}:w.value;return F(e.tag.value,{ref:e.rootRef,class:[x.value,i.class],style:i.style,...H},[s.before!==void 0?F("div",{class:"q-field__before q-field__marginal row no-wrap items-center",onClick:hn},s.before()):null,F("div",{class:"q-field__inner relative-position col self-stretch"},[F("div",{ref:e.controlRef,class:A.value,tabindex:-1,...e.controlEvents},b()),g.value===!0?P():null]),s.after!==void 0?F("div",{class:"q-field__after q-field__marginal row no-wrap items-center",onClick:hn},s.after()):null])}}const Pu={date:"####/##/##",datetime:"####/##/## ##:##",time:"##:##",fulltime:"##:##:##",phone:"(###) ### - ####",card:"#### #### #### ####"},Lr={"#":{pattern:"[\\d]",negate:"[^\\d]"},S:{pattern:"[a-zA-Z]",negate:"[^a-zA-Z]"},N:{pattern:"[0-9a-zA-Z]",negate:"[^0-9a-zA-Z]"},A:{pattern:"[a-zA-Z]",negate:"[^a-zA-Z]",transform:e=>e.toLocaleUpperCase()},a:{pattern:"[a-zA-Z]",negate:"[^a-zA-Z]",transform:e=>e.toLocaleLowerCase()},X:{pattern:"[0-9a-zA-Z]",negate:"[^0-9a-zA-Z]",transform:e=>e.toLocaleUpperCase()},x:{pattern:"[0-9a-zA-Z]",negate:"[^0-9a-zA-Z]",transform:e=>e.toLocaleLowerCase()}},Qh=Object.keys(Lr);Qh.forEach(e=>{Lr[e].regex=new RegExp(Lr[e].pattern)});const IS=new RegExp("\\\\([^.*+?^${}()|([\\]])|([.*+?^${}()|[\\]])|(["+Qh.join("")+"])|(.)","g"),Ou=/[.*+?^${}()|[\]\\]/g,Le=String.fromCharCode(1),LS={mask:String,reverseFillMask:Boolean,fillMask:[Boolean,String],unmaskedValue:Boolean};function $S(e,t,n,s){let i,r,o,l,a,c;const u=ce(null),f=ce(h());function d(){return e.autogrow===!0||["textarea","text","search","url","tel","password"].includes(e.type)}Ce(()=>e.type+e.autogrow,T),Ce(()=>e.mask,y=>{if(y!==void 0)x(f.value,!0);else{const S=N(f.value);T(),e.modelValue!==S&&t("update:modelValue",S)}}),Ce(()=>e.fillMask+e.reverseFillMask,()=>{u.value===!0&&x(f.value,!0)}),Ce(()=>e.unmaskedValue,()=>{u.value===!0&&x(f.value)});function h(){if(T(),u.value===!0){const y=w(N(e.modelValue));return e.fillMask!==!1?C(y):y}return e.modelValue}function g(y){if(y<i.length)return i.slice(-y);let S="",R=i;const b=R.indexOf(Le);if(b!==-1){for(let $=y-R.length;$>0;$--)S+=Le;R=R.slice(0,b)+S+R.slice(b)}return R}function T(){if(u.value=e.mask!==void 0&&e.mask.length!==0&&d(),u.value===!1){l=void 0,i="",r="";return}const y=Pu[e.mask]===void 0?e.mask:Pu[e.mask],S=typeof e.fillMask=="string"&&e.fillMask.length!==0?e.fillMask.slice(0,1):"_",R=S.replace(Ou,"\\$&"),b=[],$=[],P=[];let D=e.reverseFillMask===!0,V="",M="";y.replace(IS,(fe,j,ve,Ie,He)=>{if(Ie!==void 0){const X=Lr[Ie];P.push(X),M=X.negate,D===!0&&($.push("(?:"+M+"+)?("+X.pattern+"+)?(?:"+M+"+)?("+X.pattern+"+)?"),D=!1),$.push("(?:"+M+"+)?("+X.pattern+")?")}else if(ve!==void 0)V="\\"+(ve==="\\"?"":ve),P.push(ve),b.push("([^"+V+"]+)?"+V+"?");else{const X=j!==void 0?j:He;V=X==="\\"?"\\\\\\\\":X.replace(Ou,"\\\\$&"),P.push(X),b.push("([^"+V+"]+)?"+V+"?")}});const H=new RegExp("^"+b.join("")+"("+(V===""?".":"[^"+V+"]")+"+)?"+(V===""?"":"["+V+"]*")+"$"),ge=$.length-1,re=$.map((fe,j)=>j===0&&e.reverseFillMask===!0?new RegExp("^"+R+"*"+fe):j===ge?new RegExp("^"+fe+"("+(M===""?".":M)+"+)?"+(e.reverseFillMask===!0?"$":R+"*")):new RegExp("^"+fe));o=P,l=fe=>{const j=H.exec(e.reverseFillMask===!0?fe:fe.slice(0,P.length+1));j!==null&&(fe=j.slice(1).join(""));const ve=[],Ie=re.length;for(let He=0,X=fe;He<Ie;He++){const I=re[He].exec(X);if(I===null)break;X=X.slice(I.shift().length),ve.push(...I)}return ve.length!==0?ve.join(""):fe},i=P.map(fe=>typeof fe=="string"?fe:Le).join(""),r=i.split(Le).join(S)}function x(y,S,R){const b=s.value,$=b.selectionEnd,P=b.value.length-$,D=N(y);S===!0&&T();const V=w(D),M=e.fillMask!==!1?C(V):V,H=f.value!==M;b.value!==M&&(b.value=M),H===!0&&(f.value=M),document.activeElement===b&&Ge(()=>{if(M===r){const re=e.reverseFillMask===!0?r.length:0;b.setSelectionRange(re,re,"forward");return}if(R==="insertFromPaste"&&e.reverseFillMask!==!0){const re=b.selectionEnd;let fe=$-1;for(let j=a;j<=fe&&j<re;j++)i[j]!==Le&&fe++;v.right(b,fe);return}if(["deleteContentBackward","deleteContentForward"].indexOf(R)!==-1){const re=e.reverseFillMask===!0?$===0?M.length>V.length?1:0:Math.max(0,M.length-(M===r?0:Math.min(V.length,P)+1))+1:$;b.setSelectionRange(re,re,"forward");return}if(e.reverseFillMask===!0)if(H===!0){const re=Math.max(0,M.length-(M===r?0:Math.min(V.length,P+1)));re===1&&$===1?b.setSelectionRange(re,re,"forward"):v.rightReverse(b,re)}else{const re=M.length-P;b.setSelectionRange(re,re,"backward")}else if(H===!0){const re=Math.max(0,i.indexOf(Le),Math.min(V.length,$)-1);v.right(b,re)}else{const re=$-1;v.right(b,re)}});const ge=e.unmaskedValue===!0?N(M):M;String(e.modelValue)!==ge&&(e.modelValue!==null||ge!=="")&&n(ge,!0)}function A(y,S,R){const b=w(N(y.value));S=Math.max(0,i.indexOf(Le),Math.min(b.length,S)),a=S,y.setSelectionRange(S,R,"forward")}const v={left(y,S){const R=i.slice(S-1).indexOf(Le)===-1;let b=Math.max(0,S-1);for(;b>=0;b--)if(i[b]===Le){S=b,R===!0&&S++;break}if(b<0&&i[S]!==void 0&&i[S]!==Le)return v.right(y,0);S>=0&&y.setSelectionRange(S,S,"backward")},right(y,S){const R=y.value.length;let b=Math.min(R,S+1);for(;b<=R;b++)if(i[b]===Le){S=b;break}else i[b-1]===Le&&(S=b);if(b>R&&i[S-1]!==void 0&&i[S-1]!==Le)return v.left(y,R);y.setSelectionRange(S,S,"forward")},leftReverse(y,S){const R=g(y.value.length);let b=Math.max(0,S-1);for(;b>=0;b--)if(R[b-1]===Le){S=b;break}else if(R[b]===Le&&(S=b,b===0))break;if(b<0&&R[S]!==void 0&&R[S]!==Le)return v.rightReverse(y,0);S>=0&&y.setSelectionRange(S,S,"backward")},rightReverse(y,S){const R=y.value.length,b=g(R),$=b.slice(0,S+1).indexOf(Le)===-1;let P=Math.min(R,S+1);for(;P<=R;P++)if(b[P-1]===Le){S=P,S>0&&$===!0&&S--;break}if(P>R&&b[S-1]!==void 0&&b[S-1]!==Le)return v.leftReverse(y,R);y.setSelectionRange(S,S,"forward")}};function p(y){t("click",y),c=void 0}function E(y){if(t("keydown",y),vh(y)===!0||y.altKey===!0)return;const S=s.value,R=S.selectionStart,b=S.selectionEnd;if(y.shiftKey||(c=void 0),y.keyCode===37||y.keyCode===39){y.shiftKey&&c===void 0&&(c=S.selectionDirection==="forward"?R:b);const $=v[(y.keyCode===39?"right":"left")+(e.reverseFillMask===!0?"Reverse":"")];if(y.preventDefault(),$(S,c===R?b:R),y.shiftKey){const P=S.selectionStart;S.setSelectionRange(Math.min(c,P),Math.max(c,P),"forward")}}else y.keyCode===8&&e.reverseFillMask!==!0&&R===b?(v.left(S,R),S.setSelectionRange(S.selectionStart,b,"backward")):y.keyCode===46&&e.reverseFillMask===!0&&R===b&&(v.rightReverse(S,b),S.setSelectionRange(R,S.selectionEnd,"forward"))}function w(y){if(y==null||y==="")return"";if(e.reverseFillMask===!0)return k(y);const S=o;let R=0,b="";for(let $=0;$<S.length;$++){const P=y[R],D=S[$];if(typeof D=="string")b+=D,P===D&&R++;else if(P!==void 0&&D.regex.test(P))b+=D.transform!==void 0?D.transform(P):P,R++;else return b}return b}function k(y){const S=o,R=i.indexOf(Le);let b=y.length-1,$="";for(let P=S.length-1;P>=0&&b!==-1;P--){const D=S[P];let V=y[b];if(typeof D=="string")$=D+$,V===D&&b--;else if(V!==void 0&&D.regex.test(V))do $=(D.transform!==void 0?D.transform(V):V)+$,b--,V=y[b];while(R===P&&V!==void 0&&D.regex.test(V));else return $}return $}function N(y){return typeof y!="string"||l===void 0?typeof y=="number"?l(""+y):y:l(y)}function C(y){return r.length-y.length<=0?y:e.reverseFillMask===!0&&y.length!==0?r.slice(0,-y.length)+y:y+r.slice(y.length)}return{innerValue:f,hasMask:u,moveCursorForPaste:A,updateMaskValue:x,onMaskedKeydown:E,onMaskedClick:p}}const Ea={name:String};function Nw(e){return L(()=>({type:"hidden",name:e.name,value:e.modelValue}))}function Yh(e={}){return(t,n,s)=>{t[n](F("input",{class:"hidden"+(s||""),...e.value}))}}function VS(e){return L(()=>e.name||e.for)}function FS(e,t){function n(){const s=e.modelValue;try{const i="DataTransfer"in window?new DataTransfer:"ClipboardEvent"in window?new ClipboardEvent("").clipboardData:void 0;return Object(s)===s&&("length"in s?Array.from(s):[s]).forEach(r=>{i.items.add(r)}),{files:i.files}}catch{return{files:void 0}}}return L(t===!0?()=>{if(e.type==="file")return n()}:n)}const qS=/[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/,BS=/[\u4e00-\u9fff\u3400-\u4dbf\u{20000}-\u{2a6df}\u{2a700}-\u{2b73f}\u{2b740}-\u{2b81f}\u{2b820}-\u{2ceaf}\uf900-\ufaff\u3300-\u33ff\ufe30-\ufe4f\uf900-\ufaff\u{2f800}-\u{2fa1f}]/u,DS=/[\u3131-\u314e\u314f-\u3163\uac00-\ud7a3]/,HS=/[a-z0-9_ -]$/i;function jS(e){return function(n){if(n.type==="compositionend"||n.type==="change"){if(n.target.qComposing!==!0)return;n.target.qComposing=!1,e(n)}else n.type==="compositionupdate"&&n.target.qComposing!==!0&&typeof n.data=="string"&&(De.is.firefox===!0?HS.test(n.data)===!1:qS.test(n.data)===!0||BS.test(n.data)===!0||DS.test(n.data)===!0)===!0&&(n.target.qComposing=!0)}}var US=tt({name:"QInput",inheritAttrs:!1,props:{...PS,...LS,...Ea,modelValue:{required:!1},shadowText:String,type:{type:String,default:"text"},debounce:[String,Number],autogrow:Boolean,inputClass:[Array,String,Object],inputStyle:[Array,String,Object]},emits:[...OS,"paste","change","keydown","click","animationend"],setup(e,{emit:t,attrs:n}){const{proxy:s}=Ee(),{$q:i}=s,r={};let o=NaN,l,a,c=null,u;const f=ce(null),d=VS(e),{innerValue:h,hasMask:g,moveCursorForPaste:T,updateMaskValue:x,onMaskedKeydown:A,onMaskedClick:v}=$S(e,t,V,f),p=FS(e,!0),E=L(()=>yl(h.value)),w=jS(P),k=NS(),N=L(()=>e.type==="textarea"||e.autogrow===!0),C=L(()=>N.value===!0||["text","search","url","tel","password"].includes(e.type)),y=L(()=>{const j={...k.splitAttrs.listeners.value,onInput:P,onPaste:$,onChange:H,onBlur:ge,onFocus:Nr};return j.onCompositionstart=j.onCompositionupdate=j.onCompositionend=w,g.value===!0&&(j.onKeydown=A,j.onClick=v),e.autogrow===!0&&(j.onAnimationend=D),j}),S=L(()=>{const j={tabindex:0,"data-autofocus":e.autofocus===!0||void 0,rows:e.type==="textarea"?6:void 0,"aria-label":e.label,name:d.value,...k.splitAttrs.attributes.value,id:k.targetUid.value,maxlength:e.maxlength,disabled:e.disable===!0,readonly:e.readonly===!0};return N.value===!1&&(j.type=e.type),e.autogrow===!0&&(j.rows=1),j});Ce(()=>e.type,()=>{f.value&&(f.value.value=e.modelValue)}),Ce(()=>e.modelValue,j=>{if(g.value===!0){if(a===!0&&(a=!1,String(j)===o))return;x(j)}else h.value!==j&&(h.value=j,e.type==="number"&&r.hasOwnProperty("value")===!0&&(l===!0?l=!1:delete r.value));e.autogrow===!0&&Ge(M)}),Ce(()=>e.autogrow,j=>{j===!0?Ge(M):f.value!==null&&n.rows>0&&(f.value.style.height="auto")}),Ce(()=>e.dense,()=>{e.autogrow===!0&&Ge(M)});function R(){wa(()=>{const j=document.activeElement;f.value!==null&&f.value!==j&&(j===null||j.id!==k.targetUid.value)&&f.value.focus({preventScroll:!0})})}function b(){f.value!==null&&f.value.select()}function $(j){if(g.value===!0&&e.reverseFillMask!==!0){const ve=j.target;T(ve,ve.selectionStart,ve.selectionEnd)}t("paste",j)}function P(j){if(!j||!j.target)return;if(e.type==="file"){t("update:modelValue",j.target.files);return}const ve=j.target.value;if(j.target.qComposing===!0){r.value=ve;return}if(g.value===!0)x(ve,!1,j.inputType);else if(V(ve),C.value===!0&&j.target===document.activeElement){const{selectionStart:Ie,selectionEnd:He}=j.target;Ie!==void 0&&He!==void 0&&Ge(()=>{j.target===document.activeElement&&ve.indexOf(j.target.value)===0&&j.target.setSelectionRange(Ie,He)})}e.autogrow===!0&&M()}function D(j){t("animationend",j),M()}function V(j,ve){u=()=>{c=null,e.type!=="number"&&r.hasOwnProperty("value")===!0&&delete r.value,e.modelValue!==j&&o!==j&&(o=j,ve===!0&&(a=!0),t("update:modelValue",j),Ge(()=>{o===j&&(o=NaN)})),u=void 0},e.type==="number"&&(l=!0,r.value=j),e.debounce!==void 0?(c!==null&&clearTimeout(c),r.value=j,c=setTimeout(u,e.debounce)):u()}function M(){requestAnimationFrame(()=>{const j=f.value;if(j!==null){const ve=j.parentNode.style,{scrollTop:Ie}=j,{overflowY:He,maxHeight:X}=i.platform.is.firefox===!0?{}:window.getComputedStyle(j),I=He!==void 0&&He!=="scroll";I===!0&&(j.style.overflowY="hidden"),ve.marginBottom=j.scrollHeight-1+"px",j.style.height="1px",j.style.height=j.scrollHeight+"px",I===!0&&(j.style.overflowY=parseInt(X,10)<j.scrollHeight?"auto":"hidden"),ve.marginBottom="",j.scrollTop=Ie}})}function H(j){w(j),c!==null&&(clearTimeout(c),c=null),u!==void 0&&u(),t("change",j.target.value)}function ge(j){j!==void 0&&Nr(j),c!==null&&(clearTimeout(c),c=null),u!==void 0&&u(),l=!1,a=!1,delete r.value,e.type!=="file"&&setTimeout(()=>{f.value!==null&&(f.value.value=h.value!==void 0?h.value:"")})}function re(){return r.hasOwnProperty("value")===!0?r.value:h.value!==void 0?h.value:""}vt(()=>{ge()}),Bt(()=>{e.autogrow===!0&&M()}),Object.assign(k,{innerValue:h,fieldClass:L(()=>`q-${N.value===!0?"textarea":"input"}`+(e.autogrow===!0?" q-textarea--autogrow":"")),hasShadow:L(()=>e.type!=="file"&&typeof e.shadowText=="string"&&e.shadowText.length!==0),inputRef:f,emitValue:V,hasValue:E,floatingLabel:L(()=>E.value===!0&&(e.type!=="number"||isNaN(h.value)===!1)||yl(e.displayValue)),getControl:()=>F(N.value===!0?"textarea":"input",{ref:f,class:["q-field__native q-placeholder",e.inputClass],style:e.inputStyle,...S.value,...y.value,...e.type!=="file"?{value:re()}:p.value}),getShadowControl:()=>F("div",{class:"q-field__native q-field__shadow absolute-bottom no-pointer-events"+(N.value===!0?"":" text-no-wrap")},[F("span",{class:"invisible"},re()),F("span",e.shadowText)])});const fe=MS(k);return Object.assign(s,{focus:R,select:b,getNativeElement:()=>f.value}),Ns(s,"nativeEl",()=>f.value),fe}});function Jh(e,t){const n=ce(null),s=L(()=>e.disable===!0?null:F("span",{ref:n,class:"no-outline",tabindex:-1}));function i(r){const o=t.value;r!==void 0&&r.type.indexOf("key")===0?o!==null&&document.activeElement!==o&&o.contains(document.activeElement)===!0&&o.focus():n.value!==null&&(r===void 0||o!==null&&o.contains(r.target)===!0)&&n.value.focus()}return{refocusTargetEl:s,refocusTarget:i}}var Zh={xs:30,sm:35,md:40,lg:50,xl:60};const KS=F("svg",{key:"svg",class:"q-radio__bg absolute non-selectable",viewBox:"0 0 24 24"},[F("path",{d:"M12,22a10,10 0 0 1 -10,-10a10,10 0 0 1 10,-10a10,10 0 0 1 10,10a10,10 0 0 1 -10,10m0,-22a12,12 0 0 0 -12,12a12,12 0 0 0 12,12a12,12 0 0 0 12,-12a12,12 0 0 0 -12,-12"}),F("path",{class:"q-radio__check",d:"M12,6a6,6 0 0 0 -6,6a6,6 0 0 0 6,6a6,6 0 0 0 6,-6a6,6 0 0 0 -6,-6"})]);var zS=tt({name:"QRadio",props:{...es,...Pi,...Ea,modelValue:{required:!0},val:{required:!0},label:String,leftLabel:Boolean,checkedIcon:String,uncheckedIcon:String,color:String,keepColor:Boolean,dense:Boolean,disable:Boolean,tabindex:[String,Number]},emits:["update:modelValue"],setup(e,{slots:t,emit:n}){const{proxy:s}=Ee(),i=ts(e,s.$q),r=Oi(e,Zh),o=ce(null),{refocusTargetEl:l,refocusTarget:a}=Jh(e,o),c=L(()=>ie(e.modelValue)===ie(e.val)),u=L(()=>"q-radio cursor-pointer no-outline row inline no-wrap items-center"+(e.disable===!0?" disabled":"")+(i.value===!0?" q-radio--dark":"")+(e.dense===!0?" q-radio--dense":"")+(e.leftLabel===!0?" reverse":"")),f=L(()=>{const p=e.color!==void 0&&(e.keepColor===!0||c.value===!0)?` text-${e.color}`:"";return`q-radio__inner relative-position q-radio__inner--${c.value===!0?"truthy":"falsy"}${p}`}),d=L(()=>(c.value===!0?e.checkedIcon:e.uncheckedIcon)||null),h=L(()=>e.disable===!0?-1:e.tabindex||0),g=L(()=>{const p={type:"radio"};return e.name!==void 0&&Object.assign(p,{".checked":c.value===!0,"^checked":c.value===!0?"checked":void 0,name:e.name,value:e.val}),p}),T=Yh(g);function x(p){p!==void 0&&(St(p),a(p)),e.disable!==!0&&c.value!==!0&&n("update:modelValue",e.val,p)}function A(p){(p.keyCode===13||p.keyCode===32)&&St(p)}function v(p){(p.keyCode===13||p.keyCode===32)&&x(p)}return Object.assign(s,{set:x}),()=>{const p=d.value!==null?[F("div",{key:"icon",class:"q-radio__icon-container absolute-full flex flex-center no-wrap"},[F(Yt,{class:"q-radio__icon",name:d.value})])]:[KS];e.disable!==!0&&T(p,"unshift"," q-radio__native q-ma-none q-pa-none");const E=[F("div",{class:f.value,style:r.value,"aria-hidden":"true"},p)];l.value!==null&&E.push(l.value);const w=e.label!==void 0?Nn(t.default,[e.label]):Pt(t.default);return w!==void 0&&E.push(F("div",{class:"q-radio__label q-anchor--skip"},w)),F("div",{ref:o,class:u.value,tabindex:h.value,role:"radio","aria-label":e.label,"aria-checked":c.value===!0?"true":"false","aria-disabled":e.disable===!0?"true":void 0,onClick:x,onKeydown:A,onKeyup:v},E)}}});const Xh={...es,...Pi,...Ea,modelValue:{required:!0,default:null},val:{},trueValue:{default:!0},falseValue:{default:!1},indeterminateValue:{default:null},checkedIcon:String,uncheckedIcon:String,indeterminateIcon:String,toggleOrder:{type:String,validator:e=>e==="tf"||e==="ft"},toggleIndeterminate:Boolean,label:String,leftLabel:Boolean,color:String,keepColor:Boolean,dense:Boolean,disable:Boolean,tabindex:[String,Number]},ep=["update:modelValue"];function tp(e,t){const{props:n,slots:s,emit:i,proxy:r}=Ee(),{$q:o}=r,l=ts(n,o),a=ce(null),{refocusTargetEl:c,refocusTarget:u}=Jh(n,a),f=Oi(n,Zh),d=L(()=>n.val!==void 0&&Array.isArray(n.modelValue)),h=L(()=>{const b=ie(n.val);return d.value===!0?n.modelValue.findIndex($=>ie($)===b):-1}),g=L(()=>d.value===!0?h.value!==-1:ie(n.modelValue)===ie(n.trueValue)),T=L(()=>d.value===!0?h.value===-1:ie(n.modelValue)===ie(n.falseValue)),x=L(()=>g.value===!1&&T.value===!1),A=L(()=>n.disable===!0?-1:n.tabindex||0),v=L(()=>`q-${e} cursor-pointer no-outline row inline no-wrap items-center`+(n.disable===!0?" disabled":"")+(l.value===!0?` q-${e}--dark`:"")+(n.dense===!0?` q-${e}--dense`:"")+(n.leftLabel===!0?" reverse":"")),p=L(()=>{const b=g.value===!0?"truthy":T.value===!0?"falsy":"indet",$=n.color!==void 0&&(n.keepColor===!0||(e==="toggle"?g.value===!0:T.value!==!0))?` text-${n.color}`:"";return`q-${e}__inner relative-position non-selectable q-${e}__inner--${b}${$}`}),E=L(()=>{const b={type:"checkbox"};return n.name!==void 0&&Object.assign(b,{".checked":g.value,"^checked":g.value===!0?"checked":void 0,name:n.name,value:d.value===!0?n.val:n.trueValue}),b}),w=Yh(E),k=L(()=>{const b={tabindex:A.value,role:e==="toggle"?"switch":"checkbox","aria-label":n.label,"aria-checked":x.value===!0?"mixed":g.value===!0?"true":"false"};return n.disable===!0&&(b["aria-disabled"]="true"),b});function N(b){b!==void 0&&(St(b),u(b)),n.disable!==!0&&i("update:modelValue",C(),b)}function C(){if(d.value===!0){if(g.value===!0){const b=n.modelValue.slice();return b.splice(h.value,1),b}return n.modelValue.concat([n.val])}if(g.value===!0){if(n.toggleOrder!=="ft"||n.toggleIndeterminate===!1)return n.falseValue}else if(T.value===!0){if(n.toggleOrder==="ft"||n.toggleIndeterminate===!1)return n.trueValue}else return n.toggleOrder!=="ft"?n.trueValue:n.falseValue;return n.indeterminateValue}function y(b){(b.keyCode===13||b.keyCode===32)&&St(b)}function S(b){(b.keyCode===13||b.keyCode===32)&&N(b)}const R=t(g,x);return Object.assign(r,{toggle:N}),()=>{const b=R();n.disable!==!0&&w(b,"unshift",` q-${e}__native absolute q-ma-none q-pa-none`);const $=[F("div",{class:p.value,style:f.value,"aria-hidden":"true"},b)];c.value!==null&&$.push(c.value);const P=n.label!==void 0?Nn(s.default,[n.label]):Pt(s.default);return P!==void 0&&$.push(F("div",{class:`q-${e}__label q-anchor--skip`},P)),F("div",{ref:a,class:v.value,...k.value,onClick:N,onKeydown:y,onKeyup:S},$)}}const WS=F("div",{key:"svg",class:"q-checkbox__bg absolute"},[F("svg",{class:"q-checkbox__svg fit absolute-full",viewBox:"0 0 24 24"},[F("path",{class:"q-checkbox__truthy",fill:"none",d:"M1.73,12.91 8.1,19.28 22.79,4.59"}),F("path",{class:"q-checkbox__indet",d:"M4,14H20V10H4"})])]);var GS=tt({name:"QCheckbox",props:Xh,emits:ep,setup(e){function t(n,s){const i=L(()=>(n.value===!0?e.checkedIcon:s.value===!0?e.indeterminateIcon:e.uncheckedIcon)||null);return()=>i.value!==null?[F("div",{key:"icon",class:"q-checkbox__icon-container absolute-full flex flex-center no-wrap"},[F(Yt,{class:"q-checkbox__icon",name:i.value})])]:[WS]}return tp("checkbox",t)}}),QS=tt({name:"QToggle",props:{...Xh,icon:String,iconColor:String},emits:ep,setup(e){function t(n,s){const i=L(()=>(n.value===!0?e.checkedIcon:s.value===!0?e.indeterminateIcon:e.uncheckedIcon)||e.icon),r=L(()=>n.value===!0?e.iconColor:null);return()=>[F("div",{class:"q-toggle__track"}),F("div",{class:"q-toggle__thumb absolute flex flex-center no-wrap"},i.value!==void 0?[F(Yt,{name:i.value,color:r.value})]:void 0)]}return tp("toggle",t)}});const np={radio:zS,checkbox:GS,toggle:QS},YS=Object.keys(np);var JS=tt({name:"QOptionGroup",props:{...es,modelValue:{required:!0},options:{type:Array,validator:e=>e.every(t=>"value"in t&&"label"in t)},name:String,type:{default:"radio",validator:e=>YS.includes(e)},color:String,keepColor:Boolean,dense:Boolean,size:String,leftLabel:Boolean,inline:Boolean,disable:Boolean},emits:["update:modelValue"],setup(e,{emit:t,slots:n}){const{proxy:{$q:s}}=Ee(),i=Array.isArray(e.modelValue);e.type==="radio"?i===!0&&console.error("q-option-group: model should not be array"):i===!1&&console.error("q-option-group: model should be array in your case");const r=ts(e,s),o=L(()=>np[e.type]),l=L(()=>"q-option-group q-gutter-x-sm"+(e.inline===!0?" q-option-group--inline":"")),a=L(()=>{const u={role:"group"};return e.type==="radio"&&(u.role="radiogroup",e.disable===!0&&(u["aria-disabled"]="true")),u});function c(u){t("update:modelValue",u)}return()=>F("div",{class:l.value,...a.value},e.options.map((u,f)=>{const d=n["label-"+f]!==void 0?()=>n["label-"+f](u):n.label!==void 0?()=>n.label(u):void 0;return F("div",[F(o.value,{modelValue:e.modelValue,val:u.value,name:u.name===void 0?e.name:u.name,disable:e.disable||u.disable,label:d===void 0?u.label:null,leftLabel:u.leftLabel===void 0?e.leftLabel:u.leftLabel,color:u.color===void 0?e.color:u.color,checkedIcon:u.checkedIcon,uncheckedIcon:u.uncheckedIcon,dark:u.dark||r.value,size:u.size===void 0?e.size:u.size,dense:e.dense,keepColor:u.keepColor===void 0?e.keepColor:u.keepColor,"onUpdate:modelValue":c},d)])}))}}),ZS=tt({name:"DialogPlugin",props:{...es,title:String,message:String,prompt:Object,options:Object,progress:[Boolean,Object],html:Boolean,ok:{type:[String,Object,Boolean],default:!0},cancel:[String,Object,Boolean],focus:{type:String,default:"ok",validator:e=>["ok","cancel","none"].includes(e)},stackButtons:Boolean,color:String,cardClass:[String,Array,Object],cardStyle:[String,Array,Object]},emits:["ok","hide"],setup(e,{emit:t}){const{proxy:n}=Ee(),{$q:s}=n,i=ts(e,s),r=ce(null),o=ce(e.prompt!==void 0?e.prompt.model:e.options!==void 0?e.options.model:void 0),l=L(()=>"q-dialog-plugin"+(i.value===!0?" q-dialog-plugin--dark q-dark":"")+(e.progress!==!1?" q-dialog-plugin--progress":"")),a=L(()=>e.color||(i.value===!0?"amber":"primary")),c=L(()=>e.progress===!1?null:Ft(e.progress)===!0?{component:e.progress.spinner||vi,props:{color:e.progress.color||a.value}}:{component:vi,props:{color:a.value}}),u=L(()=>e.prompt!==void 0||e.options!==void 0),f=L(()=>{if(u.value!==!0)return{};const{model:P,isValid:D,items:V,...M}=e.prompt!==void 0?e.prompt:e.options;return M}),d=L(()=>Ft(e.ok)===!0||e.ok===!0?s.lang.label.ok:e.ok),h=L(()=>Ft(e.cancel)===!0||e.cancel===!0?s.lang.label.cancel:e.cancel),g=L(()=>e.prompt!==void 0?e.prompt.isValid!==void 0&&e.prompt.isValid(o.value)!==!0:e.options!==void 0?e.options.isValid!==void 0&&e.options.isValid(o.value)!==!0:!1),T=L(()=>({color:a.value,label:d.value,ripple:!1,disable:g.value,...Ft(e.ok)===!0?e.ok:{flat:!0},"data-autofocus":e.focus==="ok"&&u.value!==!0||void 0,onClick:p})),x=L(()=>({color:a.value,label:h.value,ripple:!1,...Ft(e.cancel)===!0?e.cancel:{flat:!0},"data-autofocus":e.focus==="cancel"&&u.value!==!0||void 0,onClick:E}));Ce(()=>e.prompt&&e.prompt.model,k),Ce(()=>e.options&&e.options.model,k);function A(){r.value.show()}function v(){r.value.hide()}function p(){t("ok",ie(o.value)),v()}function E(){v()}function w(){t("hide")}function k(P){o.value=P}function N(P){g.value!==!0&&e.prompt.type!=="textarea"&&hi(P,13)===!0&&p()}function C(P,D){return e.html===!0?F(Fs,{class:P,innerHTML:D}):F(Fs,{class:P},()=>D)}function y(){return[F(US,{color:a.value,dense:!0,autofocus:!0,dark:i.value,...f.value,modelValue:o.value,"onUpdate:modelValue":k,onKeyup:N})]}function S(){return[F(JS,{color:a.value,options:e.options.items,dark:i.value,...f.value,modelValue:o.value,"onUpdate:modelValue":k})]}function R(){const P=[];return e.cancel&&P.push(F(gl,x.value)),e.ok&&P.push(F(gl,T.value)),F(_S,{class:e.stackButtons===!0?"items-end":"",vertical:e.stackButtons,align:"right"},()=>P)}function b(){const P=[];return e.title&&P.push(C("q-dialog__title",e.title)),e.progress!==!1&&P.push(F(Fs,{class:"q-dialog__progress"},()=>F(c.value.component,c.value.props))),e.message&&P.push(C("q-dialog__message",e.message)),e.prompt!==void 0?P.push(F(Fs,{class:"scroll q-dialog-plugin__form"},y)):e.options!==void 0&&P.push(F(Cu,{dark:i.value}),F(Fs,{class:"scroll q-dialog-plugin__form"},S),F(Cu,{dark:i.value})),(e.ok||e.cancel)&&P.push(R()),P}function $(){return[F(bS,{class:[l.value,e.cardClass],style:e.cardStyle,dark:i.value},b)]}return Object.assign(n,{show:A,hide:v}),()=>F(Q_,{ref:r,onHide:w},$)}});function sp(e,t){for(const n in t)n!=="spinner"&&Object(t[n])===t[n]?(e[n]=Object(e[n])!==e[n]?{}:{...e[n]},sp(e[n],t[n])):e[n]=t[n]}function XS(e,t,n){return s=>{let i,r;const o=t===!0&&s.component!==void 0;if(o===!0){const{component:v,componentProps:p}=s;i=typeof v=="string"?n.component(v):v,r=p||{}}else{const{class:v,style:p,...E}=s;i=e,r=E,v!==void 0&&(E.cardClass=v),p!==void 0&&(E.cardStyle=p)}let l,a=!1;const c=ce(null),u=Ca(!1,"dialog"),f=v=>{if(c.value!==null&&c.value[v]!==void 0){c.value[v]();return}const p=l.$.subTree;if(p&&p.component){if(p.component.proxy&&p.component.proxy[v]){p.component.proxy[v]();return}if(p.component.subTree&&p.component.subTree.component&&p.component.subTree.component.proxy&&p.component.subTree.component.proxy[v]){p.component.subTree.component.proxy[v]();return}}console.error("[Quasar] Incorrectly defined Dialog component")},d=[],h=[],g={onOk(v){return d.push(v),g},onCancel(v){return h.push(v),g},onDismiss(v){return d.push(v),h.push(v),g},hide(){return f("hide"),g},update(v){if(l!==null){if(o===!0)Object.assign(r,v);else{const{class:p,style:E,...w}=v;p!==void 0&&(w.cardClass=p),E!==void 0&&(w.cardStyle=E),sp(r,w)}l.$forceUpdate()}return g}},T=v=>{a=!0,d.forEach(p=>{p(v)})},x=()=>{A.unmount(u),qh(u),A=null,l=null,a!==!0&&h.forEach(v=>{v()})};let A=_h({name:"QGlobalDialog",setup:()=>()=>F(i,{...r,ref:c,onOk:T,onHide:x,onVnodeMounted(...v){typeof r.onVnodeMounted=="function"&&r.onVnodeMounted(...v),Ge(()=>f("show"))}})},n);return l=A.mount(u),g}}var ew={install({$q:e,parentApp:t}){e.dialog=XS(ZS,!0,t),this.__installed!==!0&&(this.create=e.dialog)}},tw=tt({name:"QAvatar",props:{...Pi,fontSize:String,color:String,textColor:String,icon:String,square:Boolean,rounded:Boolean},setup(e,{slots:t}){const n=Oi(e),s=L(()=>"q-avatar"+(e.color?` bg-${e.color}`:"")+(e.textColor?` text-${e.textColor} q-chip--colored`:"")+(e.square===!0?" q-avatar--square":e.rounded===!0?" rounded-borders":"")),i=L(()=>e.fontSize?{fontSize:e.fontSize}:null);return()=>{const r=e.icon!==void 0?[F(Yt,{name:e.icon})]:void 0;return F("div",{class:s.value,style:n.value},[F("div",{class:"q-avatar__content row flex-center overflow-hidden",style:i.value},H_(t.default,r))])}}});let nw=0;const cr={},ur={},Tt={},ip={},sw=/^\s*$/,rp=[],iw=[void 0,null,!0,!1,""],ka=["top-left","top-right","bottom-left","bottom-right","top","bottom","left","right","center"],rw=["top-left","top-right","bottom-left","bottom-right"],us={positive:{icon:e=>e.iconSet.type.positive,color:"positive"},negative:{icon:e=>e.iconSet.type.negative,color:"negative"},warning:{icon:e=>e.iconSet.type.warning,color:"warning",textColor:"dark"},info:{icon:e=>e.iconSet.type.info,color:"info"},ongoing:{group:!1,timeout:0,spinner:!0,color:"grey-8"}};function op(e,t,n){if(!e)return qs("parameter required");let s;const i={textColor:"white"};if(e.ignoreDefaults!==!0&&Object.assign(i,cr),Ft(e)===!1&&(i.type&&Object.assign(i,us[i.type]),e={message:e}),Object.assign(i,us[e.type||i.type],e),typeof i.icon=="function"&&(i.icon=i.icon(t)),i.spinner?(i.spinner===!0&&(i.spinner=vi),i.spinner=Jt(i.spinner)):i.spinner=!1,i.meta={hasMedia:Boolean(i.spinner!==!1||i.icon||i.avatar),hasText:Nu(i.message)||Nu(i.caption)},i.position){if(ka.includes(i.position)===!1)return qs("wrong position",e)}else i.position="bottom";if(iw.includes(i.timeout)===!0)i.timeout=5e3;else{const a=Number(i.timeout);if(isNaN(a)||a<0)return qs("wrong timeout",e);i.timeout=Number.isFinite(a)?a:0}i.timeout===0?i.progress=!1:i.progress===!0&&(i.meta.progressClass="q-notification__progress"+(i.progressClass?` ${i.progressClass}`:""),i.meta.progressStyle={animationDuration:`${i.timeout+1e3}ms`});const r=(Array.isArray(e.actions)===!0?e.actions:[]).concat(e.ignoreDefaults!==!0&&Array.isArray(cr.actions)===!0?cr.actions:[]).concat(us[e.type]!==void 0&&Array.isArray(us[e.type].actions)===!0?us[e.type].actions:[]),{closeBtn:o}=i;if(o&&r.push({label:typeof o=="string"?o:t.lang.label.close}),i.actions=r.map(({handler:a,noDismiss:c,...u})=>({flat:!0,...u,onClick:typeof a=="function"?()=>{a(),c!==!0&&l()}:()=>{l()}})),i.multiLine===void 0&&(i.multiLine=i.actions.length>1),Object.assign(i.meta,{class:`q-notification row items-stretch q-notification--${i.multiLine===!0?"multi-line":"standard"}`+(i.color!==void 0?` bg-${i.color}`:"")+(i.textColor!==void 0?` text-${i.textColor}`:"")+(i.classes!==void 0?` ${i.classes}`:""),wrapperClass:"q-notification__wrapper col relative-position border-radius-inherit "+(i.multiLine===!0?"column no-wrap justify-center":"row items-center"),contentClass:"q-notification__content row items-center"+(i.multiLine===!0?"":" col"),leftClass:i.meta.hasText===!0?"additional":"single",attrs:{role:"alert",...i.attrs}}),i.group===!1?(i.group=void 0,i.meta.group=void 0):((i.group===void 0||i.group===!0)&&(i.group=[i.message,i.caption,i.multiline].concat(i.actions.map(a=>`${a.label}*${a.icon}`)).join("|")),i.meta.group=i.group+"|"+i.position),i.actions.length===0?i.actions=void 0:i.meta.actionsClass="q-notification__actions row items-center "+(i.multiLine===!0?"justify-end":"col-auto")+(i.meta.hasMedia===!0?" q-notification__actions--with-media":""),n!==void 0){n.notif.meta.timer&&(clearTimeout(n.notif.meta.timer),n.notif.meta.timer=void 0),i.meta.uid=n.notif.meta.uid;const a=Tt[i.position].value.indexOf(n.notif);Tt[i.position].value[a]=i}else{const a=ur[i.meta.group];if(a===void 0){if(i.meta.uid=nw++,i.meta.badge=1,["left","right","center"].indexOf(i.position)!==-1)Tt[i.position].value.splice(Math.floor(Tt[i.position].value.length/2),0,i);else{const c=i.position.indexOf("top")!==-1?"unshift":"push";Tt[i.position].value[c](i)}i.group!==void 0&&(ur[i.meta.group]=i)}else{if(a.meta.timer&&(clearTimeout(a.meta.timer),a.meta.timer=void 0),i.badgePosition!==void 0){if(rw.includes(i.badgePosition)===!1)return qs("wrong badgePosition",e)}else i.badgePosition=`top-${i.position.indexOf("left")!==-1?"right":"left"}`;i.meta.uid=a.meta.uid,i.meta.badge=a.meta.badge+1,i.meta.badgeClass=`q-notification__badge q-notification__badge--${i.badgePosition}`+(i.badgeColor!==void 0?` bg-${i.badgeColor}`:"")+(i.badgeTextColor!==void 0?` text-${i.badgeTextColor}`:"")+(i.badgeClass?` ${i.badgeClass}`:"");const c=Tt[i.position].value.indexOf(a);Tt[i.position].value[c]=ur[i.meta.group]=i}}const l=()=>{ow(i),s=void 0};if(i.timeout>0&&(i.meta.timer=setTimeout(()=>{i.meta.timer=void 0,l()},i.timeout+1e3)),i.group!==void 0)return a=>{a!==void 0?qs("trying to update a grouped one which is forbidden",e):l()};if(s={dismiss:l,config:e,notif:i},n!==void 0){Object.assign(n,s);return}return a=>{if(s!==void 0)if(a===void 0)s.dismiss();else{const c=Object.assign({},s.config,a,{group:!1,position:i.position});op(c,t,s)}}}function ow(e){e.meta.timer&&(clearTimeout(e.meta.timer),e.meta.timer=void 0);const t=Tt[e.position].value.indexOf(e);if(t!==-1){e.group!==void 0&&delete ur[e.meta.group];const n=rp[""+e.meta.uid];if(n){const{width:s,height:i}=getComputedStyle(n);n.style.left=`${n.offsetLeft}px`,n.style.width=s,n.style.height=i}Tt[e.position].value.splice(t,1),typeof e.onDismiss=="function"&&e.onDismiss()}}function Nu(e){return e!=null&&sw.test(e)!==!0}function qs(e,t){return console.error(`Notify: ${e}`,t),!1}function lw(){return tt({name:"QNotifications",devtools:{hide:!0},setup(){return()=>F("div",{class:"q-notifications"},ka.map(e=>F(gd,{key:e,class:ip[e],tag:"div",name:`q-notification--${e}`},()=>Tt[e].value.map(t=>{const n=t.meta,s=[];if(n.hasMedia===!0&&(t.spinner!==!1?s.push(F(t.spinner,{class:"q-notification__spinner q-notification__spinner--"+n.leftClass,color:t.spinnerColor,size:t.spinnerSize})):t.icon?s.push(F(Yt,{class:"q-notification__icon q-notification__icon--"+n.leftClass,name:t.icon,color:t.iconColor,size:t.iconSize,role:"img"})):t.avatar&&s.push(F(tw,{class:"q-notification__avatar q-notification__avatar--"+n.leftClass},()=>F("img",{src:t.avatar,"aria-hidden":"true"})))),n.hasText===!0){let r;const o={class:"q-notification__message col"};if(t.html===!0)o.innerHTML=t.caption?`<div>${t.message}</div><div class="q-notification__caption">${t.caption}</div>`:t.message;else{const l=[t.message];r=t.caption?[F("div",l),F("div",{class:"q-notification__caption"},[t.caption])]:l}s.push(F("div",o,r))}const i=[F("div",{class:n.contentClass},s)];return t.progress===!0&&i.push(F("div",{key:`${n.uid}|p|${n.badge}`,class:n.progressClass,style:n.progressStyle})),t.actions!==void 0&&i.push(F("div",{class:n.actionsClass},t.actions.map(r=>F(gl,r)))),n.badge>1&&i.push(F("div",{key:`${n.uid}|${n.badge}`,class:t.meta.badgeClass,style:t.badgeStyle},[n.badge])),F("div",{ref:r=>{rp[""+n.uid]=r},key:n.uid,class:n.class,...n.attrs},[F("div",{class:n.wrapperClass},i)])}))))}})}var aw={setDefaults(e){Ft(e)===!0&&Object.assign(cr,e)},registerType(e,t){Ft(t)===!0&&(us[e]=t)},install({$q:e,parentApp:t}){if(e.notify=this.create=n=>op(n,e),e.notify.setDefaults=this.setDefaults,e.notify.registerType=this.registerType,e.config.notify!==void 0&&this.setDefaults(e.config.notify),this.__installed!==!0){ka.forEach(s=>{Tt[s]=ce([]);const i=["left","center","right"].includes(s)===!0?"center":s.indexOf("top")!==-1?"top":"bottom",r=s.indexOf("left")!==-1?"start":s.indexOf("right")!==-1?"end":"center",o=["left","right"].includes(s)?`items-${s==="left"?"start":"end"} justify-center`:s==="center"?"flex-center":`items-${r}`;ip[s]=`q-notifications__list q-notifications__list--${i} fixed column no-wrap ${o}`});const n=Ca("q-notify");_h(lw(),t).mount(n)}}},cw={config:{},plugins:{Dialog:ew,Notify:aw}};const uw="/";async function fw({app:e,router:t,store:n},s){let i=!1;const r=a=>{try{return t.resolve(a).href}catch{}return Object(a)===a?null:a},o=a=>{if(i=!0,typeof a=="string"&&/^https?:\/\//.test(a)){window.location.href=a;return}const c=r(a);c!==null&&(window.location.href=c)},l=window.location.href.replace(window.location.origin,"");for(let a=0;i===!1&&a<s.length;a++)try{await s[a]({app:e,router:t,store:n,ssrContext:null,redirect:o,urlPath:l,publicPath:uw})}catch(c){if(c&&c.url){o(c.url);return}console.error("[Quasar] boot error:",c);return}i!==!0&&(e.use(t),e.mount("#q-app"))}m_(ea,cw).then(e=>{const[t,n]=Promise.allSettled!==void 0?["allSettled",s=>s.map(i=>{if(i.status==="rejected"){console.error("[Quasar] boot error:",i.reason);return}return i.value.default})]:["all",s=>s.map(i=>i.default)];return Promise[t]([Tn(()=>import("./i18n.7818c443.js"),[]),Tn(()=>import("./app.e8a38d42.js"),["assets/app.e8a38d42.js","assets/index.55edfe91.js"]),Tn(()=>import("./store.c7b40113.js"),["assets/store.c7b40113.js","assets/index.55edfe91.js","assets/Node.9a909cb3.js","assets/index.a83e0e01.js"])]).then(s=>{const i=n(s).filter(r=>typeof r=="function");fw(e,i)})});export{hi as $,rt as A,vw as B,Aw as C,ew as D,pw as E,We as F,b_ as G,es as H,__ as I,ts as J,v_ as K,S_ as L,g_ as M,Dl as N,Pw as O,B_ as P,Us as Q,mw as R,Tw as S,jn as T,I_ as U,L_ as V,Rw as W,Nn as X,gw as Y,oS as Z,St as _,Ci as a,Ew as a$,vh as a0,Yt as a1,bo as a2,vl as a3,y_ as a4,wi as a5,Ul as a6,vS as a7,w_ as a8,ES as a9,tw as aA,df as aB,fS as aC,dS as aD,ll as aE,hn as aF,Lb as aG,$b as aH,ar as aI,De as aJ,C_ as aK,P_ as aL,zn as aM,D_ as aN,dw as aO,hw as aP,Mb as aQ,W_ as aR,du as aS,fu as aT,R_ as aU,wa as aV,z_ as aW,N_ as aX,kw as aY,xw as aZ,Gb as a_,Ow as aa,gl as ab,Nr as ac,e0 as ad,ig as ae,Cw as af,ww as ag,sg as ah,Ei as ai,Wr as aj,$l as ak,Yl as al,Rg as am,Km as an,Gt as ao,Yf as ap,Np as aq,Ng as ar,Wm as as,bS as at,Fs as au,Q_ as av,Ql as aw,Cu as ax,US as ay,ud as az,Me as b,jm as b0,bw as b1,Ft as b2,Ea as b3,Yh as b4,Nw as b5,Ns as b6,og as b7,qg as b8,Iv as b9,zr as bA,jS as bB,xt as bC,Fc as bD,yw as bE,Am as bF,GS as bG,QS as bH,Fm as bI,Tn as ba,_S as bb,Pl as bc,kl as bd,Bu as be,bi as bf,Nv as bg,yi as bh,_p as bi,Qf as bj,zm as bk,Gm as bl,Vh as bm,Qb as bn,PS as bo,OS as bp,MS as bq,NS as br,Pi as bs,Oi as bt,H_ as bu,ph as bv,Ef as bw,VS as bx,yl as by,Kl as bz,L as c,Os as d,El as e,ke as f,Ee as g,F as h,at as i,_w as j,Jo as k,Sw as l,Jt as m,Ge as n,Bt as o,Sn as p,Ol as q,ce as r,tf as s,ie as t,tt as u,Pt as v,Ce as w,_n as x,vt as y,di as z};
//# sourceMappingURL=data:application/json;base64,
