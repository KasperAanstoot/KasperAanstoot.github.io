import{_ as n}from"./index.55edfe91.js";import{m as g,p as J}from"./index.4634898b.js";function j(e){const o={};let{nsPrefix:a}=e;return o[a]=e,n.forEach(e.eClassifiers,r=>{let s=`${a}.${r.name}`;o[s]=r,n.forEach(r.eStructuralFeatures,c=>{o[`${s}.${c.name}`]=c}),n.forEach(r.eOperations,c=>{o[`${s}.${c.name}`]=c})}),o}const h={css:"https://www.obiwan.eu/metamodels/css",diagram:"https://www.obiwan.eu/metamodels/diagram","diagram.core":"https://www.obiwan.eu/metamodels/diagram/core",ecore:"http://www.eclipse.org/emf/2002/Ecore","ecore.ext":"https://www.obiwan.eu/metamodels/ecore/ext",pipeline:"https://www.obiwan.eu/metamodels/pipeline","uml.di":"https://www.obiwan.eu/metamodels/uml/di"};function R(e){const{nsURI:o}=e;return{addConstructor(a,r){a.eConstructor={__typename:"ecore.EOperation",name:"constructor",lowerBound:0,upperBound:1,eType:this.createRef("ecore.EDataType","ecore.JSObject")},r&&n.set(a.eConstructor,"$._",r)},createElement(a,r){const s=r.split(".").join("/"),c=n.hashString(`${o}#//${s}`),i=n.last(r.split("."));return{__typename:a,id:c,name:i}},createRef_OLD(a,r){const s=r.split(".");let c,i;if(s.length>1){const u=n.first(s);c=h[u]||o,c===o?i=s.join("/"):i=n.drop(s).join("/")}else c=o,i=r;return{__typename:"ecore.ERef",eClass:a,ref:n.hashString(`${c}#//${i}`)}},createRef(a,r,s){let c;if(!s)c=o,s=r;else if(c=h[r],!c)throw new Error(`Warning: packageImportMap does not contain entry for '${r}'`);const i=n.hashString(`${c}#//${s.split(".").join("/")}`);return{__typename:"ecore.ERef",eClass:a,ref:i}},createNamespaceMap(){return j(e)}}}const w="css",_=h[w],T={__typename:"ecore.EPackage",id:n.hashString(_),name:w,nsPrefix:w,nsURI:_},l=R(T);T.eClassifiers=[{...l.createElement("ecore.EClass","Element"),abstract:!0,eSuperTypes:[l.createRef("ecore.EClass","ecore","EModelElement")]},{...l.createElement("ecore.EClass","StyleRule"),eOperations:[{...l.createElement("ecore.EOperation","StyleRule.toJSON"),lowerBound:1,upperBound:1,eType:l.createRef("ecore.EDataType","ecore.ext","Any")}],eStructuralFeatures:[{...l.createElement("ecore.EAttribute","StyleRule.selector"),upperBound:-1,eType:l.createRef("ecore.EDataType","ecore","EString")},{...l.createElement("ecore.EAttribute","StyleRule.style"),upperBound:-1,eType:l.createRef("ecore.EDataType","ecore","EStringToStringMapEntry")}],eSuperTypes:[l.createRef("ecore.EClass","Element")]},{...l.createElement("ecore.EClass","Stylesheet"),eStructuralFeatures:[{...l.createElement("ecore.EAttribute","Stylesheet.name"),lowerBound:1,upperBound:1,eType:l.createRef("ecore.EDataType","ecore","EString")},{...l.createElement("ecore.EReference","Stylesheet.rules"),containment:!0,upperBound:-1,eType:l.createRef("ecore.EClass","StyleRule")}],eSuperTypes:[l.createRef("ecore.EClass","Element")]}];T.implementation={"StyleRule.toJSON":function(){const e=n.omit(this,["style"]);return this.style&&(e.style=n.mapValues(this.style,o=>n.isFunction(o)?o.toString():o)),e}};const b="core",O=h[`diagram.${b}`],$={__typename:"ecore.EPackage",id:n.hashString(O),name:b,nsPrefix:`diagram.${b}`,nsURI:O},E=R($);$.eClassifiers=[{...E.createElement("ecore.EClass","Element"),abstract:!0,eSuperTypes:[E.createRef("ecore.EClass","ecore","EModelElement")]},{...E.createElement("ecore.EClass","Point"),eStructuralFeatures:[{...E.createElement("ecore.EAttribute","Point.x"),defaultValue:0,lowerBound:1,upperBound:1,eType:E.createRef("ecore.EDataType","ecore","EFloat")},{...E.createElement("ecore.EAttribute","Point.y"),defaultValue:0,lowerBound:1,upperBound:1,eType:E.createRef("ecore.EDataType","ecore","EFloat")}],eSuperTypes:[E.createRef("ecore.EClass","Element")]}];const x="diagram",N=h[x],y={__typename:"ecore.EPackage",id:n.hashString(N),name:x,nsPrefix:x,nsURI:N},t=R(y);y.eClassifiers=[{...t.createElement("ecore.EClass","BaseElement"),abstract:!0,eConstructor:{...t.createElement("ecore.EOperation","BaseElement.eConstructor"),eType:t.createRef("ecore.EDataType","ecore.ext","Any")},eOperations:[{...t.createElement("ecore.EOperation","BaseElement.toJSON"),lowerBound:1,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","JSObject")}],eStructuralFeatures:[{...t.createElement("ecore.EAttribute","BaseElement.data"),upperBound:1,eType:t.createRef("ecore.EDataType","ecore","JSObject")},{...t.createElement("ecore.EReference","BaseElement.modelElement"),upperBound:1,eType:t.createRef("ecore.EClass","ecore","EModelElement")},{...t.createElement("ecore.EAttribute","BaseElement.scratch"),transient:!0,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","JSObject")}],eSuperTypes:[t.createRef("ecore.EClass","ecore","EModelElement")]},{...t.createElement("ecore.EClass","CompoundNode"),eStructuralFeatures:[{...t.createElement("ecore.EAttribute","CompoundNode.expanded"),eType:t.createRef("ecore.EDataType","ecore","EBoolean")}],eSuperTypes:[t.createRef("ecore.EClass","Node")]},{...t.createElement("ecore.EClass","Diagram"),eConstructor:{...t.createElement("ecore.EOperation","Diagram.eConstructor"),eType:t.createRef("ecore.EDataType","ecore.ext","Any")},eOperations:[{...t.createElement("ecore.EOperation","Diagram.add"),lowerBound:1,upperBound:1,eType:t.createRef("ecore.EClass","Element")},{...t.createElement("ecore.EOperation","Diagram.bind"),lowerBound:0,upperBound:1,eType:t.createRef("ecore.EDataType","ecore.ext","Any")},{...t.createElement("ecore.EOperation","Diagram.get"),lowerBound:0,upperBound:1,eType:t.createRef("ecore.EDataType","ecore.ext","Any")},{...t.createElement("ecore.EOperation","Diagram.toJSON"),lowerBound:1,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","JSObject")}],eStructuralFeatures:[{...t.createElement("ecore.EReference","Diagram.elements"),containment:!0,unique:!0,upperBound:-1,eType:t.createRef("ecore.EClass","Element")},{...t.createElement("ecore.EReference","Diagram.layout"),containment:!0,defaultValueLiteral:JSON.stringify({__typename:"diagram.PresetLayout",fit:!1,padding:16},null,2),upperBound:1,eType:t.createRef("ecore.EClass","Layout")},{...t.createElement("ecore.EAttribute","Diagram.maxZoom"),lowerBound:1,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","EFloat")},{...t.createElement("ecore.EAttribute","Diagram.minZoom"),lowerBound:1,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","EFloat")},{...t.createElement("ecore.EReference","Diagram.pan"),containment:!0,lowerBound:1,upperBound:1,eType:t.createRef("ecore.EClass","diagram.core","Point")},{...t.createElement("ecore.EReference","Diagram.style"),containment:!0,upperBound:-1,eType:t.createRef("ecore.EClass","css","StyleRule")},{...t.createElement("ecore.EAttribute","Diagram.wheelSensitivity"),lowerBound:1,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","EFloat")},{...t.createElement("ecore.EAttribute","Diagram.zoom"),defaultValueLiteral:1,lowerBound:1,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","EFloat")}],eSuperTypes:[t.createRef("ecore.EClass","BaseElement")]},{...t.createElement("ecore.EClass","Edge"),eConstructor:{...t.createElement("ecore.EOperation","Edge.eConstructor"),eType:t.createRef("ecore.EDataType","ecore.ext","Any")},eStructuralFeatures:[{...t.createElement("ecore.EReference","Edge.source"),changeable:!1,lowerBound:1,upperBound:1,unsettable:!0,eType:t.createRef("ecore.EClass","Node")},{...t.createElement("ecore.EReference","Edge.target"),changeable:!1,lowerBound:1,upperBound:1,unsettable:!0,eType:t.createRef("ecore.EClass","Node")}],eSuperTypes:[t.createRef("ecore.EClass","Element")]},{...t.createElement("ecore.EClass","Element"),abstract:!0,eConstructor:{...t.createElement("ecore.EOperation","Element.eConstructor"),eType:t.createRef("ecore.EDataType","ecore.ext","Any")},eOperations:[{...t.createElement("ecore.EOperation","Element.addClass"),lowerBound:0,upperBound:1,eType:t.createRef("ecore.EDataType","ecore.ext","Any")},{...t.createElement("ecore.EOperation","Element.bind"),lowerBound:0,upperBound:1,eType:t.createRef("ecore.EDataType","ecore.ext","Any")},{...t.createElement("ecore.EOperation","Element.mapToElementJSON"),lowerBound:1,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","JSObject")},{...t.createElement("ecore.EOperation","Element.mount"),lowerBound:1,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","JSObject")},{...t.createElement("ecore.EOperation","Element.removeClass"),lowerBound:0,upperBound:1,eType:t.createRef("ecore.EDataType","ecore.ext","Any")}],eStructuralFeatures:[{...t.createElement("ecore.EAttribute","Element.classes"),unique:!0,upperBound:-1,eType:t.createRef("ecore.EDataType","ecore","EString")},{...t.createElement("ecore.EAttribute","Element.selectable"),defaultValueLiteral:!0,upperBound:1,eType:t.createRef("ecore.EDataType","ecore","EBoolean")},{...t.createElement("ecore.EAttribute","Element.style"),upperBound:-1,unique:!0,eType:t.createRef("ecore.EDataType","ecore","EStringToStringMapEntry")}],eSuperTypes:[t.createRef("ecore.EClass","BaseElement")]},{...t.createElement("ecore.EClass","Layout"),abstract:!0,eConstructor:{...t.createElement("ecore.EOperation","Layout.eConstructor"),eType:t.createRef("ecore.EDataType","ecore.ext","Any")},eStructuralFeatures:[{...t.createElement("ecore.EReference","Layout.ready"),upperBound:1,eType:t.createRef("ecore.EClass","ecore","EOperation")},{...t.createElement("ecore.EReference","Layout.stop"),upperBound:1,eType:t.createRef("ecore.EClass","ecore","EOperation")}],eSuperTypes:[t.createRef("ecore.EClass","ecore","ENamedElement")]},{...t.createElement("ecore.EClass","Node"),eConstructor:{...t.createElement("ecore.EOperation","Node.eConstructor"),eType:t.createRef("ecore.EDataType","ecore.ext","Any")},eOperations:[{...t.createElement("ecore.EOperation","Node.bind"),lowerBound:0,upperBound:1,eType:t.createRef("ecore.EDataType","ecore.ext","Any")}],eStructuralFeatures:[{...t.createElement("ecore.EAttribute","Node.grabbable"),upperBound:1,eType:t.createRef("ecore.EDataType","ecore","EBoolean")},{...t.createElement("ecore.EAttribute","Node.locked"),upperBound:1,eType:t.createRef("ecore.EDataType","ecore","EBoolean")},{...t.createElement("ecore.EReference","Node.children"),upperBound:-1,eOpposite:t.createRef("ecore.EReference","Node.parent"),eType:t.createRef("ecore.EClass","Node"),unique:!0},{...t.createElement("ecore.EAttribute","Node.expanded"),eType:t.createRef("ecore.EDataType","ecore","EBoolean")},{...t.createElement("ecore.EReference","Node.parent"),eOpposite:t.createRef("ecore.EReference","Node.children"),upperBound:1,eType:t.createRef("ecore.EClass","Node")},{...t.createElement("ecore.EReference","Node.position"),containment:!0,upperBound:1,eType:t.createRef("ecore.EClass","diagram.core","Point")}],eSuperTypes:[t.createRef("ecore.EClass","Element")]},{...t.createElement("ecore.EClass","PresetLayout"),eStructuralFeatures:[],eSuperTypes:[t.createRef("ecore.EClass","Layout")]}];y.eSubPackages=[$];const v=n.memoize(e=>{if(n.isString(e))return[n.pascalCase(e)];if(e.$.isKindOf("ecore.EClass"))return n.map([e.ns,...n.flatMap(e.eAllSuperTypes,"ns")],o=>n.pascalCase(o));if(e.$.isKindOf("ecore.EReference"))return[n.pascalCase(e.ns)]});function S(e){const o=e.position(),{x:a,y:r}=this.position;a!==o.x&&(this.position.x=o.x),r!==o.y&&(this.position.y=o.y)}function B(e){const o={...e,cyTarget:e.target},a=o.diagram=e.cy.scratch("diagram");if(e.target===e.cy)o.target=a;else{const r=e.target.scratch("proxy");o.target=r,r!=null&&r.modelElement&&(o.modelElement=r.modelElement)}return o}function A(e,o){const a={cy:o.cy?o.cy():o,target:o,timeStamp:new Date().getTime(),type:e};o.emit(e,a)}function F(e,o){if(e.target!==e.cy&&e.target.hasClass("eh-ghost"))return;const a=B(e);o||(o=a.target),o==null||o.$.emit(a.type,a)}function L(e){return function(o){F(o,e)}}y.implementation={"BaseElement.eConstructor":function(){this.data||(this.data={}),this.scratch||(this.scratch={}),g(this.data),g(this.scratch),this.modelElement&&(this.scratch.modelElement=this.modelElement),this.scratch.proxy=J(this)},"BaseElement.toJSON":function(){return n.omit(this,["scratch"])},"Diagram.eConstructor":function(){this.elements||(this.elements=[]),this.maxZoom===void 0&&(this.maxZoom=10),this.minZoom===void 0&&(this.minZoom=.1),this.pan||(this.pan={__typename:"diagram.core.Point",x:0,y:0}),this.wheelSensitivity===void 0&&(this.wheelSensitivity=.1),this.scratch.modelElementIndex={},this.scratch.mounted=!1,this.scratch.ready=!1,n.forEach(this.elements,e=>{e.modelElement&&(this.scratch.modelElementIndex[e.modelElement.id]=e)})},"Diagram.add":function(e,o=!1){if(!e)return;if(n.isArray(e))return n.map(e,s=>this.add(s,o));let a=this.get(e);if(a)return a;const r={__typename:e.source?"diagram.Edge":"diagram.Node",...e};if(!r.source&&!r.position)if(r.parent){const{x:s,y:c}=r.parent.position;r.position={__typename:"diagram.core.Point",x:s,y:c}}else{const{cy:s}=this.scratch;if(s){const c=s.width()/2,i=s.height()/2;r.position={__typename:"diagram.core.Point",x:c,y:i}}else r.position={__typename:"diagram.core.Point",x:0,y:0}}debugger;return this.elements.push(r),a=this.elements.get(r.id),a.modelElement&&(this.scratch.modelElementIndex[a.modelElement.id]=a),o&&a.mount(),a},"Diagram.bind":function(e){this.scratch.cy=e,e.scratch("diagram",this),n.forEach(this.elements,a=>{a.mount()}),e.on(["add","remove"],L(this)),e.on("vdblclick",a=>{const r=B(a);a.target===e?this.$.emit("vdblclick",r):a.target.isEdge()&&this.$.emit("edit",r)}),e.on("pan",n.debounce(a=>{const r=a.cy.pan(),{x:s,y:c}=this.pan;(s!==r.x||c!==r.y)&&n.merge(this.pan,r)},100)),e.once("ready",a=>{this.scratch.ready=!0,B(a),F(a,this)});const o=n.debounce(a=>{let r=e.zoom(),s=n.round(r,1);r!==s&&s===.1&&(s=.2),r!==s?e.zoom(s):this.zoom!==s&&(this.zoom=s)},30);e.on("zoom",o),this.$.on("changed",({feature:a,key:r,modifier:s,initialEvent:c})=>{if(r!=="elements")if(r==="pan"){const i=e.pan(),{x:u,y:m}=this.pan;(u!==i.x||m!==i.y)&&e.pan(u,m)}else r==="zoom"&&e.zoom()!==this.zoom&&e.zoom(this.zoom);if((c==null?void 0:c.data.key)==="expanded"){let m=function(p){if(n.isEmpty(p.children))return;const d=p.scratch.cyEle,I=d.position();u?(p===i||p.expanded!==!1)&&(p.data.expanded=!0,p.data.collapsed=!1,d.data("expanded",!0),d.data("collapsed",!1),d.position(I),A("expanded",d)):(p.data.expanded=!1,p.data.collapsed=!0,d.data("expanded",!1),d.data("collapsed",!0),A("collapsed",d)),n.forEach(p.children,m)};const i=c.caller.proxy;let u=n.get(c,"data.modifier.$set.expanded");u===void 0&&n.get(c,"data.modifier.$unset.expanded")&&(u=!0),m(i)}}),this.scratch.mounted=!0,this.$.emit("mounted",{cy:e,diagram:this,target:this.diagram})},"Diagram.get":function(e){if(!!e)return n.isString(e)||(e=e==null?void 0:e.id),this.elements.get(e)||this.scratch.modelElementIndex[e]},"Diagram.toJSON":function(){const e=n.omit(this,["scratch","style"]);if(this.style){const o=n.filter(e.style,a=>{var r;return!((r=a.extensions)!=null&&r.core)});n.isEmpty(o)||(e.style=o)}return e},"Edge.eConstructor":function(e){this.data.source||(this.data.source=e.source.id||e.source.ref),this.data.target||(this.data.target=e.target.id||e.target.ref)},"Element.eConstructor":function(){if(this.data.id=this.id,this.modelElement){const e=v(this.modelElement.$.eClass);this.addClass(e)}},"Element.addClass":function(e){!e||!n.castArray(e).length||(this.classes||(this.classes=[]),n.forEach(n.castArray(e),a=>{!a||this.classes.includes(a)||this.classes.push(a)}))},"Element.bind":function(e){this.scratch.cyEle=g(e),e.scratch("ele",this),this.modelElement&&e.scratch("modelElement",this.modelElement),this.$.on("changed",({feature:a,key:r,modifier:s})=>{var c;if(r==="modelElement"){const{cyEle:i,modelElement:u}=this.scratch;if(!this.modelElement&&u){if(i&&!i.removed()){const m=i.data("dom");i.remove(),m&&((c=m._vnode)==null||c.destroy())}this.$.remove()}}else if(r==="source"){const{cyEle:i}=this.scratch;!this.source&&(i==null?void 0:i.isEdge())&&(i.remove(),this.$.remove())}else if(r==="target"){const{cyEle:i}=this.scratch;!this.target&&(i==null?void 0:i.isEdge())&&(i.remove(),this.$.remove())}else r==="classes"?e.classes(this.classes):r==="style"&&e.style(this.style)}),this.scratch.mounted=!0;const o=this.$.eContainer;this.$.emit("mounted",{cy:o.scratch.cy,cyTarget:e,diagram:this,target:this})},"Element.mapToElementJSON":function(){const e=n.pick(this,["classes","data","grabbable","group","locked","pannable","scratch","selectable","selected","style"]);if(e.group=this.source?"edges":"nodes",this.$.isKindOf("diagram.Node")){if(this.position){const{x:a,y:r}=this.position;e.position={x:a,y:r}}const o=this.$.eContainer;o.scratch.createDomNode&&(e.data.dom=o.scratch.createDomNode(this))}return g(e)},"Element.mount":function(){var s;const e=this.$.eContainer;if(((s=this.parent)==null?void 0:s.expanded)===!1)return;e.filter;const{cy:o}=e.scratch,a=this.mapToElementJSON(),r=o.add(a);return this.bind(r),r},"Element.removeClass":function(e){n.pull(this.classes,e)},"Node.eConstructor":function(e){this.parent&&(this.data.parent=this.parent.id),this.data.toJSON=function(){const o={};return n.forIn(this,(a,r)=>{({id:!0,parent:!0,dom:!0})[r]||n.isFunction(a)||(o[r]=a)}),n.isEmpty(o)?void 0:o}},"Node.bind":function(e){this.$.super("bind",e),S.call(this,e),e.on("dragfree",o=>{this.scratch.cyEle!==o.target?S.call(this,this.scratch.cyEle):S.call(this,o.target)}),this.$.on("changed",n.debounce(({key:o})=>{const a=this.scratch.cyEle;if(o==="position"){const r=a.position(),{x:s,y:c}=this.position;(s!==r.x||c!==r.y)&&a.position({x:s,y:c})}},30))},"Layout.constructor":function(){this.name=n.lowerFirst(this.$.eClass.name.replace("Layout",""))}};const D="di",P=h[`uml.${D}`],C={__typename:"ecore.EPackage",id:n.hashString(P),name:D,nsPrefix:`uml.${D}`,nsURI:P},f=R(C);C.eClassifiers=[{...f.createElement("ecore.EClass","Element"),abstract:!0,eSuperTypes:[f.createRef("ecore.EClass","ecore","EModelElement")]},{...f.createElement("ecore.EClass","ClassDiagram"),eConstructor:{...f.createElement("ecore.EOperation","ClassDiagram.eConstructor"),eType:f.createRef("ecore.EDataType","ecore.ext","Any")},eStructuralFeatures:[{...f.createElement("ecore.EReference","ClassDiagram.style"),containment:!0,upperBound:-1,eType:f.createRef("ecore.EClass","css","StyleRule")}],eSuperTypes:[f.createRef("ecore.EClass","diagram","Diagram")]}];C.implementation={"ClassDiagram.eConstructor":function(e){const o=[{__typename:"css.StyleRule",extensions:{core:!0},selector:".uml-di-class-diagram-element",style:{"z-index-compare":"manual"}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"node.EcoreEClassifier",style:{"z-index":2}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"edge.uml-di-class-diagram-element",style:{"control-point-step-size":50,"curve-style":"bezier","z-index":3}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"node.EcoreEPackage",style:{"min-height":function(a){const r=a.children();return r.empty()?40:r.boundingBox().h+40+10+10},"min-height-bias-top":50,"min-height-bias-bottom":10,"min-width":function(a){const r=a.children();if(r.empty())return 180;{const s=r.boundingBox();return n.max([s.w+10+10,240])}},"min-width-bias-left":10,"min-width-bias-right":10,padding:0,"z-index":1}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"node.EcoreEPackage[?collapsed]",style:{padding:0,"z-index":1}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"edge.generalization",style:{width:1,"arrow-scale":1.5,"target-arrow-fill":"hollow","target-arrow-shape":"triangle"}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"edge.realization",style:{width:1,"arrow-scale":1.5,"source-arrow-shape":"triangle","source-arrow-fill":"hollow","target-arrow-shape":"none"}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"edge.association",style:{"font-size":12,label:function(a){return a.scratch("modelElement").name},"target-arrow-shape":"none"}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"edge.self-referencing",style:{"curve-style":"bezier","target-arrow-shape":"none","loop-direction":"-90deg","loop-sweep":"-90deg","control-point-step-size":100}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"edge.aggregation",style:{"arrow-scale":1.5,"source-arrow-shape":"diamond","source-arrow-fill":"hollow"}},{__typename:"css.StyleRule",extensions:{core:!0},selector:"edge.composition",style:{"arrow-scale":1.5,"source-arrow-shape":"diamond","source-arrow-fill":"filled"}}];e.style?this.style=[...e.style,...o]:this.style=o,this.$.on("add",a=>{var r;a.cyTarget.hasClass("uml-di-class-diagram-element")||a.cyTarget.addClass("uml-di-class-diagram-element"),a.cyTarget.isEdge()&&a.cyTarget.hasClass("association")&&((r=a.target.modelElement)==null||r.$.on("changed",({key:s})=>{s==="name"&&a.cyTarget.scratch("name",a.target.modelElement.name)}))})}};const z={};function k(e){z.umlDI||(z.umlDI=!0,e.registerPackage(T),e.registerPackage(y),e.registerPackage(C))}export{k as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
