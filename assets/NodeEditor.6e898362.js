import{n as Wn,Q as dn,d as Ot,a as Hl,c as At,p as re,i as Tl,j as Bl,k as Yl,T as Nl,u as Mt,C as _t,f as jl,e as En}from"./use-quasar.d6f10685.js";import{h as q,u as xt,r as le,Q as un,a5 as il,a6 as rl,o as sl,v as In,g as Nt,bm as cl,_ as mt,n as We,aV as zl,bn as Rl,bo as Fn,bp as dl,bq as fl,br as vl,H as On,bs as Ll,J as An,bt as Pl,c as k,O as Kl,a1 as Ht,bu as Ql,Z as ml,z as Ul,w as Be,bv as Wl,bw as Zl,y as hl,b3 as Hn,bx as Xl,by as Zn,a2 as Wt,bz as Jl,bA as Gl,aF as gn,bB as ea,ac as Lt,$ as ta,a0 as na,av as gl,X as la,bC as yl,bD as aa,bE as pl,b5 as bl,b2 as oa,aM as It,b4 as Sl,ab as Pe,b6 as ua,aQ as ia,N as st,p as Xt,ai as R,am as Ye,aj as oe,ap as Te,bl as wl,bF as _l,ar as xe,ao as W,b as it,ay as an,ak as K,f as Z,al as ht,bG as ra,bH as sa,aw as Ne,bf as Dt,ae as Gt,i as je,aq as Qe,bi as Fe,bj as Oe,F as Tt,an as Jt,bg as cn,af as en,ag as tn,ah as fn,as as qe,bh as _n,b9 as ca,ad as Tn,au as Ft,at as kn,m as da,bI as fa}from"./index.4634898b.js";import{r as Dn,u as va,_ as Xe,s as Bn,Q as ma,a as Xn}from"./OBtn.64a91a00.js";import{_ as F}from"./index.55edfe91.js";import{N as Bt,L as Yt}from"./Node.9a909cb3.js";const ha=q("div",{class:"q-space"});var rn=xt({name:"QSpace",setup(){return()=>ha}}),ga=xt({name:"QForm",props:{autofocus:Boolean,noErrorFocus:Boolean,noResetFocus:Boolean,greedy:Boolean,onSubmit:Function},emits:["reset","validationSuccess","validationError"],setup(t,{slots:n,emit:u}){const a=Nt(),s=le(null);let o=0;const m=[];function r(b){const v=typeof b=="boolean"?b:t.noErrorFocus!==!0,y=++o,p=(x,g)=>{u("validation"+(x===!0?"Success":"Error"),g)},w=x=>{const g=x.validate();return typeof g.then=="function"?g.then(N=>({valid:N,comp:x}),N=>({valid:!1,comp:x,err:N})):Promise.resolve({valid:g,comp:x})};return(t.greedy===!0?Promise.all(m.map(w)).then(x=>x.filter(g=>g.valid!==!0)):m.reduce((x,g)=>x.then(()=>w(g).then(N=>{if(N.valid===!1)return Promise.reject(N)})),Promise.resolve()).catch(x=>[x])).then(x=>{if(x===void 0||x.length===0)return y===o&&p(!0),!0;if(y===o){const{comp:g,err:N}=x[0];if(N!==void 0&&console.error(N),p(!1,g),v===!0){const ne=x.find(({comp:V})=>typeof V.focus=="function"&&cl(V.$)===!1);ne!==void 0&&ne.comp.focus()}}return!1})}function c(){o++,m.forEach(b=>{typeof b.resetValidation=="function"&&b.resetValidation()})}function $(b){b!==void 0&&mt(b);const v=o+1;r().then(y=>{v===o&&y===!0&&(t.onSubmit!==void 0?u("submit",b):b!==void 0&&b.target!==void 0&&typeof b.target.submit=="function"&&b.target.submit())})}function d(b){b!==void 0&&mt(b),u("reset"),We(()=>{c(),t.autofocus===!0&&t.noResetFocus!==!0&&h()})}function h(){zl(()=>{if(s.value===null)return;const b=s.value.querySelector("[autofocus][tabindex], [data-autofocus][tabindex]")||s.value.querySelector("[autofocus] [tabindex], [data-autofocus] [tabindex]")||s.value.querySelector("[autofocus], [data-autofocus]")||Array.prototype.find.call(s.value.querySelectorAll("[tabindex]"),v=>v.tabIndex!==-1);b!=null&&b.focus({preventScroll:!0})})}un(Rl,{bindComponent(b){m.push(b)},unbindComponent(b){const v=m.indexOf(b);v!==-1&&m.splice(v,1)}});let S=!1;return il(()=>{S=!0}),rl(()=>{S===!0&&t.autofocus===!0&&h()}),sl(()=>{t.autofocus===!0&&h()}),Object.assign(a.proxy,{validate:r,resetValidation:c,submit:$,reset:d,focus:h,getValidationComponents:()=>m}),()=>q("form",{class:"q-form",ref:s,onSubmit:$,onReset:d},In(n.default))}});function ya(t){const n={String:"EString",Boolean:"EBoolean",Number:"ELong",Float:"EFloat",Date:"EDate"},u={EByte:"Number",EChar:"String",EDouble:"Float",EInt:"Number",EIntegerObject:"Number",EFloatObject:"Float",ELongObject:"Number",EShort:"Number",ELong:"Number",EDoubleObject:"Float",JSObject:"Object"};F.forEach(n,($,d)=>{u[$]=d});const a={EBoolean:"Boolean",EByte:"Int",EChar:"String",EDate:"DateTime",EDoubleObject:"Float",EDouble:"Float",EFloat:"Float",EInt:"Int",EIntegerObject:"Int",EFloatObject:"Float",ELong:"Int",ELongObject:"Int",EShort:"Int",EString:"String",JSObject:"JSONObject"},s={String:"string",Boolean:"boolean",Number:"number",Integer:"int",Float:"float"},o={};F.forEach(s,($,d)=>{o[$]=d});const m={String:{fieldType:"string",fieldAnnotation:"String"},Boolean:{fieldType:"number",fieldAnnotation:"Boolean"},Number:{fieldType:"number",fieldAnnotation:"Int"},Integer:{fieldType:"number",fieldAnnotation:"Int"},Float:{fieldType:"number",fieldAnnotation:"Float"}},r={};F.forEach(m,($,d)=>{r[$]=d});const c={js_ecore:n,js_graphql:s,js_typegraphql:m,ecore_js:u,ecore_graphql:a,graphql_js:o,typegraphql_js:r};return F.isString(t)?{from($){return{to(d){if($==="js"&&d==="ecore"){const h=c[`${$.toLowerCase()}_${d.toLowerCase()}`];if(h)return F.get(h,t)}}}}}:{to($){var d,h;if($=$.toLowerCase(),t.constructor.name==="EObject"){const S=((d=t.$.get("extensions"))==null?void 0:d.internalType)||t.get("name"),b=c[`ecore_${$}`];if(b)return F.get(b,S)}else if(Bt.isNode(t)){const S=((h=t.extensions)==null?void 0:h.internalType)||t.name,b=c[`ecore_${$}`];if(b)return F.get(b,S)}else{const S=t.name,b=c[`js_${$}`];if(b)return F.get(b,S)}}}}var pa=xt({name:"QField",inheritAttrs:!1,props:{...Fn,tag:{type:String,default:"label"}},emits:dl,setup(){return fl(vl({requiredForAttr:!1,tagProp:!0}))}});const ba={xs:8,sm:10,md:14,lg:20,xl:24};var Sa=xt({name:"QChip",props:{...On,...Ll,dense:Boolean,icon:String,iconRight:String,iconRemove:String,iconSelected:String,label:[String,Number],color:String,textColor:String,modelValue:{type:Boolean,default:!0},selected:{type:Boolean,default:null},square:Boolean,outline:Boolean,clickable:Boolean,removable:Boolean,removeAriaLabel:String,tabindex:[String,Number],disable:Boolean,ripple:{type:[Boolean,Object],default:!0}},emits:["update:modelValue","update:selected","remove","click"],setup(t,{slots:n,emit:u}){const{proxy:{$q:a}}=Nt(),s=An(t,a),o=Pl(t,ba),m=k(()=>t.selected===!0||t.icon!==void 0),r=k(()=>t.selected===!0?t.iconSelected||a.iconSet.chip.selected:t.icon),c=k(()=>t.iconRemove||a.iconSet.chip.remove),$=k(()=>t.disable===!1&&(t.clickable===!0||t.selected!==null)),d=k(()=>{const p=t.outline===!0&&t.color||t.textColor;return"q-chip row inline no-wrap items-center"+(t.outline===!1&&t.color!==void 0?` bg-${t.color}`:"")+(p?` text-${p} q-chip--colored`:"")+(t.disable===!0?" disabled":"")+(t.dense===!0?" q-chip--dense":"")+(t.outline===!0?" q-chip--outline":"")+(t.selected===!0?" q-chip--selected":"")+($.value===!0?" q-chip--clickable cursor-pointer non-selectable q-hoverable":"")+(t.square===!0?" q-chip--square":"")+(s.value===!0?" q-chip--dark q-dark":"")}),h=k(()=>{const p=t.disable===!0?{tabindex:-1,"aria-disabled":"true"}:{tabindex:t.tabindex||0},w={...p,role:"button","aria-hidden":"false","aria-label":t.removeAriaLabel||a.lang.label.remove};return{chip:p,remove:w}});function S(p){p.keyCode===13&&b(p)}function b(p){t.disable||(u("update:selected",!t.selected),u("click",p))}function v(p){(p.keyCode===void 0||p.keyCode===13)&&(mt(p),t.disable===!1&&(u("update:modelValue",!1),u("remove")))}function y(){const p=[];$.value===!0&&p.push(q("div",{class:"q-focus-helper"})),m.value===!0&&p.push(q(Ht,{class:"q-chip__icon q-chip__icon--left",name:r.value}));const w=t.label!==void 0?[q("div",{class:"ellipsis"},[t.label])]:void 0;return p.push(q("div",{class:"q-chip__content col row no-wrap items-center q-anchor--skip"},Ql(n.default,w))),t.iconRight&&p.push(q(Ht,{class:"q-chip__icon q-chip__icon--right",name:t.iconRight})),t.removable===!0&&p.push(q(Ht,{class:"q-chip__icon q-chip__icon--remove cursor-pointer",name:c.value,...h.value.remove,onClick:v,onKeyup:v})),p}return()=>{if(t.modelValue===!1)return;const p={class:d.value,style:o.value};return $.value===!0&&Object.assign(p,h.value.chip,{onClick:b,onKeyup:S}),Kl("div",p,y(),"ripple",t.ripple!==!1&&t.disable!==!0,()=>[[ml,t.ripple]])}}});const ot=1e3,wa=["start","center","end","start-force","center-force","end-force"],kl=Array.prototype.filter,_a=window.getComputedStyle(document.body).overflowAnchor===void 0?Ul:function(t,n){t!==null&&(t._qOverflowAnimationFrame!==void 0&&cancelAnimationFrame(t._qOverflowAnimationFrame),t._qOverflowAnimationFrame=requestAnimationFrame(()=>{if(t===null)return;t._qOverflowAnimationFrame=void 0;const u=t.children||[];kl.call(u,s=>s.dataset&&s.dataset.qVsAnchor!==void 0).forEach(s=>{delete s.dataset.qVsAnchor});const a=u[n];a&&a.dataset&&(a.dataset.qVsAnchor="")}))};function Qt(t,n){return t+n}function yn(t,n,u,a,s,o,m,r){const c=t===window?document.scrollingElement||document.documentElement:t,$=s===!0?"offsetWidth":"offsetHeight",d={scrollStart:0,scrollViewSize:-m-r,scrollMaxSize:0,offsetStart:-m,offsetEnd:-r};if(s===!0?(t===window?(d.scrollStart=window.pageXOffset||window.scrollX||document.body.scrollLeft||0,d.scrollViewSize+=document.documentElement.clientWidth):(d.scrollStart=c.scrollLeft,d.scrollViewSize+=c.clientWidth),d.scrollMaxSize=c.scrollWidth,o===!0&&(d.scrollStart=(Dn===!0?d.scrollMaxSize-d.scrollViewSize:0)-d.scrollStart)):(t===window?(d.scrollStart=window.pageYOffset||window.scrollY||document.body.scrollTop||0,d.scrollViewSize+=document.documentElement.clientHeight):(d.scrollStart=c.scrollTop,d.scrollViewSize+=c.clientHeight),d.scrollMaxSize=c.scrollHeight),u!==null)for(let h=u.previousElementSibling;h!==null;h=h.previousElementSibling)h.classList.contains("q-virtual-scroll--skip")===!1&&(d.offsetStart+=h[$]);if(a!==null)for(let h=a.nextElementSibling;h!==null;h=h.nextElementSibling)h.classList.contains("q-virtual-scroll--skip")===!1&&(d.offsetEnd+=h[$]);if(n!==t){const h=c.getBoundingClientRect(),S=n.getBoundingClientRect();s===!0?(d.offsetStart+=S.left-h.left,d.offsetEnd-=S.width):(d.offsetStart+=S.top-h.top,d.offsetEnd-=S.height),t!==window&&(d.offsetStart+=d.scrollStart),d.offsetEnd+=d.scrollMaxSize-d.offsetStart}return d}function Jn(t,n,u,a){n==="end"&&(n=(t===window?document.body:t)[u===!0?"scrollWidth":"scrollHeight"]),t===window?u===!0?(a===!0&&(n=(Dn===!0?document.body.scrollWidth-document.documentElement.clientWidth:0)-n),window.scrollTo(n,window.pageYOffset||window.scrollY||document.body.scrollTop||0)):window.scrollTo(window.pageXOffset||window.scrollX||document.body.scrollLeft||0,n):u===!0?(a===!0&&(n=(Dn===!0?t.scrollWidth-t.offsetWidth:0)-n),t.scrollLeft=n):t.scrollTop=n}function Zt(t,n,u,a){if(u>=a)return 0;const s=n.length,o=Math.floor(u/ot),m=Math.floor((a-1)/ot)+1;let r=t.slice(o,m).reduce(Qt,0);return u%ot!==0&&(r-=n.slice(o*ot,u).reduce(Qt,0)),a%ot!==0&&a!==s&&(r-=n.slice(a,m*ot).reduce(Qt,0)),r}const ka={virtualScrollSliceSize:{type:[Number,String],default:null},virtualScrollSliceRatioBefore:{type:[Number,String],default:1},virtualScrollSliceRatioAfter:{type:[Number,String],default:1},virtualScrollItemSize:{type:[Number,String],default:24},virtualScrollStickySizeStart:{type:[Number,String],default:0},virtualScrollStickySizeEnd:{type:[Number,String],default:0},tableColspan:[Number,String]},Da={virtualScrollHorizontal:Boolean,onVirtualScroll:Function,...ka};function Ma({virtualScrollLength:t,getVirtualScrollTarget:n,getVirtualScrollEl:u,virtualScrollItemSizeComputed:a}){const s=Nt(),{props:o,emit:m,proxy:r}=s,{$q:c}=r;let $,d,h,S=[],b;const v=le(0),y=le(0),p=le({}),w=le(null),z=le(null),x=le(null),g=le({from:0,to:0}),N=k(()=>o.tableColspan!==void 0?o.tableColspan:100);a===void 0&&(a=k(()=>o.virtualScrollItemSize));const ne=k(()=>a.value+";"+o.virtualScrollHorizontal),V=k(()=>ne.value+";"+o.virtualScrollSliceRatioBefore+";"+o.virtualScrollSliceRatioAfter);Be(V,()=>{De()}),Be(ne,C);function C(){ve(d,!0)}function I(M){ve(M===void 0?d:M)}function j(M,H){const te=n();if(te==null||te.nodeType===8)return;const de=yn(te,u(),w.value,z.value,o.virtualScrollHorizontal,c.lang.rtl,o.virtualScrollStickySizeStart,o.virtualScrollStickySizeEnd);h!==de.scrollViewSize&&De(de.scrollViewSize),J(te,de,Math.min(t.value-1,Math.max(0,parseInt(M,10)||0)),0,wa.indexOf(H)!==-1?H:d!==-1&&M>d?"end":"start")}function L(){const M=n();if(M==null||M.nodeType===8)return;const H=yn(M,u(),w.value,z.value,o.virtualScrollHorizontal,c.lang.rtl,o.virtualScrollStickySizeStart,o.virtualScrollStickySizeEnd),te=t.value-1,de=H.scrollMaxSize-H.offsetStart-H.offsetEnd-y.value;if($===H.scrollStart)return;if(H.scrollMaxSize<=0){J(M,H,0,0);return}h!==H.scrollViewSize&&De(H.scrollViewSize),se(g.value.from);const Se=Math.floor(H.scrollMaxSize-Math.max(H.scrollViewSize,H.offsetEnd)-Math.min(b[te],H.scrollViewSize/2));if(Se>0&&Math.ceil(H.scrollStart)>=Se){J(M,H,te,H.scrollMaxSize-H.offsetEnd-S.reduce(Qt,0));return}let ae=0,G=H.scrollStart-H.offsetStart,pe=G;if(G<=de&&G+H.scrollViewSize>=v.value)G-=v.value,ae=g.value.from,pe=G;else for(let Q=0;G>=S[Q]&&ae<te;Q++)G-=S[Q],ae+=ot;for(;G>0&&ae<te;)G-=b[ae],G>-H.scrollViewSize?(ae++,pe=G):pe=b[ae]+G;J(M,H,ae,pe)}function J(M,H,te,de,Se){const ae=typeof Se=="string"&&Se.indexOf("-force")!==-1,G=ae===!0?Se.replace("-force",""):Se,pe=G!==void 0?G:"start";let Q=Math.max(0,te-p.value[pe]),Ee=Q+p.value.total;Ee>t.value&&(Ee=t.value,Q=Math.max(0,Ee-p.value.total)),$=H.scrollStart;const fe=Q!==g.value.from||Ee!==g.value.to;if(fe===!1&&G===void 0){Me(te);return}const{activeElement:we}=document,ze=x.value;fe===!0&&ze!==null&&ze!==we&&ze.contains(we)===!0&&(ze.addEventListener("focusout",ke),setTimeout(()=>{ze!==null&&ze.removeEventListener("focusout",ke)})),_a(ze,te-Q);const nt=G!==void 0?b.slice(Q,te).reduce(Qt,0):0;if(fe===!0){const Je=Ee>=g.value.from&&Q<=g.value.to?g.value.to:Ee;g.value={from:Q,to:Je},v.value=Zt(S,b,0,Q),y.value=Zt(S,b,Ee,t.value),requestAnimationFrame(()=>{g.value.to!==Ee&&$===H.scrollStart&&(g.value={from:g.value.from,to:Ee},y.value=Zt(S,b,Ee,t.value))})}requestAnimationFrame(()=>{if($!==H.scrollStart)return;fe===!0&&se(Q);const Je=b.slice(Q,te).reduce(Qt,0),Le=Je+H.offsetStart+v.value,$e=Le+b[te];let ct=Le+de;if(G!==void 0){const Ct=Je-nt,Ge=H.scrollStart+Ct;ct=ae!==!0&&Ge<Le&&$e<Ge+H.scrollViewSize?Ge:G==="end"?$e-H.scrollViewSize:Le-(G==="start"?0:Math.round((H.scrollViewSize-b[te])/2))}$=ct,Jn(M,ct,o.virtualScrollHorizontal,c.lang.rtl),Me(te)})}function se(M){const H=x.value;if(H){const te=kl.call(H.children,Q=>Q.classList&&Q.classList.contains("q-virtual-scroll--skip")===!1),de=te.length,Se=o.virtualScrollHorizontal===!0?Q=>Q.getBoundingClientRect().width:Q=>Q.offsetHeight;let ae=M,G,pe;for(let Q=0;Q<de;){for(G=Se(te[Q]),Q++;Q<de&&te[Q].classList.contains("q-virtual-scroll--with-prev")===!0;)G+=Se(te[Q]),Q++;pe=G-b[ae],pe!==0&&(b[ae]+=pe,S[Math.floor(ae/ot)]+=pe),ae++}}}function ke(){x.value!==null&&x.value!==void 0&&x.value.focus()}function ve(M,H){const te=1*a.value;(H===!0||Array.isArray(b)===!1)&&(b=[]);const de=b.length;b.length=t.value;for(let ae=t.value-1;ae>=de;ae--)b[ae]=te;const Se=Math.floor((t.value-1)/ot);S=[];for(let ae=0;ae<=Se;ae++){let G=0;const pe=Math.min((ae+1)*ot,t.value);for(let Q=ae*ot;Q<pe;Q++)G+=b[Q];S.push(G)}d=-1,$=void 0,v.value=Zt(S,b,0,g.value.from),y.value=Zt(S,b,g.value.to,t.value),M>=0?(se(g.value.from),We(()=>{j(M)})):Ae()}function De(M){if(M===void 0&&typeof window!="undefined"){const G=n();G!=null&&G.nodeType!==8&&(M=yn(G,u(),w.value,z.value,o.virtualScrollHorizontal,c.lang.rtl,o.virtualScrollStickySizeStart,o.virtualScrollStickySizeEnd).scrollViewSize)}h=M;const H=parseFloat(o.virtualScrollSliceRatioBefore)||0,te=parseFloat(o.virtualScrollSliceRatioAfter)||0,de=1+H+te,Se=M===void 0||M<=0?1:Math.ceil(M/a.value),ae=Math.max(1,Se,Math.ceil((o.virtualScrollSliceSize>0?o.virtualScrollSliceSize:10)/de));p.value={total:Math.ceil(ae*de),start:Math.ceil(ae*H),center:Math.ceil(ae*(.5+H)),end:Math.ceil(ae*(1+H)),view:Se}}function ye(M,H){const te=o.virtualScrollHorizontal===!0?"width":"height",de={["--q-virtual-scroll-item-"+te]:a.value+"px"};return[M==="tbody"?q(M,{class:"q-virtual-scroll__padding",key:"before",ref:w},[q("tr",[q("td",{style:{[te]:`${v.value}px`,...de},colspan:N.value})])]):q(M,{class:"q-virtual-scroll__padding",key:"before",ref:w,style:{[te]:`${v.value}px`,...de}}),q(M,{class:"q-virtual-scroll__content",key:"content",ref:x,tabindex:-1},H.flat()),M==="tbody"?q(M,{class:"q-virtual-scroll__padding",key:"after",ref:z},[q("tr",[q("td",{style:{[te]:`${y.value}px`,...de},colspan:N.value})])]):q(M,{class:"q-virtual-scroll__padding",key:"after",ref:z,style:{[te]:`${y.value}px`,...de}})]}function Me(M){d!==M&&(o.onVirtualScroll!==void 0&&m("virtualScroll",{index:M,from:g.value.from,to:g.value.to-1,direction:M<d?"decrease":"increase",ref:r}),d=M)}De();const Ae=Wl(L,c.platform.is.ios===!0?120:35);Zl(()=>{De()});let Ke=!1;return il(()=>{Ke=!0}),rl(()=>{if(Ke!==!0)return;const M=n();$!==void 0&&M!==void 0&&M!==null&&M.nodeType!==8?Jn(M,$,o.virtualScrollHorizontal,c.lang.rtl):j(d)}),hl(()=>{Ae.cancel()}),Object.assign(r,{scrollTo:j,reset:C,refresh:I}),{virtualScrollSliceRange:g,virtualScrollSliceSizeComputed:p,setVirtualScrollSize:De,onVirtualScrollEvt:Ae,localResetVirtualScroll:ve,padVirtualScroll:ye,scrollTo:j,reset:C,refresh:I}}const Gn=t=>["add","add-unique","toggle"].includes(t),xa=".*+?^${}()|[]\\",Ca=Object.keys(Fn);var Va=xt({name:"QSelect",inheritAttrs:!1,props:{...Da,...Hn,...Fn,modelValue:{required:!0},multiple:Boolean,displayValue:[String,Number],displayValueHtml:Boolean,dropdownIcon:String,options:{type:Array,default:()=>[]},optionValue:[Function,String],optionLabel:[Function,String],optionDisable:[Function,String],hideSelected:Boolean,hideDropdownIcon:Boolean,fillInput:Boolean,maxValues:[Number,String],optionsDense:Boolean,optionsDark:{type:Boolean,default:null},optionsSelectedClass:String,optionsHtml:Boolean,optionsCover:Boolean,menuShrink:Boolean,menuAnchor:String,menuSelf:String,menuOffset:Array,popupContentClass:String,popupContentStyle:[String,Array,Object],popupNoRouteDismiss:Boolean,useInput:Boolean,useChips:Boolean,newValueMode:{type:String,validator:Gn},mapOptions:Boolean,emitValue:Boolean,inputDebounce:{type:[Number,String],default:500},inputClass:[Array,String,Object],inputStyle:[Array,String,Object],tabindex:{type:[String,Number],default:0},autocomplete:String,transitionShow:String,transitionHide:String,transitionDuration:[String,Number],behavior:{type:String,validator:t=>["default","menu","dialog"].includes(t),default:"default"},virtualScrollItemSize:{type:[Number,String],default:void 0},onNewValue:Function,onFilter:Function},emits:[...dl,"add","remove","inputValue","newValue","keyup","keypress","keydown","filterAbort"],setup(t,{slots:n,emit:u}){const{proxy:a}=Nt(),{$q:s}=a,o=le(!1),m=le(!1),r=le(-1),c=le(""),$=le(!1),d=le(!1);let h=null,S=null,b,v,y,p=null,w,z,x,g;const N=le(null),ne=le(null),V=le(null),C=le(null),I=le(null),j=Xl(t),L=ea(ln),J=k(()=>Array.isArray(t.options)?t.options.length:0),se=k(()=>t.virtualScrollItemSize===void 0?t.optionsDense===!0?24:48:t.virtualScrollItemSize),{virtualScrollSliceRange:ke,virtualScrollSliceSizeComputed:ve,localResetVirtualScroll:De,padVirtualScroll:ye,onVirtualScrollEvt:Me,scrollTo:Ae,setVirtualScrollSize:Ke}=Ma({virtualScrollLength:J,getVirtualScrollTarget:pt,getVirtualScrollEl:Vt,virtualScrollItemSizeComputed:se}),M=vl(),H=k(()=>{const i=t.mapOptions===!0&&t.multiple!==!0,B=t.modelValue!==void 0&&(t.modelValue!==null||i===!0)?t.multiple===!0&&Array.isArray(t.modelValue)?t.modelValue:[t.modelValue]:[];if(t.mapOptions===!0&&Array.isArray(t.options)===!0){const T=t.mapOptions===!0&&b!==void 0?b:[],X=B.map(ge=>P(ge,T));return t.modelValue===null&&i===!0?X.filter(ge=>ge!==null):X}return B}),te=k(()=>{const i={};return Ca.forEach(B=>{const T=t[B];T!==void 0&&(i[B]=T)}),i}),de=k(()=>t.optionsDark===null?M.isDark.value:t.optionsDark),Se=k(()=>Zn(H.value)),ae=k(()=>{let i="q-field__input q-placeholder col";return t.hideSelected===!0||H.value.length===0?[i,t.inputClass]:(i+=" q-field__input--padding",t.inputClass===void 0?i:[i,t.inputClass])}),G=k(()=>(t.virtualScrollHorizontal===!0?"q-virtual-scroll--horizontal":"")+(t.popupContentClass?" "+t.popupContentClass:"")),pe=k(()=>J.value===0),Q=k(()=>H.value.map(i=>Ve.value(i)).join(", ")),Ee=k(()=>t.displayValue!==void 0?t.displayValue:Q.value),fe=k(()=>t.optionsHtml===!0?()=>!0:i=>i!=null&&i.html===!0),we=k(()=>t.displayValueHtml===!0||t.displayValue===void 0&&(t.optionsHtml===!0||H.value.some(fe.value))),ze=k(()=>M.focused.value===!0?t.tabindex:-1),nt=k(()=>{const i={tabindex:t.tabindex,role:"combobox","aria-label":t.label,"aria-readonly":t.readonly===!0?"true":"false","aria-autocomplete":t.useInput===!0?"list":"none","aria-expanded":o.value===!0?"true":"false","aria-controls":`${M.targetUid.value}_lb`};return r.value>=0&&(i["aria-activedescendant"]=`${M.targetUid.value}_${r.value}`),i}),Je=k(()=>({id:`${M.targetUid.value}_lb`,role:"listbox","aria-multiselectable":t.multiple===!0?"true":"false"})),Le=k(()=>H.value.map((i,B)=>({index:B,opt:i,html:fe.value(i),selected:!0,removeAtIndex:gt,toggleOption:et,tabindex:ze.value}))),$e=k(()=>{if(J.value===0)return[];const{from:i,to:B}=ke.value;return t.options.slice(i,B).map((T,X)=>{const ge=lt.value(T)===!0,he=me(T)===!0,He=i+X,Ce={clickable:!0,active:he,activeClass:Ge.value,manualFocus:!0,focused:!1,disable:ge,tabindex:-1,dense:t.optionsDense,dark:de.value,role:"option","aria-selected":he===!0?"true":"false",id:`${M.targetUid.value}_${He}`,onClick:()=>{et(T)}};return ge!==!0&&(r.value===He&&(Ce.focused=!0),s.platform.is.desktop===!0&&(Ce.onMousemove=()=>{o.value===!0&&D(He)})),{index:He,opt:T,html:fe.value(T),label:Ve.value(T),selected:Ce.active,focused:Ce.focused,toggleOption:et,setOptionIndex:D,itemProps:Ce}})}),ct=k(()=>t.dropdownIcon!==void 0?t.dropdownIcon:s.iconSet.arrow.dropdown),Ct=k(()=>t.optionsCover===!1&&t.outlined!==!0&&t.standout!==!0&&t.borderless!==!0&&t.rounded!==!0),Ge=k(()=>t.optionsSelectedClass!==void 0?t.optionsSelectedClass:t.color!==void 0?`text-${t.color}`:""),Ie=k(()=>ue(t.optionValue,"value")),Ve=k(()=>ue(t.optionLabel,"label")),lt=k(()=>ue(t.optionDisable,"disable")),dt=k(()=>H.value.map(i=>Ie.value(i))),jt=k(()=>{const i={onInput:ln,onChange:L,onKeydown:ft,onKeyup:_e,onKeypress:Ue,onFocus:Re,onClick(B){v===!0&&Lt(B)}};return i.onCompositionstart=i.onCompositionupdate=i.onCompositionend=L,i});Be(H,i=>{b=i,t.useInput===!0&&t.fillInput===!0&&t.multiple!==!0&&M.innerLoading.value!==!0&&(m.value!==!0&&o.value!==!0||Se.value!==!0)&&(y!==!0&&Rt(),(m.value===!0||o.value===!0)&&St(""))},{immediate:!0}),Be(()=>t.fillInput,Rt),Be(o,mn),Be(J,Al);function ut(i){return t.emitValue===!0?Ie.value(i):i}function at(i){if(i!==-1&&i<H.value.length)if(t.multiple===!0){const B=t.modelValue.slice();u("remove",{index:i,value:B.splice(i,1)[0]}),u("update:modelValue",B)}else u("update:modelValue",null)}function gt(i){at(i),M.focus()}function yt(i,B){const T=ut(i);if(t.multiple!==!0){t.fillInput===!0&&qt(Ve.value(i),!0,!0),u("update:modelValue",T);return}if(H.value.length===0){u("add",{index:0,value:T}),u("update:modelValue",t.multiple===!0?[T]:T);return}if(B===!0&&me(i)===!0||t.maxValues!==void 0&&t.modelValue.length>=t.maxValues)return;const X=t.modelValue.slice();u("add",{index:X.length,value:T}),X.push(T),u("update:modelValue",X)}function et(i,B){if(M.editable.value!==!0||i===void 0||lt.value(i)===!0)return;const T=Ie.value(i);if(t.multiple!==!0){B!==!0&&(qt(t.fillInput===!0?Ve.value(i):"",!0,!0),$t()),ne.value!==null&&ne.value.focus(),(H.value.length===0||Wt(Ie.value(H.value[0]),T)!==!0)&&u("update:modelValue",t.emitValue===!0?T:i);return}if((v!==!0||$.value===!0)&&M.focus(),Re(),H.value.length===0){const he=t.emitValue===!0?T:i;u("add",{index:0,value:he}),u("update:modelValue",t.multiple===!0?[he]:he);return}const X=t.modelValue.slice(),ge=dt.value.findIndex(he=>Wt(he,T));if(ge!==-1)u("remove",{index:ge,value:X.splice(ge,1)[0]});else{if(t.maxValues!==void 0&&X.length>=t.maxValues)return;const he=t.emitValue===!0?T:i;u("add",{index:X.length,value:he}),X.push(he)}u("update:modelValue",X)}function D(i){if(s.platform.is.desktop!==!0)return;const B=i!==-1&&i<J.value?i:-1;r.value!==B&&(r.value=B)}function E(i=1,B){if(o.value===!0){let T=r.value;do T=Wn(T+i,-1,J.value-1);while(T!==-1&&T!==r.value&&lt.value(t.options[T])===!0);r.value!==T&&(D(T),Ae(T),B!==!0&&t.useInput===!0&&t.fillInput===!0&&bt(T>=0?Ve.value(t.options[T]):w,!0))}}function P(i,B){const T=X=>Wt(Ie.value(X),i);return t.options.find(T)||B.find(T)||i}function ue(i,B){const T=i!==void 0?i:B;return typeof T=="function"?T:X=>X!==null&&typeof X=="object"&&T in X?X[T]:X}function me(i){const B=Ie.value(i);return dt.value.find(T=>Wt(T,B))!==void 0}function Re(i){t.useInput===!0&&ne.value!==null&&(i===void 0||ne.value===i.target&&i.target.value===Q.value)&&ne.value.select()}function U(i){ta(i,27)===!0&&o.value===!0&&(Lt(i),$t(),Rt()),u("keyup",i)}function _e(i){const{value:B}=i.target;if(i.keyCode!==void 0){U(i);return}if(i.target.value="",h!==null&&(clearTimeout(h),h=null),S!==null&&(clearTimeout(S),S=null),Rt(),typeof B=="string"&&B.length!==0){const T=B.toLocaleLowerCase(),X=he=>{const He=t.options.find(Ce=>he.value(Ce).toLocaleLowerCase()===T);return He===void 0?!1:(H.value.indexOf(He)===-1?et(He):$t(),!0)},ge=he=>{X(Ie)!==!0&&(X(Ve)===!0||he===!0||St(B,!0,()=>ge(!0)))};ge()}else M.clearValue(i)}function Ue(i){u("keypress",i)}function ft(i){if(u("keydown",i),na(i)===!0)return;const B=c.value.length!==0&&(t.newValueMode!==void 0||t.onNewValue!==void 0),T=i.shiftKey!==!0&&t.multiple!==!0&&(r.value!==-1||B===!0);if(i.keyCode===27){gn(i);return}if(i.keyCode===9&&T===!1){ce();return}if(i.target===void 0||i.target.id!==M.targetUid.value||M.editable.value!==!0)return;if(i.keyCode===40&&M.innerLoading.value!==!0&&o.value===!1){mt(i),tt();return}if(i.keyCode===8&&(t.useChips===!0||t.clearable===!0)&&t.hideSelected!==!0&&c.value.length===0){t.multiple===!0&&Array.isArray(t.modelValue)===!0?at(t.modelValue.length-1):t.multiple!==!0&&t.modelValue!==null&&u("update:modelValue",null);return}(i.keyCode===35||i.keyCode===36)&&(typeof c.value!="string"||c.value.length===0)&&(mt(i),r.value=-1,E(i.keyCode===36?1:-1,t.multiple)),(i.keyCode===33||i.keyCode===34)&&ve.value!==void 0&&(mt(i),r.value=Math.max(-1,Math.min(J.value,r.value+(i.keyCode===33?-1:1)*ve.value.view)),E(i.keyCode===33?1:-1,t.multiple)),(i.keyCode===38||i.keyCode===40)&&(mt(i),E(i.keyCode===38?-1:1,t.multiple));const X=J.value;if((x===void 0||g<Date.now())&&(x=""),X>0&&t.useInput!==!0&&i.key!==void 0&&i.key.length===1&&i.altKey===!1&&i.ctrlKey===!1&&i.metaKey===!1&&(i.keyCode!==32||x.length!==0)){o.value!==!0&&tt(i);const ge=i.key.toLocaleLowerCase(),he=x.length===1&&x[0]===ge;g=Date.now()+1500,he===!1&&(mt(i),x+=ge);const He=new RegExp("^"+x.split("").map(hn=>xa.indexOf(hn)!==-1?"\\"+hn:hn).join(".*"),"i");let Ce=r.value;if(he===!0||Ce<0||He.test(Ve.value(t.options[Ce]))!==!0)do Ce=Wn(Ce+1,-1,X-1);while(Ce!==r.value&&(lt.value(t.options[Ce])===!0||He.test(Ve.value(t.options[Ce]))!==!0));r.value!==Ce&&We(()=>{D(Ce),Ae(Ce),Ce>=0&&t.useInput===!0&&t.fillInput===!0&&bt(Ve.value(t.options[Ce]),!0)});return}if(!(i.keyCode!==13&&(i.keyCode!==32||t.useInput===!0||x!=="")&&(i.keyCode!==9||T===!1))){if(i.keyCode!==9&&mt(i),r.value!==-1&&r.value<X){et(t.options[r.value]);return}if(B===!0){const ge=(he,He)=>{if(He){if(Gn(He)!==!0)return}else He=t.newValueMode;if(qt("",t.multiple!==!0,!0),he==null)return;(He==="toggle"?et:yt)(he,He==="add-unique"),t.multiple!==!0&&(ne.value!==null&&ne.value.focus(),$t())};if(t.onNewValue!==void 0?u("newValue",c.value,ge):ge(c.value),t.multiple!==!0)return}o.value===!0?ce():M.innerLoading.value!==!0&&tt()}}function Vt(){return v===!0?I.value:V.value!==null&&V.value.contentEl!==null?V.value.contentEl:void 0}function pt(){return Vt()}function Ut(){return t.hideSelected===!0?[]:n["selected-item"]!==void 0?Le.value.map(i=>n["selected-item"](i)).slice():n.selected!==void 0?[].concat(n.selected()):t.useChips===!0?Le.value.map((i,B)=>q(Sa,{key:"option-"+B,removable:M.editable.value===!0&&lt.value(i.opt)!==!0,dense:!0,textColor:t.color,tabindex:ze.value,onRemove(){i.removeAtIndex(B)}},()=>q("span",{class:"ellipsis",[i.html===!0?"innerHTML":"textContent"]:Ve.value(i.opt)}))):[q("span",{[we.value===!0?"innerHTML":"textContent"]:Ee.value})]}function zt(){if(pe.value===!0)return n["no-option"]!==void 0?n["no-option"]({inputValue:c.value}):void 0;const i=n.option!==void 0?n.option:T=>q(At,{key:T.index,...T.itemProps},()=>q(Ot,()=>q(Hl,()=>q("span",{[T.html===!0?"innerHTML":"textContent"]:T.label}))));let B=ye("div",$e.value.map(i));return n["before-options"]!==void 0&&(B=n["before-options"]().concat(B)),la(n["after-options"],B)}function nn(i,B){const T=B===!0?{...nt.value,...M.splitAttrs.attributes.value}:void 0,X={ref:B===!0?ne:void 0,key:"i_t",class:ae.value,style:t.inputStyle,value:c.value!==void 0?c.value:"",type:"search",...T,id:B===!0?M.targetUid.value:void 0,maxlength:t.maxlength,autocomplete:t.autocomplete,"data-autofocus":i===!0||t.autofocus===!0||void 0,disabled:t.disable===!0,readonly:t.readonly===!0,...jt.value};return i!==!0&&v===!0&&(Array.isArray(X.class)===!0?X.class=[...X.class,"no-pointer-events"]:X.class+=" no-pointer-events"),q("input",X)}function ln(i){h!==null&&(clearTimeout(h),h=null),S!==null&&(clearTimeout(S),S=null),!(i&&i.target&&i.target.qComposing===!0)&&(bt(i.target.value||""),y=!0,w=c.value,M.focused.value!==!0&&(v!==!0||$.value===!0)&&M.focus(),t.onFilter!==void 0&&(h=setTimeout(()=>{h=null,St(c.value)},t.inputDebounce)))}function bt(i,B){c.value!==i&&(c.value=i,B===!0||t.inputDebounce===0||t.inputDebounce==="0"?u("inputValue",i):S=setTimeout(()=>{S=null,u("inputValue",i)},t.inputDebounce))}function qt(i,B,T){y=T!==!0,t.useInput===!0&&(bt(i,!0),(B===!0||T!==!0)&&(w=i),B!==!0&&St(i))}function St(i,B,T){if(t.onFilter===void 0||B!==!0&&M.focused.value!==!0)return;M.innerLoading.value===!0?u("filterAbort"):(M.innerLoading.value=!0,d.value=!0),i!==""&&t.multiple!==!0&&H.value.length!==0&&y!==!0&&i===Ve.value(H.value[0])&&(i="");const X=setTimeout(()=>{o.value===!0&&(o.value=!1)},10);p!==null&&clearTimeout(p),p=X,u("filter",i,(ge,he)=>{(B===!0||M.focused.value===!0)&&p===X&&(clearTimeout(p),typeof ge=="function"&&ge(),d.value=!1,We(()=>{M.innerLoading.value=!1,M.editable.value===!0&&(B===!0?o.value===!0&&$t():o.value===!0?mn(!0):o.value=!0),typeof he=="function"&&We(()=>{he(a)}),typeof T=="function"&&We(()=>{T(a)})}))},()=>{M.focused.value===!0&&p===X&&(clearTimeout(p),M.innerLoading.value=!1,d.value=!1),o.value===!0&&(o.value=!1)})}function vn(){return q(dn,{ref:V,class:G.value,style:t.popupContentStyle,modelValue:o.value,fit:t.menuShrink!==!0,cover:t.optionsCover===!0&&pe.value!==!0&&t.useInput!==!0,anchor:t.menuAnchor,self:t.menuSelf,offset:t.menuOffset,dark:de.value,noParentEvent:!0,noRefocus:!0,noFocus:!0,noRouteDismiss:t.popupNoRouteDismiss,square:Ct.value,transitionShow:t.transitionShow,transitionHide:t.transitionHide,transitionDuration:t.transitionDuration,separateClosePopup:!0,...Je.value,onScrollPassive:Me,onBeforeShow:Kn,onBeforeHide:l,onShow:f},zt)}function l(i){Qn(i),ce()}function f(){Ke()}function _(i){Lt(i),ne.value!==null&&ne.value.focus(),$.value=!0,window.scrollTo(window.pageXOffset||window.scrollX||document.body.scrollLeft||0,0)}function O(i){Lt(i),We(()=>{$.value=!1})}function A(){const i=[q(pa,{class:`col-auto ${M.fieldClass.value}`,...te.value,for:M.targetUid.value,dark:de.value,square:!0,loading:d.value,itemAligned:!1,filled:!0,stackLabel:c.value.length!==0,...M.splitAttrs.listeners.value,onFocus:_,onBlur:O},{...n,rawControl:()=>M.getControl(!0),before:void 0,after:void 0})];return o.value===!0&&i.push(q("div",{ref:I,class:G.value+" scroll",style:t.popupContentStyle,...Je.value,onClick:gn,onScrollPassive:Me},zt())),q(gl,{ref:C,modelValue:m.value,position:t.useInput===!0?"top":void 0,transitionShow:z,transitionHide:t.transitionHide,transitionDuration:t.transitionDuration,noRouteDismiss:t.popupNoRouteDismiss,onBeforeShow:Kn,onBeforeHide:ie,onHide:Y,onShow:ee},()=>q("div",{class:"q-select__dialog"+(de.value===!0?" q-select__dialog--dark q-dark":"")+($.value===!0?" q-select__dialog--focused":"")},i))}function ie(i){Qn(i),C.value!==null&&C.value.__updateRefocusTarget(M.rootRef.value.querySelector(".q-field__native > [tabindex]:last-child")),M.focused.value=!1}function Y(i){$t(),M.focused.value===!1&&u("blur",i),Rt()}function ee(){const i=document.activeElement;(i===null||i.id!==M.targetUid.value)&&ne.value!==null&&ne.value!==i&&ne.value.focus(),Ke()}function ce(){m.value!==!0&&(r.value=-1,o.value===!0&&(o.value=!1),M.focused.value===!1&&(p!==null&&(clearTimeout(p),p=null),M.innerLoading.value===!0&&(u("filterAbort"),M.innerLoading.value=!1,d.value=!1)))}function tt(i){M.editable.value===!0&&(v===!0?(M.onControlFocusin(i),m.value=!0,We(()=>{M.focus()})):M.focus(),t.onFilter!==void 0?St(c.value):(pe.value!==!0||n["no-option"]!==void 0)&&(o.value=!0))}function $t(){m.value=!1,ce()}function Rt(){t.useInput===!0&&qt(t.multiple!==!0&&t.fillInput===!0&&H.value.length!==0&&Ve.value(H.value[0])||"",!0,!0)}function mn(i){let B=-1;if(i===!0){if(H.value.length!==0){const T=Ie.value(H.value[0]);B=t.options.findIndex(X=>Wt(Ie.value(X),T))}De(B)}D(B)}function Al(i,B){o.value===!0&&M.innerLoading.value===!1&&(De(-1,!0),We(()=>{o.value===!0&&M.innerLoading.value===!1&&(i>B?De():mn(!0))}))}function Pn(){m.value===!1&&V.value!==null&&V.value.updatePosition()}function Kn(i){i!==void 0&&Lt(i),u("popupShow",i),M.hasPopupOpen=!0,M.onControlFocusin(i)}function Qn(i){i!==void 0&&Lt(i),u("popupHide",i),M.hasPopupOpen=!1,M.onControlFocusout(i)}function Un(){v=s.platform.is.mobile!==!0&&t.behavior!=="dialog"?!1:t.behavior!=="menu"&&(t.useInput===!0?n["no-option"]!==void 0||t.onFilter!==void 0||pe.value===!1:!0),z=s.platform.is.ios===!0&&v===!0&&t.useInput===!0?"fade":t.transitionShow}return Jl(Un),Gl(Pn),Un(),hl(()=>{h!==null&&clearTimeout(h),S!==null&&clearTimeout(S)}),Object.assign(a,{showPopup:tt,hidePopup:$t,removeAtIndex:at,add:yt,toggleOption:et,getOptionIndex:()=>r.value,setOptionIndex:D,moveOptionSelection:E,filter:St,updateMenuPosition:Pn,updateInputValue:qt,isOptionSelected:me,getEmittingOptionValue:ut,isOptionDisabled:(...i)=>lt.value.apply(null,i)===!0,getOptionValue:(...i)=>Ie.value.apply(null,i),getOptionLabel:(...i)=>Ve.value.apply(null,i)}),Object.assign(M,{innerValue:H,fieldClass:k(()=>`q-select q-field--auto-height q-select--with${t.useInput!==!0?"out":""}-input q-select--with${t.useChips!==!0?"out":""}-chips q-select--${t.multiple===!0?"multiple":"single"}`),inputRef:N,targetRef:ne,hasValue:Se,showPopup:tt,floatingLabel:k(()=>t.hideSelected!==!0&&Se.value===!0||typeof c.value=="number"||c.value.length!==0||Zn(t.displayValue)),getControlChild:()=>{if(M.editable.value!==!1&&(m.value===!0||pe.value!==!0||n["no-option"]!==void 0))return v===!0?A():vn();M.hasPopupOpen===!0&&(M.hasPopupOpen=!1)},controlEvents:{onFocusin(i){M.onControlFocusin(i)},onFocusout(i){M.onControlFocusout(i,()=>{Rt(),ce()})},onClick(i){if(gn(i),v!==!0&&o.value===!0){ce(),ne.value!==null&&ne.value.focus();return}tt(i)}},getControl:i=>{const B=Ut(),T=i===!0||m.value!==!0||v!==!0;if(t.useInput===!0)B.push(nn(i,T));else if(M.editable.value===!0){const ge=T===!0?nt.value:void 0;B.push(q("input",{ref:T===!0?ne:void 0,key:"d_t",class:"q-select__focus-target",id:T===!0?M.targetUid.value:void 0,value:Ee.value,readonly:!0,"data-autofocus":i===!0||t.autofocus===!0||void 0,...ge,onKeydown:ft,onKeyup:U,onKeypress:Ue})),T===!0&&typeof t.autocomplete=="string"&&t.autocomplete.length!==0&&B.push(q("input",{class:"q-select__autocomplete-input",autocomplete:t.autocomplete,tabindex:-1,onKeyup:_e}))}if(j.value!==void 0&&t.disable!==!0&&dt.value.length!==0){const ge=dt.value.map(he=>q("option",{value:he,selected:!0}));B.push(q("select",{class:"hidden",name:j.value,multiple:t.multiple},ge))}const X=t.useInput===!0||T!==!0?void 0:M.splitAttrs.attributes.value;return q("div",{class:"q-field__native row items-center",...X,...M.splitAttrs.listeners.value},B)},getInnerAppend:()=>t.loading!==!0&&d.value!==!0&&t.hideDropdownIcon!==!0?[q(Ht,{class:"q-select__dropdown-icon"+(o.value===!0?" rotate-180":""),name:ct.value})]:null}),fl(M)}});const kt=[-61,9,38,199,426,686,756,818,1111,1181,1210,1635,2060,2097,2192,2262,2324,2394,2456,3178];function qa(t,n,u){return Object.prototype.toString.call(t)==="[object Date]"&&(u=t.getDate(),n=t.getMonth()+1,t=t.getFullYear()),Fa(Yn(t,n,u))}function el(t,n,u){return Ml(Ia(t,n,u))}function $a(t){return Ea(t)===0}function sn(t,n){return n<=6?31:n<=11||$a(t)?30:29}function Ea(t){const n=kt.length;let u=kt[0],a,s,o,m,r;if(t<u||t>=kt[n-1])throw new Error("Invalid Jalaali year "+t);for(r=1;r<n&&(a=kt[r],s=a-u,!(t<a));r+=1)u=a;return m=t-u,s-m<6&&(m=m-s+be(s+4,33)*33),o=Ze(Ze(m+1,33)-1,4),o===-1&&(o=4),o}function Dl(t,n){const u=kt.length,a=t+621;let s=-14,o=kt[0],m,r,c,$,d;if(t<o||t>=kt[u-1])throw new Error("Invalid Jalaali year "+t);for(d=1;d<u&&(m=kt[d],r=m-o,!(t<m));d+=1)s=s+be(r,33)*8+be(Ze(r,33),4),o=m;$=t-o,s=s+be($,33)*8+be(Ze($,33)+3,4),Ze(r,33)===4&&r-$===4&&(s+=1);const h=be(a,4)-be((be(a,100)+1)*3,4)-150,S=20+s-h;return n||(r-$<6&&($=$-r+be(r+4,33)*33),c=Ze(Ze($+1,33)-1,4),c===-1&&(c=4)),{leap:c,gy:a,march:S}}function Ia(t,n,u){const a=Dl(t,!0);return Yn(a.gy,3,a.march)+(n-1)*31-be(n,7)*(n-7)+u-1}function Fa(t){const n=Ml(t).gy;let u=n-621,a,s,o;const m=Dl(u,!1),r=Yn(n,3,m.march);if(o=t-r,o>=0){if(o<=185)return s=1+be(o,31),a=Ze(o,31)+1,{jy:u,jm:s,jd:a};o-=186}else u-=1,o+=179,m.leap===1&&(o+=1);return s=7+be(o,30),a=Ze(o,30)+1,{jy:u,jm:s,jd:a}}function Yn(t,n,u){let a=be((t+be(n-8,6)+100100)*1461,4)+be(153*Ze(n+9,12)+2,5)+u-34840408;return a=a-be(be(t+100100+be(n-8,6),100)*3,4)+752,a}function Ml(t){let n=4*t+139361631;n=n+be(be(4*t+183187720,146097)*3,4)*4-3908;const u=be(Ze(n,1461),4)*5+308,a=be(Ze(u,153),5)+1,s=Ze(be(u,153),12)+1;return{gy:be(n,1461)-100100+be(8-s,6),gm:s,gd:a}}function be(t,n){return~~(t/n)}function Ze(t,n){return t-~~(t/n)*n}const Oa=["gregorian","persian"],xl={modelValue:{required:!0},mask:{type:String},locale:Object,calendar:{type:String,validator:t=>Oa.includes(t),default:"gregorian"},landscape:Boolean,color:String,textColor:String,square:Boolean,flat:Boolean,bordered:Boolean,readonly:Boolean,disable:Boolean},Cl=["update:modelValue"];function vt(t){return t.year+"/"+re(t.month)+"/"+re(t.day)}function Vl(t,n){const u=k(()=>t.disable!==!0&&t.readonly!==!0),a=k(()=>u.value===!0?0:-1),s=k(()=>{const r=[];return t.color!==void 0&&r.push(`bg-${t.color}`),t.textColor!==void 0&&r.push(`text-${t.textColor}`),r.join(" ")});function o(){return t.locale!==void 0?{...n.lang.date,...t.locale}:n.lang.date}function m(r){const c=new Date,$=r===!0?null:0;if(t.calendar==="persian"){const d=qa(c);return{year:d.jy,month:d.jm,day:d.jd}}return{year:c.getFullYear(),month:c.getMonth()+1,day:c.getDate(),hour:$,minute:$,second:$,millisecond:$}}return{editable:u,tabindex:a,headerClass:s,getLocale:o,getCurrentDate:m}}const ql=864e5,Aa=36e5,Mn=6e4,$l="YYYY-MM-DDTHH:mm:ss.SSSZ",Ha=/\[((?:[^\]\\]|\\]|\\)*)\]|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]/g,Ta=/(\[[^\]]*\])|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]|([.*+:?^,\s${}()|\\]+)/g,pn={};function Ba(t,n){const u="("+n.days.join("|")+")",a=t+u;if(pn[a]!==void 0)return pn[a];const s="("+n.daysShort.join("|")+")",o="("+n.months.join("|")+")",m="("+n.monthsShort.join("|")+")",r={};let c=0;const $=t.replace(Ta,h=>{switch(c++,h){case"YY":return r.YY=c,"(-?\\d{1,2})";case"YYYY":return r.YYYY=c,"(-?\\d{1,4})";case"M":return r.M=c,"(\\d{1,2})";case"MM":return r.M=c,"(\\d{2})";case"MMM":return r.MMM=c,m;case"MMMM":return r.MMMM=c,o;case"D":return r.D=c,"(\\d{1,2})";case"Do":return r.D=c++,"(\\d{1,2}(st|nd|rd|th))";case"DD":return r.D=c,"(\\d{2})";case"H":return r.H=c,"(\\d{1,2})";case"HH":return r.H=c,"(\\d{2})";case"h":return r.h=c,"(\\d{1,2})";case"hh":return r.h=c,"(\\d{2})";case"m":return r.m=c,"(\\d{1,2})";case"mm":return r.m=c,"(\\d{2})";case"s":return r.s=c,"(\\d{1,2})";case"ss":return r.s=c,"(\\d{2})";case"S":return r.S=c,"(\\d{1})";case"SS":return r.S=c,"(\\d{2})";case"SSS":return r.S=c,"(\\d{3})";case"A":return r.A=c,"(AM|PM)";case"a":return r.a=c,"(am|pm)";case"aa":return r.aa=c,"(a\\.m\\.|p\\.m\\.)";case"ddd":return s;case"dddd":return u;case"Q":case"d":case"E":return"(\\d{1})";case"Qo":return"(1st|2nd|3rd|4th)";case"DDD":case"DDDD":return"(\\d{1,3})";case"w":return"(\\d{1,2})";case"ww":return"(\\d{2})";case"Z":return r.Z=c,"(Z|[+-]\\d{2}:\\d{2})";case"ZZ":return r.ZZ=c,"(Z|[+-]\\d{2}\\d{2})";case"X":return r.X=c,"(-?\\d+)";case"x":return r.x=c,"(-?\\d{4,})";default:return c--,h[0]==="["&&(h=h.substring(1,h.length-1)),h.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}}),d={map:r,regex:new RegExp("^"+$)};return pn[a]=d,d}function El(t,n){return t!==void 0?t:n!==void 0?n.date:aa.date}function tl(t,n=""){const u=t>0?"-":"+",a=Math.abs(t),s=Math.floor(a/60),o=a%60;return u+re(s)+n+re(o)}function Ya(t,n,u){let a=t.getFullYear(),s=t.getMonth();const o=t.getDate();return n.year!==void 0&&(a+=u*n.year,delete n.year),n.month!==void 0&&(s+=u*n.month,delete n.month),t.setDate(1),t.setMonth(2),t.setFullYear(a),t.setMonth(s),t.setDate(Math.min(o,zn(t))),n.date!==void 0&&(t.setDate(t.getDate()+u*n.date),delete n.date),t}function Na(t,n,u){const a=n.year!==void 0?n.year:t[`get${u}FullYear`](),s=n.month!==void 0?n.month-1:t[`get${u}Month`](),o=new Date(a,s+1,0).getDate(),m=Math.min(o,n.date!==void 0?n.date:t[`get${u}Date`]());return t[`set${u}Date`](1),t[`set${u}Month`](2),t[`set${u}FullYear`](a),t[`set${u}Month`](s),t[`set${u}Date`](m),delete n.year,delete n.month,delete n.date,t}function Nn(t,n,u){const a=Il(n),s=new Date(t),o=a.year!==void 0||a.month!==void 0||a.date!==void 0?Ya(s,a,u):s;for(const m in a){const r=Tl(m);o[`set${r}`](o[`get${r}`]()+u*a[m])}return o}function Il(t){const n={...t};return t.years!==void 0&&(n.year=t.years,delete n.years),t.months!==void 0&&(n.month=t.months,delete n.months),t.days!==void 0&&(n.date=t.days,delete n.days),t.day!==void 0&&(n.date=t.day,delete n.day),t.hour!==void 0&&(n.hours=t.hour,delete n.hour),t.minute!==void 0&&(n.minutes=t.minute,delete n.minute),t.second!==void 0&&(n.seconds=t.second,delete n.second),t.millisecond!==void 0&&(n.milliseconds=t.millisecond,delete n.millisecond),n}function Fl(t,n,u){const a=Il(n),s=u===!0?"UTC":"",o=new Date(t),m=a.year!==void 0||a.month!==void 0||a.date!==void 0?Na(o,a,s):o;for(const r in a){const c=r.charAt(0).toUpperCase()+r.slice(1);m[`set${s}${c}`](a[r])}return m}function ja(t,n,u){const a=Kt(t,n,u),s=new Date(a.year,a.month===null?null:a.month-1,a.day===null?1:a.day,a.hour,a.minute,a.second,a.millisecond),o=s.getTimezoneOffset();return a.timezoneOffset===null||a.timezoneOffset===o?s:Nn(s,{minutes:a.timezoneOffset-o},1)}function Kt(t,n,u,a,s){const o={year:null,month:null,day:null,hour:null,minute:null,second:null,millisecond:null,timezoneOffset:null,dateHash:null,timeHash:null};if(s!==void 0&&Object.assign(o,s),t==null||t===""||typeof t!="string")return o;n===void 0&&(n=$l);const m=El(u,yl.props),r=m.months,c=m.monthsShort,{regex:$,map:d}=Ba(n,m),h=t.match($);if(h===null)return o;let S="";if(d.X!==void 0||d.x!==void 0){const b=parseInt(h[d.X!==void 0?d.X:d.x],10);if(isNaN(b)===!0||b<0)return o;const v=new Date(b*(d.X!==void 0?1e3:1));o.year=v.getFullYear(),o.month=v.getMonth()+1,o.day=v.getDate(),o.hour=v.getHours(),o.minute=v.getMinutes(),o.second=v.getSeconds(),o.millisecond=v.getMilliseconds()}else{if(d.YYYY!==void 0)o.year=parseInt(h[d.YYYY],10);else if(d.YY!==void 0){const b=parseInt(h[d.YY],10);o.year=b<0?b:2e3+b}if(d.M!==void 0){if(o.month=parseInt(h[d.M],10),o.month<1||o.month>12)return o}else d.MMM!==void 0?o.month=c.indexOf(h[d.MMM])+1:d.MMMM!==void 0&&(o.month=r.indexOf(h[d.MMMM])+1);if(d.D!==void 0){if(o.day=parseInt(h[d.D],10),o.year===null||o.month===null||o.day<1)return o;const b=a!=="persian"?new Date(o.year,o.month,0).getDate():sn(o.year,o.month);if(o.day>b)return o}d.H!==void 0?o.hour=parseInt(h[d.H],10)%24:d.h!==void 0&&(o.hour=parseInt(h[d.h],10)%12,(d.A&&h[d.A]==="PM"||d.a&&h[d.a]==="pm"||d.aa&&h[d.aa]==="p.m.")&&(o.hour+=12),o.hour=o.hour%24),d.m!==void 0&&(o.minute=parseInt(h[d.m],10)%60),d.s!==void 0&&(o.second=parseInt(h[d.s],10)%60),d.S!==void 0&&(o.millisecond=parseInt(h[d.S],10)*10**(3-h[d.S].length)),(d.Z!==void 0||d.ZZ!==void 0)&&(S=d.Z!==void 0?h[d.Z].replace(":",""):h[d.ZZ],o.timezoneOffset=(S[0]==="+"?-1:1)*(60*S.slice(1,3)+1*S.slice(3,5)))}return o.dateHash=re(o.year,6)+"/"+re(o.month)+"/"+re(o.day),o.timeHash=re(o.hour)+":"+re(o.minute)+":"+re(o.second)+S,o}function za(t){return typeof t=="number"?!0:isNaN(Date.parse(t))===!1}function Ra(t,n){return Fl(new Date,t,n)}function La(t){const n=new Date(t).getDay();return n===0?7:n}function xn(t){const n=new Date(t.getFullYear(),t.getMonth(),t.getDate());n.setDate(n.getDate()-(n.getDay()+6)%7+3);const u=new Date(n.getFullYear(),0,4);u.setDate(u.getDate()-(u.getDay()+6)%7+3);const a=n.getTimezoneOffset()-u.getTimezoneOffset();n.setHours(n.getHours()-a);const s=(n-u)/(ql*7);return 1+Math.floor(s)}function Pa(t){return t.getFullYear()*1e4+t.getMonth()*100+t.getDate()}function bn(t,n){const u=new Date(t);return n===!0?Pa(u):u.getTime()}function Ka(t,n,u,a={}){const s=bn(n,a.onlyDate),o=bn(u,a.onlyDate),m=bn(t,a.onlyDate);return(m>s||a.inclusiveFrom===!0&&m===s)&&(m<o||a.inclusiveTo===!0&&m===o)}function Qa(t,n){return Nn(t,n,1)}function Ua(t,n){return Nn(t,n,-1)}function rt(t,n,u){const a=new Date(t),s=`set${u===!0?"UTC":""}`;switch(n){case"year":case"years":a[`${s}Month`](0);case"month":case"months":a[`${s}Date`](1);case"day":case"days":case"date":a[`${s}Hours`](0);case"hour":case"hours":a[`${s}Minutes`](0);case"minute":case"minutes":a[`${s}Seconds`](0);case"second":case"seconds":a[`${s}Milliseconds`](0)}return a}function Wa(t,n,u){const a=new Date(t),s=`set${u===!0?"UTC":""}`;switch(n){case"year":case"years":a[`${s}Month`](11);case"month":case"months":a[`${s}Date`](zn(a));case"day":case"days":case"date":a[`${s}Hours`](23);case"hour":case"hours":a[`${s}Minutes`](59);case"minute":case"minutes":a[`${s}Seconds`](59);case"second":case"seconds":a[`${s}Milliseconds`](999)}return a}function Za(t){let n=new Date(t);return Array.prototype.slice.call(arguments,1).forEach(u=>{n=Math.max(n,new Date(u))}),n}function Xa(t){let n=new Date(t);return Array.prototype.slice.call(arguments,1).forEach(u=>{n=Math.min(n,new Date(u))}),n}function on(t,n,u){return(t.getTime()-t.getTimezoneOffset()*Mn-(n.getTime()-n.getTimezoneOffset()*Mn))/u}function jn(t,n,u="days"){const a=new Date(t),s=new Date(n);switch(u){case"years":case"year":return a.getFullYear()-s.getFullYear();case"months":case"month":return(a.getFullYear()-s.getFullYear())*12+a.getMonth()-s.getMonth();case"days":case"day":case"date":return on(rt(a,"day"),rt(s,"day"),ql);case"hours":case"hour":return on(rt(a,"hour"),rt(s,"hour"),Aa);case"minutes":case"minute":return on(rt(a,"minute"),rt(s,"minute"),Mn);case"seconds":case"second":return on(rt(a,"second"),rt(s,"second"),1e3)}}function Cn(t){return jn(t,rt(t,"year"),"days")+1}function Ja(t){return pl(t)===!0?"date":typeof t=="number"?"number":"string"}function Ga(t,n,u){const a=new Date(t);if(n){const s=new Date(n);if(a<s)return s}if(u){const s=new Date(u);if(a>s)return s}return a}function eo(t,n,u){const a=new Date(t),s=new Date(n);if(u===void 0)return a.getTime()===s.getTime();switch(u){case"second":case"seconds":if(a.getSeconds()!==s.getSeconds())return!1;case"minute":case"minutes":if(a.getMinutes()!==s.getMinutes())return!1;case"hour":case"hours":if(a.getHours()!==s.getHours())return!1;case"day":case"days":case"date":if(a.getDate()!==s.getDate())return!1;case"month":case"months":if(a.getMonth()!==s.getMonth())return!1;case"year":case"years":if(a.getFullYear()!==s.getFullYear())return!1;break;default:throw new Error(`date isSameDate unknown unit ${u}`)}return!0}function zn(t){return new Date(t.getFullYear(),t.getMonth()+1,0).getDate()}function nl(t){if(t>=11&&t<=13)return`${t}th`;switch(t%10){case 1:return`${t}st`;case 2:return`${t}nd`;case 3:return`${t}rd`}return`${t}th`}const ll={YY(t,n,u){const a=this.YYYY(t,n,u)%100;return a>=0?re(a):"-"+re(Math.abs(a))},YYYY(t,n,u){return u!=null?u:t.getFullYear()},M(t){return t.getMonth()+1},MM(t){return re(t.getMonth()+1)},MMM(t,n){return n.monthsShort[t.getMonth()]},MMMM(t,n){return n.months[t.getMonth()]},Q(t){return Math.ceil((t.getMonth()+1)/3)},Qo(t){return nl(this.Q(t))},D(t){return t.getDate()},Do(t){return nl(t.getDate())},DD(t){return re(t.getDate())},DDD(t){return Cn(t)},DDDD(t){return re(Cn(t),3)},d(t){return t.getDay()},dd(t,n){return this.dddd(t,n).slice(0,2)},ddd(t,n){return n.daysShort[t.getDay()]},dddd(t,n){return n.days[t.getDay()]},E(t){return t.getDay()||7},w(t){return xn(t)},ww(t){return re(xn(t))},H(t){return t.getHours()},HH(t){return re(t.getHours())},h(t){const n=t.getHours();return n===0?12:n>12?n%12:n},hh(t){return re(this.h(t))},m(t){return t.getMinutes()},mm(t){return re(t.getMinutes())},s(t){return t.getSeconds()},ss(t){return re(t.getSeconds())},S(t){return Math.floor(t.getMilliseconds()/100)},SS(t){return re(Math.floor(t.getMilliseconds()/10))},SSS(t){return re(t.getMilliseconds(),3)},A(t){return this.H(t)<12?"AM":"PM"},a(t){return this.H(t)<12?"am":"pm"},aa(t){return this.H(t)<12?"a.m.":"p.m."},Z(t,n,u,a){const s=a==null?t.getTimezoneOffset():a;return tl(s,":")},ZZ(t,n,u,a){const s=a==null?t.getTimezoneOffset():a;return tl(s)},X(t){return Math.floor(t.getTime()/1e3)},x(t){return t.getTime()}};function Rn(t,n,u,a,s){if(t!==0&&!t||t===1/0||t===-1/0)return;const o=new Date(t);if(isNaN(o))return;n===void 0&&(n=$l);const m=El(u,yl.props);return n.replace(Ha,(r,c)=>r in ll?ll[r](o,m,a,s):c===void 0?r:c.split("\\]").join("]"))}function to(t){return pl(t)===!0?new Date(t.getTime()):t}var no={isValid:za,extractDate:ja,buildDate:Ra,getDayOfWeek:La,getWeekOfYear:xn,isBetweenDates:Ka,addToDate:Qa,subtractFromDate:Ua,adjustDate:Fl,startOfDate:rt,endOfDate:Wa,getMaxDate:Za,getMinDate:Xa,getDateDiff:jn,getDayOfYear:Cn,inferDateFormat:Ja,getDateBetween:Ga,isSameDate:eo,daysInMonth:zn,formatDate:Rn,clone:to};const Et=20,lo=["Calendar","Years","Months"],al=t=>lo.includes(t),Sn=t=>/^-?[\d]+\/[0-1]\d$/.test(t),Pt=" \u2014 ";function wt(t){return t.year+"/"+re(t.month)}var ao=xt({name:"QDate",props:{...xl,...Hn,...On,multiple:Boolean,range:Boolean,title:String,subtitle:String,mask:{default:"YYYY/MM/DD"},defaultYearMonth:{type:String,validator:Sn},yearsInMonthView:Boolean,events:[Array,Function],eventColor:[String,Function],emitImmediately:Boolean,options:[Array,Function],navigationMinYearMonth:{type:String,validator:Sn},navigationMaxYearMonth:{type:String,validator:Sn},noUnset:Boolean,firstDayOfWeek:[String,Number],todayBtn:Boolean,minimal:Boolean,defaultView:{type:String,default:"Calendar",validator:al}},emits:[...Cl,"rangeStart","rangeEnd","navigation"],setup(t,{slots:n,emit:u}){const{proxy:a}=Nt(),{$q:s}=a,o=An(t,s),{getCache:m}=va(),{tabindex:r,headerClass:c,getLocale:$,getCurrentDate:d}=Vl(t,s);let h;const S=bl(t),b=Sl(S),v=le(null),y=le(gt()),p=le($()),w=k(()=>gt()),z=k(()=>$()),x=k(()=>d()),g=le(et(y.value,p.value)),N=le(t.defaultView),ne=s.lang.rtl===!0?"right":"left",V=le(ne.value),C=le(ne.value),I=g.value.year,j=le(I-I%Et-(I<0?Et:0)),L=le(null),J=k(()=>{const l=t.landscape===!0?"landscape":"portrait";return`q-date q-date--${l} q-date--${l}-${t.minimal===!0?"minimal":"standard"}`+(o.value===!0?" q-date--dark q-dark":"")+(t.bordered===!0?" q-date--bordered":"")+(t.square===!0?" q-date--square no-border-radius":"")+(t.flat===!0?" q-date--flat no-shadow":"")+(t.disable===!0?" disabled":t.readonly===!0?" q-date--readonly":"")}),se=k(()=>t.color||"primary"),ke=k(()=>t.textColor||"white"),ve=k(()=>t.emitImmediately===!0&&t.multiple!==!0&&t.range!==!0),De=k(()=>Array.isArray(t.modelValue)===!0?t.modelValue:t.modelValue!==null&&t.modelValue!==void 0?[t.modelValue]:[]),ye=k(()=>De.value.filter(l=>typeof l=="string").map(l=>yt(l,y.value,p.value)).filter(l=>l.dateHash!==null&&l.day!==null&&l.month!==null&&l.year!==null)),Me=k(()=>{const l=f=>yt(f,y.value,p.value);return De.value.filter(f=>oa(f)===!0&&f.from!==void 0&&f.to!==void 0).map(f=>({from:l(f.from),to:l(f.to)})).filter(f=>f.from.dateHash!==null&&f.to.dateHash!==null&&f.from.dateHash<f.to.dateHash)}),Ae=k(()=>t.calendar!=="persian"?l=>new Date(l.year,l.month-1,l.day):l=>{const f=el(l.year,l.month,l.day);return new Date(f.gy,f.gm-1,f.gd)}),Ke=k(()=>t.calendar==="persian"?vt:(l,f,_)=>Rn(new Date(l.year,l.month-1,l.day,l.hour,l.minute,l.second,l.millisecond),f===void 0?y.value:f,_===void 0?p.value:_,l.year,l.timezoneOffset)),M=k(()=>ye.value.length+Me.value.reduce((l,f)=>l+1+jn(Ae.value(f.to),Ae.value(f.from)),0)),H=k(()=>{if(t.title!==void 0&&t.title!==null&&t.title.length!==0)return t.title;if(L.value!==null){const _=L.value.init,O=Ae.value(_);return p.value.daysShort[O.getDay()]+", "+p.value.monthsShort[_.month-1]+" "+_.day+Pt+"?"}if(M.value===0)return Pt;if(M.value>1)return`${M.value} ${p.value.pluralDay}`;const l=ye.value[0],f=Ae.value(l);return isNaN(f.valueOf())===!0?Pt:p.value.headerTitle!==void 0?p.value.headerTitle(f,l):p.value.daysShort[f.getDay()]+", "+p.value.monthsShort[l.month-1]+" "+l.day}),te=k(()=>ye.value.concat(Me.value.map(f=>f.from)).sort((f,_)=>f.year-_.year||f.month-_.month)[0]),de=k(()=>ye.value.concat(Me.value.map(f=>f.to)).sort((f,_)=>_.year-f.year||_.month-f.month)[0]),Se=k(()=>{if(t.subtitle!==void 0&&t.subtitle!==null&&t.subtitle.length!==0)return t.subtitle;if(M.value===0)return Pt;if(M.value>1){const l=te.value,f=de.value,_=p.value.monthsShort;return _[l.month-1]+(l.year!==f.year?" "+l.year+Pt+_[f.month-1]+" ":l.month!==f.month?Pt+_[f.month-1]:"")+" "+f.year}return ye.value[0].year}),ae=k(()=>{const l=[s.iconSet.datetime.arrowLeft,s.iconSet.datetime.arrowRight];return s.lang.rtl===!0?l.reverse():l}),G=k(()=>t.firstDayOfWeek!==void 0?Number(t.firstDayOfWeek):p.value.firstDayOfWeek),pe=k(()=>{const l=p.value.daysShort,f=G.value;return f>0?l.slice(f,7).concat(l.slice(0,f)):l}),Q=k(()=>{const l=g.value;return t.calendar!=="persian"?new Date(l.year,l.month,0).getDate():sn(l.year,l.month)}),Ee=k(()=>typeof t.eventColor=="function"?t.eventColor:()=>t.eventColor),fe=k(()=>{if(t.navigationMinYearMonth===void 0)return null;const l=t.navigationMinYearMonth.split("/");return{year:parseInt(l[0],10),month:parseInt(l[1],10)}}),we=k(()=>{if(t.navigationMaxYearMonth===void 0)return null;const l=t.navigationMaxYearMonth.split("/");return{year:parseInt(l[0],10),month:parseInt(l[1],10)}}),ze=k(()=>{const l={month:{prev:!0,next:!0},year:{prev:!0,next:!0}};return fe.value!==null&&fe.value.year>=g.value.year&&(l.year.prev=!1,fe.value.year===g.value.year&&fe.value.month>=g.value.month&&(l.month.prev=!1)),we.value!==null&&we.value.year<=g.value.year&&(l.year.next=!1,we.value.year===g.value.year&&we.value.month<=g.value.month&&(l.month.next=!1)),l}),nt=k(()=>{const l={};return ye.value.forEach(f=>{const _=wt(f);l[_]===void 0&&(l[_]=[]),l[_].push(f.day)}),l}),Je=k(()=>{const l={};return Me.value.forEach(f=>{const _=wt(f.from),O=wt(f.to);if(l[_]===void 0&&(l[_]=[]),l[_].push({from:f.from.day,to:_===O?f.to.day:void 0,range:f}),_<O){let A;const{year:ie,month:Y}=f.from,ee=Y<12?{year:ie,month:Y+1}:{year:ie+1,month:1};for(;(A=wt(ee))<=O;)l[A]===void 0&&(l[A]=[]),l[A].push({from:void 0,to:A===O?f.to.day:void 0,range:f}),ee.month++,ee.month>12&&(ee.year++,ee.month=1)}}),l}),Le=k(()=>{if(L.value===null)return;const{init:l,initHash:f,final:_,finalHash:O}=L.value,[A,ie]=f<=O?[l,_]:[_,l],Y=wt(A),ee=wt(ie);if(Y!==$e.value&&ee!==$e.value)return;const ce={};return Y===$e.value?(ce.from=A.day,ce.includeFrom=!0):ce.from=1,ee===$e.value?(ce.to=ie.day,ce.includeTo=!0):ce.to=Q.value,ce}),$e=k(()=>wt(g.value)),ct=k(()=>{const l={};if(t.options===void 0){for(let _=1;_<=Q.value;_++)l[_]=!0;return l}const f=typeof t.options=="function"?t.options:_=>t.options.includes(_);for(let _=1;_<=Q.value;_++){const O=$e.value+"/"+re(_);l[_]=f(O)}return l}),Ct=k(()=>{const l={};if(t.events===void 0)for(let f=1;f<=Q.value;f++)l[f]=!1;else{const f=typeof t.events=="function"?t.events:_=>t.events.includes(_);for(let _=1;_<=Q.value;_++){const O=$e.value+"/"+re(_);l[_]=f(O)===!0&&Ee.value(O)}}return l}),Ge=k(()=>{let l,f;const{year:_,month:O}=g.value;if(t.calendar!=="persian")l=new Date(_,O-1,1),f=new Date(_,O-1,0).getDate();else{const A=el(_,O,1);l=new Date(A.gy,A.gm-1,A.gd);let ie=O-1,Y=_;ie===0&&(ie=12,Y--),f=sn(Y,ie)}return{days:l.getDay()-G.value-1,endDay:f}}),Ie=k(()=>{const l=[],{days:f,endDay:_}=Ge.value,O=f<0?f+7:f;if(O<6)for(let Y=_-O;Y<=_;Y++)l.push({i:Y,fill:!0});const A=l.length;for(let Y=1;Y<=Q.value;Y++){const ee={i:Y,event:Ct.value[Y],classes:[]};ct.value[Y]===!0&&(ee.in=!0,ee.flat=!0),l.push(ee)}if(nt.value[$e.value]!==void 0&&nt.value[$e.value].forEach(Y=>{const ee=A+Y-1;Object.assign(l[ee],{selected:!0,unelevated:!0,flat:!1,color:se.value,textColor:ke.value})}),Je.value[$e.value]!==void 0&&Je.value[$e.value].forEach(Y=>{if(Y.from!==void 0){const ee=A+Y.from-1,ce=A+(Y.to||Q.value)-1;for(let tt=ee;tt<=ce;tt++)Object.assign(l[tt],{range:Y.range,unelevated:!0,color:se.value,textColor:ke.value});Object.assign(l[ee],{rangeFrom:!0,flat:!1}),Y.to!==void 0&&Object.assign(l[ce],{rangeTo:!0,flat:!1})}else if(Y.to!==void 0){const ee=A+Y.to-1;for(let ce=A;ce<=ee;ce++)Object.assign(l[ce],{range:Y.range,unelevated:!0,color:se.value,textColor:ke.value});Object.assign(l[ee],{flat:!1,rangeTo:!0})}else{const ee=A+Q.value-1;for(let ce=A;ce<=ee;ce++)Object.assign(l[ce],{range:Y.range,unelevated:!0,color:se.value,textColor:ke.value})}}),Le.value!==void 0){const Y=A+Le.value.from-1,ee=A+Le.value.to-1;for(let ce=Y;ce<=ee;ce++)l[ce].color=se.value,l[ce].editRange=!0;Le.value.includeFrom===!0&&(l[Y].editRangeFrom=!0),Le.value.includeTo===!0&&(l[ee].editRangeTo=!0)}g.value.year===x.value.year&&g.value.month===x.value.month&&(l[A+x.value.day-1].today=!0);const ie=l.length%7;if(ie>0){const Y=7-ie;for(let ee=1;ee<=Y;ee++)l.push({i:ee,fill:!0})}return l.forEach(Y=>{let ee="q-date__calendar-item ";Y.fill===!0?ee+="q-date__calendar-item--fill":(ee+=`q-date__calendar-item--${Y.in===!0?"in":"out"}`,Y.range!==void 0&&(ee+=` q-date__range${Y.rangeTo===!0?"-to":Y.rangeFrom===!0?"-from":""}`),Y.editRange===!0&&(ee+=` q-date__edit-range${Y.editRangeFrom===!0?"-from":""}${Y.editRangeTo===!0?"-to":""}`),(Y.range!==void 0||Y.editRange===!0)&&(ee+=` text-${Y.color}`)),Y.classes=ee}),l}),Ve=k(()=>t.disable===!0?{"aria-disabled":"true"}:{});Be(()=>t.modelValue,l=>{if(h===l)h=0;else{const f=et(y.value,p.value);_e(f.year,f.month,f)}}),Be(N,()=>{v.value!==null&&a.$el.contains(document.activeElement)===!0&&v.value.focus()}),Be(()=>g.value.year+"|"+g.value.month,()=>{u("navigation",{year:g.value.year,month:g.value.month})}),Be(w,l=>{nn(l,p.value,"mask"),y.value=l}),Be(z,l=>{nn(y.value,l,"locale"),p.value=l});function lt(){const{year:l,month:f,day:_}=x.value,O={...g.value,year:l,month:f,day:_},A=nt.value[wt(O)];(A===void 0||A.includes(O.day)===!1)&&Ut(O),ut(O.year,O.month)}function dt(l){al(l)===!0&&(N.value=l)}function jt(l,f){["month","year"].includes(l)&&(l==="month"?E:P)(f===!0?-1:1)}function ut(l,f){N.value="Calendar",_e(l,f)}function at(l,f){if(t.range===!1||!l){L.value=null;return}const _=Object.assign({...g.value},l),O=f!==void 0?Object.assign({...g.value},f):_;L.value={init:_,initHash:vt(_),final:O,finalHash:vt(O)},ut(_.year,_.month)}function gt(){return t.calendar==="persian"?"YYYY/MM/DD":t.mask}function yt(l,f,_){return Kt(l,f,_,t.calendar,{hour:0,minute:0,second:0,millisecond:0})}function et(l,f){const _=Array.isArray(t.modelValue)===!0?t.modelValue:t.modelValue?[t.modelValue]:[];if(_.length===0)return D();const O=_[_.length-1],A=yt(O.from!==void 0?O.from:O,l,f);return A.dateHash===null?D():A}function D(){let l,f;if(t.defaultYearMonth!==void 0){const _=t.defaultYearMonth.split("/");l=parseInt(_[0],10),f=parseInt(_[1],10)}else{const _=x.value!==void 0?x.value:d();l=_.year,f=_.month}return{year:l,month:f,day:1,hour:0,minute:0,second:0,millisecond:0,dateHash:l+"/"+re(f)+"/01"}}function E(l){let f=g.value.year,_=Number(g.value.month)+l;_===13?(_=1,f++):_===0&&(_=12,f--),_e(f,_),ve.value===!0&&ft("month")}function P(l){const f=Number(g.value.year)+l;_e(f,g.value.month),ve.value===!0&&ft("year")}function ue(l){_e(l,g.value.month),N.value=t.defaultView==="Years"?"Months":"Calendar",ve.value===!0&&ft("year")}function me(l){_e(g.value.year,l),N.value="Calendar",ve.value===!0&&ft("month")}function Re(l,f){const _=nt.value[f];(_!==void 0&&_.includes(l.day)===!0?zt:Ut)(l)}function U(l){return{year:l.year,month:l.month,day:l.day}}function _e(l,f,_){if(fe.value!==null&&l<=fe.value.year&&((f<fe.value.month||l<fe.value.year)&&(f=fe.value.month),l=fe.value.year),we.value!==null&&l>=we.value.year&&((f>we.value.month||l>we.value.year)&&(f=we.value.month),l=we.value.year),_!==void 0){const{hour:A,minute:ie,second:Y,millisecond:ee,timezoneOffset:ce,timeHash:tt}=_;Object.assign(g.value,{hour:A,minute:ie,second:Y,millisecond:ee,timezoneOffset:ce,timeHash:tt})}const O=l+"/"+re(f)+"/01";O!==g.value.dateHash&&(V.value=g.value.dateHash<O==(s.lang.rtl!==!0)?"left":"right",l!==g.value.year&&(C.value=V.value),We(()=>{j.value=l-l%Et-(l<0?Et:0),Object.assign(g.value,{year:l,month:f,day:1,dateHash:O})}))}function Ue(l,f,_){const O=l!==null&&l.length===1&&t.multiple===!1?l[0]:l;h=O;const{reason:A,details:ie}=Vt(f,_);u("update:modelValue",O,A,ie)}function ft(l){const f=ye.value[0]!==void 0&&ye.value[0].dateHash!==null?{...ye.value[0]}:{...g.value};We(()=>{f.year=g.value.year,f.month=g.value.month;const _=t.calendar!=="persian"?new Date(f.year,f.month,0).getDate():sn(f.year,f.month);f.day=Math.min(Math.max(1,f.day),_);const O=pt(f);h=O;const{details:A}=Vt("",f);u("update:modelValue",O,l,A)})}function Vt(l,f){return f.from!==void 0?{reason:`${l}-range`,details:{...U(f.target),from:U(f.from),to:U(f.to)}}:{reason:`${l}-day`,details:U(f)}}function pt(l,f,_){return l.from!==void 0?{from:Ke.value(l.from,f,_),to:Ke.value(l.to,f,_)}:Ke.value(l,f,_)}function Ut(l){let f;if(t.multiple===!0)if(l.from!==void 0){const _=vt(l.from),O=vt(l.to),A=ye.value.filter(Y=>Y.dateHash<_||Y.dateHash>O),ie=Me.value.filter(({from:Y,to:ee})=>ee.dateHash<_||Y.dateHash>O);f=A.concat(ie).concat(l).map(Y=>pt(Y))}else{const _=De.value.slice();_.push(pt(l)),f=_}else f=pt(l);Ue(f,"add",l)}function zt(l){if(t.noUnset===!0)return;let f=null;if(t.multiple===!0&&Array.isArray(t.modelValue)===!0){const _=pt(l);l.from!==void 0?f=t.modelValue.filter(O=>O.from!==void 0?O.from!==_.from&&O.to!==_.to:!0):f=t.modelValue.filter(O=>O!==_),f.length===0&&(f=null)}Ue(f,"remove",l)}function nn(l,f,_){const O=ye.value.concat(Me.value).map(A=>pt(A,l,f)).filter(A=>A.from!==void 0?A.from.dateHash!==null&&A.to.dateHash!==null:A.dateHash!==null);u("update:modelValue",(t.multiple===!0?O:O[0])||null,_)}function ln(){if(t.minimal!==!0)return q("div",{class:"q-date__header "+c.value},[q("div",{class:"relative-position"},[q(It,{name:"q-transition--fade"},()=>q("div",{key:"h-yr-"+Se.value,class:"q-date__header-subtitle q-date__header-link "+(N.value==="Years"?"q-date__header-link--active":"cursor-pointer"),tabindex:r.value,...m("vY",{onClick(){N.value="Years"},onKeyup(l){l.keyCode===13&&(N.value="Years")}})},[Se.value]))]),q("div",{class:"q-date__header-title relative-position flex no-wrap"},[q("div",{class:"relative-position col"},[q(It,{name:"q-transition--fade"},()=>q("div",{key:"h-sub"+H.value,class:"q-date__header-title-label q-date__header-link "+(N.value==="Calendar"?"q-date__header-link--active":"cursor-pointer"),tabindex:r.value,...m("vC",{onClick(){N.value="Calendar"},onKeyup(l){l.keyCode===13&&(N.value="Calendar")}})},[H.value]))]),t.todayBtn===!0?q(Pe,{class:"q-date__header-today self-start",icon:s.iconSet.datetime.today,flat:!0,size:"sm",round:!0,tabindex:r.value,onClick:lt}):null])])}function bt({label:l,type:f,key:_,dir:O,goTo:A,boundaries:ie,cls:Y}){return[q("div",{class:"row items-center q-date__arrow"},[q(Pe,{round:!0,dense:!0,size:"sm",flat:!0,icon:ae.value[0],tabindex:r.value,disable:ie.prev===!1,...m("go-#"+f,{onClick(){A(-1)}})})]),q("div",{class:"relative-position overflow-hidden flex flex-center"+Y},[q(It,{name:"q-transition--jump-"+O},()=>q("div",{key:_},[q(Pe,{flat:!0,dense:!0,noCaps:!0,label:l,tabindex:r.value,...m("view#"+f,{onClick:()=>{N.value=f}})})]))]),q("div",{class:"row items-center q-date__arrow"},[q(Pe,{round:!0,dense:!0,size:"sm",flat:!0,icon:ae.value[1],tabindex:r.value,disable:ie.next===!1,...m("go+#"+f,{onClick(){A(1)}})})])]}const qt={Calendar:()=>[q("div",{key:"calendar-view",class:"q-date__view q-date__calendar"},[q("div",{class:"q-date__navigation row items-center no-wrap"},bt({label:p.value.months[g.value.month-1],type:"Months",key:g.value.month,dir:V.value,goTo:E,boundaries:ze.value.month,cls:" col"}).concat(bt({label:g.value.year,type:"Years",key:g.value.year,dir:C.value,goTo:P,boundaries:ze.value.year,cls:""}))),q("div",{class:"q-date__calendar-weekdays row items-center no-wrap"},pe.value.map(l=>q("div",{class:"q-date__calendar-item"},[q("div",l)]))),q("div",{class:"q-date__calendar-days-container relative-position overflow-hidden"},[q(It,{name:"q-transition--slide-"+V.value},()=>q("div",{key:$e.value,class:"q-date__calendar-days fit"},Ie.value.map(l=>q("div",{class:l.classes},[l.in===!0?q(Pe,{class:l.today===!0?"q-date__today":"",dense:!0,flat:l.flat,unelevated:l.unelevated,color:l.color,textColor:l.textColor,label:l.i,tabindex:r.value,...m("day#"+l.i,{onClick:()=>{St(l.i)},onMouseover:()=>{vn(l.i)}})},l.event!==!1?()=>q("div",{class:"q-date__event bg-"+l.event}):null):q("div",""+l.i)]))))])])],Months(){const l=g.value.year===x.value.year,f=O=>fe.value!==null&&g.value.year===fe.value.year&&fe.value.month>O||we.value!==null&&g.value.year===we.value.year&&we.value.month<O,_=p.value.monthsShort.map((O,A)=>{const ie=g.value.month===A+1;return q("div",{class:"q-date__months-item flex flex-center"},[q(Pe,{class:l===!0&&x.value.month===A+1?"q-date__today":null,flat:ie!==!0,label:O,unelevated:ie,color:ie===!0?se.value:null,textColor:ie===!0?ke.value:null,tabindex:r.value,disable:f(A+1),...m("month#"+A,{onClick:()=>{me(A+1)}})})])});return t.yearsInMonthView===!0&&_.unshift(q("div",{class:"row no-wrap full-width"},[bt({label:g.value.year,type:"Years",key:g.value.year,dir:C.value,goTo:P,boundaries:ze.value.year,cls:" col"})])),q("div",{key:"months-view",class:"q-date__view q-date__months flex flex-center"},_)},Years(){const l=j.value,f=l+Et,_=[],O=A=>fe.value!==null&&fe.value.year>A||we.value!==null&&we.value.year<A;for(let A=l;A<=f;A++){const ie=g.value.year===A;_.push(q("div",{class:"q-date__years-item flex flex-center"},[q(Pe,{key:"yr"+A,class:x.value.year===A?"q-date__today":null,flat:!ie,label:A,dense:!0,unelevated:ie,color:ie===!0?se.value:null,textColor:ie===!0?ke.value:null,tabindex:r.value,disable:O(A),...m("yr#"+A,{onClick:()=>{ue(A)}})})]))}return q("div",{class:"q-date__view q-date__years flex flex-center"},[q("div",{class:"col-auto"},[q(Pe,{round:!0,dense:!0,flat:!0,icon:ae.value[0],tabindex:r.value,disable:O(l),...m("y-",{onClick:()=>{j.value-=Et}})})]),q("div",{class:"q-date__years-content col self-stretch row items-center"},_),q("div",{class:"col-auto"},[q(Pe,{round:!0,dense:!0,flat:!0,icon:ae.value[1],tabindex:r.value,disable:O(f),...m("y+",{onClick:()=>{j.value+=Et}})})])])}};function St(l){const f={...g.value,day:l};if(t.range===!1){Re(f,$e.value);return}if(L.value===null){const _=Ie.value.find(A=>A.fill!==!0&&A.i===l);if(t.noUnset!==!0&&_.range!==void 0){zt({target:f,from:_.range.from,to:_.range.to});return}if(_.selected===!0){zt(f);return}const O=vt(f);L.value={init:f,initHash:O,final:f,finalHash:O},u("rangeStart",U(f))}else{const _=L.value.initHash,O=vt(f),A=_<=O?{from:L.value.init,to:f}:{from:f,to:L.value.init};L.value=null,Ut(_===O?f:{target:f,...A}),u("rangeEnd",{from:U(A.from),to:U(A.to)})}}function vn(l){if(L.value!==null){const f={...g.value,day:l};Object.assign(L.value,{final:f,finalHash:vt(f)})}}return Object.assign(a,{setToday:lt,setView:dt,offsetCalendar:jt,setCalendarTo:ut,setEditingRange:at}),()=>{const l=[q("div",{class:"q-date__content col relative-position"},[q(It,{name:"q-transition--fade"},qt[N.value])])],f=In(n.default);return f!==void 0&&l.push(q("div",{class:"q-date__actions"},f)),t.name!==void 0&&t.disable!==!0&&b(l,"push"),q("div",{class:J.value,...Ve.value},[ln(),q("div",{ref:v,class:"q-date__main col column",tabindex:-1},l)])}}}),wn=xt({name:"QPopupProxy",props:{...Bl,breakpoint:{type:[String,Number],default:450}},emits:["show","hide"],setup(t,{slots:n,emit:u,attrs:a}){const{proxy:s}=Nt(),{$q:o}=s,m=le(!1),r=le(null),c=k(()=>parseInt(t.breakpoint,10)),{canShow:$}=Yl({showing:m});function d(){return o.screen.width<c.value||o.screen.height<c.value?"dialog":"menu"}const h=le(d()),S=k(()=>h.value==="menu"?{maxHeight:"99vh"}:{});Be(()=>d(),y=>{m.value!==!0&&(h.value=y)});function b(y){m.value=!0,u("show",y)}function v(y){m.value=!1,h.value=d(),u("hide",y)}return Object.assign(s,{show(y){$(y)===!0&&r.value.show(y)},hide(y){r.value.hide(y)},toggle(y){r.value.toggle(y)}}),ua(s,"currentComponent",()=>({type:h.value,ref:r.value})),()=>{const y={ref:r,...S.value,...a,onShow:b,onHide:v};let p;return h.value==="dialog"?p=gl:(p=dn,Object.assign(y,{target:t.target,contextMenu:t.contextMenu,noParentEvent:!0,separateClosePopup:!0})),q(p,y,n.default)}}});function oo(t,n){if(t.hour!==null){if(t.minute===null)return"minute";if(n===!0&&t.second===null)return"second"}return"hour"}function uo(){const t=new Date;return{hour:t.getHours(),minute:t.getMinutes(),second:t.getSeconds(),millisecond:t.getMilliseconds()}}var io=xt({name:"QTime",props:{...On,...Hn,...xl,mask:{default:null},format24h:{type:Boolean,default:null},defaultDate:{type:String,validator:t=>/^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(t)},options:Function,hourOptions:Array,minuteOptions:Array,secondOptions:Array,withSeconds:Boolean,nowBtn:Boolean},emits:Cl,setup(t,{slots:n,emit:u}){const a=Nt(),{$q:s}=a.proxy,o=An(t,s),{tabindex:m,headerClass:r,getLocale:c,getCurrentDate:$}=Vl(t,s),d=bl(t),h=Sl(d);let S,b;const v=le(null),y=k(()=>Se()),p=k(()=>c()),w=k(()=>ae()),z=Kt(t.modelValue,y.value,p.value,t.calendar,w.value),x=le(oo(z)),g=le(z),N=le(z.hour===null||z.hour<12),ne=k(()=>`q-time q-time--${t.landscape===!0?"landscape":"portrait"}`+(o.value===!0?" q-time--dark q-dark":"")+(t.disable===!0?" disabled":t.readonly===!0?" q-time--readonly":"")+(t.bordered===!0?" q-time--bordered":"")+(t.square===!0?" q-time--square no-border-radius":"")+(t.flat===!0?" q-time--flat no-shadow":"")),V=k(()=>{const D=g.value;return{hour:D.hour===null?"--":C.value===!0?re(D.hour):String(N.value===!0?D.hour===0?12:D.hour:D.hour>12?D.hour-12:D.hour),minute:D.minute===null?"--":re(D.minute),second:D.second===null?"--":re(D.second)}}),C=k(()=>t.format24h!==null?t.format24h:s.lang.date.format24h),I=k(()=>{const D=x.value==="hour",E=D===!0?12:60,P=g.value[x.value];let me=`rotate(${Math.round(P*(360/E))-180}deg) translateX(-50%)`;return D===!0&&C.value===!0&&g.value.hour>=12&&(me+=" scale(.7)"),{transform:me}}),j=k(()=>g.value.hour!==null),L=k(()=>j.value===!0&&g.value.minute!==null),J=k(()=>t.hourOptions!==void 0?D=>t.hourOptions.includes(D):t.options!==void 0?D=>t.options(D,null,null):null),se=k(()=>t.minuteOptions!==void 0?D=>t.minuteOptions.includes(D):t.options!==void 0?D=>t.options(g.value.hour,D,null):null),ke=k(()=>t.secondOptions!==void 0?D=>t.secondOptions.includes(D):t.options!==void 0?D=>t.options(g.value.hour,g.value.minute,D):null),ve=k(()=>{if(J.value===null)return null;const D=H(0,11,J.value),E=H(12,11,J.value);return{am:D,pm:E,values:D.values.concat(E.values)}}),De=k(()=>se.value!==null?H(0,59,se.value):null),ye=k(()=>ke.value!==null?H(0,59,ke.value):null),Me=k(()=>{switch(x.value){case"hour":return ve.value;case"minute":return De.value;case"second":return ye.value}}),Ae=k(()=>{let D,E,P=0,ue=1;const me=Me.value!==null?Me.value.values:void 0;x.value==="hour"?C.value===!0?(D=0,E=23):(D=0,E=11,N.value===!1&&(P=12)):(D=0,E=55,ue=5);const Re=[];for(let U=D,_e=D;U<=E;U+=ue,_e++){const Ue=U+P,ft=me!==void 0&&me.includes(Ue)===!1,Vt=x.value==="hour"&&U===0?C.value===!0?"00":"12":U;Re.push({val:Ue,index:_e,disable:ft,label:Vt})}return Re}),Ke=k(()=>[[Nl,Q,void 0,{stop:!0,prevent:!0,mouse:!0}]]);Be(()=>t.modelValue,D=>{const E=Kt(D,y.value,p.value,t.calendar,w.value);(E.dateHash!==g.value.dateHash||E.timeHash!==g.value.timeHash)&&(g.value=E,E.hour===null?x.value="hour":N.value=E.hour<12)}),Be([y,p],()=>{We(()=>{gt()})});function M(){const D={...$(),...uo()};gt(D),Object.assign(g.value,D),x.value="hour"}function H(D,E,P){const ue=Array.apply(null,{length:E+1}).map((me,Re)=>{const U=Re+D;return{index:U,val:P(U)===!0}}).filter(me=>me.val===!0).map(me=>me.index);return{min:ue[0],max:ue[ue.length-1],values:ue,threshold:E+1}}function te(D,E,P){const ue=Math.abs(D-E);return Math.min(ue,P-ue)}function de(D,{min:E,max:P,values:ue,threshold:me}){if(D===E)return E;if(D<E||D>P)return te(D,E,me)<=te(D,P,me)?E:P;const Re=ue.findIndex(Ue=>D<=Ue),U=ue[Re-1],_e=ue[Re];return D-U<=_e-D?U:_e}function Se(){return t.calendar!=="persian"&&t.mask!==null?t.mask:`HH:mm${t.withSeconds===!0?":ss":""}`}function ae(){if(typeof t.defaultDate!="string"){const D=$(!0);return D.dateHash=vt(D),D}return Kt(t.defaultDate,"YYYY/MM/DD",void 0,t.calendar)}function G(){return cl(a)===!0||Me.value!==null&&(Me.value.values.length===0||x.value==="hour"&&C.value!==!0&&ve.value[N.value===!0?"am":"pm"].values.length===0)}function pe(){const D=v.value,{top:E,left:P,width:ue}=D.getBoundingClientRect(),me=ue/2;return{top:E+me,left:P+me,dist:me*.7}}function Q(D){if(G()!==!0){if(D.isFirst===!0){S=pe(),b=fe(D.evt,S);return}b=fe(D.evt,S,b),D.isFinal===!0&&(S=!1,b=null,Ee())}}function Ee(){x.value==="hour"?x.value="minute":t.withSeconds&&x.value==="minute"&&(x.value="second")}function fe(D,E,P){const ue=ia(D),me=Math.abs(ue.top-E.top),Re=Math.sqrt(Math.pow(Math.abs(ue.top-E.top),2)+Math.pow(Math.abs(ue.left-E.left),2));let U,_e=Math.asin(me/Re)*(180/Math.PI);if(ue.top<E.top?_e=E.left<ue.left?90-_e:270+_e:_e=E.left<ue.left?_e+90:270-_e,x.value==="hour"){if(U=_e/30,ve.value!==null){const Ue=C.value!==!0?N.value===!0:ve.value.am.values.length!==0&&ve.value.pm.values.length!==0?Re>=E.dist:ve.value.am.values.length!==0;U=de(U+(Ue===!0?0:12),ve.value[Ue===!0?"am":"pm"])}else U=Math.round(U),C.value===!0?Re<E.dist?U<12&&(U+=12):U===12&&(U=0):N.value===!0&&U===12?U=0:N.value===!1&&U!==12&&(U+=12);C.value===!0&&(N.value=U<12)}else U=Math.round(_e/6)%60,x.value==="minute"&&De.value!==null?U=de(U,De.value):x.value==="second"&&ye.value!==null&&(U=de(U,ye.value));return P!==U&&lt[x.value](U),U}const we={hour(){x.value="hour"},minute(){x.value="minute"},second(){x.value="second"}};function ze(D){D.keyCode===13&&dt()}function nt(D){D.keyCode===13&&jt()}function Je(D){G()!==!0&&(s.platform.is.desktop!==!0&&fe(D,pe()),Ee())}function Le(D){G()!==!0&&fe(D,pe())}function $e(D){if(D.keyCode===13)x.value="hour";else if([37,39].includes(D.keyCode)){const E=D.keyCode===37?-1:1;if(ve.value!==null){const P=C.value===!0?ve.value.values:ve.value[N.value===!0?"am":"pm"].values;if(P.length===0)return;if(g.value.hour===null)Ge(P[0]);else{const ue=(P.length+P.indexOf(g.value.hour)+E)%P.length;Ge(P[ue])}}else{const P=C.value===!0?24:12,ue=C.value!==!0&&N.value===!1?12:0,me=g.value.hour===null?-E:g.value.hour;Ge(ue+(24+me+E)%P)}}}function ct(D){if(D.keyCode===13)x.value="minute";else if([37,39].includes(D.keyCode)){const E=D.keyCode===37?-1:1;if(De.value!==null){const P=De.value.values;if(P.length===0)return;if(g.value.minute===null)Ie(P[0]);else{const ue=(P.length+P.indexOf(g.value.minute)+E)%P.length;Ie(P[ue])}}else{const P=g.value.minute===null?-E:g.value.minute;Ie((60+P+E)%60)}}}function Ct(D){if(D.keyCode===13)x.value="second";else if([37,39].includes(D.keyCode)){const E=D.keyCode===37?-1:1;if(ye.value!==null){const P=ye.value.values;if(P.length===0)return;if(g.value.seconds===null)Ve(P[0]);else{const ue=(P.length+P.indexOf(g.value.second)+E)%P.length;Ve(P[ue])}}else{const P=g.value.second===null?-E:g.value.second;Ve((60+P+E)%60)}}}function Ge(D){g.value.hour!==D&&(g.value.hour=D,at())}function Ie(D){g.value.minute!==D&&(g.value.minute=D,at())}function Ve(D){g.value.second!==D&&(g.value.second=D,at())}const lt={hour:Ge,minute:Ie,second:Ve};function dt(){N.value===!1&&(N.value=!0,g.value.hour!==null&&(g.value.hour-=12,at()))}function jt(){N.value===!0&&(N.value=!1,g.value.hour!==null&&(g.value.hour+=12,at()))}function ut(D){const E=t.modelValue;x.value!==D&&E!==void 0&&E!==null&&E!==""&&typeof E!="string"&&(x.value=D)}function at(){if(J.value!==null&&J.value(g.value.hour)!==!0){g.value=Kt(),ut("hour");return}if(se.value!==null&&se.value(g.value.minute)!==!0){g.value.minute=null,g.value.second=null,ut("minute");return}if(t.withSeconds===!0&&ke.value!==null&&ke.value(g.value.second)!==!0){g.value.second=null,ut("second");return}g.value.hour===null||g.value.minute===null||t.withSeconds===!0&&g.value.second===null||gt()}function gt(D){const E=Object.assign({...g.value},D),P=t.calendar==="persian"?re(E.hour)+":"+re(E.minute)+(t.withSeconds===!0?":"+re(E.second):""):Rn(new Date(E.year,E.month===null?null:E.month-1,E.day,E.hour,E.minute,E.second,E.millisecond),y.value,p.value,E.year,E.timezoneOffset);E.changed=P!==t.modelValue,u("update:modelValue",P,E)}function yt(){const D=[q("div",{class:"q-time__link "+(x.value==="hour"?"q-time__link--active":"cursor-pointer"),tabindex:m.value,onClick:we.hour,onKeyup:$e},V.value.hour),q("div",":"),q("div",j.value===!0?{class:"q-time__link "+(x.value==="minute"?"q-time__link--active":"cursor-pointer"),tabindex:m.value,onKeyup:ct,onClick:we.minute}:{class:"q-time__link"},V.value.minute)];t.withSeconds===!0&&D.push(q("div",":"),q("div",L.value===!0?{class:"q-time__link "+(x.value==="second"?"q-time__link--active":"cursor-pointer"),tabindex:m.value,onKeyup:Ct,onClick:we.second}:{class:"q-time__link"},V.value.second));const E=[q("div",{class:"q-time__header-label row items-center no-wrap",dir:"ltr"},D)];return C.value===!1&&E.push(q("div",{class:"q-time__header-ampm column items-between no-wrap"},[q("div",{class:"q-time__link "+(N.value===!0?"q-time__link--active":"cursor-pointer"),tabindex:m.value,onClick:dt,onKeyup:ze},"AM"),q("div",{class:"q-time__link "+(N.value!==!0?"q-time__link--active":"cursor-pointer"),tabindex:m.value,onClick:jt,onKeyup:nt},"PM")])),q("div",{class:"q-time__header flex flex-center no-wrap "+r.value},E)}function et(){const D=g.value[x.value];return q("div",{class:"q-time__content col relative-position"},[q(It,{name:"q-transition--scale"},()=>q("div",{key:"clock"+x.value,class:"q-time__container-parent absolute-full"},[q("div",{ref:v,class:"q-time__container-child fit overflow-hidden"},[st(q("div",{class:"q-time__clock cursor-pointer non-selectable",onClick:Je,onMousedown:Le},[q("div",{class:"q-time__clock-circle fit"},[q("div",{class:"q-time__clock-pointer"+(g.value[x.value]===null?" hidden":t.color!==void 0?` text-${t.color}`:""),style:I.value}),Ae.value.map(E=>q("div",{class:`q-time__clock-position row flex-center q-time__clock-pos-${E.index}`+(E.val===D?" q-time__clock-position--active "+r.value:E.disable===!0?" q-time__clock-position--disable":"")},[q("span",E.label)]))])]),Ke.value)])])),t.nowBtn===!0?q(Pe,{class:"q-time__now-button absolute",icon:s.iconSet.datetime.now,unelevated:!0,size:"sm",round:!0,color:t.color,textColor:t.textColor,tabindex:m.value,onClick:M}):null])}return a.proxy.setNow=M,()=>{const D=[et()],E=In(n.default);return E!==void 0&&D.push(q("div",{class:"q-time__actions"},E)),t.name!==void 0&&t.disable!==!0&&h(D,"push"),q("div",{class:ne.value,tabindex:-1},[yt(),q("div",{class:"q-time__main col overflow-auto"},D)])}}});const ro={key:6,class:"q-pa-md",style:{"max-width":"300px"}},so={class:"row items-center justify-end"},co={class:"row items-center justify-end"},fo={key:7},vo="DD-MM-YYYY HH:mm:ss",mo={__name:"DataFormField",props:{component:Object,dense:{type:Boolean,default:null},feature:Object,field:Object,name:String,initialValue:null,modelValue:null},emits:["update:modelValue"],setup(t,{emit:n}){const u=Mt(),{extractDate:a,formatDate:s}=no,o=t,m=n;F.randomId();const r=k(()=>F.isNil(o.dense)?u.screen.gt.sm:o.dense),{type:c}=o.field,$=F.includes(["Float","Int","Number"],c);function d(){const b={},v=b.props={...o.field,dense:r,hideBottomSpace:!0};return F.isEmpty(v.items)?c==="String"?(b.is="textarea",v.autogrow=!0,v.rows=1,v.type="textarea"):c==="Boolean"?b.is="toggle":$?(b.is="text-field",v.type="number"):c==="Date"?(b.is="date-picker",v.name=`${v.name}_textfield`,v.type="text",v.value=k(()=>{const y=v.value;return F.isNil(y)?"":v.format?s(y,v.format):s(y,"DD-MM-YYYY HH:mm")}),b.date={props:{}},v.min&&(b.date.props.min=v.min),v.max&&(b.date.props.max=v.max)):c==="Object"&&(b.is="data-form-field-code-editor",v.readonly=!0,b.codeEditor={props:{lang:"json"}}):b.is="autocomplete",b}let h=o.component||Xt(d()),S=k({get(){const b=o.modelValue;if(F.isNil(b))return c==="Boolean"?!1:null;if(c==="Date")return s(b,mask);if(h.is==="code-editor")debugger;return b},set(b){let v=F.isNil(b)?null:b;if(v===""&&(v=null),$)v=parseFloat(b),isNaN(v)&&(v=null);else if(c==="Date")v=a(b,vo);else if(h.is==="code-editor")v={};else if(c==="Boolean"){debugger;v===!1&&!o.feature.required&&(v=void 0)}m("update:modelValue",v)}});return(b,v)=>(R(),Ye("div",{class:Dt(["obiwan-data-form-field",{row:W(h).is==="checkbox"}])},[t.field.component?(R(),oe(_l(t.field.component.is),Te({key:0,class:t.field.component.class,style:t.field.component.style},t.field.component.props,wl(t.field.component.on)),null,16,["class","style"])):xe("",!0),W(h).is==="textarea"?(R(),oe(an,Te({key:1},W(h).props,{modelValue:W(S),"onUpdate:modelValue":v[0]||(v[0]=y=>it(S)?S.value=y:S=y),type:"textarea"}),null,16,["modelValue"])):W(h).is==="text-field"?(R(),oe(an,Te({key:2},W(h).props,{modelValue:W(S),"onUpdate:modelValue":v[1]||(v[1]=y=>it(S)?S.value=y:S=y)}),null,16,["modelValue"])):W(h).is==="autocomplete"?(R(),oe(Va,Te({key:3},W(h).props,{modelValue:W(S),"onUpdate:modelValue":v[2]||(v[2]=y=>it(S)?S.value=y:S=y),"use-input":"","hide-selected":"","input-debounce":"0",onFilter:b.filterFn}),{"no-option":K(()=>[Z(At,null,{default:K(()=>[Z(Ot,{class:"text-grey"},{default:K(()=>[ht(" No results ")]),_:1})]),_:1})]),_:1},16,["modelValue","onFilter"])):W(h).is==="checkbox"?(R(),oe(ra,Te({key:4,class:"q-py-md","left-label":""},W(h).props,{modelValue:W(S),"onUpdate:modelValue":v[3]||(v[3]=y=>it(S)?S.value=y:S=y)}),null,16,["modelValue"])):W(h).is==="toggle"?(R(),oe(sa,Te({key:5,style:{"margin-top":r.value?"8px":"12px"},color:W(S)?"primary":void 0,"checked-icon":"mdi-check","toggle-indeterminate":!1,"keep-color":"","left-label":"","unchecked-icon":"mdi-close"},W(h).props,{modelValue:W(S),"onUpdate:modelValue":v[4]||(v[4]=y=>it(S)?S.value=y:S=y)}),null,16,["style","color","modelValue"])):W(h).is==="date-picker"?(R(),Ye("div",ro,[Z(an,Te(W(h).props,{modelValue:W(S),"onUpdate:modelValue":v[7]||(v[7]=y=>it(S)?S.value=y:S=y)}),{prepend:K(()=>[Z(Ht,{name:"event",class:"cursor-pointer"},{default:K(()=>[Z(wn,{cover:"","transition-show":"scale","transition-hide":"scale"},{default:K(()=>[Z(ao,Te(W(h).date.props,{modelValue:W(S),"onUpdate:modelValue":v[5]||(v[5]=y=>it(S)?S.value=y:S=y),mask:"DD-MM-YYYY HH:mm","today-btn":""}),{default:K(()=>[Ne("div",so,[st(Z(Pe,{label:"Close",color:"primary",flat:""},null,512),[[_t]])])]),_:1},16,["modelValue"])]),_:1})]),_:1})]),append:K(()=>[Z(Ht,{name:"access_time",class:"cursor-pointer"},{default:K(()=>[Z(wn,{cover:"","transition-show":"scale","transition-hide":"scale"},{default:K(()=>[Z(io,{modelValue:W(S),"onUpdate:modelValue":v[6]||(v[6]=y=>it(S)?S.value=y:S=y),mask:"DD-MM-YYYY HH:mm",format24h:""},{default:K(()=>[Ne("div",co,[st(Z(Pe,{label:"Close",color:"primary",flat:""},null,512),[[_t]])])]),_:1},8,["modelValue"])]),_:1})]),_:1})]),_:1},16,["modelValue"])])):W(h).is==="data-form-field-code-editor"?(R(),Ye("div",fo,[Z(an,Te(W(h).props,{modelValue:W(S),"onUpdate:modelValue":v[8]||(v[8]=y=>it(S)?S.value=y:S=y)}),{append:K(()=>[Z(Ht,{name:"mdi-code-json",class:"cursor-pointer"},{default:K(()=>[Z(wn,{cover:"","transition-show":"scale","transition-hide":"scale"},{default:K(()=>[st(Z(Xe,{type:"Cancel"},null,512),[[_t]])]),_:1})]),_:1})]),_:1},16,["modelValue"])])):xe("",!0)],2))}};function ho(t){return t?k(()=>{if(!t)return;const n={class:{"bg-primary":!0,"text-white":!0},props:{anchor:"center left",self:"center right"}};return F.isString(t)?(n.text=t,n):t.props?F.merge(n,t):F.merge(n,{text:t.text,props:t})}):!1}function go({feature:t,readonly:n,value:u}){const a=!F.isEmpty(u);!t&&u instanceof Yt&&(t=u.$.feature);let s=!1,o=!1,m=!1,r=!1;return Bt.isNode(u)?s=!0:u instanceof Yt&&(s=a),n||(t.containment?t.upperBound===-1?m=!0:m=F.castArray(u||[]).length<t.upperBound:o=!0,r=u?F.castArray(u).length>t.lowerBound:!1),{edit:s,link:o,set:m,unset:r}}function yo(t,n){if(!(t!=null&&t.eType))return[];const u=t.$.store,a={[t.eType.ns]:{__typename:!0,id:!0,name:!0,ns:!0}};return F.isEmpty(n)||(t.many?a[t.eType.ns].__args={id:{$nin:[F.flatMap(n,"id")]}}:a[t.eType.ns].__args={id:{$ne:n.id}}),u.query(a)}function Vn(t){return t!=null&&t.eType?[t.eType,...t.eType.eAllSubTypes].filter(n=>!n.abstract&&!n.interface):[]}function po({action:t,feature:n,readonly:u,value:a}){if(!n&&a instanceof Yt&&(n=a.$.feature),t==="edit")return n.many?u?"View List":"Edit List":u?"View Node":"Edit Node";if(t==="set")return n.containment?`Create a new ${n.eType.ns}`:a?`Update link to another ${n.eType.ns}`:`Create a Link to an existing ${n.eType.ns}`;if(t==="unset")return n.many?n.containment?"Remove list and all contained items":"Remove list":"Remove"}function bo(t){const{$router:n,$store:u}=this;let{data:a,feature:s,source:o,on:m}=t;!m&&this.on&&(m=this.on);const{fullPath:r}=n.currentRoute.value;if(m!=null&&m.edit)return m.edit({feature:s,source:o,value:a});if(a instanceof Yt)n.push(`${r}/${s.name}`);else if(Bt.isNode(a)){const c=u.createStoreId(a,!0);n.push(`${r}/${c}`)}}function ol(t){var $;const{$router:n,$store:u}=this;let{feature:a,source:s,target:o,targetType:m,on:r}=t;if(!r&&this.on&&(r=this.on),r!=null&&r.set)return r.set({feature:a,source:s,target:o,targetType:m});function c(d){a.many?s[a.name]?s[a.name].push(d):s[a.name]=[d]:s[a.name]=d}if(o)c(o);else{const d=m.ns;o=u.construct({__typename:d});const{isValid:h}=o.$.validate();if(h)c(o);else{const S=u.once(`created:${o.id}`,({node:p})=>{c(p)}),b=u.createStoreId(o,!0);if(r!=null&&r.edit)return r.edit({cancel(){debugger;S.off()},feature:a,source:s,value:o,storeId:b});const{fullPath:v,params:y}=n.currentRoute.value;(($=y.fragment)==null?void 0:$.length)%2===0?n.push(v+`/${a.name}/${b}`):n.push(v+`/${b}`)}}}function Ln({on:t,props:n,router:u,store:a}){let s=n.feature,o=n.source,m=n.value;if(F.isString(n.source)&&(o=a.get(n.source)),F.isString(n.feature)&&o&&(s=o.$.eClass.getEStructuralFeature(n.feature)),F.isString(n.value)?m=a.get(n.value):n.value?(m=n.value,m instanceof Yt&&(o=n.value.$.owner,s=n.value.$.feature)):o&&s&&(m=o[s.name]||null,s.many&&!m&&(m=[])),!s)return;const r=!F.isEmpty(m);let{edit:c,link:$,set:d,unset:h}=go({feature:s,readonly:n.readonly,value:m});o.$.storedAt||(c=!1,$=!1,d=!1,h=!1);function S(p,w){debugger;!w&&p instanceof Event&&(w=p),w&&w.stopPropagation();const{feature:z}=this;if(t!=null&&t.edit)return t.edit({...this,target:p},w);const x=u==null?void 0:u.currentRoute.value.fullPath;if(z.many)u.push(x+`/${z.name}`);else if(Bt.isNode(p)){const g=p.$.getStoreId(),N=`/${z.name}/${g}`;u.push(x+N)}}function b(){return this.feature.ns}function v(p,w){debugger;!w&&p instanceof Event&&(w=target),w&&w.stopPropagation();const{feature:z,source:x}=this;function g(N){z.many?x[z.name]?x[z.name].push(N):x[z.name]=[N]:x[z.name]=N}if(Bt.isNode(p))if(p.$.isKindOf("ecore.EClass")){const N=p.ns,ne=a.construct({__typename:N}),{isValid:V}=ne.$.validate();if(V)g(ne);else if(t!=null&&t.set)return a.once(`created:${ne.id}`,({node:C})=>{g(C)}),t.set({...this,target:ne},w)}else g(p)}function y(p){const{feature:w,source:z}=this;let x;if(!z||!w)return!1;if(F.isString(p))if(p===w.name){const g=z[w.name];return t!=null&&t.unset?t.unset(this,e):(delete z[w.name],g)}else x=a.get(p);else x=p;if(x)return t!=null&&t.unset?t.unset({...this,target:x},e):w.many?(F.pull(z[w.name],x),x):(delete z[w.name],x)}return{feature:s,hasData:r,readonly:n.readonly,source:o,value:m,canEdit:c,canLink:$,canSet:d,canUnset:h,edit:S,getAllowedTargets(){return yo(this.feature,this.value)},getAllowedTargetTypes(){return Vn(this.feature)},getDisplayName:b,getTooltip(p){const{feature:w,readonly:z,value:x}=this;return po({action:p,feature:w,readonly:z,value:x})},set:v,unset:y}}const qn={__name:"AddLinkButton",props:{feature:{type:Object,required:!0},menu:Object},emits:["click"],setup(t,{emit:n}){const u=Gt(),a=Mt(),s=F.randomId(),o=n;je("store");const m=t,r=k(()=>{const h={color:"primary",flat:!u.round,size:a.platform.is.desktop?"sm":"md",...u};return h.icon&&!h.label&&(h.dense=!0),h}),c=k(()=>({anchor:"bottom end",self:"top end",...m.menu})),$=k(()=>u.dense!==void 0?u.dense:a.screen.gt.sm),d=ho(u.tooltip);return(h,S)=>W(Vn)(m.feature).length>1?(R(),oe(Pe,Te({key:0,class:"obiwan-add-link-button"},r.value,{onClick:S[0]||(S[0]=cn(()=>{},["stop"]))}),{default:K(()=>[W(d)?(R(),oe(jl,Te({key:0,class:W(d).class},W(d).props),{default:K(()=>[ht(Qe(W(d).text),1)]),_:1},16,["class"])):xe("",!0),Z(dn,Fe(Oe(c.value)),{default:K(()=>[Z(En,{dense:$.value,style:{"min-width":"100px"}},{default:K(()=>[(R(!0),Ye(Tt,null,Jt(W(Vn)(m.feature),b=>st((R(),oe(At,{clickable:"",key:`${W(s)}_${b.id}`,onClick:v=>o("click",v,b)},{default:K(()=>[Z(Ot,null,{default:K(()=>[ht(Qe(b.ns),1)]),_:2},1024)]),_:2},1032,["onClick"])),[[_t]])),128))]),_:1},8,["dense"])]),_:1},16)]),_:1},16)):(R(),oe(Xe,Te({key:1,class:"obiwan-add-link-button"},r.value,{onClick:S[1]||(S[1]=b=>o("click",b,m.feature.eType))}),null,16))}},So={class:"q-ml-md float-left d-flex items-center q-ml-auto"},wo={__name:"OReference",props:{contentClass:[Object,String],dense:{type:Boolean,required:!1,default:null},feature:{type:[String,Object],required:!0},keyClass:[Object,String],readonly:Boolean,source:[String,Object],value:Object,valueClass:[Object,String]},setup(t){const n=Mt();je("bus"),le(null),`${F.randomId()}`,en(),tn(),fn();const u=je("store"),a=t,s=je("onEditReference"),o=je("onSetReference"),m=je("selectLink"),r=k(()=>F.isNil(a.dense)?n.screen.gt.sm:a.dense),c=k(()=>{const y={};return a.value instanceof Yt?y.value=a.value:a.source&&a.feature&&(y.feature=a.feature,y.source=a.source),Ln({props:y,store:u})}),$=k(()=>{const{value:y}=c.value;return F.isNil(y)?"null":F.isArray(y)?`[${y.length}]`:typeof y=="object"?`{ ${Bn(y)}`:JSON.stringify(y)}),d=k(()=>{var p;let y={"cursor-pointer":(p=c.value)==null?void 0:p.canEdit};return F.isString(a.contentClass)?F.forEach(F.split(a.contentClass," "),w=>{y[w.trim()]=!0}):a.contentClass&&(y=a.contentClass),{"obiwan-reference__dense":r.value,...y}});function h(y){y.stopPropagation();const{feature:p,source:w,value:z}=c.value;s({data:z,feature:p,source:w})}function S(y){y.stopPropagation();const{feature:p,source:w,value:z}=c.value;m.show({feature:p,source:w,value:z})}function b(y,p){p.stopPropagation();const{feature:w,source:z}=c.value;y||(y=w.eType),o({feature:w,source:z,targetType:y},p)}function v(y){y.stopPropagation();const{feature:p,value:w}=c.value;Bt.isNode(w)?c.value.unset(item):c.value.unset(p.name)}return(y,p)=>(R(),Ye("div",{class:Dt(["obiwan-reference d-flex items-center w-100",d.value]),onClick:p[4]||(p[4]=cn(w=>h(w),["stop"]))},[qe(y.$slots,"prepend",Fe(Oe({source:c.value.source,feature:c.value.feature,value:c.value.value}))),qe(y.$slots,"default",Fe(Oe({source:c.value.source,feature:c.value.feature,value:c.value.value})),()=>[Ne("div",{class:Dt(["obiwan-reference-key q-mr-xs",t.keyClass])},Qe(c.value.feature.name)+": ",3),Ne("div",{class:Dt(["obiwan-reference-value ellipsis",t.valueClass])},Qe($.value),3)]),Ne("div",So,[c.value.canUnset?(R(),oe(Xe,{key:0,icon:"",type:"delete",tooltip:c.value.getTooltip("unset"),onClick:p[0]||(p[0]=w=>v(w))},null,8,["tooltip"])):xe("",!0),c.value.canLink?(R(),oe(Xe,{key:1,icon:c.value.value?"mdi-link-edit":"mdi-link-plus",type:"link",onClick:p[1]||(p[1]=w=>S(w)),tooltip:c.value.getTooltip("set",c.value.value)},null,8,["icon","tooltip"])):xe("",!0),c.value.canEdit?(R(),oe(Xe,{key:2,icon:"",type:"edit",onClick:p[2]||(p[2]=w=>h(w)),tooltip:c.value.getTooltip("edit")},null,8,["tooltip"])):xe("",!0),c.value.canSet?(R(),oe(qn,{key:3,icon:"mdi-plus",dense:r.value,feature:c.value.feature,tooltip:c.value.getTooltip("set",c.value.value),onClick:p[3]||(p[3]=(w,z)=>b(z,w))},null,8,["dense","feature","tooltip"])):xe("",!0)]),qe(y.$slots,"append",Fe(Oe({source:c.value.source,feature:c.value.feature,value:c.value.value})))],2))}};class _o{constructor(n,u={}){this.rules=[];let{changeable:a,defaultValue:s,defaultLiteralValue:o,derived:m,description:r,displayName:c,eType:$,extensions:d,iD:h,name:S,ns:b,lowerBound:v,transient:y,unsettable:p,volatile:w}=n;if(!$){this.disable=!0;return}this.label=c||S,this.name="DataFormField:"+n.$.get("ns"),this.readonly=u.readonly||a===!1,(h||m)&&(this.readonly=!0),v>0&&(this.clearable=!1,this.rules.push(g=>F.isNil(g)||g===""?`${this.label} is required`:!0)),$.$.isKindOf("ecore.EEnum")?(this.type="String",this.options=[],F.forEach($.eLiterals,g=>{const N={label:g.literal||g.name,value:g.literal||g.name},ne=g.extensions,V=F.get(ne,"components.dataForm.icon")||F.get(ne,"components.DataFormField.icon");V&&(N.icon=V),this.options.push(N)})):this.type=ya($).to("js");const z=F.get(d,"components.dataFormField");z&&F.merge(this,z);const x=F.get(u,`schema.properties.${S}`);x&&F.merge(this,x)}}const ko={class:"obiwan-data-form-actions flex-grow-0 row q-mt-lg"},ul={__name:"DataForm",props:{can:{type:[Object,Function]},dense:{type:Boolean,default:null},commitMode:{type:String,default:"manual",extensions:{options:["manual","immediate","onLostFocus"]}},disabled:{type:Boolean},lazyValidation:{type:Boolean,meta:{description:"If enabled, the form's valid state will always be true unless there are visible validation errors. You can still call validate() to manually trigger validation"}},meta:{type:Object,default(){return{}}},readonly:{type:[Boolean,Function]},schema:{type:Object,meta:{description:"Allows for redifinition of form fields en validationRules. Also allows for mapping fields to custom inputs."}},showButtons:{type:[Object,Boolean],default(){return{reset:!1}}},showDerived:{type:[Boolean,Function,Object]},type:{type:[String,Object]},value:{type:Object,required:!0}},emits:["change","commit","update","update:modelValue","removed","restore","submit"],setup(t,{emit:n}){const u=n,a=Gt(),s=Mt(),o=je("store"),m=je("useMeta"),r=t,c=F.randomId(),$=k(()=>F.isNil(r.dense)?s.screen.gt.sm:r.dense);function d(V){return!(V.readonly||V.derived)}function h(V,C){const{eClass:I}=V.$;if(!I)return;const j={};return F.forEach(I.eAllStructuralFeatures,L=>{if(L.derived){if(r.showDerived===!1)return;F.isFunction(r.showDerived)||r.showDerived}const J=new _o(L);L.derived&&(J.readonly=!0),!J.disable&&(L.$.isKindOf("ecore.EReference")&&(J.type="reference"),j[L.name]=J)}),j}const S=le(null),b=k(()=>S.value?F.every(S.value.getValidationComponents(),C=>!C.hasError):!1),v=Xt({fields:null,hasChanges:k(()=>{const V=v,{modifier:C}=V;return F.isEmpty(C)?!1:(r.commitMode==="immediate"?b.value&&u("update:modelValue",{value:r.value,modifier:C}):b.value&&u("update",{value:r.value,modifier:C}),!0)}),initialValues:{},isValid:b,modifier:k(()=>{const V=v;return V.node.$.diff(V.values)}),node:null,props:{...a,autofocus:!0,dense:$,disabled:r.disabled===!0?!0:void 0,value:null},reset(){F.forIn(v.fields,(V,C)=>{const I=v.initialValues[C];v.values[C]=I}),v.resetValidation()},resetValidation(){S.value&&S.value.resetValidation()},setInitialValues(V){const C={},I={};return F.forIn(v.fields,(j,L)=>{d(j);const J=V[L];F.isNil(J)?(C[L]=null,I[L]=null):(C[L]=J,I[L]=J)}),v.node=V,v.ele=V,v.initialValues=C,v.values=I,v.values},values:{},async validate(){We(async()=>{var C;await((C=S.value)==null?void 0:C.validate())||F.find(S.value.getValidationComponents(),{hasError:!0}).focus()})},validationRules:[]});Be(r.value,function(V){var I,j,L;if(((I=v.node)==null?void 0:I.id)===V.id)return;let C;if(Bt.isNode(r.value)?C=r.value:(j=r.value)!=null&&j.id&&(C=o.get(r.value.id)),!C)if((L=r.value)!=null&&L.__typename)C=o.construct(r.value);else return y();v.fields=h(C),v.setInitialValues(C),v.validate(),m&&(v.meta=k(m(v)))},{immediate:!0});function y(){v.fields=[],v.initialValues={},v.node=null,v.values={}}function p(V){return v.node.$.eClass.getEStructuralFeature(V)}function w(V,C){var I;return!!(r.readonly&&F.isNil(v.values[C])||v.meta&&((I=v.meta[C])==null?void 0:I.isHidden)===!0)}function z(V,C){if(r.readonly)return!1;if(V==="cancel"){if(!o.get(r.value.id))return!0}else{if(V==="remove")return!!o.get(r.value.id);if(V==="restore")return v.hasChanges.value}}function x(){o.get(r.value.id)&&v.node.$.remove(),u("update:modelValue",null),u("removed",v.node)}function g(){debugger}function N(){const{node:V,modifier:C}=v;function I(j){if(j||(j=v.node),!!o.get(j.id))v.setInitialValues(j);else{const J=o.createNode({data:j.$.node});v.setInitialValues(J)}}if(a.submit)u("submit",{node:V,modifier:C,done:I});else{const j=C.apply();I(j)}}function ne(){}return sl(()=>{v.validate()}),(V,C)=>(R(),oe(ga,Te({style:{"min-width":$.value?"400px":"auto"},class:"obiwan-data-form d-flex-column",autocapitalize:"off",autofocus:"",greedy:""},v.props,{modelValue:v.props.value,"onUpdate:modelValue":C[0]||(C[0]=I=>v.props.value=I),ref_key:"formRef",ref:S,onReset:ne,onKeydown:C[1]||(C[1]=ca(cn(()=>{},["prevent"]),["enter"])),onSubmit:cn(N,["prevent"])}),{default:K(()=>[Ne("div",{class:Dt(["obiwan-data-form-fields flex-grow-1",{"obiwan-data-form-fields__dense":$.value}])},[qe(V.$slots,"prepend-fields",Fe(Oe({form:v}))),(R(!0),Ye(Tt,null,Jt(v.fields,(I,j)=>(R(),Ye(Tt,null,[I.type==="reference"&&w(I,j)!==!0?(R(),oe(wo,{class:"q-mt-md",dense:$.value,feature:j,key:W(c)+"__reference__"+j,readonly:I.readonly,keyClass:"q-field__label no-pointer-events",source:v.node},null,8,["dense","feature","readonly","source"])):w(I,j)!==!0?(R(),oe(mo,{class:Dt(I.class),style:_n(I.style),dense:$.value,key:W(c)+"__attribute__"+j,feature:p(j),field:I,initialValue:v.initialValues[j],name:j,modelValue:v.values[j],"onUpdate:modelValue":L=>v.values[j]=L},null,8,["class","style","dense","feature","field","initialValue","name","modelValue","onUpdate:modelValue"])):xe("",!0)],64))),256)),qe(V.$slots,"append-fields",Fe(Oe({form:v})))],2),Ne("div",ko,[qe(V.$slots,"actions",{},()=>[qe(V.$slots,"prepend-buttons",Fe(Oe({form:v}))),Z(rn),qe(V.$slots,"default",Fe(Oe({form:v})),()=>[z("remove")?(R(),oe(Xe,{key:0,type:"delete",onClick:x})):xe("",!0),z("restore")?(R(),oe(Xe,{key:1,class:"q-ml-sm",label:"reset",type:"reset",onClick:g})):xe("",!0),Z(Xe,{class:"q-ml-sm",disabled:!b.value||!v.hasChanges,type:"submit"},null,8,["disabled"])]),qe(V.$slots,"append-buttons",Fe(Oe({form:v})))])])]),_:3},16,["style","modelValue"]))}};function $n({emit:t,source:n,key:u}){let a,s=le(null),o=!1;return k({get(){const m=n[u];return o?a!==m&&(s.value=a=m):(a=m,s.value=m===void 0?null:m,o=!0),s.value},set(m){s.value=m,t&&t(`update:${u}`,m)}})}const Do={class:"d-flex items-center"},Mo={key:0,class:"flex-grow-1 ellipsis"},xo={class:"text-h6 ellipsis"},Co={key:1,class:"text-subtitle2"},Vo={class:"w-100 d-flex items-center"},qo=["onClick","onDblclick"],$o={__name:"OList",props:{dense:{type:Boolean,required:!1,default:null},disabledKey:[Function,String],filter:[Function,String],filterable:{type:Boolean,default:!0},filterKey:[Function,String],itemKey:{type:[Function,String],meta:{description:"The property name of each item object that holds a unique id"}},labelKey:{type:[Function,String]},items:{type:Array,default(){return[]}},orderBy:{type:[Array,Function,String],default:"displayName ASC, name ASC, id ASC"},readonly:Boolean,sortKeysBy:{type:[Array,Function,String],default:"displayName, name, id"},selected:null,subtitle:String,ticked:Array,title:String,ripple:{type:Boolean,default:!1}},emits:["click","dblclick","update:selected"],setup(t,{emit:n}){const u=Gt(),a=Mt();je("bus");const s=n;en(),tn();const o=fn();je("store");const m=t,r=`domId_${F.randomId()}`;le("");const c=$n({emit:s,source:m,key:"selected"});$n({emit:s,source:m,key:"filter"});const $=k(()=>{const w={props:{flat:!0}};return u.card&&F.merge(w.props,u.card),w}),d=k(()=>F.isNil(m.dense)?a.screen.gt.sm:m.dense);function h(w){return m.itemKey?F.isString(w)?`${r}_${w[m.itemKey]}`:`${r}_${m.itemKey(w)}`:`${r}_${(w==null?void 0:w.id)||w}`}function S(w){return m.labelKey?F.isString(w)?w[m.itemKey]:m.labelKey(w):typeof w=="object"&&w!==null?w.displayName||w.title||w.label||w.name||w.id:w}function b(w){return m.disabledKey?F.isString(w)?w[m.disabledKey]:m.disabledKey(w):!1}function v(w){return c.value?h(c.value)===h(w):!1}function y(w,z){s("dblclick",w,z)}function p(w,z){b(w)||(c.value===w?c.value=null:c.value=w,s("click",w,z))}return(w,z)=>(R(),oe(kn,Fe(Oe($.value.props)),{default:K(()=>[t.title||t.subtitle||W(o).header?(R(),oe(Ft,{key:0},{default:K(()=>[Ne("div",Do,[qe(w.$slots,"before-header",Fe(Oe({selected:W(c)})),void 0,!0),qe(w.$slots,"header",Fe(Oe({selected:W(c)})),()=>[t.title?(R(),Ye("div",Mo,[Ne("span",xo,Qe(t.title),1)])):xe("",!0),t.subtitle?(R(),Ye("div",Co,Qe(t.subtitle),1)):xe("",!0)],!0),qe(w.$slots,"after-header",Fe(Oe({selected:W(c)})),void 0,!0)])]),_:3})):xe("",!0),Z(Ft,{class:"q-py-none"},{default:K(()=>[Z(En,{class:Dt({"obiwan-list":!d.value,"obiwan-list--dense":d.value}),dense:d.value},{default:K(()=>[qe(w.$slots,"before-items",Fe(Oe({items:t.items,selected:W(c)})),void 0,!0),(R(!0),Ye(Tt,null,Jt(t.items,x=>st((R(),oe(At,{clickable:"",disable:b(x),key:`${r}_item_${h(x)}`},{default:K(()=>[Z(Ot,null,{default:K(()=>[Ne("div",Vo,[qe(w.$slots,"before",Fe(Oe({item:x,selected:v(x)})),void 0,!0),Ne("div",{class:"flex-grow-1 ellipsis",onClick:g=>p(x,g),onDblclick:g=>y(x,g)},[Ne("span",{class:Dt({"q-item--selected":v(x)})},[qe(w.$slots,"default",Fe(Oe({item:x,selected:v(x)})),()=>[ht(Qe(S(x)),1)],!0)],2)],40,qo),qe(w.$slots,"after",Fe(Oe({item:x,selected:v(x)})),void 0,!0)])]),_:2},1024)]),_:2},1032,["disable"])),[[ml,t.ripple]])),128)),qe(w.$slots,"after-items",Fe(Oe({items:t.items,selected:W(c)})),void 0,!0)]),_:3},8,["class","dense"])]),_:3}),qe(w.$slots,"append",{},void 0,!0)]),_:3},16))}};var Ol=Tn($o,[["__scopeId","data-v-1de1be54"]]);const Eo={class:"q-ml-md float-left d-flex items-center"},Io={key:1},Fo={__name:"ListEditor",props:{dense:{type:Boolean,required:!1,default:null},feature:Object,source:Object,title:[Boolean,String],value:Array},emits:["edit:reference","set:reference","unset:reference"],setup(t,{emit:n}){Gt();const u=Mt();je("bus"),`${F.randomId()}`;const a=n;en(),tn(),fn();const s=je("store"),o=je("onEditReference"),m=je("onSetReference"),r=t,c=k(()=>F.isNil(r.dense)?u.screen.gt.sm:r.dense),$=k(()=>{if(r.title!==!1)return`Edit ${d.value.getDisplayName()}`}),d=k(()=>{var y;const v={};return r.value instanceof Yt?v.value=r.value:r.source&&((y=r.feature)==null?void 0:y.many)&&(v.feature=r.feature,v.source=r.source,v.value=r.source[r.feature.name]||[]),Ln({on:{edit(p){debugger;a("edit:reference",p)},set(p){debugger;a("set:reference",p)}},props:v,store:s})});function h(v,y){debugger;const{feature:p,source:w}=d.value;o({data:v,feature:p,source:w})}function S(v,y){debugger;const{feature:p,source:w}=d.value;m({feature:p,source:w,targetType:v},y)}function b(v,y){debugger;d.value.unset(v)}return(v,y)=>(R(),Ye(Tt,null,[d.value.hasData?(R(),oe(Ol,{key:0,class:"obiwan-list-editor",title:$.value,items:d.value.value,onDblclick:h},{"after-header":K(()=>[d.value.canSet?(R(),oe(qn,{key:0,icon:"mdi-plus",dense:c.value,feature:d.value.feature,round:!0,tooltip:d.value.getTooltip("set"),onClick:y[0]||(y[0]=(p,w)=>S(w,p))},null,8,["dense","feature","tooltip"])):xe("",!0)]),default:K(({item:p})=>[ht(Qe(W(Bn)(p)),1)]),after:K(({item:p,selected:w})=>[Ne("div",Eo,[w&&d.value.canUnset?(R(),oe(Xe,{key:0,type:"delete",icon:"",onClick:z=>b(p)},null,8,["onClick"])):xe("",!0),w&&d.value.canEdit?(R(),oe(Xe,{key:1,type:"edit",icon:"",onClick:z=>h(p,z)},null,8,["onClick"])):xe("",!0)])]),_:1},8,["title","items"])):(R(),Ye("div",Io," No links to show ")),d.value.canSet?(R(),oe(qn,{key:2,class:"absolute-bottom-right q-mr-md q-mb-md",icon:"mdi-plus",fab:!0,dense:c.value,feature:d.value.feature,round:!0,tooltip:d.value.getTooltip("set"),onClick:y[1]||(y[1]=(p,w)=>S(w,p))},null,8,["dense","feature","tooltip"])):xe("",!0)],64))}};var Oo=Tn(Fo,[["__scopeId","data-v-4cdbc9a6"]]);const Ao={__name:"SelectLink",props:{dense:{type:Boolean,required:!1,default:null},feature:[Object,String],filterKey:String,readonly:Boolean,selected:null,source:[Object,String],value:[Array,Object,String]},emits:["update:modelValue"],setup(t,{emit:n}){Gt();const u=Mt();je("bus"),`${F.randomId()}`;const a=n;en();const s=tn();fn();const o=je("store"),m=t;k(()=>F.isNil(m.dense)?u.screen.gt.sm:m.dense);const r=Ln({props:m,router:s,store:o}),c=$n({emit:a,source:m,key:"selected"}),$=k(()=>r.getAllowedTargets());return(d,h)=>(R(),oe(Ol,{class:"obiwan-select-link",items:$.value,selected:W(c),"onUpdate:selected":h[0]||(h[0]=S=>it(c)?c.value=S:null)},{default:K(({item:S})=>[ht(Qe(W(Bn)(S)),1)]),_:1},8,["items","selected"]))}};const Ho={class:"d-flex items-center"},To={key:1,class:"text-h6 ellipsis"},Bo={key:3},Yo={class:"text-h6 ellipsis"},No=1e3,jo={__name:"NodeEditor",props:{__typename:String,dense:{type:Boolean,default:null},editRoute:[Object,String],onError:{type:Function},value:Object},emits:["update:modelValue","close"],setup(t,{emit:n}){const u=Mt(),a=`domId_${F.randomId()}`,s=n,o=en(),m=tn(),r=je("store"),c=t;let $;c.editRoute&&($={edit(V){debugger;let C=w(V);m.push(C,params)}}),un("onEditReference",bo.bind({$route:o,$router:m,$store:r,on:$})),un("onSetReference",ol.bind({$route:o,$router:m,$store:r,on:$}));const d=Xt({revealStyle:{height:"0px"},on:{beforeEnter(){d.revealStyle},enter(){d.revealStyle},afterEnter(){d.revealStyle.height="calc(100% - 160px)"},beforeLeave(){d.revealStyle},leave(){d.revealStyle},afterLeave(){d.revealStyle.height="0px"}},feature:null,reveal:!1,selected:null,source:null,value:null,close(){this.feature=null,this.selected=null,this.source=null,this.value=null,this.reveal=!1},set(V){const C=ol.call({$route:o,$router:m,$store:r,on:$},{feature:this.feature,source:this.source,target:this.selected});return this.close(),C},show({feature:V,source:C,value:I}){debugger;this.feature=V||null,this.selected=null,this.source=C||null,this.value=I||null,this.reveal=!0}});un("selectLink",d);const h=Xt({is:null,props:null});k(()=>F.isNil(c.dense)?u.screen.gt.sm:c.dense);const S=le(!1),b=k(()=>{var V;if(((V=u.screen)==null?void 0:V.width)>=600)return S.value?{minWidth:"calc(100% - 48px)",minHeight:"calc(100% - 48px)"}:{minWidth:"600px"}}),v=k(function(){const{is:V,props:C}=h;if(!!C){if(V==="NodeEditor"){const I=r.get(C.value.id)||r.construct(C.value);return`Edit { ${I.$.getDisplayName()}:${I.$.eClass.ns} }`}else if(V==="ListEditor"){const{feature:I,source:j}=C;return`Edit { ${j.$.getDisplayName()}:${j.$.eClass.ns} }.${I.name}`}}}),y=Xt({selected:"dataForm",selectedView:null,components:k(()=>{var I,j;const{is:V,props:C}=h;if(V==="NodeEditor"){const L=r.getType((I=C==null?void 0:C.value)==null?void 0:I.__typename);if(!L)return;const J=L.components||((j=L.extensions)==null?void 0:j.components);return J?{data:J,index:F.keyBy(J,se=>se.ns||se.name)}:void 0}}),select(V){debugger;const{is:C,ns:I,name:j,style:L}=V;y.selected=I||j;let J;F.isFunction(V.props)?J=V.props(h.props):V.props!==void 0?J=F.merge({...h.props},V.props):J=h.props;const se={is:C,props:J};V.class&&(se.class=V.class),L&&(se.style=L),F.get(V,"extensions.editor.props.maximize")&&(S.value=!0),y.selectedView=da(se)}});function p(V){var C;if(V==="maximize")return((C=u.screen)==null?void 0:C.width)>=No}function w(V){let C=F.isFunction(c.editRoute)?c.editRoute(V):c.editRoute;return F.isString(C)&&(C={path:nextRoute,params:V}),C}function z(){S.value=!S.value}let x={};fa(()=>{const V=r.getRootClasses();x=F.keyBy(V,"ns")});function g(V){const{__typename:C,fragment:I,id:j}=V,L=r.get(j);return I?!!L:L||x[C]}function N(V){return g(V)?!0:(c.onError&&c.onError({message:"Node not editable",router:m,route:o,store:r,data:V}),!1)}function ne(V){let{storeId:C,fragment:I}=V.params;const[j,L]=atob(C).split(":");if(!N({__typename:j,fragment:I,id:L}))return;let se,ke;if(I){const ve=F.isArray(I)?I:I.split("/");if(ve.length){let De=F.last(ve),ye=ve[ve.length-2];if(ve.length%2===0){se="NodeEditor";const[Me,Ae]=atob(De).split(":");ke={value:{__typename:Me,id:Ae}}}else{se="ListEditor";const Me=ye;ye=De;const Ae=Me?atob(Me).split(":")[1]:L,Ke=r.get(Ae);ke={feature:Ke.$.eClass.getEStructuralFeature(ye),source:Ke}}}else se="NodeEditor",ke={value:{__typename:j,id:L}}}else se="NodeEditor",ke={value:{__typename:j,id:L}};h.is!==se?(h.is=se,h.props=ke):F.merge(h.props,ke)}if(c.value){let V;Be(c,()=>{c.value!==V&&(h.is="NodeEditor",h.props={value:c.value},V=c.value)},{immediate:!0})}else Be(o,()=>{var V;(V=o.params)!=null&&V.storeId&&ne(o)},{immediate:!0});return(V,C)=>(R(),oe(kn,{class:"obiwan-node-editor d-flex-column",style:_n(b.value)},{default:K(()=>[Z(Ft,{class:"flex-grow-0"},{default:K(()=>[Ne("div",Ho,[y.components?(R(),oe(Pe,{key:0,color:"primary",dense:"",flat:"",icon:"mdi-pencil-box-multiple-outline"},{default:K(()=>[Z(dn,null,{default:K(()=>[Z(En,{style:{"min-width":"100px"}},{default:K(()=>[st((R(),oe(At,{clickable:"",onClick:C[0]||(C[0]=I=>y.selected="dataForm")},{default:K(()=>[Z(Ot,null,{default:K(()=>[ht("Data Form")]),_:1})]),_:1})),[[_t]]),st((R(),oe(At,{clickable:"",disable:"",onClick:C[1]||(C[1]=I=>y.selected="jsonEditor")},{default:K(()=>[Z(Ot,null,{default:K(()=>[ht("JSON Editor")]),_:1})]),_:1})),[[_t]]),(R(!0),Ye(Tt,null,Jt(y.components.data,I=>st((R(),oe(At,{key:`${a}_views_menuItem_${I.id}`,clickable:"",onClick:j=>y.select(I)},{default:K(()=>[Z(Ot,null,{default:K(()=>[ht(Qe(W(F).startCase(I.name)),1)]),_:2},1024)]),_:2},1032,["onClick"])),[[_t]])),128))]),_:1})]),_:1})]),_:1})):xe("",!0),v.value?(R(),Ye("div",To,[Ne("span",null,Qe(v.value),1)])):xe("",!0),Z(rn),p("maximize")?(R(),oe(Xe,{key:2,dense:"",icon:"",tooltip:"",type:S.value?"minimize":"maximize",size:"md",onClick:z},null,8,["type"])):xe("",!0),st(Z(Xe,{dense:"",icon:"",tooltip:"",type:"close",size:"md",onClick:C[2]||(C[2]=I=>s("close"))},null,512),[[_t]])])]),_:1}),Z(Ft,{class:"flex-grow-1 overflow-y-auto q-pt-none"},{default:K(()=>[h.is==="NodeEditor"&&y.components?(R(),oe(ma,{key:0,class:"h-100",modelValue:y.selected,"onUpdate:modelValue":C[4]||(C[4]=I=>y.selected=I),animated:""},{default:K(()=>[Z(Xn,{class:"q-pt-none",name:"dataForm"},{default:K(()=>[Z(ul,Te(h.props,{onRemoved:C[3]||(C[3]=I=>s("close"))}),null,16)]),_:1}),(R(!0),Ye(Tt,null,Jt(y.components.data,I=>(R(),oe(Xn,{class:"q-pa-none",key:`${a}_views_tabPanel_${I.id}`,name:I.ns||I.name},{default:K(()=>[(R(),oe(_l(y.selectedView.is),Te({class:y.selectedView.class,style:y.selectedView.style},y.selectedView.props),null,16,["class","style"]))]),_:2},1032,["name"]))),128))]),_:1},8,["modelValue"])):h.is==="NodeEditor"?(R(),oe(ul,Te({key:1},h.props,{onRemoved:C[5]||(C[5]=I=>s("close"))}),null,16)):h.is==="ListEditor"?(R(),oe(Oo,Te({key:2,class:"h-100"},h.props,{title:!1}),null,16)):h.is==="NoData"?(R(),Ye("div",Bo,Qe(h.props.message),1)):xe("",!0)]),_:1}),Z(It,wl(d.on),{default:K(()=>[d.reveal?(R(),Ye("div",{key:0,class:"obiwan-node-editor-reveal absolute-bottom d-flex justify-center",style:_n([{"max-height":"calc(100% - 160px)",overflow:"hidden"},d.revealStyle])},[qe(V.$slots,"reveal",{},()=>[Z(kn,{class:"bg-light-blue-1 h-100 w-100 d-flex-column"},{default:K(()=>[Z(Ft,{class:"d-flex flex-grow-0"},{default:K(()=>[Ne("div",Yo,[Ne("span",null,Qe(v.value.replace("Edit","Set"))+"."+Qe(d.feature.name),1)]),Z(rn),Z(Xe,{dense:"",icon:"",tooltip:"",type:"close",size:"md",onClick:C[6]||(C[6]=I=>d.close(I))})]),_:1}),Z(Ft,{class:"flex-grow-1 overflow-auto q-pb-none"},{default:K(()=>[qe(V.$slots,"reveal-content",{},()=>[Z(Ao,{class:"bg-light-blue-1",feature:d.feature,selected:d.selected,"onUpdate:selected":C[7]||(C[7]=I=>d.selected=I),source:d.source,value:d.value},null,8,["feature","selected","source","value"])],!0)]),_:3}),Z(Ft,{class:"flex-grow-0 d-flex"},{default:K(()=>[Z(rn),Z(Pe,{color:"primary",disable:!d.selected,flat:"",label:"Create Link",onClick:C[8]||(C[8]=I=>d.set(I))},null,8,["disable"])]),_:1})]),_:3})],!0)],4)):xe("",!0)]),_:3},16)]),_:3},8,["style"]))}};var Qo=Tn(jo,[["__scopeId","data-v-ba42583c"]]);export{Qo as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
