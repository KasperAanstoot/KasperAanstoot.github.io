var mr=Object.defineProperty;var hr=(r,e,t)=>e in r?mr(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var ke=(r,e,t)=>(hr(r,typeof e!="symbol"?e+"":e,t),t);import{p as Fe,c as lt,q as Bt,t as yr}from"./index.4634898b.js";import{_ as o}from"./index.55edfe91.js";class We extends Error{constructor(e){super(e),this.name="NotFoundError"}}class ie extends Error{constructor(e){super(e),this.name="NotImplementedError"}}class oe extends Error{constructor(e){super(e),this.name="ValidationError"}}class G extends oe{constructor(e){super(`required argument '${e}' is missing`),this.name="RequiredArgumentError"}}const _r=2147483647,Er=-2147483648,gr=Number.MAX_SAFE_INTEGER,$r=Number.MIN_SAFE_INTEGER,Z=Symbol("missing"),vt=Object.freeze(new Error("mingo: cycle detected while processing object/array")),wr=Object.getPrototypeOf([]),Nt=Object.getPrototypeOf({}),Cr="[object Object]",Tr=/^\[object ([a-zA-Z0-9]+)\]$/;class nt{}class st{}const ee=r=>r===null?nt:r===void 0?st:r.constructor,Pe=r=>{const e=br(r);let t=0,n=e.length;for(;n;)t=(t<<5)-t^e.charCodeAt(--n);return t>>>0},qt=new Set(["null","undefined","boolean","number","string","date","regexp"]),ft=new Set([st,nt,Boolean,String,Number]),ye=r=>r.toString(),F=r=>`${ee(r).name}[${r.toString()}]`,qe=new Map([[Number,ye],[Boolean,ye],[RegExp,ye],[Function,ye],[Symbol,ye],[BigInt,r=>"0x"+r.toString(16)],[Date,r=>r.toISOString()],[String,JSON.stringify],[nt,r=>"null"],[st,r=>"undefined"],[Int8Array,F],[Uint8Array,F],[Uint8ClampedArray,F],[Int16Array,F],[Uint16Array,F],[Int32Array,F],[Uint32Array,F],[Float32Array,F],[Float64Array,F],[BigInt64Array,F],[BigUint64Array,F]]),xr={null:0,undefined:0,number:1,string:2,object:3,array:4,boolean:5,date:6,regexp:7,function:8},L=(r,e)=>{r===Z&&(r=void 0),e===Z&&(e=void 0);const[t,n]=[r,e].map(s=>xr[ge(s).toLowerCase()]);return t!==n?t-n:t===1||t===2||t===6?r<e?-1:r>e?1:0:te(r,e)?0:r<e?-1:r>e?1:0};function q(r,e){if(!r)throw new Error(e)}const Or=r=>{const e=Object.getPrototypeOf(ee(r));return e&&e.name==="TypedArray"},pt=r=>{if(ft.has(ee(r)))return r;const e=new Set,t=n=>{if(e.has(n))throw vt;const s=ee(n);if(ft.has(s))return n;try{if(B(n))return e.add(n),n.map(t);if(A(n)){e.add(n);const i={};for(const a in n)i[a]=t(n[a]);return i}}finally{e.delete(n)}return s===Date||s===RegExp||Or(n)?new s(n):n};return t(r)},ge=r=>Tr.exec(Object.prototype.toString.call(r))[1],ze=r=>typeof r=="boolean",M=r=>typeof r=="string",k=r=>!isNaN(r)&&typeof r=="number",B=Array.isArray,A=r=>{if(!r)return!1;const e=Object.getPrototypeOf(r);return(e===Nt||e===null)&&Cr===Object.prototype.toString.call(r)},Le=r=>r===Object(r),dt=r=>r instanceof Date,Be=r=>r instanceof RegExp,we=r=>typeof r=="function",v=r=>r==null,ae=(r,e)=>r.includes(e),It=(r,e)=>!ae(r,e),ue=(r,e=!0)=>!!r||e&&r==="",le=r=>v(r)||M(r)&&!r||r instanceof Array&&r.length===0||A(r)&&Object.keys(r).length===0,mt=r=>r===Z,fe=r=>r instanceof Array?r:[r],K=(r,e)=>!!r&&Object.prototype.hasOwnProperty.call(r,e),Sr=(r,e)=>A(r)&&A(e)||B(r)&&B(e);function Ge(r,e,t){if(t=t||{flatten:!1},mt(r)||v(r))return e;if(mt(e)||v(e))return r;if(!Sr(r,e)){if(t.skipValidation)return e||r;throw Error("mismatched types. must both be array or object")}if(t.skipValidation=!0,B(r)){const n=r,s=e;if(t.flatten){let i=0,a=0;for(;i<n.length&&a<s.length;)n[i]=Ge(n[i++],s[a++],t);for(;a<s.length;)n.push(e[a++])}else Ce(n,s)}else for(const n in e)r[n]=Ge(r[n],e[n],t);return r}function ht(r,e=Pe){const t=new Map;return r.forEach((n,s)=>{const i=Pt(n,e);t.has(i)?t.get(i).some(a=>te(r[a],n))||t.get(i).push(s):t.set(i,[s])}),t}function Dt(r,e=Pe){if(r.some(u=>u.length==0))return[];if(r.length===1)return Array.from(r);const t=Rr(r.map((u,c)=>[c,u.length]),u=>u[1]),n=r[t[0][0]],s=ht(n,e),i=new Map,a=new Array;return s.forEach((u,c)=>{const l=u.map(m=>n[m]),f=l.map(m=>0),p=l.map(m=>[t[0][0],0]);let y=!1;for(let m=1;m<r.length;m++){const[h,$]=t[m],d=r[h];if(i.has(m)||i.set(m,ht(d)),i.get(m).has(c)){const E=i.get(m).get(c).map(g=>d[g]);y=l.map((g,C)=>E.some((w,S)=>{const j=f[C];return te(g,w)&&(f[C]++,h<p[C][0]&&(p[C]=[h,i.get(m).get(c)[S]])),j<f[C]})).some(Boolean)}if(!y)return}y&&Ce(a,f.map((m,h)=>m===r.length-1?[l[h],p[h]]:Z).filter(m=>m!==Z))}),a.sort((u,c)=>{const[l,[f,p]]=u,[y,[m,h]]=c,$=L(f,m);return $!==0?$:L(p,h)}).map(u=>u[0])}function Ft(r,e=0){const t=new Array;function n(s,i){for(let a=0,u=s.length;a<u;a++)B(s[a])&&(i>0||i<0)?n(s[a],Math.max(-1,i-1)):t.push(s[a])}return n(r,e),t}const Ar=r=>{let[e,t]=[Object.getPrototypeOf(r),Object.getOwnPropertyNames(r)],n=e;for(;!t.length&&e!==Nt&&e!==wr;)n=e,t=Object.getOwnPropertyNames(e),e=Object.getPrototypeOf(e);const s={};return t.forEach(i=>s[i]=r[i]),[s,n]};function te(r,e){const t=[[r,e]];for(;t.length>0;){if([r,e]=t.pop(),r===e)continue;const n=ee(r);if(n!==ee(e)||we(r))return!1;if(qe.has(n)){const s=qe.get(n);if(s(r)!==s(e))return!1;continue}if(n===Array||n===Object){const s=Object.keys(r),i=Object.keys(e);if(s.length!==i.length||new Set(s.concat(i)).size!=s.length)return!1;for(const a of s)t.push([r[a],e[a]]);continue}return!1}return!t.length}function br(r){const e=new Set,t=n=>{const s=ee(n);if(qe.has(s))return qe.get(s)(n);const i=s===Object?"":s.name;if(we(n.toJSON))return`${i}(${JSON.stringify(n)})`;if(e.has(n))throw vt;e.add(n);try{if(s===Array)return"["+n.map(t).join(",")+"]";if(s!==Object){const[u,c]=Ar(n);if(B(n))return`${i}${t([...n,u])}`;n=u}const a=Object.keys(n);return a.sort(),`${i}{`+a.map(u=>`${u}:${t(n[u])}`).join(",")+"}"}finally{e.delete(n)}};return t(r)}function Pt(r,e){return e=e||Pe,v(r)?null:e(r).toString()}function Rr(r,e,t=L){if(le(r))return r;const n=new Array,s=new Array;for(let i=0;i<r.length;i++){const a=r[i],u=e(a,i);v(u)?s.push(a):n.push([u,a])}return n.sort((i,a)=>t(i[0],a[0])),Ce(s,n.map(i=>i[1]))}function Br(r,e,t=Pe){if(r.length<1)return new Map;const n=new Map,s=new Map;for(let i=0;i<r.length;i++){const a=r[i],u=e(a,i),c=Pt(u,t);if(c===null)s.has(null)?s.get(null).push(a):s.set(null,[a]);else{const l=n.has(c)?n.get(c).find(f=>te(f,u)):null;v(l)?(s.set(u,[a]),n.has(c)?n.get(c).push(u):n.set(c,[u])):s.get(l).push(a)}}return s}const Ke=5e4;function Ce(r,...e){return r instanceof Array?e.reduce((t,n)=>{let s=Math.ceil(n.length/Ke),i=0;for(;s-- >0;)Array.prototype.push.apply(t,n.slice(i,i+Ke)),i+=Ke;return t},r):e.filter(Le).reduce((t,n)=>(Object.assign(t,n),t),r)}function Ye(r,e){return Le(r)?r[e]:void 0}function vr(r,e){if(e<1)return r;for(;e--&&r.length===1;)r=r[0];return r}function Te(r,e,t){let n=0;function s(a,u){let c=a;for(let l=0;l<u.length;l++){const f=u[l];if(/^\d+$/.exec(f)===null&&c instanceof Array){if(l===0&&n>0)break;n+=1;const y=u.slice(l);c=c.reduce((m,h)=>{const $=s(h,y);return $!==void 0&&m.push($),m},[]);break}else c=Ye(c,f);if(c===void 0)break}return c}const i=qt.has(ge(r).toLowerCase())?r:s(r,e.split("."));return i instanceof Array&&(t==null?void 0:t.unwrapArray)?vr(i,n):i}function ve(r,e,t){const n=e.split("."),s=n[0],i=n.slice(1).join("."),a=/^\d+$/.exec(s)!==null,u=n.length>1;let c,l;if(r instanceof Array)if(a)c=Ye(r,Number(s)),u&&(c=ve(c,i,t)),c=[c];else{c=[];for(const f of r)l=ve(f,e,t),t!=null&&t.preserveMissing?(l===void 0&&(l=Z),c.push(l)):l!==void 0&&c.push(l)}else{if(l=Ye(r,s),u&&(l=ve(l,i,t)),l===void 0)return;c=t!=null&&t.preserveKeys?Object.assign({},r):{},c[s]=l}return c}function Qe(r){if(r instanceof Array)for(let e=r.length-1;e>=0;e--)r[e]===Z?r.splice(e,1):Qe(r[e]);else if(A(r))for(const e in r)K(r,e)&&Qe(r[e])}const yt=/^\d+$/;function Ie(r,e,t,n){const s=e.split("."),i=s[0],a=s.slice(1).join(".");if(s.length===1)(A(r)||B(r)&&yt.test(i))&&t(r,i);else{(n==null?void 0:n.buildGraph)&&v(r[i])&&(r[i]={});const u=r[i];if(!u)return;const c=!!(s.length>1&&yt.test(s[1]));u instanceof Array&&(n==null?void 0:n.descendArray)&&!c?u.forEach(l=>Ie(l,a,t,n)):Ie(u,a,t,n)}}function Nr(r,e,t){Ie(r,e,(n,s)=>{n[s]=we(t)?t(n[s]):t},{buildGraph:!0})}function _t(r,e,t){Ie(r,e,(n,s)=>{if(n instanceof Array){if(/^\d+$/.test(s))n.splice(parseInt(s),1);else if(t&&t.descendArray)for(const i of n)A(i)&&delete i[s]}else A(n)&&delete n[s]},t)}const qr=/^\$[a-zA-Z0-9_]+$/;function pe(r){return qr.test(r)}function Lt(r){if(qt.has(ge(r).toLowerCase()))return Be(r)?{$regex:r}:{$eq:r};if(Le(r)){if(!Object.keys(r).some(pe))return{$eq:r};if(K(r,"$regex")){const t=Object.assign({},r);return t.$regex=new RegExp(r.$regex,r.$options),delete t.$options,t}}return r}var z;(function(r){r.CLONE_ALL="CLONE_ALL",r.CLONE_INPUT="CLONE_INPUT",r.CLONE_OUTPUT="CLONE_OUTPUT",r.CLONE_OFF="CLONE_OFF"})(z||(z={}));class Q{constructor(e,t,n,s=Date.now()){this._opts=e,this._root=t,this._local=n,this.timestamp=s,this.update(t,n)}static init(e,t,n){return e instanceof Q?new Q(e._opts,v(e.root)?t:e.root,Object.assign({},e.local,n)):new Q(e,t,n)}update(e,t){var n;return this._root=e,this._local=t&&Object.assign({},t,{variables:Object.assign({},(n=this._local)===null||n===void 0?void 0:n.variables,t==null?void 0:t.variables)}),this}getOptions(){return Object.freeze(Object.assign(Object.assign({},this._opts),{context:V.from(this._opts.context)}))}get root(){return this._root}get local(){return this._local}get idKey(){return this._opts.idKey}get collation(){var e;return(e=this._opts)===null||e===void 0?void 0:e.collation}get processingMode(){var e;return((e=this._opts)===null||e===void 0?void 0:e.processingMode)||z.CLONE_OFF}get useStrictMode(){var e;return(e=this._opts)===null||e===void 0?void 0:e.useStrictMode}get scriptEnabled(){var e;return(e=this._opts)===null||e===void 0?void 0:e.scriptEnabled}get useGlobalContext(){var e;return(e=this._opts)===null||e===void 0?void 0:e.useGlobalContext}get hashFunction(){var e;return(e=this._opts)===null||e===void 0?void 0:e.hashFunction}get collectionResolver(){var e;return(e=this._opts)===null||e===void 0?void 0:e.collectionResolver}get jsonSchemaValidator(){var e;return(e=this._opts)===null||e===void 0?void 0:e.jsonSchemaValidator}get variables(){var e;return(e=this._opts)===null||e===void 0?void 0:e.variables}get context(){var e;return(e=this._opts)===null||e===void 0?void 0:e.context}}function Mt(r){return r instanceof Q?r.getOptions():Object.freeze(Object.assign(Object.assign({idKey:"_id",scriptEnabled:!0,useStrictMode:!0,useGlobalContext:!0,processingMode:z.CLONE_OFF},r),{context:r!=null&&r.context?V.from(r==null?void 0:r.context):V.init({})}))}var T;(function(r){r.ACCUMULATOR="accumulator",r.EXPRESSION="expression",r.PIPELINE="pipeline",r.PROJECTION="projection",r.QUERY="query",r.WINDOW="window"})(T||(T={}));class V{constructor(e){this.operators={[T.ACCUMULATOR]:{},[T.EXPRESSION]:{},[T.PIPELINE]:{},[T.PROJECTION]:{},[T.QUERY]:{},[T.WINDOW]:{}};for(const[t,n]of Object.entries(e))this.addOperators(t,n)}static init(e={}){return new V(e)}static from(e){return new V(e.operators)}addOperators(e,t){for(const[n,s]of Object.entries(t))this.getOperator(e,n)||(this.operators[e][n]=s);return this}addAccumulatorOps(e){return this.addOperators(T.ACCUMULATOR,e)}addExpressionOps(e){return this.addOperators(T.EXPRESSION,e)}addQueryOps(e){return this.addOperators(T.QUERY,e)}addPipelineOps(e){return this.addOperators(T.PIPELINE,e)}addProjectionOps(e){return this.addOperators(T.PROJECTION,e)}addWindowOps(e){return this.addOperators(T.WINDOW,e)}getOperator(e,t){return e in this.operators&&this.operators[e][t]||null}}const J=V.init();function xe(r,e){for(const[t,n]of Object.entries(e)){q(we(n)&&pe(t),`'${t}' is not a valid operator`);const s=X(r,t,null);q(!s||n===s,`${t} already exists for '${r}' operators. Cannot change operator function once registered.`)}switch(r){case T.ACCUMULATOR:J.addAccumulatorOps(e);break;case T.EXPRESSION:J.addExpressionOps(e);break;case T.PIPELINE:J.addPipelineOps(e);break;case T.PROJECTION:J.addProjectionOps(e);break;case T.QUERY:J.addQueryOps(e);break;case T.WINDOW:J.addWindowOps(e);break}}function X(r,e,t){const{context:n,useGlobalContext:s}=t||{},i=n?n.getOperator(r,e):null;return!i&&s?J.getOperator(r,e):i}const Et={$$ROOT(r,e,t){return t.root},$$CURRENT(r,e,t){return r},$$REMOVE(r,e,t){},$$NOW(r,e,t){return new Date(t.timestamp)}},Xe={$$KEEP(r,e,t){return r},$$PRUNE(r,e,t){},$$DESCEND(r,e,t){if(!K(e,"$cond"))return r;let n;for(const[s,i]of Object.entries(r))if(Le(i)){if(i instanceof Array){const a=[];for(let u of i)A(u)&&(u=gt(u,e,t.update(u))),v(u)||a.push(u);n=a}else n=gt(i,e,t.update(i));v(n)?delete r[s]:r[s]=n}return r}};function b(r,e,t,n){var s;const i=Q.init(n,r);if(t=t||"",pe(t)){const a=X(T.EXPRESSION,t,n);if(a)return a(r,e,i);const u=X(T.ACCUMULATOR,t,n);if(u)return r instanceof Array||(r=b(r,e,null,i),e=null),q(r instanceof Array,`'${t}' target must be an array.`),u(r,e,i.update(null,i.local));throw new Error(`operator '${t}' is not registered`)}if(M(e)&&e.length>0&&e[0]==="$"){if(K(Xe,e))return e;let a=i.root;const u=e.split(".");if(K(Et,u[0]))a=Et[u[0]](r,null,i),e=e.slice(u[0].length+1);else if(u[0].slice(0,2)==="$$"){a=Object.assign({},i.variables,{this:r},(s=i.local)===null||s===void 0?void 0:s.variables);const c=u[0].slice(2);q(K(a,c),`Use of undefined variable: ${c}`),e=e.slice(2)}else e=e.slice(1);return e===""?a:Te(a,e)}if(B(e))return e.map(a=>b(r,a,null,i));if(A(e)){const a={};for(const[u,c]of Object.entries(e))if(a[u]=b(r,c,u,i),[T.EXPRESSION,T.ACCUMULATOR].some(l=>!!X(l,u,n)))return q(Object.keys(e).length===1,"Invalid aggregation expression '"+JSON.stringify(e)+"'"),a[u];return a}return e}function gt(r,e,t){const n=b(r,e,null,t);return K(Xe,n)?Xe[n](r,e,t):n}const Ir=(r,e,t)=>{const n=b(r,e,null,t);return ue(n,t.useStrictMode)&&n.every(s=>ue(s,t.useStrictMode))},Dr=(r,e,t)=>{const n=fe(e);if(n.length==0)return!1;if(n.length==1)return!b(r,n[0],null,t);throw"Expression $not takes exactly 1 argument"},Fr=(r,e,t)=>{const n=b(r,e,null,t),s=t.useStrictMode;return ue(n,s)&&n.some(i=>ue(i,s))};var jt=Object.freeze(Object.defineProperty({__proto__:null,$and:Ir,$not:Dr,$or:Fr},Symbol.toStringTag,{value:"Module"}));const Pr=(r,e,t)=>{const n=b(r,e,null,t);return n[0]>n[1]?1:n[0]<n[1]?-1:0};function ce(r){return r instanceof $t?r:new $t(r)}function Lr(...r){let e=0;return ce(()=>{for(;e<r.length;){const t=r[e].next();if(!t.done)return t;e++}return{done:!0}})}function Mr(r){return!!r&&typeof r=="object"&&(r==null?void 0:r.next)instanceof Function}function jr(r,e){const t=r.slice(e+1);r.splice(e),Array.prototype.push.apply(r,t)}const Ze=new Error;var P;(function(r){r[r.MAP=0]="MAP",r[r.FILTER=1]="FILTER",r[r.TAKE=2]="TAKE",r[r.DROP=3]="DROP"})(P||(P={}));function kr(r,e,t){let n=!1,s=-1,i=0;return function(a){try{e:for(;!n;){let u=r();s++;let c=-1;const l=e.length;let f=!1;for(;++c<l;){const p=e[c];switch(p.action){case P.MAP:u=p.func(u,s);break;case P.FILTER:if(!p.func(u,s))continue e;break;case P.TAKE:--p.count,p.count||(f=!0);break;case P.DROP:--p.count,p.count||jr(e,c);continue e;default:break e}}if(n=f,a)t[i++]=u;else return{value:u,done:!1}}}catch(u){if(u!==Ze)throw u}return n=!0,{done:n}}}class $t{constructor(e){this.iteratees=[],this.yieldedValues=[],this.isDone=!1;let t;if(e instanceof Function&&(e={next:e}),Mr(e)){const n=e;t=()=>{const s=n.next();if(s.done)throw Ze;return s.value}}else if(e instanceof Array){const n=e,s=n.length;let i=0;t=()=>{if(i<s)return n[i++];throw Ze}}else if(!(e instanceof Function))throw new Error("Lazy must be initialized with an array, generator, or function.");this.getNext=kr(t,this.iteratees,this.yieldedValues)}push(e,t){return typeof t=="function"?this.iteratees.push({action:e,func:t}):typeof t=="number"&&this.iteratees.push({action:e,count:t}),this}next(){return this.getNext()}map(e){return this.push(P.MAP,e)}filter(e){return this.push(P.FILTER,e)}take(e){return e>0?this.push(P.TAKE,e):this}drop(e){return e>0?this.push(P.DROP,e):this}transform(e){const t=this;let n;return ce(()=>(n||(n=ce(e(t.value()))),n.next()))}value(){return this.isDone||(this.isDone=this.getNext(!0).done),this.yieldedValues}each(e){for(;;){const t=this.next();if(t.done)break;if(e(t.value)===!1)return!1}return!0}reduce(e,t){let n=this.next();for(t===void 0&&!n.done&&(t=n.value,n=this.next());!n.done;)t=e(t,n.value),n=this.next();return t}size(){return this.reduce((e,t)=>++e,0)}[Symbol.iterator](){return this}}class zr{constructor(e,t){this.pipeline=e,this.options=Mt(t)}stream(e){let t=ce(e);const n=this.options.processingMode;(n==z.CLONE_ALL||n==z.CLONE_INPUT)&&t.map(pt);const s=new Array;if(!le(this.pipeline))for(const i of this.pipeline){const a=Object.keys(i),u=a[0],c=X(T.PIPELINE,u,this.options);q(a.length===1&&!!c,`invalid pipeline operator ${u}`),s.push(u),t=c(t,i[u],this.options)}return(n==z.CLONE_OUTPUT||n==z.CLONE_ALL&&!!Dt([["$group","$unwind"],s]).length)&&t.map(pt),t}run(e){return this.stream(e).value()}}class Kr{constructor(e,t,n,s){this.source=e,this.predicate=t,this.projection=n,this.options=s,this.operators=[],this.result=null,this.buffer=[]}fetch(){return this.result?this.result:(A(this.projection)&&this.operators.push({$project:this.projection}),this.result=ce(this.source).filter(this.predicate),this.operators.length>0&&(this.result=new zr(this.operators,this.options).stream(this.result)),this.result)}fetchAll(){const e=ce([...this.buffer]);return this.buffer=[],Lr(e,this.fetch())}all(){return this.fetchAll().value()}count(){return this.all().length}skip(e){return this.operators.push({$skip:e}),this}limit(e){return this.operators.push({$limit:e}),this}sort(e){return this.operators.push({$sort:e}),this}collation(e){return this.options=Object.assign(Object.assign({},this.options),{collation:e}),this}next(){if(this.buffer.length>0)return this.buffer.pop();const e=this.fetch().next();if(!e.done)return e.value}hasNext(){if(this.buffer.length>0)return!0;const e=this.fetch().next();return e.done?!1:(this.buffer.push(e.value),!0)}map(e){return this.all().map(e)}forEach(e){this.all().forEach(e)}[Symbol.iterator](){return this.fetchAll()}}class re{constructor(e,t){this.condition=e,this.options=Mt(t),this.compiled=[],this.compile()}compile(){q(A(this.condition),`query criteria must be an object: ${JSON.stringify(this.condition)}`);const e={};for(const[t,n]of Object.entries(this.condition)){if(t==="$where")Object.assign(e,{field:t,expr:n});else if(ae(["$and","$or","$nor","$expr","$jsonSchema"],t))this.processOperator(t,t,n);else{q(!pe(t),`unknown top level operator: ${t}`);for(const[s,i]of Object.entries(Lt(n)))this.processOperator(t,s,i)}e.field&&this.processOperator(e.field,e.field,e.expr)}}processOperator(e,t,n){const s=X(T.QUERY,t,this.options);if(!s)throw new Error(`unknown operator ${t}`);const i=s(e,n,this.options);this.compiled.push(i)}test(e){for(let t=0,n=this.compiled.length;t<n;t++)if(!this.compiled[t](e))return!1;return!0}find(e,t){return new Kr(e,n=>this.test(n),t||{},this.options)}remove(e){return e.reduce((t,n)=>(this.test(n)||t.push(n),t),[])}}function I(r){const e=(t,n,s)=>{const i={unwrapArray:!0},a=Math.max(1,t.split(".").length-1);return u=>{const c=Te(u,t,i);return r(c,n,Object.assign(Object.assign({},s),{depth:a}))}};return e.op="query",e}function de(r){return(e,t,n)=>{const s=b(e,t,null,n);return r(...s)}}function it(r,e,t){if(te(r,e)||v(r)&&v(e))return!0;if(r instanceof Array){const n=te.bind(null,e);return r.some(n)||Ft(r,t==null?void 0:t.depth).some(n)}return!1}function kt(r,e,t){return!it(r,e,t)}function zt(r,e,t){return v(r)?e.some(n=>n===null):Dt([fe(r),e],t==null?void 0:t.hashFunction).length>0}function Vr(r,e,t){return!zt(r,e,t)}function Kt(r,e,t){return Me(r,e,(n,s)=>L(n,s)<0)}function Vt(r,e,t){return Me(r,e,(n,s)=>L(n,s)<=0)}function Ut(r,e,t){return Me(r,e,(n,s)=>L(n,s)>0)}function Ht(r,e,t){return Me(r,e,(n,s)=>L(n,s)>=0)}function Ur(r,e,t){return fe(r).some(n=>e.length===2&&n%e[0]===e[1])}function Hr(r,e,t){const n=fe(r),s=i=>M(i)&&ue(e.exec(i),t==null?void 0:t.useStrictMode);return n.some(s)||Ft(n,1).some(s)}function Jr(r,e,t){return(e===!1||e===0)&&r===void 0||(e===!0||e===1)&&r!==void 0}function Wr(r,e,t){if(!B(r)||!B(e)||!r.length||!e.length)return!1;let n=!0;for(const s of e){if(!n)break;A(s)&&ae(Object.keys(s),"$elemMatch")?n=Jt(r,s.$elemMatch,t):s instanceof RegExp?n=r.some(i=>typeof i=="string"&&s.test(i)):n=r.some(i=>te(s,i))}return n}function Gr(r,e,t){return Array.isArray(r)&&r.length===e}function Yr(r){return pe(r)&&["$and","$or","$nor"].indexOf(r)===-1}function Jt(r,e,t){if(B(r)&&!le(r)){let n=a=>a,s=e;Object.keys(e).every(Yr)&&(s={temp:e},n=a=>({temp:a}));const i=new re(s,t);for(let a=0,u=r.length;a<u;a++)if(i.test(n(r[a])))return!0}return!1}const wt=r=>r===null,Ct=r=>k(r)&&r>=Er&&r<=_r&&r.toString().indexOf(".")===-1,Tt=r=>k(r)&&r>=$r&&r<=gr&&r.toString().indexOf(".")===-1,Qr={array:B,bool:ze,boolean:ze,date:dt,decimal:k,double:k,int:Ct,long:Tt,number:k,null:wt,object:A,regex:Be,regexp:Be,string:M,undefined:v,function:r=>{throw new Error("unsupported type key `function`.")},1:k,2:M,3:A,4:B,6:v,8:ze,9:dt,10:wt,11:Be,16:Ct,18:Tt,19:k};function xt(r,e,t){const n=Qr[e];return n?n(r):!1}function Xr(r,e,t){return Array.isArray(e)?e.findIndex(n=>xt(r,n))>=0:xt(r,e)}function Me(r,e,t){return fe(r).some(n=>ge(n)===ge(e)&&t(n,e))}const Zr=de(it),en=de(Ut),tn=de(Ht),rn=de(Kt),nn=de(Vt),sn=de(kt);var Wt=Object.freeze(Object.defineProperty({__proto__:null,$cmp:Pr,$eq:Zr,$gt:en,$gte:tn,$lt:rn,$lte:nn,$ne:sn},Symbol.toStringTag,{value:"Module"}));const Gt=(r,e,t)=>{if(le(e)||!A(e))return r;let n=L;const s=t.collation;return A(s)&&M(s.locale)&&(n=an(s)),r.transform(i=>{const a=Object.keys(e);for(const u of a.reverse()){const c=Br(i,f=>Te(f,u),t.hashFunction),l=Array.from(c.keys()).sort(n);e[u]===-1&&l.reverse(),i=[],l.reduce((f,p)=>Ce(f,c.get(p)),i)}return i})},on={1:"base",2:"accent",3:"variant"};function an(r){const e={sensitivity:on[r.strength||3],caseFirst:r.caseFirst==="off"?"false":r.caseFirst||"false",numeric:r.numericOrdering||!1,ignorePunctuation:r.alternate==="shifted"};(r.caseLevel||!1)===!0&&(e.sensitivity==="base"&&(e.sensitivity="case"),e.sensitivity==="accent"&&(e.sensitivity="variant"));const t=new Intl.Collator(r.locale,e);return(n,s)=>{if(!M(n)||!M(s))return L(n,s);const i=t.compare(n,s);return i<0?-1:i>0?1:0}}const Yt=(r,e,t)=>r.take(e),un=(r,e,t)=>{const n=b(r,e,null,t),s=n[0];let i=n[1],a=n[2];return v(a)?i<0?(i=Math.max(0,s.length+i),a=s.length-i+1):(a=i,i=0):(i<0&&(i=Math.max(0,s.length+i)),q(a>0,"Invalid argument for $slice operator. Limit must be a positive number"),a+=i),s.slice(i,a)},Ot=(r,e)=>{const t={};return r.split("").forEach((n,s)=>t[n]=e*(s+1)),t};Object.assign(Object.assign(Object.assign({},Ot("ABCDEFGHIKLM",1)),Ot("NOPQRSTUVWXY",-1)),{Z:0});const St={undefined:null,null:null,NaN:NaN,Infinity:new Error,"-Infinity":new Error};function D(r,e=St){const t=Object.assign({},St,e),n=new Set(Object.keys(t));return(s,i,a)=>{const u=b(s,i,null,a);if(n.has(`${u}`)){const c=t[`${u}`];if(c instanceof Error)throw new Error(`cannot apply $${r.name} to -inf, value must in (-inf,inf)`);return c}return r(u)}}D(Math.acos,{Infinity:1/0,0:new Error});D(Math.acosh,{Infinity:1/0,0:new Error});D(Math.asin);D(Math.asinh,{Infinity:1/0,"-Infinity":-1/0});D(Math.atan);D(Math.atanh,{1:1/0,"-1":-1/0});D(Math.cos);D(Math.cosh,{"-Infinity":1/0,Infinity:1/0});const cn=Math.PI/180;D(r=>r*cn,{Infinity:1/0,"-Infinity":1/0});const ln=180/Math.PI;D(r=>r*ln,{Infinity:1/0,"-Infinity":-1/0});D(Math.sin);D(Math.sinh,{"-Infinity":-1/0,Infinity:1/0});D(Math.tan);const Qt=(r,e,t)=>{if(le(e))return r;let n=Object.keys(e),s=!1;Xt(e,t);const i=t.idKey;if(ae(n,i)){const u=e[i];(u===0||u===!1)&&(n=n.filter(It.bind(null,[i])),s=n.length==0)}else n.push(i);const a=Q.init(t);return r.map(u=>et(u,e,a.update(u),n,s))};function et(r,e,t,n,s){let i={},a=!1,u=!1;const c=[];s&&c.push(t.idKey);for(const l of n){let f;const p=e[l];if(l!==t.idKey&&ae([0,!1],p)&&(u=!0),l===t.idKey&&le(p))f=r[l];else if(M(p))f=b(r,p,l,t);else if(!ae([1,!0],p))if(p instanceof Array)f=p.map(m=>{const h=b(r,m,null,t);return v(h)?null:h});else if(A(p)){const m=p,h=Object.keys(p),$=h.length==1?h[0]:"",d=X(T.PROJECTION,$,t);if(d)$==="$slice"?fe(m[$]).every(k)?(f=d(r,m[$],l,t),a=!0):f=b(r,m,l,t):f=d(r,m[$],l,t);else if(pe($))f=b(r,m[$],$,t);else if(K(r,l)){Xt(m,t);let E=r[l];E instanceof Array?f=E.map(g=>et(g,m,t,h,!1)):(E=A(E)?E:r,f=et(E,m,t,h,!1))}else f=b(r,p,null,t)}else{c.push(l);continue}const y=ve(r,l,{preserveMissing:!0});y!==void 0&&Ge(i,y,{flatten:!0}),It([0,1,!1,!0],p)&&(f===void 0?_t(i,l,{descendArray:!0}):Nr(i,l,f))}if(Qe(i),(a||u||s)&&(i=Ce({},r,i),c.length>0))for(const l of c)_t(i,l,{descendArray:!0});return i}function Xt(r,e){const t=[!1,!1];for(const[n,s]of Object.entries(r)){if(n===(e==null?void 0:e.idKey))return;s===0||s===!1?t[0]=!0:(s===1||s===!0)&&(t[1]=!0),q(!(t[0]&&t[1]),"Projection cannot have a mix of inclusion and exclusion.")}}const Zt=(r,e,t)=>r.drop(e),fn=(r,e,t,n)=>{const s=Te(r,t),i=new re(e,n);q(s instanceof Array,"$elemMatch: argument must resolve to array");const a=[];for(let u=0;u<s.length;u++)if(i.test(s[u])){if(n.useStrictMode)return[s[u]];a.push(s[u])}return a.length>0?a:void 0},pn=(r,e,t,n)=>{const s=Te(r,t),i=e;return B(s)?un(r,e instanceof Array?[s,...i]:[s,e],n):s};var er=Object.freeze(Object.defineProperty({__proto__:null,$elemMatch:fn,$slice:pn},Symbol.toStringTag,{value:"Module"}));const dn=I(Wr),mn=I(Jt),hn=I(Gr),je=r=>I((e,t,n)=>{let s=0;if(t instanceof Array)for(const i of t)s=s|1<<i;else s=t;return r(e&s,s)}),yn=je((r,e)=>r==0),_n=je((r,e)=>r==e),En=je((r,e)=>r<e),gn=je((r,e)=>r>0),$n=I(it),wn=I(Ut),Cn=I(Ht),Tn=I(zt),xn=I(Kt),On=I(Vt),Sn=I(kt),An=I(Vr),bn=I(Jr),Rn=I(Xr);function Bn(r,e,t){return n=>b(n,e,null,t)}function vn(r,e,t){if(!(t!=null&&t.jsonSchemaValidator))throw new Error("Missing option 'jsonSchemaValidator'. Configure to use '$jsonSchema' operator.");const n=t==null?void 0:t.jsonSchemaValidator(e);return s=>n(s)}const Nn=I(Ur),qn=I(Hr);function In(r,e,t){q(t.scriptEnabled,"$where operator requires 'scriptEnabled' option to be true");const n=e;return q(we(n),"$where only accepts a Function object"),s=>ue(n.call(s),t==null?void 0:t.useStrictMode)}const Dn=(r,e,t)=>{q(B(e),"Invalid expression: $and expects value to be an Array.");const n=e.map(s=>new re(s,t));return s=>n.every(i=>i.test(s))},tr=(r,e,t)=>{q(B(e),"Invalid expression. $or expects value to be an Array");const n=e.map(s=>new re(s,t));return s=>n.some(i=>i.test(s))},Fn=(r,e,t)=>{q(B(e),"Invalid expression. $nor expects value to be an array.");const n=tr("$or",e,t);return s=>!n(s)},Pn=(r,e,t)=>{const n={};n[r]=Lt(e);const s=new re(n,t);return i=>!s.test(i)};var rr=Object.freeze(Object.defineProperty({__proto__:null,$all:dn,$elemMatch:mn,$size:hn,$bitsAllClear:yn,$bitsAllSet:_n,$bitsAnyClear:En,$bitsAnySet:gn,$eq:$n,$gt:wn,$gte:Cn,$in:Tn,$lt:xn,$lte:On,$ne:Sn,$nin:An,$exists:bn,$type:Rn,$expr:Bn,$jsonSchema:vn,$mod:Nn,$regex:qn,$where:In,$and:Dn,$nor:Fn,$not:Pn,$or:tr},Symbol.toStringTag,{value:"Module"}));xe(T.EXPRESSION,Object.assign(Object.assign({},jt),Wt));xe(T.PIPELINE,{$project:Qt,$skip:Zt,$limit:Yt,$sort:Gt});xe(T.PROJECTION,er);xe(T.QUERY,rr);V.init().addExpressionOps(Object.assign(Object.assign({},jt),Wt)).addPipelineOps({$project:Qt,$skip:Zt,$limit:Yt,$sort:Gt}).addProjectionOps(er).addQueryOps(rr);const Ln=o.reduce(["eq","ne","lt","lte","gt","gte","in","nin","regex","or","and","not","exists","where"],(r,e)=>(r[e]="$"+e,r),{}),At={$between(r,e,t){if(o.isNil(r[e]))return!1;if(o.isArray(t))return r[e]>=t[0]&&r[e]<=t[1];if(typeof t=="object"){const{minimum:n,maximum:s,minimumOpen:i,maximumOpen:a}=t;return!(i&&r[e]<=n||!i&&r[e]<n||a&&r[e]>=s||!a&&r[e]>s)}return!1},$contains(r,e,t){return!o.isString(r[e])||!o.isString(t)?!1:r[e].includes(t)},$endsWith(r,e,t){return!o.isString(r[e])||!o.isString(t)?!1:o.endsWith(r[e],t)},$notBetween(r,e,t){return!this.$between(r,e,t)},$notUnder(r,e,t){return!this.$under(r,e,t)},$startsWith(r,e,t){return!o.isString(r[e])||!o.isString(t)?!1:o.startsWith(r[e],t)},$under(r,e,t){return!o.isString(r[e])||!o.isString(t)||r[e]===t?!1:o.startsWith(r[e],t)}};xe(T.QUERY,o.mapValues(At,(r,e)=>function(t,n){return function(s){return At[e](s,t,n)}}));function Mn(r,e){for(var t in e)r[t]=e[t];return r}function bt(r,e,t){_.isString(t)&&(t=zn[t]);const n=Array.prototype.slice.call(arguments,3),s={},i={};return r.forEach(function(a){const u={},c=e.map(function(f){return u[f]=a[f]}).join("\0");s[c]||(s[c]=Mn({},u));const l=n.slice(0);l.unshift(a,s[c]),t&&(s[c]=t?t.apply(i,l):l),s[c].__items||(s[c].__items=[]),s[c].__items.push(a)}),Object.keys(s).map(function(a){return s[a]})}function jn(r,e,t,n){if(!this.sum){var s=function(i,a,u,c){return a[u]=c.reduce(function(l,f){return l+i[f]},a[u]||0),a};this.sum=function(i,a){return n===void 0&&(n=t),typeof n=="string"&&(n=[n]),s(i,a,t,n)}}return this.sum(r,e)}function kn(r,e,t="count"){let n=_.get(e,t,-1);return _.set(e,t,n+1),e}const zn={count:kn,sum:jn};var nr={exports:{}};function ot(){}ot.prototype={on:function(r,e,t){var n=this.e||(this.e={});return(n[r]||(n[r]=[])).push({fn:e,ctx:t}),this},once:function(r,e,t){var n=this;function s(){n.off(r,s),e.apply(t,arguments)}return s._=e,this.on(r,s,t)},emit:function(r){var e=[].slice.call(arguments,1),t=((this.e||(this.e={}))[r]||[]).slice(),n=0,s=t.length;for(n;n<s;n++)t[n].fn.apply(t[n].ctx,e);return this},off:function(r,e){var t=this.e||(this.e={}),n=t[r],s=[];if(n&&e)for(var i=0,a=n.length;i<a;i++)n[i].fn!==e&&n[i].fn._!==e&&s.push(n[i]);return s.length?t[r]=s:delete t[r],this}};nr.exports=ot;nr.exports.TinyEmitter=ot;function sr({extractKey:r,fields:e,filter:t,name:n,unique:s=!1}){const i=this;if(!n)throw new oe("An index must have a name");this.indices||(this.indices={});const a=this.indices[n]={fields:e,index:{},name:n,owner:i,unique:s,_extractKey(u){return o.isArray(this.fields)?o.map(this.fields,l=>o.get(u,l).toString()).join("_"):o.isFunction(this.fields)?this.fields.call(this,u):o.get(u,this.fields)},_add(u,c=!0){if(this.filter&&!this.filter(u))return;const l=this._extractKey(u);if(l)if(this.unique)this.index[l]=u;else{let f=this.index[l];f||(f=this.index[l]=[]),f.push(u)}},_remove(u){const c=this._extractKey(u);if(c===void 0)return;const l=this.index[c];l!==void 0&&(o.isArray(l)?o.pull(l,u):delete this.index[c])}};return r&&(a._extractKey=r),t&&(o.isFunction(t)?a.filter=t:(a._query=new re(t),a.filter=function(u){return this._query.test(u)})),a}function tt({filter:r,groupBy:e,limit:t,orderBy:n,select:s,skip:i,useIndex:a}){let u=this.filter(r,a);if(e!=null&&e.fields){const{accumulator:c,fields:l,path:f}=e;e=l,u=bt(u,e,c,f)}else e&&(u=bt(u,e));return n&&(u=Un(u,n)),i&&(u=Jn(u,i)),t&&(u=Vn(u,t)),s&&(u=Hn(u,s)),u}function ir(r){const e={};return o.forIn(r,(t,n)=>{o.isArray(t)?e[n]=o.map(t,ir):typeof t=="object"?e[n]=o.mapKeys(t,(s,i)=>Ln[i]||i):e[n]=t}),e}function Kn(r){return o.isFunction(r)&&(r={$where:r}),new re(r)}function or(r,e,t=!0,n){if(o.isEmpty(r))return[];if(o.isEmpty(e))return r;let s=t?ir(e):e;const i=Kn(s);return n?i.find(o.castArray(r)).limit(1).all()[0]:i.find(o.castArray(r)).all()}function Vn(r,e){return o.take(r,e)}function Un(r,e){const t=o.map(e.split(","),i=>i.trim()),n=[],s=[];return o.forEach(t,i=>{let[a,u]=i.split(" ");u||(u="asc"),n.push(a),s.push(o.lowerCase(u))}),o.orderBy(r,n,s)}function Hn(r,e){const t=o.keys(e),n=!!e[t[0]];return o.map(r,s=>n?o.pick(s,t):o.omit(s,t))}function Jn(r,e){return o.drop(r,e)}const be=new WeakMap,_e=new WeakMap;class $e extends Array{constructor(...e){let[t,n]=e;o.isArray(t)||(n={...t},t=[]),super();const s=this;_e.set(this,{}),n&&this.setOptions(n),o.forEach(t,i=>{s.add(i)})}static proxify(e,t){const n=_e.get(e);_e.delete(e),_e.set(t,n);const s=be.get(e);s.owner&&(s.owner=o.get(s.owner,"$.proxy",s.owner)),be.delete(e),t.setOptions(s)}_getData(e,t){var a;const n=this,{indices:s={}}=this._getOptions();let i=this;if(e){const u=(e==null?void 0:e.name)||e,c=s[u];if(!c)return;if(c.unique)return c.index;const l=c._extractKey(t);return c.index[l]||[]}else o.isString(t.__typename)?i=n._getData("__typename",t):(a=t.__typename)!=null&&a.$in&&(i=o.reduce(t.__typename.$in,(u,c)=>{const l=n._getData("__typename",{__typename:c});return l!=null&&l.length&&(u=[...u,...l]),u},[]));return i}_getIndex(){return _e.get(this)}_getKey(e){const t=this._getOptions().key;return o.isString(t)?o.get(e,t):t(e)}_getOptions(){return be.get(this)}add(e,t){const n=this;if(o.isArray(e))return o.map(e,a=>{n.add(a,t)});const s=this._getIndex(),i=this._getOptions();if(i.unique){const a=this.get(e);if(a)return a}if(s[this._getKey(e)]=e,this.push(e),i.ordered&&t!==!1){if(i.ordered===!0)return o.sort(this,i.key);if(o.isString(i.ordered)){const a=[],u=[],c=i.ordered.split(",");return o.forEach(c,l=>{const[f,p]=l.trim().split(" ");a.push(f),u.push(p?o.toLower(p):"asc")}),o.orderBy(a,u)}else{const{keys:a,order:u}=i.ordered;return o.orderBy(a,u)}}return e}createIndex(e){return this._getOptions(),sr.call.options(e)}findOne(e,t){return this.filter(e,t,!0)}filter(e,t,n){const s=this._getData(t,e);return or(s,e,o.get(this,"options.filter.mapCriteria"),n)}get(e,t){if(!!e)if(t){const n=this._getData(t);return n==null?void 0:n[e]}else{const n=this._getIndex();return o.isString(e)?n[e]:n[this._getKey(e)]}}getOption(e){const t=this._getOptions();return t==null?void 0:t[e]}has(e){return o.isString(e)?!!this.get(e):!!this.get(this._getKey(e))}query(e){data=tt.call(this,{filter:e})}remove(e){const t=this;if(o.isArray(e))return o.map(e,s=>t.remove(s));if(o.isFunction(e)){const s=o.filter(t,i=>e(i));return t.remove(s)}const n=o.findIndex(this,e);if(n>=0){const s=this._getIndex();return delete s[this._getKey(e)],this.splice(n,1)}else throw new We(`item with key '${this._getKey(e)}' does not exists`)}removeIndex(){}setOptions(e){let t=this._getOptions();t?o.merge(t,e):(t={key:"id",ordered:!1,owner:null,...e},be.set(this,t))}}var at={exports:{}};function ut(){}ut.prototype={on:function(r,e,t){var n=this.e||(this.e={});return(n[r]||(n[r]=[])).push({fn:e,ctx:t}),this},once:function(r,e,t){var n=this;function s(){n.off(r,s),e.apply(t,arguments)}return s._=e,this.on(r,s,t)},emit:function(r){var e=[].slice.call(arguments,1),t=((this.e||(this.e={}))[r]||[]).slice(),n=0,s=t.length;for(n;n<s;n++)t[n].fn.apply(t[n].ctx,e);return this},off:function(r,e){var t=this.e||(this.e={}),n=t[r],s=[];if(n&&e)for(var i=0,a=n.length;i<a;i++)n[i].fn!==e&&n[i].fn._!==e&&s.push(n[i]);return s.length?t[r]=s:delete t[r],this}};at.exports=ut;at.exports.TinyEmitter=ut;var Wn=at.exports;class Oe extends Wn{on(e,t,n){if(o.isArray(e))return o.map(e,i=>this.on(i,t,n));const s=()=>{this.off(e,t)};return super.on(e,t,n||this),s}once(e,t,n){if(o.isArray(e))return o.map(e,i=>this.once(i,t,n));const s=()=>{this.off(e,t)};return super.once(e,t,n||this),s}emit(...e){const[t,n]=e;return o.isArray(t)?o.map(t,s=>this.emit(s,n)):super.emit.apply(this,e)}}const ne=new WeakMap;class Gn extends Oe{emit(e,t){var s,i,a;if(o.isArray(e))return o.map(e,u=>this.emit(u,t));let n;if((s=this.emit_PreventDefault)!=null&&s[e]||(n=super.emit(e,t)),!((i=this.emit_StopPropagation)!=null&&i[e])&&{added:1,removed:1}[e]){const u={};e==="removed"?u.$unset={[this.feature.name]:t.items}:u.$set={[this.feature.name]:t.items},(a=this.owner)==null||a.$.emit("changed",{feature:this.feature,key:this.feature.name,modifier:u})}return n}}class Yn extends Gn{constructor(){super()}_getChecksum(){return o.mapValues(this.index,(e,t)=>x.isNode(e)?1:e)}get(e){const t=(e==null?void 0:e.id)||t;return this.index[t]}}const W=class extends Array{constructor(e,t,n=[]){super();const s=this,i=Fe(this),a=new Yn;return a.feature=t,a.index={},a.list=s,a.owner=e,a.proxy=i,ne.set(this,a),ne.set(i,a),a.emit_PreventDefault={added:!0},a.emit_StopPropagation={added:!0},o.forEach(o.castArray(n),u=>{i.push(u)}),a.emit_PreventDefault=void 0,a.emit_StopPropagation=void 0,i}_getChecksum(e={returnData:!1}){const t=o.flatMap(o.sortBy(this,"id"),"id");return e!=null&&e.returnData?t:o.hash(t)}_getFeature(){var e;return(e=W.getHelper(this))==null?void 0:e.feature}_getIndex(){var e;return(e=W.getHelper(this))==null?void 0:e.index}_getOwner(){var e;return(e=W.getHelper(this))==null?void 0:e.owner}createIndex({extractKey:e,fields:t,filter:n,name:s,unique:i=!1}){const a=this;if(!s)throw new oe("An index must have a name");this.indices||(this.indices={});const u=this.indices[s]={fields:t,index:{},name:s,owner:a,unique:i,_extractKey(c){return o.isArray(this.fields)?o.map(this.fields,f=>o.get(c,f).toString()).join("_"):o.isFunction(this.fields)?this.fields.call(this,c):o.get(c,this.fields)},_add(c,l=!0){if(this.filter&&!this.filter(c))return;const f=this._extractKey(c);if(f)if(this.unique)this.index[f]=c;else{let p=this.index[f];p||(p=this.index[f]=[]),p.push(c)}},_remove(c){const l=this._extractKey(c);if(l===void 0)return;const f=this.index[l];f!==void 0&&(o.isArray(f)?o.pull(f,c):delete this.index[l])}};return e&&(u._extractKey=e),n&&(o.isFunction(n)?u.filter=n:(u._query=new Query(n),u.filter=function(c){return this._query.test(c)})),u}get(e){const t=(e==null?void 0:e.id)||e;return this._getIndex()[t]}remove(e){const t=this;if(o.isArray(e))return o.map(e,t.remove);const n=o.findIndex(this,e);if(n>=0)return this.splice(n,1);throw new NotFoundError(`item with id '${e==null?void 0:e.id}' does not exists in list`)}setFeature(e){if(!e)throw new G("feature");const t=W.getHelper(this);t.feature=e,o.forEach(this,n=>{x.isNode(n)&&(n.$.eContainingFeature=e.$.node.containment?e:void 0)})}setOwner(e,t){if(!e)throw new G("owner");if(x.isNode(e)){const n=W.getHelper(this);n.owner=e,t||(t=this._getFeature()),o.forEach(this,s=>{x.isNode(s)&&(s.$.eContainer=t.$.node.containment?e:void 0)})}else throw new oe("owner must be of type Node")}toChecksum(...e){return this._getChecksum.apply(this,e)}static fromJSON(e,{owner:t,feature:n}){}static getHelper(e){return ne.get(e)}static setHelper(e,t){ne.set(e,t)}static unsetHelper(e){ne.delete(e)}};let R=W;ke(R,"_helperMap",ne);function Qn(r,e){const{eClass:t}=r.$;return o.forIn(e.$set,(n,s)=>{const i=t.getEStructuralFeature(s);i.$.isKindOf("ecore.EReference")&&r[s]&&i.many?o.forEach(n,a=>{const u=store.get((a==null?void 0:a.id)||a);u&&r[s].push(u)}):r[s]=n}),o.forIn(e.$unset,(n,s)=>{const i=t.getEStructuralFeature(s);r[s]!==void 0&&(i.$.isKindOf("ecore.EReference")&&i.many?o.forEach(n,a=>{o.pull(r[s],a)}):delete r[s])}),r}const Xn=o.memoize(r=>{const e=store.filter({__typename:"ecore.EClass",extends:r}),t={};return o.forEach(e,n=>{o.forEach(n.eAllStructuralFeatures,s=>{t[s.name]=s})}),{_featuresByName:t,data:e,index:o.keyBy(e,"ns"),getFeature:function(n){return this._featuresByName[n]}}});class Zn extends Oe{emit(e,t){var s,i,a,u,c;if(o.isArray(e))return o.map(e,l=>this.emit(l,t));let n;if(!((s=this.emit_PreventDefault)!=null&&s[e])&&(n=super.emit(e,t),e==="changed")){const l={node:this.proxy,...t};this.store.emit("changed",l),l.__stopPropagation=!0,(i=t.feature)==null||i.$.emit("changed:node",l),this.eClass.$.emit("changed:node",l)}if(!((a=this.emit_StopPropagation)!=null&&a[e])&&!(t!=null&&t.__stopPropagation)&&e==="changed"&&this.eContainer){const l=this.eContainingFeature.name;let f=t.operation;f||(f=o.isNil((u=t.modifier.$set)==null?void 0:u[t.key])?"unset":"set");const p=t.parents||[];p.push(this.proxy),(c=this.eContainer)==null||c.$.emit("changed",{feature:this.eContainingFeature,key:l,operation:f,parent:this.proxy,parents:p,initialEvent:t.initialEvent||{caller:this,name:e,data:t}})}return n}}class ar extends Zn{constructor(){super(),this.getValidationRules=o.memoize(function(){const{eClass:e,node:t}=this,n={};return o.forEach(e.eAllStructuralFeatures,s=>{s.derived||s.required&&(n[s.name]={isValid(i){return x.isNode(i)?!o.isNil(i[this.name]):!o.isNil(i)},message:`${this.name} is required`,name:s.name,required:!0})}),o.isEmpty(n)?null:n}),this.useValidation=function(e){const{eClass:t,proxy:n}=this;e||(e=n);const s={};return o.forEach(t.eAllStructuralFeatures,i=>{if(i.derived)return;const a=[];if(i.upperBound>0){const u=function(c,l){const{feature:f}=this;return o.isNil(c)||c===""?`${f.name} is required`:!0}.bind({feature:i,node:n});a.push(u)}o.isEmpty(a)||(s[i.name]=a)}),Fe({rules:s,isValid:lt(function(){return this.errors.value===!1}),errors:lt(()=>{const i={};return o.forIn(s,(a,u)=>{const c=o.reduce(a,(l,f)=>{const p=f(e[u],e);return p!==!0&&l.push(p),l},[]);o.isEmpty(c)||(i[u]=c)}),o.isEmpty(i)?!1:i})})}}apply(e){var n,s;const t=(s=(n=this.eClass).getOperation)==null?void 0:s.call(n,e);if(!!t){if(t._===void 0){let i=t.body;if(i){const a=o.flatMap(t.parameters,"values.name");try{t._=new Function(i,a)}catch(u){throw t._=u,u}}else{t._=null;return}}if(o.isFunction(t._)){const i=[...arguments].slice(1);return t._.apply(this.node,i)}}}commit(){return this.store.get(this.node.id)||this.store._add(this.proxy),this.store.commit(this.proxy)}decycle(...e){const t=[this.proxy,...e];return this.store.decycle.apply(this.store,t)}diff(e){const{eClass:t,node:n,proxy:s}=this,i={};return o.forEach(t.eAllStructuralFeatures,a=>{if(a.derived||a.iD)return;const u=n[a.name],c=e[a.name];if(c!==u&&!(o.isNil(c)&&o.isNil(u)))if(o.isNil(c)&&!o.isNil(u))o.set(i,`$unset.${a.name}`,null);else if(o.isNil(u))o.set(i,`$set.${a.name}`,c);else if(a.$.isKindOf("ecore.EReference"))if(a.many){const l=[],f=[],p=o.keyBy(u,"id"),y=o.keyBy(c,"id");o.forEach(u,m=>{y[m.id]||l.push(m)}),o.forEach(c,m=>{p[m.id]||f.push(m)}),o.isEmpty(l)||o.set(i,`$unset.${a.name}`,l),o.isEmpty(f)||o.set(i,`$set.${a.name}`,f)}else c.id!==u.id&&o.set(i,`$set.${a.name}`,c);else a.eType.ns==="ecore.JSObject"||u!==c&&o.set(i,`$set.${a.name}`,c)}),o.isEmpty(i)?!1:(Object.defineProperties(i,{apply:{value:function(){return Qn(s,this)}}}),i)}eResource(){const{eClass:e,eContainer:t}=this;if(t)return t.$.eResource()}eRoot(){let{eContainer:e}=this,t;for(;e;)t=e,e=e.$.eContainer;return t}eURI(){throw new ie("NodeHelper.uri not implemented")}fragment(){throw new ie("NodeHelper.fragment not implemented")}get(e){let t=o.get(this.proxy,e);if(o.isNil(t)){const n=e.split(".");if(n.length===1){const s=this.eClass.getEStructuralFeature(n[0]);return(s==null?void 0:s.upperBound)!==1&&(this.proxy[s.name]=[]),this.proxy[n[0]]}else{const s=o.get(o.first(n));if(x.isNode(s))return s.$.get(o.drop(n).join("."))}}return t}getDisplayName(){const{node:e}=this;return e.displayName||e.title||e.shortDescription||e.label||e.name||e.text||e.id}getExtensions(){const{eClass:e,proxy:t,store:n}=this,s=Xn(e.ns),i=o.filter(t.eAnnotations,({source:u})=>s.index[u]),a={};return o.forEach(i,({source:u,details:c})=>{o.forEach(c,({key:l,value:f})=>{const p=s.getFeature(l);if(!!p)if(p.$.isKindOf("ecore.EAttribute"))a[l]=f;else{const y=o.retrocycle(JSON.parse(f));if(p.containment)a[l]=n.addNode(y);else{const m=o.reduce(o.castArray(y),(h,$)=>{const d=n.get($);return d?h.push(d):n.on(`created:${$}`,({node:E})=>{p.upperBound===1?a[l].push(E):a[l]=E}),h},[]);a[l]=p.upperBound===1?m[0]:m}}})}),a}getId(){var t;const e=(t=this.eClass.eIDAttribute)==null?void 0:t.name;return e?o.get(this.proxy,e):this.id||this._id}getStoreId(e=!0){return this.store.createStoreId(this.node,e)}has(e){const{eClass:t,node:n}=this;return o.has(n,e)||t.getEStructuralFeature(e)}isKindOf(e){if(!e)return!1;if(this.isTypeOf(e))return!0;const t=o.isString(e)?e:e==null?void 0:e.name,n=this.eClass.eAllSuperTypes;return o.some(n,s=>s.ns===t)}isTypeOf(e){if(!e)return!1;const t=o.isString(e)?e:e==null?void 0:e.name;return this.node.__typename===t}isSet(e){const t=o.get(this,e);return t instanceof R?list.length>0:!o.isNil(t)}link(e){var h;const t=this;let{feature:n,target:s}=e;const{eClass:i,proxy:a,store:u}=this;if(typeof n=="string"){const $=n;if(n=i.getEStructuralFeature($),!n)throw new NotFoundError(`Type '${i}' does not have a feature with name '${$}'`)}const{containment:c,eOpposite:l,name:f,upperBound:p}=n.$.node;if(Y.isNodeRef(s)){const $=u.get(s.ref);if($)s=$;else{u.once(`added:${s.ref}`,function({node:d}){const{args:E,source:g,feature:C}=this;if(g.$.link({...E,feature:C,target:d})){const{name:S,upperBound:j}=C.$.node;j!==1?(g[f].push(d),g.$.hashData[S]=g[f]._getChecksum()):(g[S]=d,g.$.hashData[S]=d.$.hash)}},{args:e,feature:n,source:a});return}}else x.isNode(s)||(s=u.addNode({...e,eClass:null,data:s,feature:n,source:a}));if(!s)return!1;let y=u.links.get({source:a,feature:n,target:s}),m="creating";if(y?m="created":y=u.links.set({source:a,feature:n,target:s}),m==="creating"){if(c&&(s.$.eContainer=a,s.$.eContainingFeature=n,t.on("removed",function(){this.target.$.remove()},{target:s})),!((h=s==null?void 0:s.$)!=null&&h.once)){let $=function(){return"kasa"+"test"};debugger;window.__debug=$()}if(s.$.once("removed",function(){var w;const{feature:$,source:d,target:E}=this;if(d.$.removedAt)return;const{name:g,upperBound:C}=$.$.node;if(C!==1){const S=(w=d[g])==null?void 0:w.indexOf(E);S>=0&&d[g].splice(S,1)}else d[g]&&(d[g]=null)},{feature:n,source:a,target:s}),l&&!u.links.get({source:s,feature:l,target:a})){const{name:d,upperBound:E}=l.$.node;E!==1?s[d]?s[d].push(a):s[d]=[a]:s[l.$.node.name]=a}o.isArray(y)&&(y=o.last(y)),y.status=m="created",y.createdAt=new Date}else n.$.node.containment&&s.$.eContainer;return s}merge(e){const{data:t}=e,{eClass:n,node:s,proxy:i}=this,a=this.hashData={__typename:s.__typename},u=he.call(n),[c,l]=o.partition(u,h=>U.call(h,"ecore.EAttribute"));let f,p,y;function m(h,$){var E;if(f=h.$.node,f.derived)return;p=f.name,y=s[p];const d=t[p];if(d===null){i[p]=a[p]=null;return}else if(d===void 0){s[p]!==void 0&&(i[p]=void 0);return}else if($){a[p]=d,d!==y&&(i[p]=d);return}else o.isEmpty(d)?a[p]=null:f.upperBound!==1?(s[p]?o.forEach(d,g=>{s[p].push(g)}):i[p]=d,a[p]=s[p]._getChecksum()):(i[p]=d,a[p]=(E=s[p])==null?void 0:E.$.hash)}return this.emit_PreventDefault={changed:!0},this.emit_StopPropagation={changed:!0},o.forEach(c,h=>m(h,!0)),o.forEach(l,h=>m(h,!1)),this.emit_PreventDefault=void 0,this.emit_StopPropagation=void 0,this.hash=o.hash(a),i}on(e,t,n){return o.isArray(e)?o.map(e,s=>this.on(s,t,n)):super.on(e,t,n||this.proxy)}once(e,t,n){return o.isArray(e)?o.map(e,s=>this.once(s,t,n)):super.once(e,t,n||this.proxy)}remove(){var e;return(e=this.store)==null?void 0:e.remove(this.proxy)}set(e,t){if(t===void 0)return this.unset(e);function n(s,i,a){const u=s.$.eClass.getEStructuralFeature(i);return u?u.upperBound!==1&&a===null?!1:u.isKindOf("ecore.EReference")?typeof a=="object":typeof a!="object":new ValidationError(`Node ({ id: '${s.id}' }) does not have a feature with name '${i}'`)}if(!(typeof e=="object"&&e!==null)){let s=o.get(this.proxy,e);if(o.isNil(s)){const i=key.split(".");if(i.length>1){const a=o.dropRight(i).join("."),u=o.get(this.proxy,a);if(x.isNode(u)){if(n(u,o.last(i),t)){const c=u.$.eClass.getEStructuralFeature(o.last(i));c.upperBound!==1?(u[c.name]||(u[c.name]=[]),u[c.name].push(t)):u[c.name]=t}}else throw new ValidationError(`No node exists at path '${a}' for Node ({ id: '${node.id}' })`)}else n(this.proxy,e,t)&&(this.proxy[e]=t)}else o.set(this.proxy,e,t)}}setClass(e){this.$.eClass=e}super(e){if(!e)return;const t=o.split(e,".");if(t.length>1){const n=o.dropRight(t).join(".");let s=n.includes(".")?o.find(this.eClass.eAllSuperTypes,{ns:n}):o.find(this.eClass.eAllSuperTypes,{name:n});const i=s==null?void 0:s.getEOperation(o.last(t));if(i!=null&&i._)return i._.apply(this.proxy,o.drop([...arguments]))}else{let n;return o.forEachRight(this.eClass.eAllSuperTypes,s=>{const i=s.getEOperation(e);i!=null&&i._&&(n=i._.apply(this.proxy,o.drop([...arguments])))}),n}}toChecksum(e={returnData:!1}){var u;const{eClass:t,node:n}=this,s={__typename:n.__typename},i=(u=t.getEOperation("toJSON"))==null?void 0:u._,a=i?i.call(n):n;return o.forIn(a,(c,l)=>{if(l==="__typename")return;const f=t.getEStructuralFeature(l);if(!f)return;const{derived:p,transient:y,upperBound:m}=f.$.node;p||y||(o.isNil(c)?c===null&&(s[l]=null):f.eType.name==="JSObject"?s[l]=o.decycle(c):U.call(f,"ecore.EReference")?m!==1?(s[l]={data:c._getChecksum({returnData:!0})},s[l].id=o.hash(s[l].data)):s[l]=c.id:s[l]=c)}),e!=null&&e.returnData?s:o.hash(s)}toRef(){return new Y(this.node)}unlink({feature:e,target:t}){const{proxy:n,store:s}=this;s.links.remove({feature:e,source:n,target:t});const{containment:i,eOpposite:a,upperBound:u}=e.$.node;return i?t.$.remove():a&&s.links.get({source:t,feature:a,target:n})&&(a.$.upperBound!==1?o.pull(t[a.name],n):t[a.name]=null),t}unset(e){throw new ie("NodeHelper.unset not implemented")}validate(){const{node:e}=this,t={},n=this.getValidationRules();return o.forIn(n,(s,i)=>{s.isValid(e)||(t[i]=s)}),o.isEmpty(t)?{isValid:!0}:{errors:t,isValid:!1}}}function es(r){const e={};let{nsPrefix:t}=r;return e[t]=r,o.forEach(r.eClassifiers,n=>{let s=`${t}.${n.name}`;e[s]=n,o.forEach(n.eStructuralFeatures,i=>{e[`${s}.${i.name}`]=i}),o.forEach(n.eOperations,i=>{e[`${s}.${i.name}`]=i})}),e}const se=new WeakMap;function N(r,e){return function(...t){const n=this;let s=se.get(n);s||(s=new Map,se.set(n,s));let i,a=e?e.apply(this,t):r;return i=s.get(r),i===void 0&&(i=r.apply(n,t),i===void 0&&(i=null),s.set(a,i)),i}}const ts={"ecore.EStructuralFeature.eType":{__typename:"ecore.EReference",overrides:"ecore.ETypedElement.eType",name:"eType",lowerBound:1,upperBound:1,containment:!1,eType:{ref:"1qkajk4",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:o.hashString("http://www.eclipse.org/emf/2002/Ecore#//EStructuralFeature/eType")}},Ee={eClassifiers:[{abstract:!1,interface:!1,name:"EObject",extensions:{graphql:{omit:!1}},id:"1y7v9cy",__typename:"ecore.EClass"},{abstract:!0,eOperations:[{eType:{ref:"qgqt0q",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"c2dfrg",lowerBound:0,name:"getAnnotation",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EOperation"}],eStructuralFeatures:[{name:"eAnnotations",eType:{ref:"15i1g9e",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,upperBound:-1,containment:!0,id:"daay0o",__typename:"ecore.EReference"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},iD:!0,lowerBound:1,name:"id",ordered:!0,unique:!0,upperBound:1,id:"58kvbo",__typename:"ecore.EAttribute"},{eType:{ref:"qgqt0q",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1wgbnv1",lowerBound:0,name:"extensions",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"}],eSuperTypes:[{ref:"1y7v9cy",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EModelElement",id:"9shti",__typename:"ecore.EClass"},{abstract:!1,eStructuralFeatures:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"source",ordered:!0,unique:!0,upperBound:1,id:"7iyp88",__typename:"ecore.EAttribute"},{containment:!0,eType:{ref:"ygms5y",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"details",ordered:!0,unique:!0,upperBound:-1,id:"8emq4l",__typename:"ecore.EReference"}],eSuperTypes:[{ref:"9shti",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EAnnotation",id:"15i1g9e",__typename:"ecore.EClass"},{abstract:!0,eStructuralFeatures:[{name:"name",lowerBound:1,upperBound:1,eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"13hadas",__typename:"ecore.EAttribute"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1vkhvv7",lowerBound:0,name:"description",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1heozyc",lowerBound:0,name:"displayName",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"}],eSuperTypes:[{ref:"9shti",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"ENamedElement",id:"gkg8py",__typename:"ecore.EClass"},{abstract:!1,eStructuralFeatures:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:1,name:"nsURI",ordered:!0,unique:!0,upperBound:1,id:"i7mxwb",__typename:"ecore.EAttribute"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:1,name:"nsPrefix",ordered:!0,unique:!0,upperBound:1,id:"m4fa83",__typename:"ecore.EAttribute"},{containment:!0,eType:{ref:"1qkajk4",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eClassifiers",ordered:!0,unique:!0,upperBound:-1,id:"1ug67ix",__typename:"ecore.EReference"},{containment:!0,eType:{ref:"1ny5arn",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eSubPackages",ordered:!0,unique:!0,upperBound:-1,id:"vthv1w",__typename:"ecore.EReference"},{derived:!0,eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1vpb4b5",lowerBound:0,name:"ns",ordered:!0,transient:!0,unique:!0,upperBound:1,volatile:!1,__typename:"ecore.EAttribute"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:o.hashString("http://www.eclipse.org/emf/2002/Ecore#//EPackage/version"),lowerBound:0,name:"version",defaultValueLiteral:"0.0.1",upperBound:1,__typename:"ecore.EAttribute"}],eSuperTypes:[{ref:"gkg8py",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EPackage",id:"1ny5arn",__typename:"ecore.EClass"},{abstract:!0,eStructuralFeatures:[{containment:!0,eType:{ref:"jsn2a4",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eTypeParameters",ordered:!0,unique:!0,upperBound:-1,id:"13egnpa",__typename:"ecore.EReference"},{derived:!0,eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1iygmy8",lowerBound:0,name:"ns",ordered:!0,transient:!0,unique:!0,upperBound:1,volatile:!1,__typename:"ecore.EAttribute"}],eSuperTypes:[{ref:"gkg8py",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EClassifier",id:"1qkajk4",__typename:"ecore.EClass"},{name:"EClass",abstract:!1,interface:!1,eStructuralFeatures:[{name:"abstract",lowerBound:0,upperBound:1,defaultValueLiteral:"false",eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"ur0e4",__typename:"ecore.EAttribute"},{name:"interface",lowerBound:0,upperBound:1,defaultValueLiteral:"false",eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1xrjw0v",__typename:"ecore.EAttribute"},{name:"eSuperTypes",lowerBound:0,upperBound:-1,containment:!1,eType:{ref:"1ytqrsl",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:"fnyjah",__typename:"ecore.EReference"},{name:"eStructuralFeatures",lowerBound:0,upperBound:-1,containment:!0,eType:{ref:"sgsx3q",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:"1962ap1",__typename:"ecore.EReference"},{name:"eOperations",lowerBound:0,upperBound:-1,containment:!0,eType:{ref:"2652g4",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:"18bcllj",__typename:"ecore.EReference"},{name:"eAllStructuralFeatures",lowerBound:0,upperBound:-1,derived:!0,containment:!1,eType:{ref:"sgsx3q",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"rw9bow",__typename:"ecore.EReference"},{name:"eAllSuperTypes",lowerBound:0,upperBound:-1,derived:!0,containment:!1,eType:{ref:"1ytqrsl",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"1dojmyc",__typename:"ecore.EReference"},{name:"eAllSubTypes",lowerBound:0,upperBound:-1,derived:!0,containment:!1,eType:{ref:"1ytqrsl",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"1pe0s7j",__typename:"ecore.EReference"},{name:"eAllAttributes",lowerBound:0,upperBound:-1,derived:!0,containment:!1,eType:{ref:"19x43bt",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"dxud1p",__typename:"ecore.EReference"},{name:"eAllReferences",lowerBound:0,upperBound:-1,derived:!0,containment:!1,eType:{ref:"ueic20",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"u4w9fi",__typename:"ecore.EReference"},{name:"eAllContainments",lowerBound:0,upperBound:-1,derived:!0,containment:!1,eType:{ref:"ueic20",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"nxpvsn",__typename:"ecore.EReference"},{name:"eAttributes",lowerBound:0,upperBound:-1,derived:!0,containment:!1,eType:{ref:"19x43bt",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"1eydbcy",__typename:"ecore.EReference"},{name:"eReferences",lowerBound:0,upperBound:-1,derived:!0,containment:!1,eType:{ref:"ueic20",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"1v5f7qr",__typename:"ecore.EReference"},{name:"eContainments",lowerBound:0,upperBound:-1,derived:!0,containment:!1,eType:{ref:"ueic20",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"8i8ch8",__typename:"ecore.EReference"},{name:"eIDAttribute",lowerBound:0,upperBound:1,derived:!0,containment:!1,eType:{ref:"19x43bt",eClass:"ecore.EClass",__typename:"ecore.ERef"},volatile:!1,transient:!0,id:"1gflx3q",__typename:"ecore.EReference"},{containment:!0,eType:{ref:"162gn1q",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eGenericSuperTypes",ordered:!0,unique:!0,upperBound:-1,id:"1ou49wq",__typename:"ecore.EReference"},{derived:!0,eType:{ref:"2652g4",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:"7atnaa",lowerBound:0,name:"eAllOperations",ordered:!0,transient:!0,unique:!0,upperBound:-1,volatile:!1,__typename:"ecore.EAttribute"},{derived:!0,eType:{ref:"ueic20",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:"1sj7nz1",lowerBound:0,name:"eAllNavigationProperties",ordered:!0,transient:!0,unique:!0,upperBound:-1,volatile:!1,__typename:"ecore.EAttribute"}],eOperations:[{name:"getEStructuralFeature",lowerBound:0,upperBound:1,eParameters:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1x2qp5o",lowerBound:1,name:"name",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EParameter"}],eType:{ref:"sgsx3q",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:"1nuq5n4",__typename:"ecore.EOperation"},{eParameters:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1x2qp5o",lowerBound:1,name:"name",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EParameter"}],eType:{ref:"2652g4",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:"19qwpb2",lowerBound:0,name:"getEOperation",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EOperation"},{eParameters:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1x2qp5o",lowerBound:1,name:"name",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EParameter"}],eType:{ref:"1y7v9cy",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:"na0ja",lowerBound:0,name:"getMember",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EOperation"},{eParameters:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1dpvxqe",lowerBound:1,name:"namespace",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EParameter"}],eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"dcgxyy",lowerBound:1,name:"isConcreteTypeOf",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EOperation"},{eParameters:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1hb20hl",lowerBound:1,name:"namespace",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EParameter"}],eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"176rc4t",lowerBound:1,name:"isSubTypeOf",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EOperation"},{eParameters:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"5oa7uc",lowerBound:1,name:"namespace",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EParameter"}],eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1c8o8q0",lowerBound:1,name:"isSuperTypeOf",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EOperation"}],eSuperTypes:[{ref:"1qkajk4",eClass:"ecore.EClass",__typename:"ecore.ERef"}],id:"1ytqrsl",__typename:"ecore.EClass"},{abstract:!1,eSuperTypes:[{ref:"1qkajk4",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EDataType",id:"srr57r",__typename:"ecore.EClass"},{abstract:!0,eStructuralFeatures:[{name:"eType",lowerBound:0,upperBound:1,containment:!1,eType:{ref:"1qkajk4",eClass:"ecore.EClass",__typename:"ecore.ERef"},id:"2wx2th",__typename:"ecore.EReference"},{name:"ordered",lowerBound:0,upperBound:1,defaultValueLiteral:"true",eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1d4z4mr",__typename:"ecore.EAttribute"},{name:"unique",lowerBound:0,upperBound:1,defaultValueLiteral:"true",eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"ra3sjv",__typename:"ecore.EAttribute"},{name:"lowerBound",lowerBound:0,upperBound:1,defaultValueLiteral:"0",eType:{ref:"1cmuy24",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"7wufsn",__typename:"ecore.EAttribute"},{name:"upperBound",lowerBound:0,upperBound:1,defaultValueLiteral:"1",eType:{ref:"1cmuy24",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"v4tmd2",__typename:"ecore.EAttribute"},{name:"many",lowerBound:0,upperBound:1,eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},derived:!0,volatile:!1,transient:!0,id:"19xa7o9",__typename:"ecore.EAttribute"},{name:"required",lowerBound:0,upperBound:1,eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},derived:!0,volatile:!1,transient:!0,id:"4pxxuh",__typename:"ecore.EAttribute"},{containment:!0,eType:{ref:"162gn1q",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eGenericType",ordered:!0,unique:!0,upperBound:1,id:"ew4nwm",__typename:"ecore.EReference"},{derived:!0,eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1qktwzj",lowerBound:0,name:"ns",ordered:!0,transient:!0,unique:!0,upperBound:1,volatile:!1,__typename:"ecore.EAttribute"}],eSuperTypes:[{ref:"gkg8py",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"ETypedElement",id:"gp3c9h",__typename:"ecore.EClass"},{abstract:!0,eStructuralFeatures:[{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"changeable",ordered:!0,unique:!0,upperBound:1,id:"xxxfkz",__typename:"ecore.EAttribute"},{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"volatile",ordered:!0,unique:!0,upperBound:1,id:"x854ad",__typename:"ecore.EAttribute"},{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"transient",ordered:!0,unique:!0,upperBound:1,id:"qilf81",__typename:"ecore.EAttribute"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"defaultValueLiteral",ordered:!0,unique:!0,upperBound:1,id:"1phdl9i",__typename:"ecore.EAttribute"},{eType:{ref:"qgqt0q",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"defaultValue",ordered:!0,unique:!0,upperBound:1,derived:!0,id:"1yts1ah",__typename:"ecore.EAttribute"},{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"unsettable",ordered:!0,unique:!0,upperBound:1,id:"1b4jrry",__typename:"ecore.EAttribute"},{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"derived",ordered:!0,unique:!0,upperBound:1,id:"1eq74bo",__typename:"ecore.EAttribute"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"zasmrw",lowerBound:0,name:"redefines",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"},ts["ecore.EStructuralFeature.eType"]],eSuperTypes:[{ref:"gp3c9h",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EStructuralFeature",id:"sgsx3q",__typename:"ecore.EClass"},{abstract:!1,eStructuralFeatures:[{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"iD",ordered:!0,unique:!0,upperBound:1,id:"d9e9dd",__typename:"ecore.EAttribute"},{eType:{ref:"1jdymm",eClass:"ecore.EEnum",__typename:"ecore.ERef"},id:"klgbn1",lowerBound:0,extensions:{if:{__typename:{$isKindOf:["ecore.EString","ecore.EDate"]}}},name:"format",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1wchqvu",lowerBound:0,extensions:{if:{__typename:{$isKindOf:"ecore.EString"},format:"regex"}},name:"pattern",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"},{eType:{ref:"1yvefix",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"odb7qi",lowerBound:0,extensions:{if:{__typename:{$isKindOf:["ecore.EDate","ecore.EFloat","ecore.EInt","ecore.ELong"]}}},name:"maximum",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"},{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1nqzrys",lowerBound:0,extensions:{if:{__typename:{$isKindOf:["ecore.EDate","ecore.EFloat","ecore.EInt","ecore.ELong"]}}},name:"maximumOpen",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"},{eType:{ref:"1yvefix",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"s068yg",lowerBound:0,extensions:{if:{__typename:{$isKindOf:["ecore.EDate","ecore.EFloat","ecore.EInt","ecore.ELong"]}}},name:"minimum",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"},{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1cjo1mq",lowerBound:0,extensions:{if:{__typename:{$isKindOf:["ecore.EDate","ecore.EFloat","ecore.EInt","ecore.ELong"]}}},name:"minimumOpen",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"},{description:`Numbers and dates can be restricted to a multiple of a given
          number of date. It may be set to any positive number`,eType:{ref:"1yvefix",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1owhptp",lowerBound:0,extensions:{if:{__typename:{$isKindOf:["ecore.EDate","ecore.EFloat","ecore.EInt","ecore.ELong"]}}},minimum:0,minimumOpen:!0,name:"multipleOf",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"}],eSuperTypes:[{ref:"sgsx3q",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EAttribute",id:"19x43bt",__typename:"ecore.EClass"},{abstract:!1,eStructuralFeatures:[{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"containment",ordered:!0,unique:!0,upperBound:1,id:"13g2uqz",__typename:"ecore.EAttribute"},{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"container",ordered:!0,unique:!0,upperBound:1,id:"19xvzju",__typename:"ecore.EAttribute"},{eType:{ref:"3c2e1x",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"resolveProxies",ordered:!0,unique:!0,upperBound:1,id:"1scafl3",__typename:"ecore.EAttribute"},{eType:{ref:"ueic20",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eOpposite",ordered:!0,unique:!0,upperBound:1,id:"ewmzdx",__typename:"ecore.EReference"}],eSuperTypes:[{ref:"sgsx3q",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EReference",id:"ueic20",__typename:"ecore.EClass"},{abstract:!1,eOperations:[{eType:{ref:"qgqt0q",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"129slhk",lowerBound:1,name:"compile",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EOperation"}],eStructuralFeatures:[{containment:!0,eType:{ref:"6zug2u",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eParameters",ordered:!0,unique:!0,upperBound:-1,id:"1qq12dg",__typename:"ecore.EReference"},{containment:!0,eType:{ref:"162gn1q",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eGenericExceptions",ordered:!0,unique:!0,upperBound:-1,id:"cwvstd",__typename:"ecore.EReference"},{containment:!0,eType:{ref:"jsn2a4",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eTypeParameters",ordered:!0,unique:!0,upperBound:-1,id:"oiluzi",__typename:"ecore.EReference"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1210ffx",lowerBound:0,extensions:{ecoreFields:{meta:{component:{props:{hasFunctionBlock:!0,label:"body"}}}}},name:"body",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"}],eSuperTypes:[{ref:"gp3c9h",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EOperation",id:"2652g4",__typename:"ecore.EClass"},{abstract:!1,eSuperTypes:[{ref:"gp3c9h",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EParameter",id:"6zug2u",__typename:"ecore.EClass"},{abstract:!1,eStructuralFeatures:[{containment:!0,eType:{ref:"xbr6nf",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eLiterals",ordered:!0,unique:!0,upperBound:-1,id:"4pnszi",__typename:"ecore.EReference"}],eSuperTypes:[{ref:"srr57r",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EEnum",id:"g17mhw",__typename:"ecore.EClass"},{abstract:!1,eStructuralFeatures:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"literal",ordered:!0,unique:!0,upperBound:1,id:"1i8derv",__typename:"ecore.EAttribute",description:"The string value that represents this enumerator value. It's value will be used in persisting instances of this enumerated type. If unset of set to null, it will return the name, instead."},{eType:{ref:"1cmuy24",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"value",ordered:!0,unique:!0,upperBound:1,id:"1myserx",__typename:"ecore.EAttribute",description:"the integer value that represents this enumerator."}],eSuperTypes:[{ref:"gkg8py",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EEnumLiteral",id:"xbr6nf",__typename:"ecore.EClass"},{abstract:!1,eStructuralFeatures:[{containment:!0,eType:{ref:"162gn1q",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eBounds",ordered:!0,unique:!0,upperBound:-1,id:"yxju0n",__typename:"ecore.EReference"},{containment:!1,eType:{ref:"162gn1q",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eGenericTypes",ordered:!0,unique:!0,upperBound:-1,id:"yamu78",__typename:"ecore.EReference"}],eSuperTypes:[{ref:"gkg8py",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"ETypeParameter",id:"jsn2a4",__typename:"ecore.EClass"},{abstract:!1,eStructuralFeatures:[{containment:!1,eType:{ref:"jsn2a4",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eTypeParameter",ordered:!0,unique:!0,upperBound:1,id:"1q7pwa3",__typename:"ecore.EReference"},{containment:!0,eType:{ref:"162gn1q",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eUpperBound",ordered:!0,unique:!0,upperBound:1,id:"x6r334",__typename:"ecore.EReference"},{containment:!0,eType:{ref:"162gn1q",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eLowerBound",ordered:!0,unique:!0,upperBound:1,id:"9yrwip",__typename:"ecore.EReference"},{containment:!0,eType:{ref:"162gn1q",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eTypeArguments",ordered:!0,unique:!0,upperBound:-1,id:"1v9avrs",__typename:"ecore.EReference"},{eType:{ref:"1qkajk4",eClass:"ecore.EClass",__typename:"ecore.ERef"},lowerBound:0,name:"eClassifier",ordered:!0,unique:!0,upperBound:1,id:"1kht37p",__typename:"ecore.EReference"}],eSuperTypes:[{ref:"1y7v9cy",eClass:"ecore.EClass",__typename:"ecore.ERef"}],interface:!1,name:"EGenericType",id:"162gn1q",__typename:"ecore.EClass"},{abstract:!1,eStructuralFeatures:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"key",ordered:!0,unique:!0,upperBound:1,id:"a9b8iu",__typename:"ecore.EAttribute"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},lowerBound:0,name:"value",ordered:!0,unique:!0,upperBound:1,id:"1khdxyw",__typename:"ecore.EAttribute"}],interface:!1,name:"EStringToStringMapEntry",id:"ygms5y",__typename:"ecore.EClass"},{name:"EString",id:"1cz6r8",__typename:"ecore.EDataType"},{name:"EBoolean",id:"3c2e1x",__typename:"ecore.EDataType"},{name:"EInt",id:"1cmuy24",__typename:"ecore.EDataType"},{name:"EDouble",id:"1t7ppkk",__typename:"ecore.EDataType"},{name:"EIntegerObject",id:"1o7mtwa",__typename:"ecore.EDataType"},{name:"EFloatObject",id:"1qye75k",__typename:"ecore.EDataType"},{name:"ELongObject",id:"1i0szsu",__typename:"ecore.EDataType"},{name:"EMap",id:"1cmv0pl",__typename:"ecore.EDataType"},{name:"EDiagnosticChain",id:"ts1e53",__typename:"ecore.EDataType"},{name:"EDate",id:"g16pu9",__typename:"ecore.EDataType"},{name:"EShort",id:"1d5q1",__typename:"ecore.EDataType"},{name:"EFloat",id:"1yvefix",__typename:"ecore.EDataType"},{name:"ELong",id:"g1c3z3",__typename:"ecore.EDataType"},{name:"EDoubleObject",id:"197hbtf",__typename:"ecore.EDataType"},{name:"JSObject",id:"qgqt0q",__typename:"ecore.EDataType"},{eLiterals:[{description:`An ENamedElement with public visibility is visible to all elements that
          can access the contents of the Namespace that owns it.`,id:"1dqzwy7",name:"public",value:0,__typename:"ecore.EEnumLiteral"},{description:"An ENamedElement with private visibility is only visible inside the Namespace that owns it.",id:"1dag5ct",name:"private",value:1,__typename:"ecore.EEnumLiteral"},{description:`An ENamedElement with protected visibility is visible to Elements that 
          have a generalization relationship to the Namespace that owns it.`,id:"6g1h3c",name:"protected",value:2,__typename:"ecore.EEnumLiteral"},{description:`An ENamedElement with package visibility is visible to all Elements 
          within the nearest enclosing Package (given that other owning Elements have proper 
          visibility). Outside the nearest enclosing Package, a NamedElement marked as having 
          package visibility is not visible. Only NamedElements that are not owned by Packages 
          can be marked as having package visibility`,id:"1556rxc",name:"package",value:3,__typename:"ecore.EEnumLiteral"}],id:"1yhuvft",name:"EVisibilityKind",__typename:"ecore.EEnum"},{abstract:!1,eStructuralFeatures:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"k6lpxw",lowerBound:1,name:"ref",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"},{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"15tjea",lowerBound:0,name:"eClass",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"}],eSuperTypes:[{ref:"9shti",eClass:"ecore.EClass",__typename:"ecore.ERef"}],id:"1cmv4i8",interface:!1,name:"ERef",__typename:"ecore.EClass"},{abstract:!1,description:`A PackageImport is a Relationship that imports all the non-private members 
    of a Package into the Namespace owning the PackageImport, so that those Elements may be 
    referred to by their unqualified names in the importingNamespace`,eStructuralFeatures:[{eType:{ref:"1cz6r8",eClass:"ecore.EDataType",__typename:"ecore.ERef"},id:"1rnc57q",lowerBound:0,name:"importType",ordered:!0,unique:!0,upperBound:1,__typename:"ecore.EAttribute"}],eSuperTypes:[{ref:"1cmv4i8",eClass:"ecore.EClass",__typename:"ecore.ERef"}],id:"1vjrb7s",interface:!1,name:"EImport",__typename:"ecore.EClass"},{eLiterals:[{id:"3icntb",name:"date",value:"date",__typename:"ecore.EEnumLiteral"},{id:"1rpub5o",name:"dateTime",value:"dateTime",__typename:"ecore.EEnumLiteral"},{id:"3in1da",name:"time",value:"time",__typename:"ecore.EEnumLiteral"},{id:"14hq7p",name:"duration",value:"duration",__typename:"ecore.EEnumLiteral"},{id:"11sjisb",name:"email",value:"email",__typename:"ecore.EEnumLiteral"},{id:"zge0i2",name:"idnEmail",value:"idnEmail",__typename:"ecore.EEnumLiteral"},{id:"t3zmvo",name:"hostname",value:"hostname",__typename:"ecore.EEnumLiteral"},{id:"gfait",name:"idnHostname",value:"idnHostname",__typename:"ecore.EEnumLiteral"},{id:"3ig5vq",name:"ipv4",value:"ipv4",__typename:"ecore.EEnumLiteral"},{id:"3ig5vs",name:"ipv6",value:"ipv6",__typename:"ecore.EEnumLiteral"},{id:"3ikbnq",name:"path",value:"path",__typename:"ecore.EEnumLiteral"},{id:"3inx5o",name:"uuid",value:"uuid",__typename:"ecore.EEnumLiteral"},{id:"1gtaquj",name:"uri",value:"uri",__typename:"ecore.EEnumLiteral"},{id:"1qhd89s",name:"uriReference",value:"uriReference",__typename:"ecore.EEnumLiteral"},{id:"1gtahy7",name:"iri",value:"iri",__typename:"ecore.EEnumLiteral"},{id:"10v4xws",name:"iriReference",value:"iriReference",__typename:"ecore.EEnumLiteral"},{id:"f0tqth",name:"uriTemplate",value:"uriTemplate",__typename:"ecore.EEnumLiteral"},{id:"x2vupg",name:"jsonPointer",value:"jsonPointer",__typename:"ecore.EEnumLiteral"},{id:"1wawb0o",name:"relativeJsonPointer",value:"relativeJsonPointer",__typename:"ecore.EEnumLiteral"},{id:"11zjuyu",name:"regex",value:"regex",__typename:"ecore.EEnumLiteral"}],id:"1jdymm",name:"EFormatKind",__typename:"ecore.EEnum"}],name:"ecore",nsPrefix:"ecore",nsURI:"http://www.eclipse.org/emf/2002/Ecore",id:"ayyhql",version:"1.0.0",__typename:"ecore.EPackage"},rs={eClassifiers:[{__typename:"ecore.EDataType",id:o.hashString("https://www.obiwan.eu/metamodels/ecore/ext#//Any"),name:"Any"},{__typename:"ecore.EClass",id:o.hashString("https://www.obiwan.eu/metamodels/ecore/ext#//EPackage"),name:"EPackage",extensions:{extends:{ref:o.hashString("http://www.eclipse.org/emf/2002/Ecore#//EPackage"),eClass:"ecore.EClass",__typename:"ecore.ERef"}},eStructuralFeatures:[{__typename:"ecore.EAttribute",id:o.hashString("https://www.obiwan.eu/metamodels/ecore/ext#//EPackage/implementations"),name:"implementation",lowerBound:0,upperBound:1,eType:{ref:o.hashString("http://www.eclipse.org/emf/2002/Ecore#//JSObject"),eClass:"ecore.EDataType",__typename:"ecore.ERef"}}]},{__typename:"ecore.EClass",id:o.hashString("https://www.obiwan.eu/metamodels/ecore/ext#//EClass"),name:"EClass",extensions:{extends:{ref:o.hashString("http://www.eclipse.org/emf/2002/Ecore#//EClass"),eClass:"ecore.EClass",__typename:"ecore.ERef"}},eStructuralFeatures:[{__typename:"ecore.EReference",id:o.hashString("https://www.obiwan.eu/metamodels/ecore/ext#//EClass/eConstructor"),name:"eConstructor",lowerBound:0,upperBound:1,containment:!0,eType:{__typename:"ecore.ERef",eClass:"ecore.EClass",ref:o.hashString("https://www.obiwan.eu/metamodels/ecore#//EOperation")}},{__typename:"ecore.EReference",id:o.hashString("https://www.obiwan.eu/metamodels/ecore/ext#//EClass/extends"),name:"extends",lowerBound:0,upperBound:1,containment:!1,eType:{ref:"1ytqrsl",eClass:"ecore.EClass",__typename:"ecore.ERef"}}]},{__typename:"ecore.EClass",id:o.hashString("https://www.obiwan.eu/metamodels/ecore/ext#//EReference"),name:"EReference",extensions:{extends:{ref:o.hashString("http://www.eclipse.org/emf/2002/Ecore#//EReference"),eClass:"ecore.EClass",__typename:"ecore.ERef"}},eStructuralFeatures:[{__typename:"ecore.EAttribute",id:o.hashString("https://www.obiwan.eu/metamodels/ecore/ext#//EClass/aggregation"),name:"aggregation",lowerBound:0,upperBound:1,eType:{ref:o.hashString("https://www.obiwan.eu/metamodels/ecore#//EBoolean"),eClass:"ecore.EClass",__typename:"ecore.ERef"}}]}],name:"ext",nsPrefix:"ecore.ext",nsURI:"https://www.obiwan.eu/metamodels/ecore/ext",id:o.hashString("https://www.obiwan.eu/metamodels/ecore/ext"),version:"1.0.0",__typename:"ecore.EPackage"};function ns(r){r||(r=this);const{registry:e}=r;e.add(Ee);function t(d,E,g){const C=new ar;E&&(C.eClass=E),g&&(C.store=g);const w=C.node=Object.create(x.prototype);d&&Object.assign(w,d);const S=C.proxy=Fe(w);return x.setHelper(S,C),g._add(S),S}function n(d){o.isString(d)&&(d=e.get(d));let E={};return{attrs:o.pickBy(d,(C,w)=>w==="extensions"||C.__typename==="ecore.JSObject"?!0:typeof C=="object"?(E[w]=C,!1):!0),data:d,refs:E}}const s={},i=o.groupBy(Ee.eClassifiers,"__typename");let a=n("ecore.EClass"),u=t(a.attrs,null,r);u.$.eClass=u,u.$.memoize=!1,s["ecore.EClass"]=u;const c=n("ecore.EClass.eStructuralFeatures");let l=t(c.attrs,null,r);l.$.eContainer=u,l.$.eContainingFeature=l,s["ecore.EClass.eStructuralFeatures"]=l;const f=n("ecore.EClass.eSuperTypes");let p=t(f.attrs,null,r);p.$.eContainer=u,p.$.eContainingFeature=p,s["ecore.EClass.eSuperTypes"]=p,o.forEach(i["ecore.EClass"],d=>{if(d.name==="EClass")return;const{attrs:E}=n(d);let g=t(E,u,r);const C=`ecore.${d.name}`;s[C]=g}),o.forEach(i["ecore.EDataType"],d=>{const{attrs:E}=n(d);let g=t(E,u,r);const C=`ecore.${d.name}`;s[C]=g}),o.forEach(i["ecore.EEnum"],d=>{const{attrs:E}=n(d);let g=t(E,s["ecore.EEnum"],r);const C=`ecore.${d.name}`;s[C]=g}),o.forEach(i["ecore.EClass"],d=>{const E=r.get(d.id),g=E.$.node;if(d.eStructuralFeatures){const C=s["ecore.EClass.eStructuralFeatures"];g.eStructuralFeatures=new R(E,C);let w;o.forEach(d.eStructuralFeatures,S=>{if(S.id===l.id)w=l,w.$.eClass=s["ecore.EReference"],w.$.node.eType=r.get(S.eType.id),g.eStructuralFeatures.push(w);else if(S.id===p.id)w=p,w.$.eClass=s["ecore.EReference"],w.$.node.eType=r.get(S.eType.id),g.eStructuralFeatures.push(w);else{const{attrs:j}=n(S),H=s[S.__typename];w=t(j,H,r),w.$.eContainer=E,w.$.eContainingFeature=C,w.$.node.eType=r.get(S.eType.id),g.eStructuralFeatures.push(w),s[`ecore.${g.name}.${j.name}`]=w}})}d.eSuperTypes&&(g.eSuperTypes=new R(E,s["ecore.EClass.eSuperTypes"]),o.forEach(d.eSuperTypes,C=>{const w=r.get(C.id);g.eSuperTypes.push(w)}))});const{attrs:y}=n(Ee);let m=t(y,s["ecore.EPackage"],r);const h=s["ecore.EPackage.eClassifiers"],$=m.$.node.eClassifiers=new R(m,h);return o.forEach(Ee.eClassifiers,d=>{const E=r.get(d.id);E.$.eContainer=m,E.$.eContainingFeature=h,$.push(E)}),o.forEach(i["ecore.EClass"],d=>{const E=r.get(d.id),g=E.$.node;if(d.eOperations){const C=s["ecore.EClass.eOperations"];if(g.eOperations=new R(E,C),o.forEach(d.eOperations,w=>{const{attrs:S}=n(w),j=s[w.__typename];let H=t(S,j,r);H.$.node.eType=r.get(w.eType.id),H.$.eContainer=E,H.$.eContainingFeature=C,g.eOperations.push(H),w.eParameters&&(H.eParameters=w.eParameters)}),g.name==="EClass"){let w=se.get(u);w=new Map,se.set(u,w)}}}),o.forEach(i["ecore.EEnum"],d=>{let E=r.get(d.id);if(d.eLiterals){const g=s["ecore.EEnum.eLiterals"];E.$.node.eLiterals=new R(E,g),o.forEach(d.eLiterals,C=>{const w=t(C,s["ecore.EEnumLiteral"],r);w.$.eContainer=E,w.$.eContainingFeature=g,E.$.node.eLiterals.push(w)})}}),o.forEach(r.nodes,d=>{d.$.hash=d.$.toChecksum()}),u.$.on("changed:node",({node:d,key:E})=>{if({eAnnotations:1,eStructuralFeatures:1,eSuperTypes:1,eOperations:1}[E]){se.delete(d);const{eAllSubTypes:g}=d;o.forEach(g,C=>{se.delete(C)})}}),m}const O=es(Ee);function ss(r){if(!r)return!1;const e=o.isString(r)?r:r==null?void 0:r.name;return this.__typename===e}function U(r){if(!r)return!1;if(ss.call(this,r))return!0;const e=o.isString(r)?r:r==null?void 0:r.name,t=me.call(this.$.eClass);return o.some(t,n=>Se.call(n)===e)}function Se(){const r=this.$;if(r.node.nsPrefix)return r.node.nsPrefix;{if(!r.eContainer)return"";const e=Se.call(r.eContainer);return e?`${e}.${r.node.name}`:r.node.name}}O["ecore.EClassifier.ns"]._=Se;let Ve=null;const me=N(function(){Ve===null&&(Ve=o.find(this.$.eClass.$.node.eStructuralFeatures,{name:"eAllSuperTypes"}));const e=new $e({key:"id",owningFeature:Ve,owner:this,unique:!0}),t=new WeakMap;function n(s){t.get(s)||(t.set(s),e.add(s),s.$.node.eSuperTypes&&o.forEach(s.eSuperTypes,i=>{n(i)}))}return o.forEach(this.eSuperTypes,n),e});O["ecore.EClass.eAllSuperTypes"]._=me;let Ue=null;const he=N(function(){Ue===null&&(Ue=o.find(this.$.eClass.$.node.eStructuralFeatures,{name:"eAllStructuralFeatures"}));const e=new $e({key:"name",owningFeature:Ue,owner:this,unique:!0});o.forEach(this.$.node.eStructuralFeatures,n=>{e.add(n)});const t=me.call(this);return o.forEach(t,n=>{o.forEach(n.$.node.eStructuralFeatures,s=>{e.add(s)})}),o.sortBy(e,"name")});O["ecore.EClass.eAllStructuralFeatures"]._=he;const is=N(function(){const e=x.getHelper(this),t=o.get(e.store,"indices.__typename.index['ecore.EClass']");if(!t)return;const n=e.node.id;return o.filter(t,s=>o.find(s.eAllSuperTypes,{id:n}))});O["ecore.EClass.eAllSubTypes"]._=is;const ur=N(function(){const e=he.call(this),t=o.filter(e,n=>U.call(n,"ecore.EAttribute"));return o.sortBy(t,n=>n.$.node.name)});O["ecore.EClass.eAllAttributes"]._=ur;const os=N(function(){const e=he.call(this),t=o.filter(e,n=>U.call(n,"ecore.EReference"));return o.sortBy(t,n=>n.$.node.name)});O["ecore.EClass.eAllReferences"]._=os;const as=N(function(){const e=he.call(this),t=o.filter(e,n=>n.$.node.containment);return o.sortBy(t,n=>n.$.node.name)});O["ecore.EClass.eAllContainments"]._=as;const us=N(function(){if(!this.$.node.eStructuralFeatures)return[];const e=o.filter(this.eStructuralFeatures,t=>U.call(t,"ecore.EAttribute"));return o.sortBy(e,t=>t.$.node.name)});O["ecore.EClass.eAttributes"]._=us;const cs=N(function(){if(!this.$.node.eStructuralFeatures)return[];const e=o.filter(this.eStructuralFeatures,t=>n=>U.call(n,"ecore.EReference"));return o.sortBy(e,t=>t.$.node.name)});O["ecore.EClass.eReferences"]._=cs;const ls=N(function(){if(!this.$.node.eStructuralFeatures)return[];const e=o.filter(this.eStructuralFeatures,t=>t.$.node.containment);return o.sortBy(e,t=>t.$.node.name)});O["ecore.EClass.eContainments"]._=ls;const fs=N(function(){const e=ur.call(this);return o.find(e,n=>n.$.node.iD===!0)||null});O["ecore.EClass.eIDAttribute"]._=fs;let He=null;const cr=N(function(){He===null&&(He=o.find(this.$.eClass.$.node.eStructuralFeatures,{name:"eAllOperations"}));const e=new $e({key:"name",owningFeature:He,owner:this,unique:!0});o.forEach(this.$.node.eOperations,n=>{e.add(n)});const t=me.call(this);return o.forEach(t,n=>{o.forEach(n.$.node.eOperations,s=>{e.add(s)})}),o.sortBy(e,"name")});O["ecore.EClass.eAllOperations"]._=cr;const ps=N(function(e){return Ae.call(this,e)||ct.call(this,e)},function(r){return`getMember("${r}")`});O["ecore.EClass.getMember"]._=ps;const ct=N(function(e){o.isString(e)||(e=e==null?void 0:e.name);const t=cr.call(this);return o.find(t,n=>n.$.node.name===e)},function(r){return`getEOperation("${r}")`});O["ecore.EClass.getEOperation"]._=ct;const Ae=N(function(e){if(!e)return;o.isString(e)||(e=e==null?void 0:e.name);const t=o.split(e);let n=this,s;return o.forEach(t,(i,a)=>{const u=he.call(n);if(s=o.find(u,c=>c.$.node.name===i),!s)return!1;a<t.length-1&&(n=s.eType)}),s},function(r){return`getEStructuralFeature("${r}")`});O["ecore.EClass.getEStructuralFeature"]._=Ae;const ds=N(function(e){const t=typeof e=="string"?this.$.store.getType(e):e,n=me.call(this);return!!o.find(n,s=>s===t)},function(r){return`isSubTypeOf("${r}")`});O["ecore.EClass.isSubTypeOf"]._=ds;const ms=N(function(e){const t=typeof e=="string"?this.$.store.getType(e):e,n=me.call(t);return!!o.find(n,s=>s===this)},function(r){return`isSuperTypeOf("${r}")`});O["ecore.EClass.isSuperTypeOf"]._=ms;const hs=N(function(e){return o.find(this.eAnnotations,{source:e})},function(r){return`getAnnotation("${source}")`});O["ecore.EModelElement.getAnnotation"]._=hs;function lr(r=!1){if(this.$.node._)return this.$.node._;throw new ie("ecore.EOperation.compile")}O["ecore.EOperation.compile"]._=lr;O["ecore.EPackage.ns"]._=Se;O["ecore.EStructuralFeature.defaultValue"]._=function(){if(this.defaultValueLiteral===void 0)return;const r=this.$.node,e=o.get(r,"eType.extensions.baseType");if(e)return e==="string"?defaultValueLiteral:JSON.parse(defaultValueLiteral);{let t;if(this.defaultValueLiteral==="null")t=null;else if(o.isFunction(this.defaultValueLiteral))t=this.defaultValueLiteral();else if(typeof this.defaultValueLiteral=="object")t=o.retrocycle(o.decycle(this.defaultValueLiteral));else try{t=JSON.parse(this.defaultValueLiteral)}catch{t=this.defaultValueLiteral}return t}};function ys(){return this.upperBound!==1}O["ecore.ETypedElement.many"]._=ys;function _s(){return this.lowerBound===1}O["ecore.ETypedElement.required"]._=_s;O["ecore.ETypedElement.ns"]._=Se;class Rt extends Oe{constructor(e){if(super(),this.id=o.randomId(),this.scratch={},this.cache=new WeakMap,Object.assign(this,e),!this.method)throw new G("method")}apply(){let{args:e,context:t,method:n}=this;if(o.isString(n)&&(n=t==null?void 0:t[n]),o.isFunction(n)){e!==void 0&&!o.isArray(e)&&(e=[e]);try{this.startedAt=new Date,this.result=n.apply(t,e)}catch(s){this.errors=s}finally{this.endedAt=new Date}}else throw new oe("method is not a function")}stop(){}}class Es extends Oe{constructor(){super(),this.id=o.randomId(),this.ePackages=[],this.namespaces={},this.index={},this.add=this.register,this.remove=this.unregister}get(e){return this.namespaces[e]}register(e,t=!1){if(o.isNil(e.nsPrefix))throw new oe("ePackage.nsPrefix is required");let n=this.get(e.nsPrefix);if(n&&!t)return n;this.namespaces[e.nsPrefix]=e,e.nsURI&&(this.namespaces[e.nsURI]=e);const s=this;o.forEach(e.eSubPackages,u=>{s.register(u)});const i={};function a({obj:u}){const c=[];function l({obj:f,parent:p,key:y,ns:m}){if(f.__typename==="ecore.ERef"){c.push({obj:p,key:y,eRef:f});return}f.id;let h;if(f.__typename){if(s.index[f.id])return;s.index[f.id]=f,f===e?h=e.nsPrefix:m!==void 0&&(m===""?h=f.name||f.id:h=`${m}.${f.name||f.id}`),h!==void 0&&(s.namespaces[h]=f),f._&&(i[h]=f._)}else return;o.forIn(f,($,d)=>{d!=="extensions"&&(o.isNil($)||(o.isArray($)?o.forEach($,E=>l({obj:E,parent:f,key:d,ns:h})):typeof $=="object"&&l({obj:$,parent:f,key:d,ns:h})))})}return l({obj:u}),o.forEach(c,({obj:f,key:p,eRef:y})=>{const m=s.index[y.ref];if(m)if(o.isArray(f[p])){const h=f[p].indexOf(y);h===-1||f[p].splice(h,1,m)}else f[p]=m}),c}return a({obj:e}),this.ePackages.push(e),o.isEmpty(i)?void 0:i}unregister(e){}}class fr extends Oe{}class Rs extends fr{constructor(e){super();const t=this;if(this._isProcessing=new Map,this._preventEmit=new Map,this.registry=new Es,this.indices={},this.createIndex({fields:"__typename",name:"__typename"}),this.links={index:{},_getKey({feature:n,source:s,target:i}){return`(${s.id})-[${n.name}]->(${i.id})`},create({source:n,feature:s,target:i}){},get(n){if(!n)return;const s=o.isString(n)?n:this._getKey(n);return this.index[s]},remove(n){const s=this,i=this.get(n);!i||o.forEach(o.castArray([...i]),a=>{o.pull(i,a),o.isEmpty(i)&&s.unset(a.key);let u=this.sourceIds[a.source.id];u&&o.pull(u,a),o.isEmpty(u)&&delete this.sourceIds[a.source.id];let c=this.targetsIds[a.target.id];c&&o.pull(c,a),o.isEmpty(c)&&delete this.targetsIds[a.target.id]})},set({feature:n,source:s,target:i}){const a=this._getKey({feature:n,source:s,target:i}),u=this.get(a),c={feature:n,key:a,name:n.name,source:s,state:"creating",target:i};if(c.$={link:c,store:t,remove(){this.store.links.remove(this.link)}},u)u.push(c);else{this.index[a]=[c];let l=this.sourceIds[s.id];l||(l=this.sourceIds[s.id]=[]),l.push(c);let f=this.targetsIds[i.id];f||(f=this.targetsIds[i.id]=[]),f.push(c)}return c},sourceIds:{},targetsIds:{},unset(n){const s=o.isString(n)?n:this._getKey(n);this.index[s]&&delete this.index[s]}},this.nodes=[],this.nodesById={},ns(this),this.createIndex({name:"eClassifiers",filter(n){return n.$.isKindOf("ecore.EClassifier")},fields:"ns",unique:!0}),this.registerPackage(rs),o.isEmpty(e)||Object.assign(this,e),this.schema)try{this.registerPackage(this.schema);const n=!0}catch{}this._initialized=!0}static fromJSON(e){}_add(e){var n;const t=e.$;t.storedAt=new Date,this.nodes.push(e),this.nodesById[e.id]=e,o.forIn(this.indices,s=>{s._add(e)}),this.emit("added",{node:e}),this.emit(`added:${e.id}`,{node:e}),(n=t.eClass)==null||n.$.emit("added:node",{node:e})}_getData(e,t){var i;const n=this;let s=this.nodes;if(e){const a=(e==null?void 0:e.name)||e,u=this.indices[a];if(!u)return;if(u.unique)return u.index;const c=u._extractKey(t);return u.index[c]||[]}else o.isString(t.__typename)?s=n._getData("__typename",t):(i=t.__typename)!=null&&i.$in&&(s=o.reduce(t.__typename.$in,(a,u)=>{const c=n._getData("__typename",{__typename:u});return c!=null&&c.length&&(a=[...a,...c]),a},[]));return s}addNode(e){var f;const t=this;let{data:n,eClass:s,source:i,feature:a,resource:u,transaction:c}=e;if(c===!0&&(c=new Rt({args:{...e,transaction:c},context:t,method:t.createNode})),c)return c.apply();if(o.isArray(n))return o.map(n,p=>t.addNode({...e,data:p}));let l=this.get(n.id)||this._isProcessing.get(n.id);if(l)return a!=null&&a.$.node.containment&&(l.$.eContainingFeature=a,i||console.log("ZOU NIET VOOR MOGEN KOMEN!"),l.$.eContainer=i),u&&l.$.merge(e),l;if(n||(n={}),!s){if(!n.__typename&&a){const p=o.filter((f=a.eType)==null?void 0:f.eAllSubTypes,y=>!y.$.node.abstract&&!y.$.node.interface);p.length===1&&(n.__typename,p[0].ns)}if(!n.__typename)throw new G("data.__typename");if(s=this.getType(n.__typename),!s)throw new We(`EClass with namespace '${n.__typename}' does not exist in the registry`)}return l=new x({...e,data:n,eClass:s,store:this,transaction:c}),this._add(l),l}createIndex(...e){const t=sr.apply(this,e);o.forEach(this.nodes,n=>t._add(n)),this.emit("index:created",t)}createStoreId(e,t=!1){if(!(e!=null&&e.__typename))throw new G("data.__typename");if(!(e!=null&&e.id))throw new G("data.id");const{__typename:n,id:s}=e;if(t){const i=btoa(`${n}:${s}`);return o.endsWith(i,"=")?i.replaceAll("=",""):i}else return`${n}:${s}`}construct(e){if(!(e!=null&&e.__typename))throw new G("data.__typename");let t=this.getType(e.__typename);if(!t)throw new We(`EClass with namespace '${__typename}' does not exist in the registry`);return new x({data:e,eClass:t,store:this})}createNode(e){let{transaction:t}=e;e={...e,__isCreating:!0};const n=this;if(t===!0&&(t=new Rt({args:e,context:n,method:n.createNode})),t)return t.apply();e.data||(e.data={__typename:e.eClass.ns}),e.data.id||(e.data.id=o.randomId());const s=this.addNode(e),i=s.$;return i.createdAt=new Date,this.emit("created",{node:s}),this.emit(`created:${s.id}`,{node:s}),i.eClass.$.emit("created:node",{node:s}),s}decycle(e,t={containments:!0}){var u;const n={},{eClass:s}=e.$,i=(u=s.getEOperation("toJSON"))==null?void 0:u._,a=i?i.call(e):e;return o.forIn(a,(c,l)=>{const f=s.getEStructuralFeature(l);if(f){if(f.derived||f.transient)return;if(f.$.extendedFrom){console.log("Waarom deze feature uitsluiten?");return}}else{l==="__typename"&&(n[l]=c);return}o.isNil(c)?c===null&&(n[l]=null):f.$.isKindOf("ecore.EReference")?f.containment&&(t==null?void 0:t.containments)!=="asRefs"?f.upperBound!==1?n[l]=o.map(c,p=>p.$.decycle()):n[l]=c.$.decycle():f.upperBound!==1?n[l]=o.map(c,p=>new Y(p)):n[l]=new Y(c):f.eType.ns==="ecore.JSObject"?o.decycle(c)!==void 0&&(n[l]=o.decycle(c)):(Bt(c)&&(c=yr(c)),n[l]=c)}),n}dropIndex(e){this.indices[e]&&delete this.indices[e]}get(e,t){if(t){const n=this._getData(t);return n==null?void 0:n[e]}else return this.nodesById[e]}getRootClasses(){let e=new Set;const t=this.filter({__typename:"ecore.EPackage",name:"Query"});return o.forEach(t,(n,s)=>{o.forEach(s.eAllStructuralFeatures,({eType:i,many:a})=>{i.$.instanceOf("ecore.EClass")&&e.add(i)})}),o.forEach(Array.from(e),n=>{o.forEach(n.eAllSubTypes,s=>{s.$.node.abstract||s.$.node.interface||e.add(s)})}),o.sortBy(Array.from(e),"ns")}getType_OLD(e){return this.indices.eClassifiers?this.get(e,"eClassifiers"):o.find(this.indices.__typename.index["ecore.EClass"],t=>t.ns===e)}getType(e){let t=this.get(e,"eClassifiers");return t||(t=o.find(this.nodes,n=>{if(!!n.$.isKindOf("ecore.EClassifier")){if(!n.ns)console.log("Warning: EClassifier without ns");else if(n.ns===e)return this.indices.eClassifiers&&this.indices.eClassifiers._add(n),!0}})),t}fetch(){throw new ie("Store.fetch not implemented")}findOne(e,t){const n=this.filter(e,t,!0);return(n==null?void 0:n.length)===0?void 0:n}filter(e,t,n){const s=this._getData(t,e);return or(s,e,o.get(this,"options.filter.mapCriteria"),n)}implementResolvers(e,t){t||(t=e==null?void 0:e.implementations),o.forEach(t,n=>{n._;const{store:s}=e.$,i=s.get(n.source)||s.registry.get(n.source);if(!i)return;const a={lodash:o};function u(l){return a[l]}function c(l,f){a[l]=f}n._({element:i,store:s,require:u,register:c})})}query(e,t){const n=this;if(!e)return;e.query&&(e=e.query);let s=[];return e.__name,!t&&e.__variables&&(t=e.__variables),o.forIn(e,(i,a)=>{if(o.startsWith(a,"__"))return;let u=i.__aliasFor||a;const{__all_on:c,__on:l,__args:f}=i;let p;if(l)p=tt.call(this,{...f,filter:{...f==null?void 0:f.filter,__typename:{$in:o.flatMap(l,y=>y.__typename||y.__typeName)}}});else{const y=n.getType(u);if(!y)return;const m=[y,...y.eAllSubTypes].filter(h=>!h.abstract&&!h.interface);o.isEmpty(m)||(p=tt.call(this,{...f,filter:{...f==null?void 0:f.filter,__typename:{$in:o.flatMap(m,h=>h.ns)}}}))}o.forEach(p,y=>s.push(y))}),s}registerPackage(e,t=!1){const n=this;if(this.get(e.id)&&!t)return;const i=this.registry.add(e,t),a=this.addNode({data:e}).$.node;i&&o.forIn(i,(c,l)=>{var y;const f=(y=this.registry.get(l))==null?void 0:y.id;if(!f)return;const p=this.get(f);p&&(p._=c)}),e.implementation&&o.forIn(e.implementation,(c,l)=>{var y;const f=(y=this.registry.get(`${e.nsPrefix}.${l}`))==null?void 0:y.id;if(!f)return;const p=this.get(f);p&&(p._=c)});function u(c,l){l.eSuperTypes?l.eSuperTypes.push(c):l.eSuperTypes=c}return o.forEach(a.eClassifiers,c=>{if(c.$.isKindOf("ecore.EClass")){let{extends:l}=c;!l&&c.$.eContainer.nsPrefix==="ecore.ext"&&(l=n.getType(`ecore.${c.name}`)),l&&(l.__typename==="ecore.ERef"?n.once(`added:${l.ref}`,({node:f})=>{u(c,f)}):l.$.isKindOf("ecore.EClass")&&u(c,l))}n.indices.eClassifiers._add(c)}),a}remove(e){if(o.isArray(e))return o.map(e,n=>this.remove(n));const t=e.$;if(t.removedAt)return e;if(t.removedAt=new Date,o.pull(this.nodes,e),o.forIn(this.indices,n=>{n._remove(e)}),t.emit("removed"),this.emit("removed",{node:e}),this.emit(`removed:${e.id}`,{node:e}),t.eClass.$.emit("removed:node",{node:e}),t.eContainer&&!t.eContainer.$.removedAt){const n={};n[t.eContainingFeature.name]=e.$.toRef(),t.eContainingFeature.$.emit("updated",{modifier:{$unset:n}})}return e}restore(){}retrocycle(e){return this.addNode({data:o.retrocycle(e)})}stitch(e){if(o.isEmpty(e))return;const t=o.keyBy(e,"id");function n(s){o.forIn(s,(i,a)=>{if(typeof i=="object"&&i!==null){if(o.isArray(i)){if(o.isEmpty(i))return;s[a]=o.map(i,u=>{if(Y.isNodeRef(u)){const c=t[u.ref];return c||u}return u})}else if(Y.isNodeRef(i)){const u=t[i.ref];u&&(s[a]=u)}}})}return o.forEach(e,n),e}}const Re=new WeakMap,gs=new WeakMap;let pr,rt,Ne;function $s(r,e){let t=[];if(r instanceof x){const s=r[e];if(o.isNil(s))return!0;const i=x.getHelper(r),a=Ae.call(i.eClass,e);if(s instanceof R?o.forEach(s,u=>{i.unlink({feature:a,target:u})}):s instanceof x&&i.unlink({feature:a,target:s}),a){const u={$unset:{[e]:null}},c={feature:a,key:a.name,modifier:u};t.push({emitter:i,event:"changed",data:c})}}const n=pr.call(this,r,e);return o.forEach(t,s=>{s.emitter.emit(s.event,s.data)}),n}function ws({receiver:r,spliceArgs:e,spliceResult:t,target:n}){const{index:s,owner:i,feature:a}=r.$;o.forEach(t,u=>{delete s[u.id],i.$.unlink({feature:a,target:u})}),r.$.emit("removed",{items:t})}function Cs(r,e,t){var s;let n=rt.call(this,r,e,t);if(!o.isString(e)||o.startsWith(e,"__v_"))return n;if(r instanceof x&&n===void 0){const i=x.getHelper(t);if(e==="$")return i;if(!i)return console.log(`No $ for ${r==null?void 0:r.id} and key ${e}`),n;const a=ct.call(i.eClass,e);if(a)return lr.call(a).bind(t);{const u=Ae.call(i.eClass,e);if(u)if(u.$.node.derived){const c=u.$.node._||((s=u.compile)==null?void 0:s.call(u));return c==null?void 0:c.call(t)}else{const{defaultValueLiteral:c}=u.$.node;c!==void 0&&(n=t[e]=u.defaultValue),n=r[e]}}}else if(r instanceof R){if(e==="$")return R.getHelper(r);if(e==="push"){const i=n;n=function(a){if(x.isRef(a)){const{owner:u,feature:c}=R.getHelper(this),l=u.$.store;if(l.get(a.ref))return i.call(this,a);l.once(`added:${a.ref}`,function({node:p}){const{source:y,feature:m}=this,{name:h,upperBound:$}=m.$.node;$!==1?(y[h].push(p),y.$.hashData[h]=y[h]._getChecksum()):(y[h]=p,y.$.hashData[h]=p.$.hash)},{feature:c,source:u});return}else return i.call(this,a)}}else if(e==="splice"){const i=n;n=function(...a){const u=i.apply(this,a);if(a[2])throw new ie("Adding new targets with Array.splice is not implemented");return ws({receiver:t,spliceArgs:a,spliceResult:u,target:r}),u}}}return n}function Ts(r,e,t,n){var a,u;let s=[];if(r instanceof x){if(t===void 0&&o.isNil(r[e]))return!0;const c=x.getHelper(n),l=Ae.call(c.eClass,e);if(l&&U.call(l,"ecore.EReference"))if(l.$.node.upperBound!==1){let p=r[e];(p==null?void 0:p.length)>0&&o.forEach(p,y=>c.unlink({feature:l,target:y})),t instanceof R||(t=new R(n,l,t))}else{const p=(a=r[e])==null?void 0:a.id;if(p){if(p&&p===(t==null?void 0:t.id))return!0;c.unlink({feature:l,target:r[e]})}t&&(t=c.link({feature:l,target:t}))}if(!((u=c.emit_PreventDefault)!=null&&u.changed)){const f={$set:{[e]:t}},p={feature:l,key:e,modifier:f};s.push({emitter:c,event:"changed",data:p})}}else if(r instanceof R)if(parseInt(e)>=0){const c=R.getHelper(n),{index:l,owner:f,feature:p}=c,{unique:y,ordered:m}=p.$.node;if(y&&l[t.id])return Ne.call(this,r,e,t,n);const h=f.$.link({feature:p,source:f,target:t});h&&(t=h,l[h.id]=h,s.push({emitter:c,event:"added",data:{items:[h]}}))}else return Ne.call(this,r,e,t,n);const i=Ne.call(this,r,e,t,n);return r[e]!==t&&Bt(t)&&(r[e]=t),o.forEach(s,c=>{c.emitter.emit(c.event,c.data)}),i}const Je=Proxy;Proxy=function(r,e){if(r instanceof x)!rt&&e._isReadonly!==void 0&&e._isShallow!==void 0&&(pr=e.deleteProperty,rt=e.get,Ne=e.set),e.deleteProperty=$s,e.get=Cs,e.set=Ts;else if(r instanceof fr){o.set(r,"$.target",r);const t=new Je(r,e);return t.$.proxy=t,t}else if(r instanceof $e){const t=new Je(r,e);return $e.proxify(r,t),t}return new Je(r,e)};function xs(r,e){return typeof r!="object"||!(r instanceof x)?!1:e?U.call(r,e):!0}function Os(r){return!r||typeof r!="object"||r instanceof x?!1:!!r.__typename}function dr({data:r,eClass:e,node:t}){var n;o.forEach(e.eSuperTypes,s=>{dr({data:r,node:t,eClass:s})}),(n=e.eConstructor)!=null&&n._&&e.eConstructor._.call(t,r)}const De=class{constructor(e){let{data:t,eClass:n,feature:s,resource:i,source:a,store:u}=e;const c=u.get(t.id)||u._isProcessing.get(t.id);if(c)return c;t.__typename||(t.__typename=n.ns),t.id||(t.id=o.randomId()),t.__checksum&&(this.__checksum=t.__checksum),this.__typename=t.__typename,this.id=t.id;const l=new ar,f=l.proxy=Fe(this);if(De.setHelper(f,l),De.setHelper(this,l),u._isProcessing.set(t.id,f),l.eClass=n,l.node=this,l.store=u,i&&(l.resources||(l.resources=new WeakSet),l.resources.add(i)),this.id==="081zhmMNbEKxRaTT")debugger;if(l.merge(e),u._isProcessing.delete(t.id),s!=null&&s.containment&&(l.eContainingFeature=s,a&&(l.eContainer=a)),this.id==="081zhmMNbEKxRaTT")debugger;return dr({data:t,eClass:n,node:f}),f}static fromJSON(e,{store:t}){var s;(s=e.$)==null||s.typename}static getHelper(e){return Re.get(e)}static getLinks(e){return gs.get(e)}static isNode(...e){return xs.apply(this,e)}static isNodeLike(...e){return Os.apply(this,e)}static isRef(e){return Y.isNodeRef(e)}static setHelper(e,t){Re.set(e,t)}static unsetHelper(e){Re.delete(e)}toJSON(e){return this.$.decycle()}};let x=De;ke(x,"_helperMap",Re);class Y{constructor(e,t){const{__typename:n,id:s}=e;this.__typename="ecore.ERef",this.eClass=n,this.ref=s}static isNodeRef(e){return(e==null?void 0:e.__typename)==="ecore.ERef"}}export{$e as A,Wn as E,R as L,x as N,G as R,Rs as S,ie as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
