import{u as R,c as y,h as S,v as X,H as be,aC as Ge,J as xe,aD as Je,r as B,g as Y,$ as qe,_ as re,C as Ze,aE as et,aF as ee,n as tt,aG as M,w as _,o as nt,y as N,aH as D,A as pe,aI as Ee,aJ as z,W as ot,G as _e,a8 as Be,I as We,a4 as Ae,K as Oe,aK as ze,L as De,aL as Re,S as Fe,aM as $e,aN as Ke,z as it,aO as at,aP as ve,ac as he,aQ as te,aR as lt,aS as ut,aT as ke,aU as rt,aV as st,aW as ct,aX as dt,aY as ft,aZ as vt,i as ht,a_ as mt}from"./index.4634898b.js";var wt=R({name:"QItemLabel",props:{overline:Boolean,caption:Boolean,header:Boolean,lines:[Number,String]},setup(e,{slots:n}){const o=y(()=>parseInt(e.lines,10)),i=y(()=>"q-item__label"+(e.overline===!0?" q-item__label--overline text-overline":"")+(e.caption===!0?" q-item__label--caption text-caption":"")+(e.header===!0?" q-item__label--header":"")+(o.value===1?" ellipsis":"")),t=y(()=>e.lines!==void 0&&o.value>1?{overflow:"hidden",display:"-webkit-box","-webkit-box-orient":"vertical","-webkit-line-clamp":o.value}:null);return()=>S("div",{style:t.value,class:i.value},X(n.default))}}),Et=R({name:"QItemSection",props:{avatar:Boolean,thumbnail:Boolean,side:Boolean,top:Boolean,noWrap:Boolean},setup(e,{slots:n}){const o=y(()=>`q-item__section column q-item__section--${e.avatar===!0||e.side===!0||e.thumbnail===!0?"side":"main"}`+(e.top===!0?" q-item__section--top justify-start":" justify-center")+(e.avatar===!0?" q-item__section--avatar":"")+(e.thumbnail===!0?" q-item__section--thumbnail":"")+(e.noWrap===!0?" q-item__section--nowrap":""));return()=>S("div",{class:o.value},X(n.default))}}),kt=R({name:"QItem",props:{...be,...Ge,tag:{type:String,default:"div"},active:{type:Boolean,default:null},clickable:Boolean,dense:Boolean,insetLevel:Number,tabindex:[String,Number],focused:Boolean,manualFocus:Boolean},emits:["click","keyup"],setup(e,{slots:n,emit:o}){const{proxy:{$q:i}}=Y(),t=xe(e,i),{hasLink:a,linkAttrs:l,linkClass:s,linkTag:c,navigateOnClick:r}=Je(),f=B(null),m=B(null),p=y(()=>e.clickable===!0||a.value===!0||e.tag==="label"),u=y(()=>e.disable!==!0&&p.value===!0),d=y(()=>"q-item q-item-type row no-wrap"+(e.dense===!0?" q-item--dense":"")+(t.value===!0?" q-item--dark":"")+(a.value===!0&&e.active===null?s.value:e.active===!0?` q-item--active${e.activeClass!==void 0?` ${e.activeClass}`:""}`:"")+(e.disable===!0?" disabled":"")+(u.value===!0?" q-item--clickable q-link cursor-pointer "+(e.manualFocus===!0?"q-manual-focusable":"q-focusable q-hoverable")+(e.focused===!0?" q-manual-focusable--focused":""):"")),q=y(()=>{if(e.insetLevel===void 0)return null;const h=i.lang.rtl===!0?"Right":"Left";return{["padding"+h]:16+e.insetLevel*56+"px"}});function T(h){u.value===!0&&(m.value!==null&&(h.qKeyEvent!==!0&&document.activeElement===f.value?m.value.focus():document.activeElement===m.value&&f.value.focus()),r(h))}function L(h){if(u.value===!0&&qe(h,[13,32])===!0){re(h),h.qKeyEvent=!0;const C=new MouseEvent("click",h);C.qKeyEvent=!0,f.value.dispatchEvent(C)}o("keyup",h)}function P(){const h=Ze(n.default,[]);return u.value===!0&&h.unshift(S("div",{class:"q-focus-helper",tabindex:-1,ref:m})),h}return()=>{const h={ref:f,class:d.value,style:q.value,role:"listitem",onClick:T,onKeyup:L};return u.value===!0?(h.tabindex=e.tabindex||"0",Object.assign(h,l.value)):p.value===!0&&(h["aria-disabled"]="true"),S(c.value,h,P())}}}),Tt=R({name:"QList",props:{...be,bordered:Boolean,dense:Boolean,separator:Boolean,padding:Boolean,tag:{type:String,default:"div"}},setup(e,{slots:n}){const o=Y(),i=xe(e,o.proxy.$q),t=y(()=>"q-list"+(e.bordered===!0?" q-list--bordered":"")+(e.dense===!0?" q-list--dense":"")+(e.separator===!0?" q-list--separator":"")+(i.value===!0?" q-list--dark":"")+(e.padding===!0?" q-list--padding":""));return()=>S(e.tag,{class:t.value},X(n.default))}});function ne(){if(window.getSelection!==void 0){const e=window.getSelection();e.empty!==void 0?e.empty():e.removeAllRanges!==void 0&&(e.removeAllRanges(),et.is.mobile!==!0&&e.addRange(document.createRange()))}else document.selection!==void 0&&document.selection.empty()}const je={target:{default:!0},noParentEvent:Boolean,contextMenu:Boolean};function Qe({showing:e,avoidEmit:n,configureAnchorEl:o}){const{props:i,proxy:t,emit:a}=Y(),l=B(null);let s=null;function c(u){return l.value===null?!1:u===void 0||u.touches===void 0||u.touches.length<=1}const r={};o===void 0&&(Object.assign(r,{hide(u){t.hide(u)},toggle(u){t.toggle(u),u.qAnchorHandled=!0},toggleKey(u){qe(u,13)===!0&&r.toggle(u)},contextClick(u){t.hide(u),ee(u),tt(()=>{t.show(u),u.qAnchorHandled=!0})},prevent:ee,mobileTouch(u){if(r.mobileCleanup(u),c(u)!==!0)return;t.hide(u),l.value.classList.add("non-selectable");const d=u.target;M(r,"anchor",[[d,"touchmove","mobileCleanup","passive"],[d,"touchend","mobileCleanup","passive"],[d,"touchcancel","mobileCleanup","passive"],[l.value,"contextmenu","prevent","notPassive"]]),s=setTimeout(()=>{s=null,t.show(u),u.qAnchorHandled=!0},300)},mobileCleanup(u){l.value.classList.remove("non-selectable"),s!==null&&(clearTimeout(s),s=null),e.value===!0&&u!==void 0&&ne()}}),o=function(u=i.contextMenu){if(i.noParentEvent===!0||l.value===null)return;let d;u===!0?t.$q.platform.is.mobile===!0?d=[[l.value,"touchstart","mobileTouch","passive"]]:d=[[l.value,"mousedown","hide","passive"],[l.value,"contextmenu","contextClick","notPassive"]]:d=[[l.value,"click","toggle","passive"],[l.value,"keyup","toggleKey","passive"]],M(r,"anchor",d)});function f(){D(r,"anchor")}function m(u){for(l.value=u;l.value.classList.contains("q-anchor--skip");)l.value=l.value.parentNode;o()}function p(){if(i.target===!1||i.target===""||t.$el.parentNode===null)l.value=null;else if(i.target===!0)m(t.$el.parentNode);else{let u=i.target;if(typeof i.target=="string")try{u=document.querySelector(i.target)}catch{u=void 0}u!=null?(l.value=u.$el||u,o()):(l.value=null,console.error(`Anchor: target "${i.target}" not found`))}}return _(()=>i.contextMenu,u=>{l.value!==null&&(f(),o(u))}),_(()=>i.target,()=>{l.value!==null&&f(),p()}),_(()=>i.noParentEvent,u=>{l.value!==null&&(u===!0?f():o())}),nt(()=>{p(),n!==!0&&i.modelValue===!0&&l.value===null&&a("update:modelValue",!1)}),N(()=>{s!==null&&clearTimeout(s),f()}),{anchorEl:l,canShow:c,anchorEvents:r}}function Ie(e,n){const o=B(null);let i;function t(s,c){const r=`${c!==void 0?"add":"remove"}EventListener`,f=c!==void 0?c:i;s!==window&&s[r]("scroll",f,pe.passive),window[r]("scroll",f,pe.passive),i=c}function a(){o.value!==null&&(t(o.value),o.value=null)}const l=_(()=>e.noParentEvent,()=>{o.value!==null&&(a(),n())});return N(l),{localScrollTarget:o,unconfigureScrollTarget:a,changeScrollEvent:t}}const{notPassiveCapture:oe}=pe,A=[];function ie(e){const n=e.target;if(n===void 0||n.nodeType===8||n.classList.contains("no-pointer-events")===!0)return;let o=Ee.length-1;for(;o>=0;){const i=Ee[o].$;if(i.type.name==="QTooltip"){o--;continue}if(i.type.name!=="QDialog")break;if(i.props.seamless!==!0)return;o--}for(let i=A.length-1;i>=0;i--){const t=A[i];if((t.anchorEl.value===null||t.anchorEl.value.contains(n)===!1)&&(n===document.body||t.innerRef.value!==null&&t.innerRef.value.contains(n)===!1))e.qClickOutside=!0,t.onClickOutside(e);else return}}function Ne(e){A.push(e),A.length===1&&(document.addEventListener("mousedown",ie,oe),document.addEventListener("touchstart",ie,oe))}function ae(e){const n=A.findIndex(o=>o===e);n!==-1&&(A.splice(n,1),A.length===0&&(document.removeEventListener("mousedown",ie,oe),document.removeEventListener("touchstart",ie,oe)))}let Te,Se;function le(e){const n=e.split(" ");return n.length!==2?!1:["top","center","bottom"].includes(n[0])!==!0?(console.error("Anchor/Self position must start with one of top/center/bottom"),!1):["left","middle","right","start","end"].includes(n[1])!==!0?(console.error("Anchor/Self position must end with one of left/middle/right/start/end"),!1):!0}function Xe(e){return e?!(e.length!==2||typeof e[0]!="number"||typeof e[1]!="number"):!0}const ye={"start#ltr":"left","start#rtl":"right","end#ltr":"right","end#rtl":"left"};["left","middle","right"].forEach(e=>{ye[`${e}#ltr`]=e,ye[`${e}#rtl`]=e});function ue(e,n){const o=e.split(" ");return{vertical:o[0],horizontal:ye[`${o[1]}#${n===!0?"rtl":"ltr"}`]}}function gt(e,n){let{top:o,left:i,right:t,bottom:a,width:l,height:s}=e.getBoundingClientRect();return n!==void 0&&(o-=n[1],i-=n[0],a+=n[1],t+=n[0],l+=n[0],s+=n[1]),{top:o,bottom:a,height:s,left:i,right:t,width:l,middle:i+(t-i)/2,center:o+(a-o)/2}}function pt(e,n,o){let{top:i,left:t}=e.getBoundingClientRect();return i+=n.top,t+=n.left,o!==void 0&&(i+=o[1],t+=o[0]),{top:i,bottom:i+1,height:1,left:t,right:t+1,width:1,middle:t,center:i}}function yt(e,n){return{top:0,center:n/2,bottom:n,left:0,middle:e/2,right:e}}function Le(e,n,o,i){return{top:e[o.vertical]-n[i.vertical],left:e[o.horizontal]-n[i.horizontal]}}function Ce(e,n=0){if(e.targetEl===null||e.anchorEl===null||n>5)return;if(e.targetEl.offsetHeight===0||e.targetEl.offsetWidth===0){setTimeout(()=>{Ce(e,n+1)},10);return}const{targetEl:o,offset:i,anchorEl:t,anchorOrigin:a,selfOrigin:l,absoluteOffset:s,fit:c,cover:r,maxHeight:f,maxWidth:m}=e;if(z.is.ios===!0&&window.visualViewport!==void 0){const H=document.body.style,{offsetLeft:b,offsetTop:E}=window.visualViewport;b!==Te&&(H.setProperty("--q-pe-left",b+"px"),Te=b),E!==Se&&(H.setProperty("--q-pe-top",E+"px"),Se=E)}const{scrollLeft:p,scrollTop:u}=o,d=s===void 0?gt(t,r===!0?[0,0]:i):pt(t,s,i);Object.assign(o.style,{top:0,left:0,minWidth:null,minHeight:null,maxWidth:m||"100vw",maxHeight:f||"100vh",visibility:"visible"});const{offsetWidth:q,offsetHeight:T}=o,{elWidth:L,elHeight:P}=c===!0||r===!0?{elWidth:Math.max(d.width,q),elHeight:r===!0?Math.max(d.height,T):T}:{elWidth:q,elHeight:T};let h={maxWidth:m,maxHeight:f};(c===!0||r===!0)&&(h.minWidth=d.width+"px",r===!0&&(h.minHeight=d.height+"px")),Object.assign(o.style,h);const C=yt(L,P);let g=Le(d,C,a,l);if(s===void 0||i===void 0)me(g,d,C,a,l);else{const{top:H,left:b}=g;me(g,d,C,a,l);let E=!1;if(g.top!==H){E=!0;const w=2*i[1];d.center=d.top-=w,d.bottom-=w+2}if(g.left!==b){E=!0;const w=2*i[0];d.middle=d.left-=w,d.right-=w+2}E===!0&&(g=Le(d,C,a,l),me(g,d,C,a,l))}h={top:g.top+"px",left:g.left+"px"},g.maxHeight!==void 0&&(h.maxHeight=g.maxHeight+"px",d.height>g.maxHeight&&(h.minHeight=h.maxHeight)),g.maxWidth!==void 0&&(h.maxWidth=g.maxWidth+"px",d.width>g.maxWidth&&(h.minWidth=h.maxWidth)),Object.assign(o.style,h),o.scrollTop!==u&&(o.scrollTop=u),o.scrollLeft!==p&&(o.scrollLeft=p)}function me(e,n,o,i,t){const a=o.bottom,l=o.right,s=ot(),c=window.innerHeight-s,r=document.body.clientWidth;if(e.top<0||e.top+a>c)if(t.vertical==="center")e.top=n[i.vertical]>c/2?Math.max(0,c-a):0,e.maxHeight=Math.min(a,c);else if(n[i.vertical]>c/2){const f=Math.min(c,i.vertical==="center"?n.center:i.vertical===t.vertical?n.bottom:n.top);e.maxHeight=Math.min(a,f),e.top=Math.max(0,f-a)}else e.top=Math.max(0,i.vertical==="center"?n.center:i.vertical===t.vertical?n.top:n.bottom),e.maxHeight=Math.min(a,c-e.top);if(e.left<0||e.left+l>r)if(e.maxWidth=Math.min(l,r),t.horizontal==="middle")e.left=n[i.horizontal]>r/2?Math.max(0,r-l):0;else if(n[i.horizontal]>r/2){const f=Math.min(r,i.horizontal==="middle"?n.middle:i.horizontal===t.horizontal?n.right:n.left);e.maxWidth=Math.min(l,f),e.left=Math.max(0,f-e.maxWidth)}else e.left=Math.max(0,i.horizontal==="middle"?n.middle:i.horizontal===t.horizontal?n.left:n.right),e.maxWidth=Math.min(l,r-e.left)}var St=R({name:"QTooltip",inheritAttrs:!1,props:{...je,..._e,...Be,maxHeight:{type:String,default:null},maxWidth:{type:String,default:null},transitionShow:{default:"jump-down"},transitionHide:{default:"jump-up"},anchor:{type:String,default:"bottom middle",validator:le},self:{type:String,default:"top middle",validator:le},offset:{type:Array,default:()=>[14,14],validator:Xe},scrollTarget:{default:void 0},delay:{type:Number,default:0},hideDelay:{type:Number,default:0},persistent:Boolean},emits:[...We],setup(e,{slots:n,emit:o,attrs:i}){let t,a;const l=Y(),{proxy:{$q:s}}=l,c=B(null),r=B(!1),f=y(()=>ue(e.anchor,s.lang.rtl)),m=y(()=>ue(e.self,s.lang.rtl)),p=y(()=>e.persistent!==!0),{registerTick:u,removeTick:d}=Ae(),{registerTimeout:q}=Oe(),{transitionProps:T,transitionStyle:L}=ze(e),{localScrollTarget:P,changeScrollEvent:h,unconfigureScrollTarget:C}=Ie(e,J),{anchorEl:g,canShow:H,anchorEvents:b}=Qe({showing:r,configureAnchorEl:j}),{show:E,hide:w}=De({showing:r,canShow:H,handleShow:K,handleHide:U,hideOnRouteChange:p,processOnMount:!0});Object.assign(b,{delayShow:ce,delayHide:G});const{showPortal:F,hidePortal:$,renderPortal:se}=Re(l,c,Z,"tooltip");if(s.platform.is.mobile===!0){const x={anchorEl:g,innerRef:c,onClickOutside(k){return w(k),k.target.classList.contains("q-dialog__backdrop")&&re(k),!0}},Q=y(()=>e.modelValue===null&&e.persistent!==!0&&r.value===!0);_(Q,k=>{(k===!0?Ne:ae)(x)}),N(()=>{ae(x)})}function K(x){F(),u(()=>{a=new MutationObserver(()=>W()),a.observe(c.value,{attributes:!1,childList:!0,characterData:!0,subtree:!0}),W(),J()}),t===void 0&&(t=_(()=>s.screen.width+"|"+s.screen.height+"|"+e.self+"|"+e.anchor+"|"+s.lang.rtl,W)),q(()=>{F(!0),o("show",x)},e.transitionDuration)}function U(x){d(),$(),V(),q(()=>{$(!0),o("hide",x)},e.transitionDuration)}function V(){a!==void 0&&(a.disconnect(),a=void 0),t!==void 0&&(t(),t=void 0),C(),D(b,"tooltipTemp")}function W(){Ce({targetEl:c.value,offset:e.offset,anchorEl:g.value,anchorOrigin:f.value,selfOrigin:m.value,maxHeight:e.maxHeight,maxWidth:e.maxWidth})}function ce(x){if(s.platform.is.mobile===!0){ne(),document.body.classList.add("non-selectable");const Q=g.value,k=["touchmove","touchcancel","touchend","click"].map(O=>[Q,O,"delayHide","passiveCapture"]);M(b,"tooltipTemp",k)}q(()=>{E(x)},e.delay)}function G(x){s.platform.is.mobile===!0&&(D(b,"tooltipTemp"),ne(),setTimeout(()=>{document.body.classList.remove("non-selectable")},10)),q(()=>{w(x)},e.hideDelay)}function j(){if(e.noParentEvent===!0||g.value===null)return;const x=s.platform.is.mobile===!0?[[g.value,"touchstart","delayShow","passive"]]:[[g.value,"mouseenter","delayShow","passive"],[g.value,"mouseleave","delayHide","passive"]];M(b,"anchor",x)}function J(){if(g.value!==null||e.scrollTarget!==void 0){P.value=Fe(g.value,e.scrollTarget);const x=e.noParentEvent===!0?W:w;h(P.value,x)}}function de(){return r.value===!0?S("div",{...i,ref:c,class:["q-tooltip q-tooltip--style q-position-engine no-pointer-events",i.class],style:[i.style,L.value],role:"tooltip"},X(n.default)):null}function Z(){return S($e,T.value,de)}return N(V),Object.assign(l.proxy,{updatePosition:W}),se}});const we={left:!0,right:!0,up:!0,down:!0,horizontal:!0,vertical:!0},bt=Object.keys(we);we.all=!0;function Pe(e){const n={};for(const o of bt)e[o]===!0&&(n[o]=!0);return Object.keys(n).length===0?we:(n.horizontal===!0?n.left=n.right=!0:n.left===!0&&n.right===!0&&(n.horizontal=!0),n.vertical===!0?n.up=n.down=!0:n.up===!0&&n.down===!0&&(n.vertical=!0),n.horizontal===!0&&n.vertical===!0&&(n.all=!0),n)}const xt=["INPUT","TEXTAREA"];function He(e,n){return n.event===void 0&&e.target!==void 0&&e.target.draggable!==!0&&typeof n.handler=="function"&&xt.includes(e.target.nodeName.toUpperCase())===!1&&(e.qClonedBy===void 0||e.qClonedBy.indexOf(n.uid)===-1)}function ge(e,n,o){const i=te(e);let t,a=i.left-n.event.x,l=i.top-n.event.y,s=Math.abs(a),c=Math.abs(l);const r=n.direction;r.horizontal===!0&&r.vertical!==!0?t=a<0?"left":"right":r.horizontal!==!0&&r.vertical===!0?t=l<0?"up":"down":r.up===!0&&l<0?(t="up",s>c&&(r.left===!0&&a<0?t="left":r.right===!0&&a>0&&(t="right"))):r.down===!0&&l>0?(t="down",s>c&&(r.left===!0&&a<0?t="left":r.right===!0&&a>0&&(t="right"))):r.left===!0&&a<0?(t="left",s<c&&(r.up===!0&&l<0?t="up":r.down===!0&&l>0&&(t="down"))):r.right===!0&&a>0&&(t="right",s<c&&(r.up===!0&&l<0?t="up":r.down===!0&&l>0&&(t="down")));let f=!1;if(t===void 0&&o===!1){if(n.event.isFirst===!0||n.event.lastDir===void 0)return{};t=n.event.lastDir,f=!0,t==="left"||t==="right"?(i.left-=a,s=0,a=0):(i.top-=l,c=0,l=0)}return{synthetic:f,payload:{evt:e,touch:n.event.mouse!==!0,mouse:n.event.mouse===!0,position:i,direction:t,isFirst:n.event.isFirst,isFinal:o===!0,duration:Date.now()-n.event.time,distance:{x:s,y:c},offset:{x:a,y:l},delta:{x:i.left-n.event.lastX,y:i.top-n.event.lastY}}}}let qt=0;var Lt=Ke({name:"touch-pan",beforeMount(e,{value:n,modifiers:o}){if(o.mouse!==!0&&z.has.touch!==!0)return;function i(a,l){o.mouse===!0&&l===!0?re(a):(o.stop===!0&&he(a),o.prevent===!0&&ee(a))}const t={uid:"qvtp_"+qt++,handler:n,modifiers:o,direction:Pe(o),noop:it,mouseStart(a){He(a,t)&&at(a)&&(M(t,"temp",[[document,"mousemove","move","notPassiveCapture"],[document,"mouseup","end","passiveCapture"]]),t.start(a,!0))},touchStart(a){if(He(a,t)){const l=a.target;M(t,"temp",[[l,"touchmove","move","notPassiveCapture"],[l,"touchcancel","end","passiveCapture"],[l,"touchend","end","passiveCapture"]]),t.start(a)}},start(a,l){if(z.is.firefox===!0&&ve(e,!0),t.lastEvt=a,l===!0||o.stop===!0){if(t.direction.all!==!0&&(l!==!0||t.modifiers.mouseAllDir!==!0&&t.modifiers.mousealldir!==!0)){const r=a.type.indexOf("mouse")!==-1?new MouseEvent(a.type,a):new TouchEvent(a.type,a);a.defaultPrevented===!0&&ee(r),a.cancelBubble===!0&&he(r),Object.assign(r,{qKeyEvent:a.qKeyEvent,qClickOutside:a.qClickOutside,qAnchorHandled:a.qAnchorHandled,qClonedBy:a.qClonedBy===void 0?[t.uid]:a.qClonedBy.concat(t.uid)}),t.initialEvent={target:a.target,event:r}}he(a)}const{left:s,top:c}=te(a);t.event={x:s,y:c,time:Date.now(),mouse:l===!0,detected:!1,isFirst:!0,isFinal:!1,lastX:s,lastY:c}},move(a){if(t.event===void 0)return;const l=te(a),s=l.left-t.event.x,c=l.top-t.event.y;if(s===0&&c===0)return;t.lastEvt=a;const r=t.event.mouse===!0,f=()=>{i(a,r);let u;o.preserveCursor!==!0&&o.preservecursor!==!0&&(u=document.documentElement.style.cursor||"",document.documentElement.style.cursor="grabbing"),r===!0&&document.body.classList.add("no-pointer-events--children"),document.body.classList.add("non-selectable"),ne(),t.styleCleanup=d=>{if(t.styleCleanup=void 0,u!==void 0&&(document.documentElement.style.cursor=u),document.body.classList.remove("non-selectable"),r===!0){const q=()=>{document.body.classList.remove("no-pointer-events--children")};d!==void 0?setTimeout(()=>{q(),d()},50):q()}else d!==void 0&&d()}};if(t.event.detected===!0){t.event.isFirst!==!0&&i(a,t.event.mouse);const{payload:u,synthetic:d}=ge(a,t,!1);u!==void 0&&(t.handler(u)===!1?t.end(a):(t.styleCleanup===void 0&&t.event.isFirst===!0&&f(),t.event.lastX=u.position.left,t.event.lastY=u.position.top,t.event.lastDir=d===!0?void 0:u.direction,t.event.isFirst=!1));return}if(t.direction.all===!0||r===!0&&(t.modifiers.mouseAllDir===!0||t.modifiers.mousealldir===!0)){f(),t.event.detected=!0,t.move(a);return}const m=Math.abs(s),p=Math.abs(c);m!==p&&(t.direction.horizontal===!0&&m>p||t.direction.vertical===!0&&m<p||t.direction.up===!0&&m<p&&c<0||t.direction.down===!0&&m<p&&c>0||t.direction.left===!0&&m>p&&s<0||t.direction.right===!0&&m>p&&s>0?(t.event.detected=!0,t.move(a)):t.end(a,!0))},end(a,l){if(t.event!==void 0){if(D(t,"temp"),z.is.firefox===!0&&ve(e,!1),l===!0)t.styleCleanup!==void 0&&t.styleCleanup(),t.event.detected!==!0&&t.initialEvent!==void 0&&t.initialEvent.target.dispatchEvent(t.initialEvent.event);else if(t.event.detected===!0){t.event.isFirst===!0&&t.handler(ge(a===void 0?t.lastEvt:a,t).payload);const{payload:s}=ge(a===void 0?t.lastEvt:a,t,!0),c=()=>{t.handler(s)};t.styleCleanup!==void 0?t.styleCleanup(c):c()}t.event=void 0,t.initialEvent=void 0,t.lastEvt=void 0}}};if(e.__qtouchpan=t,o.mouse===!0){const a=o.mouseCapture===!0||o.mousecapture===!0?"Capture":"";M(t,"main",[[e,"mousedown","mouseStart",`passive${a}`]])}z.has.touch===!0&&M(t,"main",[[e,"touchstart","touchStart",`passive${o.capture===!0?"Capture":""}`],[e,"touchmove","noop","notPassiveCapture"]])},updated(e,n){const o=e.__qtouchpan;o!==void 0&&(n.oldValue!==n.value&&(typeof value!="function"&&o.end(),o.handler=n.value),o.direction=Pe(n.modifiers))},beforeUnmount(e){const n=e.__qtouchpan;n!==void 0&&(n.event!==void 0&&n.end(),D(n,"main"),D(n,"temp"),z.is.firefox===!0&&ve(e,!1),n.styleCleanup!==void 0&&n.styleCleanup(),delete e.__qtouchpan)}});function Pt(e){return e.charAt(0).toUpperCase()+e.slice(1)}function Ht(e,n,o){return o<=n?n:Math.min(o,Math.max(n,e))}function Mt(e,n,o){if(o<=n)return n;const i=o-n+1;let t=n+(e-n)%i;return t<n&&(t=i+t),t===0?0:t}function _t(e,n=2,o="0"){if(e==null)return e;const i=""+e;return i.length>=n?i:new Array(n-i.length+1).join(o)+i}var Bt=R({name:"QMenu",inheritAttrs:!1,props:{...je,..._e,...be,...Be,persistent:Boolean,autoClose:Boolean,separateClosePopup:Boolean,noRouteDismiss:Boolean,noRefocus:Boolean,noFocus:Boolean,fit:Boolean,cover:Boolean,square:Boolean,anchor:{type:String,validator:le},self:{type:String,validator:le},offset:{type:Array,validator:Xe},scrollTarget:{default:void 0},touchPosition:Boolean,maxHeight:{type:String,default:null},maxWidth:{type:String,default:null}},emits:[...We,"click","escapeKey"],setup(e,{slots:n,emit:o,attrs:i}){let t=null,a,l,s;const c=Y(),{proxy:r}=c,{$q:f}=r,m=B(null),p=B(!1),u=y(()=>e.persistent!==!0&&e.noRouteDismiss!==!0),d=xe(e,f),{registerTick:q,removeTick:T}=Ae(),{registerTimeout:L}=Oe(),{transitionProps:P,transitionStyle:h}=ze(e),{localScrollTarget:C,changeScrollEvent:g,unconfigureScrollTarget:H}=Ie(e,x),{anchorEl:b,canShow:E}=Qe({showing:p}),{hide:w}=De({showing:p,canShow:E,handleShow:J,handleHide:de,hideOnRouteChange:u,processOnMount:!0}),{showPortal:F,hidePortal:$,renderPortal:se}=Re(c,m,Ye,"menu"),K={anchorEl:b,innerRef:m,onClickOutside(v){if(e.persistent!==!0&&p.value===!0)return w(v),(v.type==="touchstart"||v.target.classList.contains("q-dialog__backdrop"))&&re(v),!0}},U=y(()=>ue(e.anchor||(e.cover===!0?"center middle":"bottom start"),f.lang.rtl)),V=y(()=>e.cover===!0?U.value:ue(e.self||"top start",f.lang.rtl)),W=y(()=>(e.square===!0?" q-menu--square":"")+(d.value===!0?" q-menu--dark q-dark":"")),ce=y(()=>e.autoClose===!0?{onClick:Q}:{}),G=y(()=>p.value===!0&&e.persistent!==!0);_(G,v=>{v===!0?(ct(O),Ne(K)):(ke(O),ae(K))});function j(){st(()=>{let v=m.value;v&&v.contains(document.activeElement)!==!0&&(v=v.querySelector("[autofocus][tabindex], [data-autofocus][tabindex]")||v.querySelector("[autofocus] [tabindex], [data-autofocus] [tabindex]")||v.querySelector("[autofocus], [data-autofocus]")||v,v.focus({preventScroll:!0}))})}function J(v){if(t=e.noRefocus===!1?document.activeElement:null,lt(k),F(),x(),a=void 0,v!==void 0&&(e.touchPosition||e.contextMenu)){const fe=te(v);if(fe.left!==void 0){const{top:Ue,left:Ve}=b.value.getBoundingClientRect();a={left:fe.left-Ve,top:fe.top-Ue}}}l===void 0&&(l=_(()=>f.screen.width+"|"+f.screen.height+"|"+e.self+"|"+e.anchor+"|"+f.lang.rtl,I)),e.noFocus!==!0&&document.activeElement.blur(),q(()=>{I(),e.noFocus!==!0&&j()}),L(()=>{f.platform.is.ios===!0&&(s=e.autoClose,m.value.click()),I(),F(!0),o("show",v)},e.transitionDuration)}function de(v){T(),$(),Z(!0),t!==null&&(v===void 0||v.qClickOutside!==!0)&&(((v&&v.type.indexOf("key")===0?t.closest('[tabindex]:not([tabindex^="-"])'):void 0)||t).focus(),t=null),L(()=>{$(!0),o("hide",v)},e.transitionDuration)}function Z(v){a=void 0,l!==void 0&&(l(),l=void 0),(v===!0||p.value===!0)&&(ut(k),H(),ae(K),ke(O)),v!==!0&&(t=null)}function x(){(b.value!==null||e.scrollTarget!==void 0)&&(C.value=Fe(b.value,e.scrollTarget),g(C.value,I))}function Q(v){s!==!0?(rt(r,v),o("click",v)):s=!1}function k(v){G.value===!0&&e.noFocus!==!0&&dt(m.value,v.target)!==!0&&j()}function O(v){o("escapeKey"),w(v)}function I(){Ce({targetEl:m.value,offset:e.offset,anchorEl:b.value,anchorOrigin:U.value,selfOrigin:V.value,absoluteOffset:a,fit:e.fit,cover:e.cover,maxHeight:e.maxHeight,maxWidth:e.maxWidth})}function Ye(){return S($e,P.value,()=>p.value===!0?S("div",{role:"menu",...i,ref:m,tabindex:-1,class:["q-menu q-position-engine scroll"+W.value,i.class],style:[i.style,h.value],...ce.value},X(n.default)):null)}return N(Z),Object.assign(r,{focus:j,updatePosition:I}),se}});function Me(e){if(e===!1)return 0;if(e===!0||e===void 0)return 1;const n=parseInt(e,10);return isNaN(n)?0:n}var Wt=Ke({name:"close-popup",beforeMount(e,{value:n}){const o={depth:Me(n),handler(i){o.depth!==0&&setTimeout(()=>{const t=ft(e);t!==void 0&&vt(t,i,o.depth)})},handlerKey(i){qe(i,13)===!0&&o.handler(i)}};e.__qclosepopup=o,e.addEventListener("click",o.handler),e.addEventListener("keyup",o.handlerKey)},updated(e,{value:n,oldValue:o}){n!==o&&(e.__qclosepopup.depth=Me(n))},beforeUnmount(e){const n=e.__qclosepopup;e.removeEventListener("click",n.handler),e.removeEventListener("keyup",n.handlerKey),delete e.__qclosepopup}});function At(){return ht(mt)}export{Wt as C,Bt as Q,Lt as T,wt as a,Ht as b,kt as c,Et as d,Tt as e,St as f,Pe as g,ne as h,Pt as i,je as j,Qe as k,Mt as n,_t as p,He as s,At as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
