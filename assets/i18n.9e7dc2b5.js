import{d as ot,h as jt,e as On,i as bn,o as hn,a as Cn,c as be,w as Ze,F as Bt,g as Jt,b as An,r as Sn,s as Pn,f as yn,T as Rn,j as kn}from"./index.d4f7fe54.js";/*!
  * shared v9.10.2
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */const ve=typeof window!="undefined",ce=(e,t=!1)=>t?Symbol.for(e):Symbol(e),Dn=(e,t,n)=>Mn({l:e,k:t,s:n}),Mn=e=>JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029").replace(/\u0027/g,"\\u0027"),X=e=>typeof e=="number"&&isFinite(e),Fn=e=>qt(e)==="[object Date]",Ue=e=>qt(e)==="[object RegExp]",xe=e=>F(e)&&Object.keys(e).length===0,K=Object.assign;let Nt;const we=()=>Nt||(Nt=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:{});function gt(e){return e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}const vn=Object.prototype.hasOwnProperty;function We(e,t){return vn.call(e,t)}const Y=Array.isArray,x=e=>typeof e=="function",A=e=>typeof e=="string",V=e=>typeof e=="boolean",U=e=>e!==null&&typeof e=="object",Un=e=>U(e)&&x(e.then)&&x(e.catch),Qt=Object.prototype.toString,qt=e=>Qt.call(e),F=e=>{if(!U(e))return!1;const t=Object.getPrototypeOf(e);return t===null||t.constructor===Object},wn=e=>e==null?"":Y(e)||F(e)&&e.toString===Qt?JSON.stringify(e,null,2):String(e);function Wn(e,t=""){return e.reduce((n,r,s)=>s===0?n+r:n+t+r,"")}function it(e){let t=e;return()=>++t}function Vn(e,t){typeof console!="undefined"&&(console.warn("[intlify] "+e),t&&console.warn(t.stack))}const De=e=>!U(e)||Y(e);function Fe(e,t){if(De(e)||De(t))throw new Error("Invalid value");const n=[{src:e,des:t}];for(;n.length;){const{src:r,des:s}=n.pop();Object.keys(r).forEach(l=>{De(r[l])||De(s[l])?s[l]=r[l]:n.push({src:r[l],des:s[l]})})}}/*!
  * message-compiler v9.10.2
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */function xn(e,t,n){return{line:e,column:t,offset:n}}function ze(e,t,n){const r={start:e,end:t};return n!=null&&(r.source=n),r}const $n=/\{([0-9a-zA-Z]+)\}/g;function Yn(e,...t){return t.length===1&&Gn(t[0])&&(t=t[0]),(!t||!t.hasOwnProperty)&&(t={}),e.replace($n,(n,r)=>t.hasOwnProperty(r)?t[r]:"")}const Zt=Object.assign,Lt=e=>typeof e=="string",Gn=e=>e!==null&&typeof e=="object";function zt(e,t=""){return e.reduce((n,r,s)=>s===0?n+r:n+t+r,"")}const R={EXPECTED_TOKEN:1,INVALID_TOKEN_IN_PLACEHOLDER:2,UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER:3,UNKNOWN_ESCAPE_SEQUENCE:4,INVALID_UNICODE_ESCAPE_SEQUENCE:5,UNBALANCED_CLOSING_BRACE:6,UNTERMINATED_CLOSING_BRACE:7,EMPTY_PLACEHOLDER:8,NOT_ALLOW_NEST_PLACEHOLDER:9,INVALID_LINKED_FORMAT:10,MUST_HAVE_MESSAGES_IN_PLURAL:11,UNEXPECTED_EMPTY_LINKED_MODIFIER:12,UNEXPECTED_EMPTY_LINKED_KEY:13,UNEXPECTED_LEXICAL_ANALYSIS:14,UNHANDLED_CODEGEN_NODE_TYPE:15,UNHANDLED_MINIFIER_NODE_TYPE:16,__EXTEND_POINT__:17},Xn={[R.EXPECTED_TOKEN]:"Expected token: '{0}'",[R.INVALID_TOKEN_IN_PLACEHOLDER]:"Invalid token in placeholder: '{0}'",[R.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]:"Unterminated single quote in placeholder",[R.UNKNOWN_ESCAPE_SEQUENCE]:"Unknown escape sequence: \\{0}",[R.INVALID_UNICODE_ESCAPE_SEQUENCE]:"Invalid unicode escape sequence: {0}",[R.UNBALANCED_CLOSING_BRACE]:"Unbalanced closing brace",[R.UNTERMINATED_CLOSING_BRACE]:"Unterminated closing brace",[R.EMPTY_PLACEHOLDER]:"Empty placeholder",[R.NOT_ALLOW_NEST_PLACEHOLDER]:"Not allowed nest placeholder",[R.INVALID_LINKED_FORMAT]:"Invalid linked format",[R.MUST_HAVE_MESSAGES_IN_PLURAL]:"Plural must have messages",[R.UNEXPECTED_EMPTY_LINKED_MODIFIER]:"Unexpected empty linked modifier",[R.UNEXPECTED_EMPTY_LINKED_KEY]:"Unexpected empty linked key",[R.UNEXPECTED_LEXICAL_ANALYSIS]:"Unexpected lexical analysis in token: '{0}'",[R.UNHANDLED_CODEGEN_NODE_TYPE]:"unhandled codegen node type: '{0}'",[R.UNHANDLED_MINIFIER_NODE_TYPE]:"unhandled mimifier node type: '{0}'"};function Te(e,t,n={}){const{domain:r,messages:s,args:l}=n,o=Yn((s||Xn)[e]||"",...l||[]),_=new SyntaxError(String(o));return _.code=e,t&&(_.location=t),_.domain=r,_}function Hn(e){throw e}const re=" ",Kn="\r",H=`
`,jn=String.fromCharCode(8232),Bn=String.fromCharCode(8233);function Jn(e){const t=e;let n=0,r=1,s=1,l=0;const o=M=>t[M]===Kn&&t[M+1]===H,_=M=>t[M]===H,u=M=>t[M]===Bn,E=M=>t[M]===jn,O=M=>o(M)||_(M)||u(M)||E(M),T=()=>n,L=()=>r,C=()=>s,y=()=>l,k=M=>o(M)||u(M)||E(M)?H:t[M],S=()=>k(n),i=()=>k(n+l);function N(){return l=0,O(n)&&(r++,s=0),o(n)&&n++,n++,s++,t[n]}function p(){return o(n+l)&&l++,l++,t[n+l]}function d(){n=0,r=1,s=1,l=0}function b(M=0){l=M}function h(){const M=n+l;for(;M!==n;)N();l=0}return{index:T,line:L,column:C,peekOffset:y,charAt:k,currentChar:S,currentPeek:i,next:N,peek:p,reset:d,resetPeek:b,skipToPeek:h}}const ue=void 0,Qn=".",Tt="'",qn="tokenizer";function Zn(e,t={}){const n=t.location!==!1,r=Jn(e),s=()=>r.index(),l=()=>xn(r.line(),r.column(),r.index()),o=l(),_=s(),u={currentType:14,offset:_,startLoc:o,endLoc:o,lastType:14,lastOffset:_,lastStartLoc:o,lastEndLoc:o,braceNest:0,inLinked:!1,text:""},E=()=>u,{onError:O}=t;function T(a,c,m,...I){const D=E();if(c.column+=m,c.offset+=m,O){const v=n?ze(D.startLoc,c):null,Z=Te(a,v,{domain:qn,args:I});O(Z)}}function L(a,c,m){a.endLoc=l(),a.currentType=c;const I={type:c};return n&&(I.loc=ze(a.startLoc,a.endLoc)),m!=null&&(I.value=m),I}const C=a=>L(a,14);function y(a,c){return a.currentChar()===c?(a.next(),c):(T(R.EXPECTED_TOKEN,l(),0,c),"")}function k(a){let c="";for(;a.currentPeek()===re||a.currentPeek()===H;)c+=a.currentPeek(),a.peek();return c}function S(a){const c=k(a);return a.skipToPeek(),c}function i(a){if(a===ue)return!1;const c=a.charCodeAt(0);return c>=97&&c<=122||c>=65&&c<=90||c===95}function N(a){if(a===ue)return!1;const c=a.charCodeAt(0);return c>=48&&c<=57}function p(a,c){const{currentType:m}=c;if(m!==2)return!1;k(a);const I=i(a.currentPeek());return a.resetPeek(),I}function d(a,c){const{currentType:m}=c;if(m!==2)return!1;k(a);const I=a.currentPeek()==="-"?a.peek():a.currentPeek(),D=N(I);return a.resetPeek(),D}function b(a,c){const{currentType:m}=c;if(m!==2)return!1;k(a);const I=a.currentPeek()===Tt;return a.resetPeek(),I}function h(a,c){const{currentType:m}=c;if(m!==8)return!1;k(a);const I=a.currentPeek()===".";return a.resetPeek(),I}function M(a,c){const{currentType:m}=c;if(m!==9)return!1;k(a);const I=i(a.currentPeek());return a.resetPeek(),I}function W(a,c){const{currentType:m}=c;if(!(m===8||m===12))return!1;k(a);const I=a.currentPeek()===":";return a.resetPeek(),I}function P(a,c){const{currentType:m}=c;if(m!==10)return!1;const I=()=>{const v=a.currentPeek();return v==="{"?i(a.peek()):v==="@"||v==="%"||v==="|"||v===":"||v==="."||v===re||!v?!1:v===H?(a.peek(),I()):i(v)},D=I();return a.resetPeek(),D}function B(a){k(a);const c=a.currentPeek()==="|";return a.resetPeek(),c}function oe(a){const c=k(a),m=a.currentPeek()==="%"&&a.peek()==="{";return a.resetPeek(),{isModulo:m,hasSpace:c.length>0}}function J(a,c=!0){const m=(D=!1,v="",Z=!1)=>{const ne=a.currentPeek();return ne==="{"?v==="%"?!1:D:ne==="@"||!ne?v==="%"?!0:D:ne==="%"?(a.peek(),m(D,"%",!0)):ne==="|"?v==="%"||Z?!0:!(v===re||v===H):ne===re?(a.peek(),m(!0,re,Z)):ne===H?(a.peek(),m(!0,H,Z)):!0},I=m();return c&&a.resetPeek(),I}function _e(a,c){const m=a.currentChar();return m===ue?ue:c(m)?(a.next(),m):null}function Ae(a){return _e(a,m=>{const I=m.charCodeAt(0);return I>=97&&I<=122||I>=65&&I<=90||I>=48&&I<=57||I===95||I===36})}function Ye(a){return _e(a,m=>{const I=m.charCodeAt(0);return I>=48&&I<=57})}function Ge(a){return _e(a,m=>{const I=m.charCodeAt(0);return I>=48&&I<=57||I>=65&&I<=70||I>=97&&I<=102})}function Se(a){let c="",m="";for(;c=Ye(a);)m+=c;return m}function Xe(a){S(a);const c=a.currentChar();return c!=="%"&&T(R.EXPECTED_TOKEN,l(),0,c),a.next(),"%"}function Pe(a){let c="";for(;;){const m=a.currentChar();if(m==="{"||m==="}"||m==="@"||m==="|"||!m)break;if(m==="%")if(J(a))c+=m,a.next();else break;else if(m===re||m===H)if(J(a))c+=m,a.next();else{if(B(a))break;c+=m,a.next()}else c+=m,a.next()}return c}function He(a){S(a);let c="",m="";for(;c=Ae(a);)m+=c;return a.currentChar()===ue&&T(R.UNTERMINATED_CLOSING_BRACE,l(),0),m}function te(a){S(a);let c="";return a.currentChar()==="-"?(a.next(),c+=`-${Se(a)}`):c+=Se(a),a.currentChar()===ue&&T(R.UNTERMINATED_CLOSING_BRACE,l(),0),c}function ye(a){S(a),y(a,"'");let c="",m="";const I=v=>v!==Tt&&v!==H;for(;c=_e(a,I);)c==="\\"?m+=Ke(a):m+=c;const D=a.currentChar();return D===H||D===ue?(T(R.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER,l(),0),D===H&&(a.next(),y(a,"'")),m):(y(a,"'"),m)}function Ke(a){const c=a.currentChar();switch(c){case"\\":case"'":return a.next(),`\\${c}`;case"u":return Re(a,c,4);case"U":return Re(a,c,6);default:return T(R.UNKNOWN_ESCAPE_SEQUENCE,l(),0,c),""}}function Re(a,c,m){y(a,c);let I="";for(let D=0;D<m;D++){const v=Ge(a);if(!v){T(R.INVALID_UNICODE_ESCAPE_SEQUENCE,l(),0,`\\${c}${I}${a.currentChar()}`);break}I+=v}return`\\${c}${I}`}function je(a){S(a);let c="",m="";const I=D=>D!=="{"&&D!=="}"&&D!==re&&D!==H;for(;c=_e(a,I);)m+=c;return m}function Be(a){let c="",m="";for(;c=Ae(a);)m+=c;return m}function Et(a){const c=(m=!1,I)=>{const D=a.currentChar();return D==="{"||D==="%"||D==="@"||D==="|"||D==="("||D===")"||!D||D===re?I:D===H||D===Qn?(I+=D,a.next(),c(m,I)):(I+=D,a.next(),c(!0,I))};return c(!1,"")}function pe(a){S(a);const c=y(a,"|");return S(a),c}function Ie(a,c){let m=null;switch(a.currentChar()){case"{":return c.braceNest>=1&&T(R.NOT_ALLOW_NEST_PLACEHOLDER,l(),0),a.next(),m=L(c,2,"{"),S(a),c.braceNest++,m;case"}":return c.braceNest>0&&c.currentType===2&&T(R.EMPTY_PLACEHOLDER,l(),0),a.next(),m=L(c,3,"}"),c.braceNest--,c.braceNest>0&&S(a),c.inLinked&&c.braceNest===0&&(c.inLinked=!1),m;case"@":return c.braceNest>0&&T(R.UNTERMINATED_CLOSING_BRACE,l(),0),m=de(a,c)||C(c),c.braceNest=0,m;default:{let D=!0,v=!0,Z=!0;if(B(a))return c.braceNest>0&&T(R.UNTERMINATED_CLOSING_BRACE,l(),0),m=L(c,1,pe(a)),c.braceNest=0,c.inLinked=!1,m;if(c.braceNest>0&&(c.currentType===5||c.currentType===6||c.currentType===7))return T(R.UNTERMINATED_CLOSING_BRACE,l(),0),c.braceNest=0,Oe(a,c);if(D=p(a,c))return m=L(c,5,He(a)),S(a),m;if(v=d(a,c))return m=L(c,6,te(a)),S(a),m;if(Z=b(a,c))return m=L(c,7,ye(a)),S(a),m;if(!D&&!v&&!Z)return m=L(c,13,je(a)),T(R.INVALID_TOKEN_IN_PLACEHOLDER,l(),0,m.value),S(a),m;break}}return m}function de(a,c){const{currentType:m}=c;let I=null;const D=a.currentChar();switch((m===8||m===9||m===12||m===10)&&(D===H||D===re)&&T(R.INVALID_LINKED_FORMAT,l(),0),D){case"@":return a.next(),I=L(c,8,"@"),c.inLinked=!0,I;case".":return S(a),a.next(),L(c,9,".");case":":return S(a),a.next(),L(c,10,":");default:return B(a)?(I=L(c,1,pe(a)),c.braceNest=0,c.inLinked=!1,I):h(a,c)||W(a,c)?(S(a),de(a,c)):M(a,c)?(S(a),L(c,12,Be(a))):P(a,c)?(S(a),D==="{"?Ie(a,c)||I:L(c,11,Et(a))):(m===8&&T(R.INVALID_LINKED_FORMAT,l(),0),c.braceNest=0,c.inLinked=!1,Oe(a,c))}}function Oe(a,c){let m={type:14};if(c.braceNest>0)return Ie(a,c)||C(c);if(c.inLinked)return de(a,c)||C(c);switch(a.currentChar()){case"{":return Ie(a,c)||C(c);case"}":return T(R.UNBALANCED_CLOSING_BRACE,l(),0),a.next(),L(c,3,"}");case"@":return de(a,c)||C(c);default:{if(B(a))return m=L(c,1,pe(a)),c.braceNest=0,c.inLinked=!1,m;const{isModulo:D,hasSpace:v}=oe(a);if(D)return v?L(c,0,Pe(a)):L(c,4,Xe(a));if(J(a))return L(c,0,Pe(a));break}}return m}function Je(){const{currentType:a,offset:c,startLoc:m,endLoc:I}=u;return u.lastType=a,u.lastOffset=c,u.lastStartLoc=m,u.lastEndLoc=I,u.offset=s(),u.startLoc=l(),r.currentChar()===ue?L(u,14):Oe(r,u)}return{nextToken:Je,currentOffset:s,currentPosition:l,context:E}}const zn="parser",er=/(?:\\\\|\\'|\\u([0-9a-fA-F]{4})|\\U([0-9a-fA-F]{6}))/g;function tr(e,t,n){switch(e){case"\\\\":return"\\";case"\\'":return"'";default:{const r=parseInt(t||n,16);return r<=55295||r>=57344?String.fromCodePoint(r):"\uFFFD"}}}function nr(e={}){const t=e.location!==!1,{onError:n}=e;function r(i,N,p,d,...b){const h=i.currentPosition();if(h.offset+=d,h.column+=d,n){const M=t?ze(p,h):null,W=Te(N,M,{domain:zn,args:b});n(W)}}function s(i,N,p){const d={type:i};return t&&(d.start=N,d.end=N,d.loc={start:p,end:p}),d}function l(i,N,p,d){d&&(i.type=d),t&&(i.end=N,i.loc&&(i.loc.end=p))}function o(i,N){const p=i.context(),d=s(3,p.offset,p.startLoc);return d.value=N,l(d,i.currentOffset(),i.currentPosition()),d}function _(i,N){const p=i.context(),{lastOffset:d,lastStartLoc:b}=p,h=s(5,d,b);return h.index=parseInt(N,10),i.nextToken(),l(h,i.currentOffset(),i.currentPosition()),h}function u(i,N){const p=i.context(),{lastOffset:d,lastStartLoc:b}=p,h=s(4,d,b);return h.key=N,i.nextToken(),l(h,i.currentOffset(),i.currentPosition()),h}function E(i,N){const p=i.context(),{lastOffset:d,lastStartLoc:b}=p,h=s(9,d,b);return h.value=N.replace(er,tr),i.nextToken(),l(h,i.currentOffset(),i.currentPosition()),h}function O(i){const N=i.nextToken(),p=i.context(),{lastOffset:d,lastStartLoc:b}=p,h=s(8,d,b);return N.type!==12?(r(i,R.UNEXPECTED_EMPTY_LINKED_MODIFIER,p.lastStartLoc,0),h.value="",l(h,d,b),{nextConsumeToken:N,node:h}):(N.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,p.lastStartLoc,0,z(N)),h.value=N.value||"",l(h,i.currentOffset(),i.currentPosition()),{node:h})}function T(i,N){const p=i.context(),d=s(7,p.offset,p.startLoc);return d.value=N,l(d,i.currentOffset(),i.currentPosition()),d}function L(i){const N=i.context(),p=s(6,N.offset,N.startLoc);let d=i.nextToken();if(d.type===9){const b=O(i);p.modifier=b.node,d=b.nextConsumeToken||i.nextToken()}switch(d.type!==10&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(d)),d=i.nextToken(),d.type===2&&(d=i.nextToken()),d.type){case 11:d.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(d)),p.key=T(i,d.value||"");break;case 5:d.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(d)),p.key=u(i,d.value||"");break;case 6:d.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(d)),p.key=_(i,d.value||"");break;case 7:d.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(d)),p.key=E(i,d.value||"");break;default:{r(i,R.UNEXPECTED_EMPTY_LINKED_KEY,N.lastStartLoc,0);const b=i.context(),h=s(7,b.offset,b.startLoc);return h.value="",l(h,b.offset,b.startLoc),p.key=h,l(p,b.offset,b.startLoc),{nextConsumeToken:d,node:p}}}return l(p,i.currentOffset(),i.currentPosition()),{node:p}}function C(i){const N=i.context(),p=N.currentType===1?i.currentOffset():N.offset,d=N.currentType===1?N.endLoc:N.startLoc,b=s(2,p,d);b.items=[];let h=null;do{const P=h||i.nextToken();switch(h=null,P.type){case 0:P.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(P)),b.items.push(o(i,P.value||""));break;case 6:P.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(P)),b.items.push(_(i,P.value||""));break;case 5:P.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(P)),b.items.push(u(i,P.value||""));break;case 7:P.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(P)),b.items.push(E(i,P.value||""));break;case 8:{const B=L(i);b.items.push(B.node),h=B.nextConsumeToken||null;break}}}while(N.currentType!==14&&N.currentType!==1);const M=N.currentType===1?N.lastOffset:i.currentOffset(),W=N.currentType===1?N.lastEndLoc:i.currentPosition();return l(b,M,W),b}function y(i,N,p,d){const b=i.context();let h=d.items.length===0;const M=s(1,N,p);M.cases=[],M.cases.push(d);do{const W=C(i);h||(h=W.items.length===0),M.cases.push(W)}while(b.currentType!==14);return h&&r(i,R.MUST_HAVE_MESSAGES_IN_PLURAL,p,0),l(M,i.currentOffset(),i.currentPosition()),M}function k(i){const N=i.context(),{offset:p,startLoc:d}=N,b=C(i);return N.currentType===14?b:y(i,p,d,b)}function S(i){const N=Zn(i,Zt({},e)),p=N.context(),d=s(0,p.offset,p.startLoc);return t&&d.loc&&(d.loc.source=i),d.body=k(N),e.onCacheKey&&(d.cacheKey=e.onCacheKey(i)),p.currentType!==14&&r(N,R.UNEXPECTED_LEXICAL_ANALYSIS,p.lastStartLoc,0,i[p.offset]||""),l(d,N.currentOffset(),N.currentPosition()),d}return{parse:S}}function z(e){if(e.type===14)return"EOF";const t=(e.value||"").replace(/\r?\n/gu,"\\n");return t.length>10?t.slice(0,9)+"\u2026":t}function rr(e,t={}){const n={ast:e,helpers:new Set};return{context:()=>n,helper:l=>(n.helpers.add(l),l)}}function pt(e,t){for(let n=0;n<e.length;n++)ut(e[n],t)}function ut(e,t){switch(e.type){case 1:pt(e.cases,t),t.helper("plural");break;case 2:pt(e.items,t);break;case 6:{ut(e.key,t),t.helper("linked"),t.helper("type");break}case 5:t.helper("interpolate"),t.helper("list");break;case 4:t.helper("interpolate"),t.helper("named");break}}function ar(e,t={}){const n=rr(e);n.helper("normalize"),e.body&&ut(e.body,n);const r=n.context();e.helpers=Array.from(r.helpers)}function sr(e){const t=e.body;return t.type===2?It(t):t.cases.forEach(n=>It(n)),e}function It(e){if(e.items.length===1){const t=e.items[0];(t.type===3||t.type===9)&&(e.static=t.value,delete t.value)}else{const t=[];for(let n=0;n<e.items.length;n++){const r=e.items[n];if(!(r.type===3||r.type===9)||r.value==null)break;t.push(r.value)}if(t.length===e.items.length){e.static=zt(t);for(let n=0;n<e.items.length;n++){const r=e.items[n];(r.type===3||r.type===9)&&delete r.value}}}}const lr="minifier";function Ne(e){switch(e.t=e.type,e.type){case 0:{const t=e;Ne(t.body),t.b=t.body,delete t.body;break}case 1:{const t=e,n=t.cases;for(let r=0;r<n.length;r++)Ne(n[r]);t.c=n,delete t.cases;break}case 2:{const t=e,n=t.items;for(let r=0;r<n.length;r++)Ne(n[r]);t.i=n,delete t.items,t.static&&(t.s=t.static,delete t.static);break}case 3:case 9:case 8:case 7:{const t=e;t.value&&(t.v=t.value,delete t.value);break}case 6:{const t=e;Ne(t.key),t.k=t.key,delete t.key,t.modifier&&(Ne(t.modifier),t.m=t.modifier,delete t.modifier);break}case 5:{const t=e;t.i=t.index,delete t.index;break}case 4:{const t=e;t.k=t.key,delete t.key;break}default:throw Te(R.UNHANDLED_MINIFIER_NODE_TYPE,null,{domain:lr,args:[e.type]})}delete e.type}const cr="parser";function or(e,t){const{sourceMap:n,filename:r,breakLineCode:s,needIndent:l}=t,o=t.location!==!1,_={filename:r,code:"",column:1,line:1,offset:0,map:void 0,breakLineCode:s,needIndent:l,indentLevel:0};o&&e.loc&&(_.source=e.loc.source);const u=()=>_;function E(S,i){_.code+=S}function O(S,i=!0){const N=i?s:"";E(l?N+"  ".repeat(S):N)}function T(S=!0){const i=++_.indentLevel;S&&O(i)}function L(S=!0){const i=--_.indentLevel;S&&O(i)}function C(){O(_.indentLevel)}return{context:u,push:E,indent:T,deindent:L,newline:C,helper:S=>`_${S}`,needIndent:()=>_.needIndent}}function ir(e,t){const{helper:n}=e;e.push(`${n("linked")}(`),ge(e,t.key),t.modifier?(e.push(", "),ge(e,t.modifier),e.push(", _type")):e.push(", undefined, _type"),e.push(")")}function ur(e,t){const{helper:n,needIndent:r}=e;e.push(`${n("normalize")}([`),e.indent(r());const s=t.items.length;for(let l=0;l<s&&(ge(e,t.items[l]),l!==s-1);l++)e.push(", ");e.deindent(r()),e.push("])")}function fr(e,t){const{helper:n,needIndent:r}=e;if(t.cases.length>1){e.push(`${n("plural")}([`),e.indent(r());const s=t.cases.length;for(let l=0;l<s&&(ge(e,t.cases[l]),l!==s-1);l++)e.push(", ");e.deindent(r()),e.push("])")}}function _r(e,t){t.body?ge(e,t.body):e.push("null")}function ge(e,t){const{helper:n}=e;switch(t.type){case 0:_r(e,t);break;case 1:fr(e,t);break;case 2:ur(e,t);break;case 6:ir(e,t);break;case 8:e.push(JSON.stringify(t.value),t);break;case 7:e.push(JSON.stringify(t.value),t);break;case 5:e.push(`${n("interpolate")}(${n("list")}(${t.index}))`,t);break;case 4:e.push(`${n("interpolate")}(${n("named")}(${JSON.stringify(t.key)}))`,t);break;case 9:e.push(JSON.stringify(t.value),t);break;case 3:e.push(JSON.stringify(t.value),t);break;default:throw Te(R.UNHANDLED_CODEGEN_NODE_TYPE,null,{domain:cr,args:[t.type]})}}const mr=(e,t={})=>{const n=Lt(t.mode)?t.mode:"normal",r=Lt(t.filename)?t.filename:"message.intl",s=!!t.sourceMap,l=t.breakLineCode!=null?t.breakLineCode:n==="arrow"?";":`
`,o=t.needIndent?t.needIndent:n!=="arrow",_=e.helpers||[],u=or(e,{mode:n,filename:r,sourceMap:s,breakLineCode:l,needIndent:o});u.push(n==="normal"?"function __msg__ (ctx) {":"(ctx) => {"),u.indent(o),_.length>0&&(u.push(`const { ${zt(_.map(T=>`${T}: _${T}`),", ")} } = ctx`),u.newline()),u.push("return "),ge(u,e),u.deindent(o),u.push("}"),delete e.helpers;const{code:E,map:O}=u.context();return{ast:e,code:E,map:O?O.toJSON():void 0}};function dr(e,t={}){const n=Zt({},t),r=!!n.jit,s=!!n.minify,l=n.optimize==null?!0:n.optimize,_=nr(n).parse(e);return r?(l&&sr(_),s&&Ne(_),{ast:_,code:""}):(ar(_,n),mr(_,n))}/*!
  * core-base v9.10.2
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */function Er(){typeof __INTLIFY_JIT_COMPILATION__!="boolean"&&(we().__INTLIFY_JIT_COMPILATION__=!1),typeof __INTLIFY_DROP_MESSAGE_COMPILER__!="boolean"&&(we().__INTLIFY_DROP_MESSAGE_COMPILER__=!1)}const fe=[];fe[0]={w:[0],i:[3,0],["["]:[4],o:[7]};fe[1]={w:[1],["."]:[2],["["]:[4],o:[7]};fe[2]={w:[2],i:[3,0],[0]:[3,0]};fe[3]={i:[3,0],[0]:[3,0],w:[1,1],["."]:[2,1],["["]:[4,1],o:[7,1]};fe[4]={["'"]:[5,0],['"']:[6,0],["["]:[4,2],["]"]:[1,3],o:8,l:[4,0]};fe[5]={["'"]:[4,0],o:8,l:[5,0]};fe[6]={['"']:[4,0],o:8,l:[6,0]};const Nr=/^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;function gr(e){return Nr.test(e)}function Lr(e){const t=e.charCodeAt(0),n=e.charCodeAt(e.length-1);return t===n&&(t===34||t===39)?e.slice(1,-1):e}function Tr(e){if(e==null)return"o";switch(e.charCodeAt(0)){case 91:case 93:case 46:case 34:case 39:return e;case 95:case 36:case 45:return"i";case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"w"}return"i"}function pr(e){const t=e.trim();return e.charAt(0)==="0"&&isNaN(parseInt(e))?!1:gr(t)?Lr(t):"*"+t}function Ir(e){const t=[];let n=-1,r=0,s=0,l,o,_,u,E,O,T;const L=[];L[0]=()=>{o===void 0?o=_:o+=_},L[1]=()=>{o!==void 0&&(t.push(o),o=void 0)},L[2]=()=>{L[0](),s++},L[3]=()=>{if(s>0)s--,r=4,L[0]();else{if(s=0,o===void 0||(o=pr(o),o===!1))return!1;L[1]()}};function C(){const y=e[n+1];if(r===5&&y==="'"||r===6&&y==='"')return n++,_="\\"+y,L[0](),!0}for(;r!==null;)if(n++,l=e[n],!(l==="\\"&&C())){if(u=Tr(l),T=fe[r],E=T[u]||T.l||8,E===8||(r=E[0],E[1]!==void 0&&(O=L[E[1]],O&&(_=l,O()===!1))))return;if(r===7)return t}}const Ot=new Map;function Or(e,t){return U(e)?e[t]:null}function br(e,t){if(!U(e))return null;let n=Ot.get(t);if(n||(n=Ir(t),n&&Ot.set(t,n)),!n)return null;const r=n.length;let s=e,l=0;for(;l<r;){const o=s[n[l]];if(o===void 0||x(s))return null;s=o,l++}return s}const hr=e=>e,Cr=e=>"",Ar="text",Sr=e=>e.length===0?"":Wn(e),Pr=wn;function bt(e,t){return e=Math.abs(e),t===2?e?e>1?1:0:1:e?Math.min(e,2):0}function yr(e){const t=X(e.pluralIndex)?e.pluralIndex:-1;return e.named&&(X(e.named.count)||X(e.named.n))?X(e.named.count)?e.named.count:X(e.named.n)?e.named.n:t:t}function Rr(e,t){t.count||(t.count=e),t.n||(t.n=e)}function kr(e={}){const t=e.locale,n=yr(e),r=U(e.pluralRules)&&A(t)&&x(e.pluralRules[t])?e.pluralRules[t]:bt,s=U(e.pluralRules)&&A(t)&&x(e.pluralRules[t])?bt:void 0,l=i=>i[r(n,i.length,s)],o=e.list||[],_=i=>o[i],u=e.named||{};X(e.pluralIndex)&&Rr(n,u);const E=i=>u[i];function O(i){const N=x(e.messages)?e.messages(i):U(e.messages)?e.messages[i]:!1;return N||(e.parent?e.parent.message(i):Cr)}const T=i=>e.modifiers?e.modifiers[i]:hr,L=F(e.processor)&&x(e.processor.normalize)?e.processor.normalize:Sr,C=F(e.processor)&&x(e.processor.interpolate)?e.processor.interpolate:Pr,y=F(e.processor)&&A(e.processor.type)?e.processor.type:Ar,S={list:_,named:E,plural:l,linked:(i,...N)=>{const[p,d]=N;let b="text",h="";N.length===1?U(p)?(h=p.modifier||h,b=p.type||b):A(p)&&(h=p||h):N.length===2&&(A(p)&&(h=p||h),A(d)&&(b=d||b));const M=O(i)(S),W=b==="vnode"&&Y(M)&&h?M[0]:M;return h?T(h)(W,b):W},message:O,type:y,interpolate:C,normalize:L,values:K({},o,u)};return S}const Dr={NOT_FOUND_KEY:1,FALLBACK_TO_TRANSLATE:2,CANNOT_FORMAT_NUMBER:3,FALLBACK_TO_NUMBER_FORMAT:4,CANNOT_FORMAT_DATE:5,FALLBACK_TO_DATE_FORMAT:6,EXPERIMENTAL_CUSTOM_MESSAGE_COMPILER:7,__EXTEND_POINT__:8},en=R.__EXTEND_POINT__,me=it(en),ee={INVALID_ARGUMENT:en,INVALID_DATE_ARGUMENT:me(),INVALID_ISO_DATE_ARGUMENT:me(),NOT_SUPPORT_NON_STRING_MESSAGE:me(),NOT_SUPPORT_LOCALE_PROMISE_VALUE:me(),NOT_SUPPORT_LOCALE_ASYNC_FUNCTION:me(),NOT_SUPPORT_LOCALE_TYPE:me(),__EXTEND_POINT__:me()};function se(e){return Te(e,null,void 0)}function ft(e,t){return t.locale!=null?ht(t.locale):ht(e.locale)}let Qe;function ht(e){if(A(e))return e;if(x(e)){if(e.resolvedOnce&&Qe!=null)return Qe;if(e.constructor.name==="Function"){const t=e();if(Un(t))throw se(ee.NOT_SUPPORT_LOCALE_PROMISE_VALUE);return Qe=t}else throw se(ee.NOT_SUPPORT_LOCALE_ASYNC_FUNCTION)}else throw se(ee.NOT_SUPPORT_LOCALE_TYPE)}function Mr(e,t,n){return[...new Set([n,...Y(t)?t:U(t)?Object.keys(t):A(t)?[t]:[n]])]}function tn(e,t,n){const r=A(n)?n:Ve,s=e;s.__localeChainCache||(s.__localeChainCache=new Map);let l=s.__localeChainCache.get(r);if(!l){l=[];let o=[n];for(;Y(o);)o=Ct(l,o,t);const _=Y(t)||!F(t)?t:t.default?t.default:null;o=A(_)?[_]:_,Y(o)&&Ct(l,o,!1),s.__localeChainCache.set(r,l)}return l}function Ct(e,t,n){let r=!0;for(let s=0;s<t.length&&V(r);s++){const l=t[s];A(l)&&(r=Fr(e,t[s],n))}return r}function Fr(e,t,n){let r;const s=t.split("-");do{const l=s.join("-");r=vr(e,l,n),s.splice(-1,1)}while(s.length&&r===!0);return r}function vr(e,t,n){let r=!1;if(!e.includes(t)&&(r=!0,t)){r=t[t.length-1]!=="!";const s=t.replace(/!/g,"");e.push(s),(Y(n)||F(n))&&n[s]&&(r=n[s])}return r}const Ur="9.10.2",$e=-1,Ve="en-US",At="",St=e=>`${e.charAt(0).toLocaleUpperCase()}${e.substr(1)}`;function wr(){return{upper:(e,t)=>t==="text"&&A(e)?e.toUpperCase():t==="vnode"&&U(e)&&"__v_isVNode"in e?e.children.toUpperCase():e,lower:(e,t)=>t==="text"&&A(e)?e.toLowerCase():t==="vnode"&&U(e)&&"__v_isVNode"in e?e.children.toLowerCase():e,capitalize:(e,t)=>t==="text"&&A(e)?St(e):t==="vnode"&&U(e)&&"__v_isVNode"in e?St(e.children):e}}let nn;function Wr(e){nn=e}let rn;function Vr(e){rn=e}let an;function xr(e){an=e}let sn=null;const Pt=e=>{sn=e},$r=()=>sn;let yt=0;function Yr(e={}){const t=x(e.onWarn)?e.onWarn:Vn,n=A(e.version)?e.version:Ur,r=A(e.locale)||x(e.locale)?e.locale:Ve,s=x(r)?Ve:r,l=Y(e.fallbackLocale)||F(e.fallbackLocale)||A(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:s,o=F(e.messages)?e.messages:{[s]:{}},_=F(e.datetimeFormats)?e.datetimeFormats:{[s]:{}},u=F(e.numberFormats)?e.numberFormats:{[s]:{}},E=K({},e.modifiers||{},wr()),O=e.pluralRules||{},T=x(e.missing)?e.missing:null,L=V(e.missingWarn)||Ue(e.missingWarn)?e.missingWarn:!0,C=V(e.fallbackWarn)||Ue(e.fallbackWarn)?e.fallbackWarn:!0,y=!!e.fallbackFormat,k=!!e.unresolving,S=x(e.postTranslation)?e.postTranslation:null,i=F(e.processor)?e.processor:null,N=V(e.warnHtmlMessage)?e.warnHtmlMessage:!0,p=!!e.escapeParameter,d=x(e.messageCompiler)?e.messageCompiler:nn,b=x(e.messageResolver)?e.messageResolver:rn||Or,h=x(e.localeFallbacker)?e.localeFallbacker:an||Mr,M=U(e.fallbackContext)?e.fallbackContext:void 0,W=e,P=U(W.__datetimeFormatters)?W.__datetimeFormatters:new Map,B=U(W.__numberFormatters)?W.__numberFormatters:new Map,oe=U(W.__meta)?W.__meta:{};yt++;const J={version:n,cid:yt,locale:r,fallbackLocale:l,messages:o,modifiers:E,pluralRules:O,missing:T,missingWarn:L,fallbackWarn:C,fallbackFormat:y,unresolving:k,postTranslation:S,processor:i,warnHtmlMessage:N,escapeParameter:p,messageCompiler:d,messageResolver:b,localeFallbacker:h,fallbackContext:M,onWarn:t,__meta:oe};return J.datetimeFormats=_,J.numberFormats=u,J.__datetimeFormatters=P,J.__numberFormatters=B,J}function _t(e,t,n,r,s){const{missing:l,onWarn:o}=e;if(l!==null){const _=l(e,n,t,s);return A(_)?_:t}else return t}function he(e,t,n){const r=e;r.__localeChainCache=new Map,e.localeFallbacker(e,n,t)}function qe(e){return n=>Gr(n,e)}function Gr(e,t){const n=t.b||t.body;if((n.t||n.type)===1){const r=n,s=r.c||r.cases;return e.plural(s.reduce((l,o)=>[...l,Rt(e,o)],[]))}else return Rt(e,n)}function Rt(e,t){const n=t.s||t.static;if(n)return e.type==="text"?n:e.normalize([n]);{const r=(t.i||t.items).reduce((s,l)=>[...s,et(e,l)],[]);return e.normalize(r)}}function et(e,t){const n=t.t||t.type;switch(n){case 3:{const r=t;return r.v||r.value}case 9:{const r=t;return r.v||r.value}case 4:{const r=t;return e.interpolate(e.named(r.k||r.key))}case 5:{const r=t;return e.interpolate(e.list(r.i!=null?r.i:r.index))}case 6:{const r=t,s=r.m||r.modifier;return e.linked(et(e,r.k||r.key),s?et(e,s):void 0,e.type)}case 7:{const r=t;return r.v||r.value}case 8:{const r=t;return r.v||r.value}default:throw new Error(`unhandled node type on format message part: ${n}`)}}const Xr=e=>e;let Me=Object.create(null);const Le=e=>U(e)&&(e.t===0||e.type===0)&&("b"in e||"body"in e);function Hr(e,t={}){let n=!1;const r=t.onError||Hn;return t.onError=s=>{n=!0,r(s)},{...dr(e,t),detectError:n}}function Kr(e,t){if(__INTLIFY_JIT_COMPILATION__&&!__INTLIFY_DROP_MESSAGE_COMPILER__&&A(e)){V(t.warnHtmlMessage)&&t.warnHtmlMessage;const r=(t.onCacheKey||Xr)(e),s=Me[r];if(s)return s;const{ast:l,detectError:o}=Hr(e,{...t,location:!1,jit:!0}),_=qe(l);return o?_:Me[r]=_}else{const n=e.cacheKey;if(n){const r=Me[n];return r||(Me[n]=qe(e))}else return qe(e)}}const kt=()=>"",le=e=>x(e);function Dt(e,...t){const{fallbackFormat:n,postTranslation:r,unresolving:s,messageCompiler:l,fallbackLocale:o,messages:_}=e,[u,E]=tt(...t),O=V(E.missingWarn)?E.missingWarn:e.missingWarn,T=V(E.fallbackWarn)?E.fallbackWarn:e.fallbackWarn,L=V(E.escapeParameter)?E.escapeParameter:e.escapeParameter,C=!!E.resolvedMessage,y=A(E.default)||V(E.default)?V(E.default)?l?u:()=>u:E.default:n?l?u:()=>u:"",k=n||y!=="",S=ft(e,E);L&&jr(E);let[i,N,p]=C?[u,S,_[S]||{}]:ln(e,u,S,o,T,O),d=i,b=u;if(!C&&!(A(d)||Le(d)||le(d))&&k&&(d=y,b=d),!C&&(!(A(d)||Le(d)||le(d))||!A(N)))return s?$e:u;let h=!1;const M=()=>{h=!0},W=le(d)?d:cn(e,u,N,d,b,M);if(h)return d;const P=Qr(e,N,p,E),B=kr(P),oe=Br(e,W,B);return r?r(oe,u):oe}function jr(e){Y(e.list)?e.list=e.list.map(t=>A(t)?gt(t):t):U(e.named)&&Object.keys(e.named).forEach(t=>{A(e.named[t])&&(e.named[t]=gt(e.named[t]))})}function ln(e,t,n,r,s,l){const{messages:o,onWarn:_,messageResolver:u,localeFallbacker:E}=e,O=E(e,r,n);let T={},L,C=null;const y="translate";for(let k=0;k<O.length&&(L=O[k],T=o[L]||{},(C=u(T,t))===null&&(C=T[t]),!(A(C)||Le(C)||le(C)));k++){const S=_t(e,t,L,l,y);S!==t&&(C=S)}return[C,L,T]}function cn(e,t,n,r,s,l){const{messageCompiler:o,warnHtmlMessage:_}=e;if(le(r)){const E=r;return E.locale=E.locale||n,E.key=E.key||t,E}if(o==null){const E=()=>r;return E.locale=n,E.key=t,E}const u=o(r,Jr(e,n,s,r,_,l));return u.locale=n,u.key=t,u.source=r,u}function Br(e,t,n){return t(n)}function tt(...e){const[t,n,r]=e,s={};if(!A(t)&&!X(t)&&!le(t)&&!Le(t))throw se(ee.INVALID_ARGUMENT);const l=X(t)?String(t):(le(t),t);return X(n)?s.plural=n:A(n)?s.default=n:F(n)&&!xe(n)?s.named=n:Y(n)&&(s.list=n),X(r)?s.plural=r:A(r)?s.default=r:F(r)&&K(s,r),[l,s]}function Jr(e,t,n,r,s,l){return{locale:t,key:n,warnHtmlMessage:s,onError:o=>{throw l&&l(o),o},onCacheKey:o=>Dn(t,n,o)}}function Qr(e,t,n,r){const{modifiers:s,pluralRules:l,messageResolver:o,fallbackLocale:_,fallbackWarn:u,missingWarn:E,fallbackContext:O}=e,L={locale:t,modifiers:s,pluralRules:l,messages:C=>{let y=o(n,C);if(y==null&&O){const[,,k]=ln(O,C,t,_,u,E);y=o(k,C)}if(A(y)||Le(y)){let k=!1;const i=cn(e,C,t,y,C,()=>{k=!0});return k?kt:i}else return le(y)?y:kt}};return e.processor&&(L.processor=e.processor),r.list&&(L.list=r.list),r.named&&(L.named=r.named),X(r.plural)&&(L.pluralIndex=r.plural),L}function Mt(e,...t){const{datetimeFormats:n,unresolving:r,fallbackLocale:s,onWarn:l,localeFallbacker:o}=e,{__datetimeFormatters:_}=e,[u,E,O,T]=nt(...t),L=V(O.missingWarn)?O.missingWarn:e.missingWarn;V(O.fallbackWarn)?O.fallbackWarn:e.fallbackWarn;const C=!!O.part,y=ft(e,O),k=o(e,s,y);if(!A(u)||u==="")return new Intl.DateTimeFormat(y,T).format(E);let S={},i,N=null;const p="datetime format";for(let h=0;h<k.length&&(i=k[h],S=n[i]||{},N=S[u],!F(N));h++)_t(e,u,i,L,p);if(!F(N)||!A(i))return r?$e:u;let d=`${i}__${u}`;xe(T)||(d=`${d}__${JSON.stringify(T)}`);let b=_.get(d);return b||(b=new Intl.DateTimeFormat(i,K({},N,T)),_.set(d,b)),C?b.formatToParts(E):b.format(E)}const on=["localeMatcher","weekday","era","year","month","day","hour","minute","second","timeZoneName","formatMatcher","hour12","timeZone","dateStyle","timeStyle","calendar","dayPeriod","numberingSystem","hourCycle","fractionalSecondDigits"];function nt(...e){const[t,n,r,s]=e,l={};let o={},_;if(A(t)){const u=t.match(/(\d{4}-\d{2}-\d{2})(T|\s)?(.*)/);if(!u)throw se(ee.INVALID_ISO_DATE_ARGUMENT);const E=u[3]?u[3].trim().startsWith("T")?`${u[1].trim()}${u[3].trim()}`:`${u[1].trim()}T${u[3].trim()}`:u[1].trim();_=new Date(E);try{_.toISOString()}catch{throw se(ee.INVALID_ISO_DATE_ARGUMENT)}}else if(Fn(t)){if(isNaN(t.getTime()))throw se(ee.INVALID_DATE_ARGUMENT);_=t}else if(X(t))_=t;else throw se(ee.INVALID_ARGUMENT);return A(n)?l.key=n:F(n)&&Object.keys(n).forEach(u=>{on.includes(u)?o[u]=n[u]:l[u]=n[u]}),A(r)?l.locale=r:F(r)&&(o=r),F(s)&&(o=s),[l.key||"",_,l,o]}function Ft(e,t,n){const r=e;for(const s in n){const l=`${t}__${s}`;!r.__datetimeFormatters.has(l)||r.__datetimeFormatters.delete(l)}}function vt(e,...t){const{numberFormats:n,unresolving:r,fallbackLocale:s,onWarn:l,localeFallbacker:o}=e,{__numberFormatters:_}=e,[u,E,O,T]=rt(...t),L=V(O.missingWarn)?O.missingWarn:e.missingWarn;V(O.fallbackWarn)?O.fallbackWarn:e.fallbackWarn;const C=!!O.part,y=ft(e,O),k=o(e,s,y);if(!A(u)||u==="")return new Intl.NumberFormat(y,T).format(E);let S={},i,N=null;const p="number format";for(let h=0;h<k.length&&(i=k[h],S=n[i]||{},N=S[u],!F(N));h++)_t(e,u,i,L,p);if(!F(N)||!A(i))return r?$e:u;let d=`${i}__${u}`;xe(T)||(d=`${d}__${JSON.stringify(T)}`);let b=_.get(d);return b||(b=new Intl.NumberFormat(i,K({},N,T)),_.set(d,b)),C?b.formatToParts(E):b.format(E)}const un=["localeMatcher","style","currency","currencyDisplay","currencySign","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","compactDisplay","notation","signDisplay","unit","unitDisplay","roundingMode","roundingPriority","roundingIncrement","trailingZeroDisplay"];function rt(...e){const[t,n,r,s]=e,l={};let o={};if(!X(t))throw se(ee.INVALID_ARGUMENT);const _=t;return A(n)?l.key=n:F(n)&&Object.keys(n).forEach(u=>{un.includes(u)?o[u]=n[u]:l[u]=n[u]}),A(r)?l.locale=r:F(r)&&(o=r),F(s)&&(o=s),[l.key||"",_,l,o]}function Ut(e,t,n){const r=e;for(const s in n){const l=`${t}__${s}`;!r.__numberFormatters.has(l)||r.__numberFormatters.delete(l)}}Er();/*!
  * vue-i18n v9.10.2
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */const qr="9.10.2";function Zr(){typeof __INTLIFY_JIT_COMPILATION__!="boolean"&&(we().__INTLIFY_JIT_COMPILATION__=!1),typeof __INTLIFY_DROP_MESSAGE_COMPILER__!="boolean"&&(we().__INTLIFY_DROP_MESSAGE_COMPILER__=!1)}const fn=Dr.__EXTEND_POINT__,ae=it(fn);ae(),ae(),ae(),ae(),ae(),ae(),ae(),ae(),ae();const _n=ee.__EXTEND_POINT__,j=it(_n),Q={UNEXPECTED_RETURN_TYPE:_n,INVALID_ARGUMENT:j(),MUST_BE_CALL_SETUP_TOP:j(),NOT_INSTALLED:j(),NOT_AVAILABLE_IN_LEGACY_MODE:j(),REQUIRED_VALUE:j(),INVALID_VALUE:j(),CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN:j(),NOT_INSTALLED_WITH_PROVIDE:j(),UNEXPECTED_ERROR:j(),NOT_COMPATIBLE_LEGACY_VUE_I18N:j(),BRIDGE_SUPPORT_VUE_2_ONLY:j(),MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION:j(),NOT_AVAILABLE_COMPOSITION_IN_LEGACY:j(),__EXTEND_POINT__:j()};function q(e,...t){return Te(e,null,void 0)}const at=ce("__translateVNode"),st=ce("__datetimeParts"),lt=ce("__numberParts"),zr=ce("__setPluralRules");ce("__intlifyMeta");const ea=ce("__injectWithOption"),ct=ce("__dispose");function Ce(e){if(!U(e))return e;for(const t in e)if(!!We(e,t))if(!t.includes("."))U(e[t])&&Ce(e[t]);else{const n=t.split("."),r=n.length-1;let s=e,l=!1;for(let o=0;o<r;o++){if(n[o]in s||(s[n[o]]={}),!U(s[n[o]])){l=!0;break}s=s[n[o]]}l||(s[n[r]]=e[t],delete e[t]),U(s[n[r]])&&Ce(s[n[r]])}return e}function mn(e,t){const{messages:n,__i18n:r,messageResolver:s,flatJson:l}=t,o=F(n)?n:Y(r)?{}:{[e]:{}};if(Y(r)&&r.forEach(_=>{if("locale"in _&&"resource"in _){const{locale:u,resource:E}=_;u?(o[u]=o[u]||{},Fe(E,o[u])):Fe(E,o)}else A(_)&&Fe(JSON.parse(_),o)}),s==null&&l)for(const _ in o)We(o,_)&&Ce(o[_]);return o}function ta(e){return e.type}function na(e,t,n){let r=U(t.messages)?t.messages:{};"__i18nGlobal"in n&&(r=mn(e.locale.value,{messages:r,__i18n:n.__i18nGlobal}));const s=Object.keys(r);s.length&&s.forEach(l=>{e.mergeLocaleMessage(l,r[l])});{if(U(t.datetimeFormats)){const l=Object.keys(t.datetimeFormats);l.length&&l.forEach(o=>{e.mergeDateTimeFormat(o,t.datetimeFormats[o])})}if(U(t.numberFormats)){const l=Object.keys(t.numberFormats);l.length&&l.forEach(o=>{e.mergeNumberFormat(o,t.numberFormats[o])})}}}function wt(e){return yn(Rn,null,e,0)}const Wt=()=>[],ra=()=>!1;let Vt=0;function xt(e){return(t,n,r,s)=>e(n,r,Jt()||void 0,s)}function dn(e={},t){const{__root:n,__injectWithOption:r}=e,s=n===void 0,l=e.flatJson,o=ve?Sn:Pn,_=!!e.translateExistCompatible;let u=V(e.inheritLocale)?e.inheritLocale:!0;const E=o(n&&u?n.locale.value:A(e.locale)?e.locale:Ve),O=o(n&&u?n.fallbackLocale.value:A(e.fallbackLocale)||Y(e.fallbackLocale)||F(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:E.value),T=o(mn(E.value,e)),L=o(F(e.datetimeFormats)?e.datetimeFormats:{[E.value]:{}}),C=o(F(e.numberFormats)?e.numberFormats:{[E.value]:{}});let y=n?n.missingWarn:V(e.missingWarn)||Ue(e.missingWarn)?e.missingWarn:!0,k=n?n.fallbackWarn:V(e.fallbackWarn)||Ue(e.fallbackWarn)?e.fallbackWarn:!0,S=n?n.fallbackRoot:V(e.fallbackRoot)?e.fallbackRoot:!0,i=!!e.fallbackFormat,N=x(e.missing)?e.missing:null,p=x(e.missing)?xt(e.missing):null,d=x(e.postTranslation)?e.postTranslation:null,b=n?n.warnHtmlMessage:V(e.warnHtmlMessage)?e.warnHtmlMessage:!0,h=!!e.escapeParameter;const M=n?n.modifiers:F(e.modifiers)?e.modifiers:{};let W=e.pluralRules||n&&n.pluralRules,P;P=(()=>{s&&Pt(null);const f={version:qr,locale:E.value,fallbackLocale:O.value,messages:T.value,modifiers:M,pluralRules:W,missing:p===null?void 0:p,missingWarn:y,fallbackWarn:k,fallbackFormat:i,unresolving:!0,postTranslation:d===null?void 0:d,warnHtmlMessage:b,escapeParameter:h,messageResolver:e.messageResolver,messageCompiler:e.messageCompiler,__meta:{framework:"vue"}};f.datetimeFormats=L.value,f.numberFormats=C.value,f.__datetimeFormatters=F(P)?P.__datetimeFormatters:void 0,f.__numberFormatters=F(P)?P.__numberFormatters:void 0;const g=Yr(f);return s&&Pt(g),g})(),he(P,E.value,O.value);function oe(){return[E.value,O.value,T.value,L.value,C.value]}const J=be({get:()=>E.value,set:f=>{E.value=f,P.locale=E.value}}),_e=be({get:()=>O.value,set:f=>{O.value=f,P.fallbackLocale=O.value,he(P,E.value,f)}}),Ae=be(()=>T.value),Ye=be(()=>L.value),Ge=be(()=>C.value);function Se(){return x(d)?d:null}function Xe(f){d=f,P.postTranslation=f}function Pe(){return N}function He(f){f!==null&&(p=xt(f)),N=f,P.missing=p}const te=(f,g,w,$,ie,ke)=>{oe();let Ee;try{s||(P.fallbackContext=n?$r():void 0),Ee=f(P)}finally{s||(P.fallbackContext=void 0)}if(w!=="translate exists"&&X(Ee)&&Ee===$e||w==="translate exists"&&!Ee){const[In,Ca]=g();return n&&S?$(n):ie(In)}else{if(ke(Ee))return Ee;throw q(Q.UNEXPECTED_RETURN_TYPE)}};function ye(...f){return te(g=>Reflect.apply(Dt,null,[g,...f]),()=>tt(...f),"translate",g=>Reflect.apply(g.t,g,[...f]),g=>g,g=>A(g))}function Ke(...f){const[g,w,$]=f;if($&&!U($))throw q(Q.INVALID_ARGUMENT);return ye(g,w,K({resolvedMessage:!0},$||{}))}function Re(...f){return te(g=>Reflect.apply(Mt,null,[g,...f]),()=>nt(...f),"datetime format",g=>Reflect.apply(g.d,g,[...f]),()=>At,g=>A(g))}function je(...f){return te(g=>Reflect.apply(vt,null,[g,...f]),()=>rt(...f),"number format",g=>Reflect.apply(g.n,g,[...f]),()=>At,g=>A(g))}function Be(f){return f.map(g=>A(g)||X(g)||V(g)?wt(String(g)):g)}const pe={normalize:Be,interpolate:f=>f,type:"vnode"};function Ie(...f){return te(g=>{let w;const $=g;try{$.processor=pe,w=Reflect.apply(Dt,null,[$,...f])}finally{$.processor=null}return w},()=>tt(...f),"translate",g=>g[at](...f),g=>[wt(g)],g=>Y(g))}function de(...f){return te(g=>Reflect.apply(vt,null,[g,...f]),()=>rt(...f),"number format",g=>g[lt](...f),Wt,g=>A(g)||Y(g))}function Oe(...f){return te(g=>Reflect.apply(Mt,null,[g,...f]),()=>nt(...f),"datetime format",g=>g[st](...f),Wt,g=>A(g)||Y(g))}function Je(f){W=f,P.pluralRules=W}function a(f,g){return te(()=>{if(!f)return!1;const w=A(g)?g:E.value,$=I(w),ie=P.messageResolver($,f);return _?ie!=null:Le(ie)||le(ie)||A(ie)},()=>[f],"translate exists",w=>Reflect.apply(w.te,w,[f,g]),ra,w=>V(w))}function c(f){let g=null;const w=tn(P,O.value,E.value);for(let $=0;$<w.length;$++){const ie=T.value[w[$]]||{},ke=P.messageResolver(ie,f);if(ke!=null){g=ke;break}}return g}function m(f){const g=c(f);return g!=null?g:n?n.tm(f)||{}:{}}function I(f){return T.value[f]||{}}function D(f,g){if(l){const w={[f]:g};for(const $ in w)We(w,$)&&Ce(w[$]);g=w[f]}T.value[f]=g,P.messages=T.value}function v(f,g){T.value[f]=T.value[f]||{};const w={[f]:g};if(l)for(const $ in w)We(w,$)&&Ce(w[$]);g=w[f],Fe(g,T.value[f]),P.messages=T.value}function Z(f){return L.value[f]||{}}function ne(f,g){L.value[f]=g,P.datetimeFormats=L.value,Ft(P,f,g)}function gn(f,g){L.value[f]=K(L.value[f]||{},g),P.datetimeFormats=L.value,Ft(P,f,g)}function Ln(f){return C.value[f]||{}}function Tn(f,g){C.value[f]=g,P.numberFormats=C.value,Ut(P,f,g)}function pn(f,g){C.value[f]=K(C.value[f]||{},g),P.numberFormats=C.value,Ut(P,f,g)}Vt++,n&&ve&&(Ze(n.locale,f=>{u&&(E.value=f,P.locale=f,he(P,E.value,O.value))}),Ze(n.fallbackLocale,f=>{u&&(O.value=f,P.fallbackLocale=f,he(P,E.value,O.value))}));const G={id:Vt,locale:J,fallbackLocale:_e,get inheritLocale(){return u},set inheritLocale(f){u=f,f&&n&&(E.value=n.locale.value,O.value=n.fallbackLocale.value,he(P,E.value,O.value))},get availableLocales(){return Object.keys(T.value).sort()},messages:Ae,get modifiers(){return M},get pluralRules(){return W||{}},get isGlobal(){return s},get missingWarn(){return y},set missingWarn(f){y=f,P.missingWarn=y},get fallbackWarn(){return k},set fallbackWarn(f){k=f,P.fallbackWarn=k},get fallbackRoot(){return S},set fallbackRoot(f){S=f},get fallbackFormat(){return i},set fallbackFormat(f){i=f,P.fallbackFormat=i},get warnHtmlMessage(){return b},set warnHtmlMessage(f){b=f,P.warnHtmlMessage=f},get escapeParameter(){return h},set escapeParameter(f){h=f,P.escapeParameter=f},t:ye,getLocaleMessage:I,setLocaleMessage:D,mergeLocaleMessage:v,getPostTranslationHandler:Se,setPostTranslationHandler:Xe,getMissingHandler:Pe,setMissingHandler:He,[zr]:Je};return G.datetimeFormats=Ye,G.numberFormats=Ge,G.rt=Ke,G.te=a,G.tm=m,G.d=Re,G.n=je,G.getDateTimeFormat=Z,G.setDateTimeFormat=ne,G.mergeDateTimeFormat=gn,G.getNumberFormat=Ln,G.setNumberFormat=Tn,G.mergeNumberFormat=pn,G[ea]=r,G[at]=Ie,G[st]=Oe,G[lt]=de,G}const mt={tag:{type:[String,Object]},locale:{type:String},scope:{type:String,validator:e=>e==="parent"||e==="global",default:"parent"},i18n:{type:Object}};function aa({slots:e},t){return t.length===1&&t[0]==="default"?(e.default?e.default():[]).reduce((r,s)=>[...r,...s.type===Bt?s.children:[s]],[]):t.reduce((n,r)=>{const s=e[r];return s&&(n[r]=s()),n},{})}function En(e){return Bt}const sa=ot({name:"i18n-t",props:K({keypath:{type:String,required:!0},plural:{type:[Number,String],validator:e=>X(e)||!isNaN(e)}},mt),setup(e,t){const{slots:n,attrs:r}=t,s=e.i18n||dt({useScope:e.scope,__useComponent:!0});return()=>{const l=Object.keys(n).filter(T=>T!=="_"),o={};e.locale&&(o.locale=e.locale),e.plural!==void 0&&(o.plural=A(e.plural)?+e.plural:e.plural);const _=aa(t,l),u=s[at](e.keypath,_,o),E=K({},r),O=A(e.tag)||U(e.tag)?e.tag:En();return jt(O,E,u)}}}),$t=sa;function la(e){return Y(e)&&!A(e[0])}function Nn(e,t,n,r){const{slots:s,attrs:l}=t;return()=>{const o={part:!0};let _={};e.locale&&(o.locale=e.locale),A(e.format)?o.key=e.format:U(e.format)&&(A(e.format.key)&&(o.key=e.format.key),_=Object.keys(e.format).reduce((L,C)=>n.includes(C)?K({},L,{[C]:e.format[C]}):L,{}));const u=r(e.value,o,_);let E=[o.key];Y(u)?E=u.map((L,C)=>{const y=s[L.type],k=y?y({[L.type]:L.value,index:C,parts:u}):[L.value];return la(k)&&(k[0].key=`${L.type}-${C}`),k}):A(u)&&(E=[u]);const O=K({},l),T=A(e.tag)||U(e.tag)?e.tag:En();return jt(T,O,E)}}const ca=ot({name:"i18n-n",props:K({value:{type:Number,required:!0},format:{type:[String,Object]}},mt),setup(e,t){const n=e.i18n||dt({useScope:"parent",__useComponent:!0});return Nn(e,t,un,(...r)=>n[lt](...r))}}),Yt=ca,oa=ot({name:"i18n-d",props:K({value:{type:[Number,Date],required:!0},format:{type:[String,Object]}},mt),setup(e,t){const n=e.i18n||dt({useScope:"parent",__useComponent:!0});return Nn(e,t,on,(...r)=>n[st](...r))}}),Gt=oa;function ia(e,t){const n=e;if(e.mode==="composition")return n.__getInstance(t)||e.global;{const r=n.__getInstance(t);return r!=null?r.__composer:e.global.__composer}}function ua(e){const t=o=>{const{instance:_,modifiers:u,value:E}=o;if(!_||!_.$)throw q(Q.UNEXPECTED_ERROR);const O=ia(e,_.$),T=Xt(E);return[Reflect.apply(O.t,O,[...Ht(T)]),O]};return{created:(o,_)=>{const[u,E]=t(_);ve&&e.global===E&&(o.__i18nWatcher=Ze(E.locale,()=>{_.instance&&_.instance.$forceUpdate()})),o.__composer=E,o.textContent=u},unmounted:o=>{ve&&o.__i18nWatcher&&(o.__i18nWatcher(),o.__i18nWatcher=void 0,delete o.__i18nWatcher),o.__composer&&(o.__composer=void 0,delete o.__composer)},beforeUpdate:(o,{value:_})=>{if(o.__composer){const u=o.__composer,E=Xt(_);o.textContent=Reflect.apply(u.t,u,[...Ht(E)])}},getSSRProps:o=>{const[_]=t(o);return{textContent:_}}}}function Xt(e){if(A(e))return{path:e};if(F(e)){if(!("path"in e))throw q(Q.REQUIRED_VALUE,"path");return e}else throw q(Q.INVALID_VALUE)}function Ht(e){const{path:t,locale:n,args:r,choice:s,plural:l}=e,o={},_=r||{};return A(n)&&(o.locale=n),X(s)&&(o.plural=s),X(l)&&(o.plural=l),[t,_,o]}function fa(e,t,...n){const r=F(n[0])?n[0]:{},s=!!r.useI18nComponentName;(V(r.globalInstall)?r.globalInstall:!0)&&([s?"i18n":$t.name,"I18nT"].forEach(o=>e.component(o,$t)),[Yt.name,"I18nN"].forEach(o=>e.component(o,Yt)),[Gt.name,"I18nD"].forEach(o=>e.component(o,Gt))),e.directive("t",ua(t))}const _a=ce("global-vue-i18n");function ma(e={},t){const n=V(e.globalInjection)?e.globalInjection:!0,r=!0,s=new Map,[l,o]=da(e),_=ce("");function u(T){return s.get(T)||null}function E(T,L){s.set(T,L)}function O(T){s.delete(T)}{const T={get mode(){return"composition"},get allowComposition(){return r},async install(L,...C){if(L.__VUE_I18N_SYMBOL__=_,L.provide(L.__VUE_I18N_SYMBOL__,T),F(C[0])){const S=C[0];T.__composerExtend=S.__composerExtend,T.__vueI18nExtend=S.__vueI18nExtend}let y=null;n&&(y=Oa(L,T.global)),fa(L,T,...C);const k=L.unmount;L.unmount=()=>{y&&y(),T.dispose(),k()}},get global(){return o},dispose(){l.stop()},__instances:s,__getInstance:u,__setInstance:E,__deleteInstance:O};return T}}function dt(e={}){const t=Jt();if(t==null)throw q(Q.MUST_BE_CALL_SETUP_TOP);if(!t.isCE&&t.appContext.app!=null&&!t.appContext.app.__VUE_I18N_SYMBOL__)throw q(Q.NOT_INSTALLED);const n=Ea(t),r=ga(n),s=ta(t),l=Na(e,s);if(l==="global")return na(r,e,s),r;if(l==="parent"){let u=La(n,t,e.__useComponent);return u==null&&(u=r),u}const o=n;let _=o.__getInstance(t);if(_==null){const u=K({},e);"__i18n"in s&&(u.__i18n=s.__i18n),r&&(u.__root=r),_=dn(u),o.__composerExtend&&(_[ct]=o.__composerExtend(_)),pa(o,t,_),o.__setInstance(t,_)}return _}function da(e,t,n){const r=On();{const s=r.run(()=>dn(e));if(s==null)throw q(Q.UNEXPECTED_ERROR);return[r,s]}}function Ea(e){{const t=bn(e.isCE?_a:e.appContext.app.__VUE_I18N_SYMBOL__);if(!t)throw q(e.isCE?Q.NOT_INSTALLED_WITH_PROVIDE:Q.UNEXPECTED_ERROR);return t}}function Na(e,t){return xe(e)?"__i18n"in t?"local":"global":e.useScope?e.useScope:"local"}function ga(e){return e.mode==="composition"?e.global:e.global.__composer}function La(e,t,n=!1){let r=null;const s=t.root;let l=Ta(t,n);for(;l!=null;){const o=e;if(e.mode==="composition"&&(r=o.__getInstance(l)),r!=null||s===l)break;l=l.parent}return r}function Ta(e,t=!1){return e==null?null:t&&e.vnode.ctx||e.parent}function pa(e,t,n){hn(()=>{},t),Cn(()=>{const r=n;e.__deleteInstance(t);const s=r[ct];s&&(s(),delete r[ct])},t)}const Ia=["locale","fallbackLocale","availableLocales"],Kt=["t","rt","d","n","tm","te"];function Oa(e,t){const n=Object.create(null);return Ia.forEach(s=>{const l=Object.getOwnPropertyDescriptor(t,s);if(!l)throw q(Q.UNEXPECTED_ERROR);const o=An(l.value)?{get(){return l.value.value},set(_){l.value.value=_}}:{get(){return l.get&&l.get()}};Object.defineProperty(n,s,o)}),e.config.globalProperties.$i18n=n,Kt.forEach(s=>{const l=Object.getOwnPropertyDescriptor(t,s);if(!l||!l.value)throw q(Q.UNEXPECTED_ERROR);Object.defineProperty(e.config.globalProperties,`$${s}`,l)}),()=>{delete e.config.globalProperties.$i18n,Kt.forEach(s=>{delete e.config.globalProperties[`$${s}`]})}}Zr();__INTLIFY_JIT_COMPILATION__&&Wr(Kr);Vr(br);xr(tn);var ba={failed:"Action failed",success:"Action was successful"},ha={"en-US":ba},Sa=kn(({app:e})=>{const t=ma({locale:"en-US",globalInjection:!0,messages:ha});e.use(t)});export{Sa as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
