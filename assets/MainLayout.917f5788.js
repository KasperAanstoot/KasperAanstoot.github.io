import{k as W,c as h,h as k,l as U,r as E,m as gt,o as ae,n as N,p as Ne,q as de,g as D,t as le,i as Se,u as F,w as C,v as bt,x as _e,y as je,z as Pt,A as Ie,B as Wt,C as yt,D as Ke,P as Ot,E as qe,G as Y,H as ne,I as Ue,J as te,K as xe,L as pt,M as Qt,N as wt,O as At,Q as xt,R as Dt,S as qt,U as Rt,V as Ct,W as Vt,X as Ft,Y as Nt,Z as $e,_ as Pe,$ as Re,a0 as jt,a1 as It,a2 as Ge,a3 as Kt,a4 as kt,a5 as Xt,a6 as Yt,a7 as Ut,a8 as ge,a as Gt,a9 as Jt,aa as Zt,ab as X,ac as ee,ad as _,f as L,ae as We,af as J,ag as be,ah as ye,ai as Je,aj as Ze,ak as en,F as et,al as tt,am as nt,an as Oe}from"./index.d4f7fe54.js";var tn=W({name:"QToolbarTitle",props:{shrink:Boolean},setup(e,{slots:n}){const a=h(()=>"q-toolbar__title ellipsis"+(e.shrink===!0?" col-shrink":""));return()=>k("div",{class:a.value},U(n.default))}}),nn=W({name:"QToolbar",props:{inset:Boolean},setup(e,{slots:n}){const a=h(()=>"q-toolbar row no-wrap items-center"+(e.inset===!0?" q-toolbar--inset":""));return()=>k("div",{class:a.value,role:"toolbar"},U(n.default))}});function an(){const e=E(!gt.value);return e.value===!1&&ae(()=>{e.value=!0}),{isHydrated:e}}const Tt=typeof ResizeObserver!="undefined",at=Tt===!0?{}:{style:"display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;",url:"about:blank"};var Ve=W({name:"QResizeObserver",props:{debounce:{type:[String,Number],default:100}},emits:["resize"],setup(e,{emit:n}){let a=null,l,t={width:-1,height:-1};function i(f){f===!0||e.debounce===0||e.debounce==="0"?o():a===null&&(a=setTimeout(o,e.debounce))}function o(){if(a!==null&&(clearTimeout(a),a=null),l){const{offsetWidth:f,offsetHeight:r}=l;(f!==t.width||r!==t.height)&&(t={width:f,height:r},n("resize",t))}}const{proxy:d}=D();if(d.trigger=i,Tt===!0){let f;const r=u=>{l=d.$el.parentNode,l?(f=new ResizeObserver(i),f.observe(l),o()):u!==!0&&de(()=>{r(!0)})};return ae(()=>{r()}),N(()=>{a!==null&&clearTimeout(a),f!==void 0&&(f.disconnect!==void 0?f.disconnect():l&&f.unobserve(l))}),Ne}else{let u=function(){a!==null&&(clearTimeout(a),a=null),r!==void 0&&(r.removeEventListener!==void 0&&r.removeEventListener("resize",i,le.passive),r=void 0)},p=function(){u(),l&&l.contentDocument&&(r=l.contentDocument.defaultView,r.addEventListener("resize",i,le.passive),o())};const{isHydrated:f}=an();let r;return ae(()=>{de(()=>{l=d.$el,l&&p()})}),N(u),()=>{if(f.value===!0)return k("object",{class:"q--avoid-card-border",style:at.style,tabindex:-1,type:"text/html",data:at.url,"aria-hidden":"true",onLoad:p})}}}}),ln=W({name:"QHeader",props:{modelValue:{type:Boolean,default:!0},reveal:Boolean,revealOffset:{type:Number,default:250},bordered:Boolean,elevated:Boolean,heightHint:{type:[String,Number],default:50}},emits:["reveal","focusin"],setup(e,{slots:n,emit:a}){const{proxy:{$q:l}}=D(),t=Se(_e,F);if(t===F)return console.error("QHeader needs to be child of QLayout"),F;const i=E(parseInt(e.heightHint,10)),o=E(!0),d=h(()=>e.reveal===!0||t.view.value.indexOf("H")!==-1||l.platform.is.ios&&t.isContainer.value===!0),f=h(()=>{if(e.modelValue!==!0)return 0;if(d.value===!0)return o.value===!0?i.value:0;const m=i.value-t.scroll.value.position;return m>0?m:0}),r=h(()=>e.modelValue!==!0||d.value===!0&&o.value!==!0),u=h(()=>e.modelValue===!0&&r.value===!0&&e.reveal===!0),p=h(()=>"q-header q-layout__section--marginal "+(d.value===!0?"fixed":"absolute")+"-top"+(e.bordered===!0?" q-header--bordered":"")+(r.value===!0?" q-header--hidden":"")+(e.modelValue!==!0?" q-layout--prevent-focus":"")),w=h(()=>{const m=t.rows.value.top,g={};return m[0]==="l"&&t.left.space===!0&&(g[l.lang.rtl===!0?"right":"left"]=`${t.left.size}px`),m[2]==="r"&&t.right.space===!0&&(g[l.lang.rtl===!0?"left":"right"]=`${t.right.size}px`),g});function s(m,g){t.update("header",m,g)}function v(m,g){m.value!==g&&(m.value=g)}function S({height:m}){v(i,m),s("size",m)}function T(m){u.value===!0&&v(o,!0),a("focusin",m)}C(()=>e.modelValue,m=>{s("space",m),v(o,!0),t.animate()}),C(f,m=>{s("offset",m)}),C(()=>e.reveal,m=>{m===!1&&v(o,e.modelValue)}),C(o,m=>{t.animate(),a("reveal",m)}),C(t.scroll,m=>{e.reveal===!0&&v(o,m.direction==="up"||m.position<=e.revealOffset||m.position-m.inflectionPoint<100)});const x={};return t.instances.header=x,e.modelValue===!0&&s("size",i.value),s("space",e.modelValue),s("offset",f.value),N(()=>{t.instances.header===x&&(t.instances.header=void 0,s("size",0),s("offset",0),s("space",!1))}),()=>{const m=bt(n.default,[]);return e.elevated===!0&&m.push(k("div",{class:"q-layout__shadow absolute-full overflow-hidden no-pointer-events"})),m.push(k(Ve,{debounce:0,onResize:S})),k("header",{class:p.value,style:w.value,onFocusin:T},m)}}}),pe=W({name:"QItemLabel",props:{overline:Boolean,caption:Boolean,header:Boolean,lines:[Number,String]},setup(e,{slots:n}){const a=h(()=>parseInt(e.lines,10)),l=h(()=>"q-item__label"+(e.overline===!0?" q-item__label--overline text-overline":"")+(e.caption===!0?" q-item__label--caption text-caption":"")+(e.header===!0?" q-item__label--header":"")+(a.value===1?" ellipsis":"")),t=h(()=>e.lines!==void 0&&a.value>1?{overflow:"hidden",display:"-webkit-box","-webkit-box-orient":"vertical","-webkit-line-clamp":a.value}:null);return()=>k("div",{style:t.value,class:l.value},U(n.default))}}),ce=W({name:"QItemSection",props:{avatar:Boolean,thumbnail:Boolean,side:Boolean,top:Boolean,noWrap:Boolean},setup(e,{slots:n}){const a=h(()=>`q-item__section column q-item__section--${e.avatar===!0||e.side===!0||e.thumbnail===!0?"side":"main"}`+(e.top===!0?" q-item__section--top justify-start":" justify-center")+(e.avatar===!0?" q-item__section--avatar":"")+(e.thumbnail===!0?" q-item__section--thumbnail":"")+(e.noWrap===!0?" q-item__section--nowrap":""));return()=>k("div",{class:a.value},U(n.default))}}),lt=W({name:"QItem",props:{...je,...Pt,tag:{type:String,default:"div"},active:{type:Boolean,default:null},clickable:Boolean,dense:Boolean,insetLevel:Number,tabindex:[String,Number],focused:Boolean,manualFocus:Boolean},emits:["click","keyup"],setup(e,{slots:n,emit:a}){const{proxy:{$q:l}}=D(),t=Ie(e,l),{hasLink:i,linkAttrs:o,linkClass:d,linkTag:f,navigateOnClick:r}=Wt(),u=E(null),p=E(null),w=h(()=>e.clickable===!0||i.value===!0||e.tag==="label"),s=h(()=>e.disable!==!0&&w.value===!0),v=h(()=>"q-item q-item-type row no-wrap"+(e.dense===!0?" q-item--dense":"")+(t.value===!0?" q-item--dark":"")+(i.value===!0&&e.active===null?d.value:e.active===!0?` q-item--active${e.activeClass!==void 0?` ${e.activeClass}`:""}`:"")+(e.disable===!0?" disabled":"")+(s.value===!0?" q-item--clickable q-link cursor-pointer "+(e.manualFocus===!0?"q-manual-focusable":"q-focusable q-hoverable")+(e.focused===!0?" q-manual-focusable--focused":""):"")),S=h(()=>{if(e.insetLevel===void 0)return null;const g=l.lang.rtl===!0?"Right":"Left";return{["padding"+g]:16+e.insetLevel*56+"px"}});function T(g){s.value===!0&&(p.value!==null&&(g.qKeyEvent!==!0&&document.activeElement===u.value?p.value.focus():document.activeElement===p.value&&u.value.focus()),r(g))}function x(g){if(s.value===!0&&yt(g,[13,32])===!0){Ke(g),g.qKeyEvent=!0;const y=new MouseEvent("click",g);y.qKeyEvent=!0,u.value.dispatchEvent(y)}a("keyup",g)}function m(){const g=bt(n.default,[]);return s.value===!0&&g.unshift(k("div",{class:"q-focus-helper",tabindex:-1,ref:p})),g}return()=>{const g={ref:u,class:v.value,style:S.value,role:"listitem",onClick:T,onKeyup:x};return s.value===!0?(g.tabindex=e.tabindex||"0",Object.assign(g,o.value)):w.value===!0&&(g["aria-disabled"]="true"),k(f.value,g,m())}}}),on=W({name:"QList",props:{...je,bordered:Boolean,dense:Boolean,separator:Boolean,padding:Boolean,tag:{type:String,default:"div"}},setup(e,{slots:n}){const a=D(),l=Ie(e,a.proxy.$q),t=h(()=>"q-list"+(e.bordered===!0?" q-list--bordered":"")+(e.dense===!0?" q-list--dense":"")+(e.separator===!0?" q-list--separator":"")+(l.value===!0?" q-list--dark":"")+(e.padding===!0?" q-list--padding":""));return()=>k(e.tag,{class:t.value},U(n.default))}});function Ce(){if(window.getSelection!==void 0){const e=window.getSelection();e.empty!==void 0?e.empty():e.removeAllRanges!==void 0&&(e.removeAllRanges(),Ot.is.mobile!==!0&&e.addRange(document.createRange()))}else document.selection!==void 0&&document.selection.empty()}const rn={target:{default:!0},noParentEvent:Boolean,contextMenu:Boolean};function un({showing:e,avoidEmit:n,configureAnchorEl:a}){const{props:l,proxy:t,emit:i}=D(),o=E(null);let d=null;function f(s){return o.value===null?!1:s===void 0||s.touches===void 0||s.touches.length<=1}const r={};a===void 0&&(Object.assign(r,{hide(s){t.hide(s)},toggle(s){t.toggle(s),s.qAnchorHandled=!0},toggleKey(s){yt(s,13)===!0&&r.toggle(s)},contextClick(s){t.hide(s),qe(s),de(()=>{t.show(s),s.qAnchorHandled=!0})},prevent:qe,mobileTouch(s){if(r.mobileCleanup(s),f(s)!==!0)return;t.hide(s),o.value.classList.add("non-selectable");const v=s.target;Y(r,"anchor",[[v,"touchmove","mobileCleanup","passive"],[v,"touchend","mobileCleanup","passive"],[v,"touchcancel","mobileCleanup","passive"],[o.value,"contextmenu","prevent","notPassive"]]),d=setTimeout(()=>{d=null,t.show(s),s.qAnchorHandled=!0},300)},mobileCleanup(s){o.value.classList.remove("non-selectable"),d!==null&&(clearTimeout(d),d=null),e.value===!0&&s!==void 0&&Ce()}}),a=function(s=l.contextMenu){if(l.noParentEvent===!0||o.value===null)return;let v;s===!0?t.$q.platform.is.mobile===!0?v=[[o.value,"touchstart","mobileTouch","passive"]]:v=[[o.value,"mousedown","hide","passive"],[o.value,"contextmenu","contextClick","notPassive"]]:v=[[o.value,"click","toggle","passive"],[o.value,"keyup","toggleKey","passive"]],Y(r,"anchor",v)});function u(){ne(r,"anchor")}function p(s){for(o.value=s;o.value.classList.contains("q-anchor--skip");)o.value=o.value.parentNode;a()}function w(){if(l.target===!1||l.target===""||t.$el.parentNode===null)o.value=null;else if(l.target===!0)p(t.$el.parentNode);else{let s=l.target;if(typeof l.target=="string")try{s=document.querySelector(l.target)}catch{s=void 0}s!=null?(o.value=s.$el||s,a()):(o.value=null,console.error(`Anchor: target "${l.target}" not found`))}}return C(()=>l.contextMenu,s=>{o.value!==null&&(u(),a(s))}),C(()=>l.target,()=>{o.value!==null&&u(),w()}),C(()=>l.noParentEvent,s=>{o.value!==null&&(s===!0?u():a())}),ae(()=>{w(),n!==!0&&l.modelValue===!0&&o.value===null&&i("update:modelValue",!1)}),N(()=>{d!==null&&clearTimeout(d),u()}),{anchorEl:o,canShow:f,anchorEvents:r}}function sn(e,n){const a=E(null);let l;function t(d,f){const r=`${f!==void 0?"add":"remove"}EventListener`,u=f!==void 0?f:l;d!==window&&d[r]("scroll",u,le.passive),window[r]("scroll",u,le.passive),l=f}function i(){a.value!==null&&(t(a.value),a.value=null)}const o=C(()=>e.noParentEvent,()=>{a.value!==null&&(i(),n())});return N(o),{localScrollTarget:a,unconfigureScrollTarget:i,changeScrollEvent:t}}const{notPassiveCapture:ke}=le,Z=[];function Te(e){const n=e.target;if(n===void 0||n.nodeType===8||n.classList.contains("no-pointer-events")===!0)return;let a=Ue.length-1;for(;a>=0;){const l=Ue[a].$;if(l.type.name==="QTooltip"){a--;continue}if(l.type.name!=="QDialog")break;if(l.props.seamless!==!0)return;a--}for(let l=Z.length-1;l>=0;l--){const t=Z[l];if((t.anchorEl.value===null||t.anchorEl.value.contains(n)===!1)&&(n===document.body||t.innerRef.value!==null&&t.innerRef.value.contains(n)===!1))e.qClickOutside=!0,t.onClickOutside(e);else return}}function cn(e){Z.push(e),Z.length===1&&(document.addEventListener("mousedown",Te,ke),document.addEventListener("touchstart",Te,ke))}function it(e){const n=Z.findIndex(a=>a===e);n!==-1&&(Z.splice(n,1),Z.length===0&&(document.removeEventListener("mousedown",Te,ke),document.removeEventListener("touchstart",Te,ke)))}let ot,rt;function ut(e){const n=e.split(" ");return n.length!==2?!1:["top","center","bottom"].includes(n[0])!==!0?(console.error("Anchor/Self position must start with one of top/center/bottom"),!1):["left","middle","right","start","end"].includes(n[1])!==!0?(console.error("Anchor/Self position must end with one of left/middle/right/start/end"),!1):!0}function dn(e){return e?!(e.length!==2||typeof e[0]!="number"||typeof e[1]!="number"):!0}const Fe={"start#ltr":"left","start#rtl":"right","end#ltr":"right","end#rtl":"left"};["left","middle","right"].forEach(e=>{Fe[`${e}#ltr`]=e,Fe[`${e}#rtl`]=e});function st(e,n){const a=e.split(" ");return{vertical:a[0],horizontal:Fe[`${a[1]}#${n===!0?"rtl":"ltr"}`]}}function fn(e,n){let{top:a,left:l,right:t,bottom:i,width:o,height:d}=e.getBoundingClientRect();return n!==void 0&&(a-=n[1],l-=n[0],i+=n[1],t+=n[0],o+=n[0],d+=n[1]),{top:a,bottom:i,height:d,left:l,right:t,width:o,middle:l+(t-l)/2,center:a+(i-a)/2}}function vn(e,n,a){let{top:l,left:t}=e.getBoundingClientRect();return l+=n.top,t+=n.left,a!==void 0&&(l+=a[1],t+=a[0]),{top:l,bottom:l+1,height:1,left:t,right:t+1,width:1,middle:t,center:l}}function hn(e,n){return{top:0,center:n/2,bottom:n,left:0,middle:e/2,right:e}}function ct(e,n,a,l){return{top:e[a.vertical]-n[l.vertical],left:e[a.horizontal]-n[l.horizontal]}}function St(e,n=0){if(e.targetEl===null||e.anchorEl===null||n>5)return;if(e.targetEl.offsetHeight===0||e.targetEl.offsetWidth===0){setTimeout(()=>{St(e,n+1)},10);return}const{targetEl:a,offset:l,anchorEl:t,anchorOrigin:i,selfOrigin:o,absoluteOffset:d,fit:f,cover:r,maxHeight:u,maxWidth:p}=e;if(te.is.ios===!0&&window.visualViewport!==void 0){const z=document.body.style,{offsetLeft:B,offsetTop:$}=window.visualViewport;B!==ot&&(z.setProperty("--q-pe-left",B+"px"),ot=B),$!==rt&&(z.setProperty("--q-pe-top",$+"px"),rt=$)}const{scrollLeft:w,scrollTop:s}=a,v=d===void 0?fn(t,r===!0?[0,0]:l):vn(t,d,l);Object.assign(a.style,{top:0,left:0,minWidth:null,minHeight:null,maxWidth:p||"100vw",maxHeight:u||"100vh",visibility:"visible"});const{offsetWidth:S,offsetHeight:T}=a,{elWidth:x,elHeight:m}=f===!0||r===!0?{elWidth:Math.max(v.width,S),elHeight:r===!0?Math.max(v.height,T):T}:{elWidth:S,elHeight:T};let g={maxWidth:p,maxHeight:u};(f===!0||r===!0)&&(g.minWidth=v.width+"px",r===!0&&(g.minHeight=v.height+"px")),Object.assign(a.style,g);const y=hn(x,m);let b=ct(v,y,i,o);if(d===void 0||l===void 0)Qe(b,v,y,i,o);else{const{top:z,left:B}=b;Qe(b,v,y,i,o);let $=!1;if(b.top!==z){$=!0;const H=2*l[1];v.center=v.top-=H,v.bottom-=H+2}if(b.left!==B){$=!0;const H=2*l[0];v.middle=v.left-=H,v.right-=H+2}$===!0&&(b=ct(v,y,i,o),Qe(b,v,y,i,o))}g={top:b.top+"px",left:b.left+"px"},b.maxHeight!==void 0&&(g.maxHeight=b.maxHeight+"px",v.height>b.maxHeight&&(g.minHeight=g.maxHeight)),b.maxWidth!==void 0&&(g.maxWidth=b.maxWidth+"px",v.width>b.maxWidth&&(g.minWidth=g.maxWidth)),Object.assign(a.style,g),a.scrollTop!==s&&(a.scrollTop=s),a.scrollLeft!==w&&(a.scrollLeft=w)}function Qe(e,n,a,l,t){const i=a.bottom,o=a.right,d=xe(),f=window.innerHeight-d,r=document.body.clientWidth;if(e.top<0||e.top+i>f)if(t.vertical==="center")e.top=n[l.vertical]>f/2?Math.max(0,f-i):0,e.maxHeight=Math.min(i,f);else if(n[l.vertical]>f/2){const u=Math.min(f,l.vertical==="center"?n.center:l.vertical===t.vertical?n.bottom:n.top);e.maxHeight=Math.min(i,u),e.top=Math.max(0,u-i)}else e.top=Math.max(0,l.vertical==="center"?n.center:l.vertical===t.vertical?n.top:n.bottom),e.maxHeight=Math.min(i,f-e.top);if(e.left<0||e.left+o>r)if(e.maxWidth=Math.min(o,r),t.horizontal==="middle")e.left=n[l.horizontal]>r/2?Math.max(0,r-o):0;else if(n[l.horizontal]>r/2){const u=Math.min(r,l.horizontal==="middle"?n.middle:l.horizontal===t.horizontal?n.right:n.left);e.maxWidth=Math.min(o,u),e.left=Math.max(0,u-e.maxWidth)}else e.left=Math.max(0,l.horizontal==="middle"?n.middle:l.horizontal===t.horizontal?n.left:n.right),e.maxWidth=Math.min(o,r-e.left)}var dt=W({name:"QTooltip",inheritAttrs:!1,props:{...rn,...pt,...Qt,maxHeight:{type:String,default:null},maxWidth:{type:String,default:null},transitionShow:{default:"jump-down"},transitionHide:{default:"jump-up"},anchor:{type:String,default:"bottom middle",validator:ut},self:{type:String,default:"top middle",validator:ut},offset:{type:Array,default:()=>[14,14],validator:dn},scrollTarget:{default:void 0},delay:{type:Number,default:0},hideDelay:{type:Number,default:0},persistent:Boolean},emits:[...wt],setup(e,{slots:n,emit:a,attrs:l}){let t,i;const o=D(),{proxy:{$q:d}}=o,f=E(null),r=E(!1),u=h(()=>st(e.anchor,d.lang.rtl)),p=h(()=>st(e.self,d.lang.rtl)),w=h(()=>e.persistent!==!0),{registerTick:s,removeTick:v}=At(),{registerTimeout:S}=xt(),{transitionProps:T,transitionStyle:x}=Dt(e),{localScrollTarget:m,changeScrollEvent:g,unconfigureScrollTarget:y}=sn(e,ve),{anchorEl:b,canShow:z,anchorEvents:B}=un({showing:r,configureAnchorEl:G}),{show:$,hide:H}=qt({showing:r,canShow:z,handleShow:j,handleHide:ie,hideOnRouteChange:w,processOnMount:!0});Object.assign(B,{delayShow:re,delayHide:ue});const{showPortal:O,hidePortal:R,renderPortal:fe}=Rt(o,f,Ee,"tooltip");if(d.platform.is.mobile===!0){const M={anchorEl:b,innerRef:f,onClickOutside(V){return H(V),V.target.classList.contains("q-dialog__backdrop")&&Ke(V),!0}},se=h(()=>e.modelValue===null&&e.persistent!==!0&&r.value===!0);C(se,V=>{(V===!0?cn:it)(M)}),N(()=>{it(M)})}function j(M){O(),s(()=>{i=new MutationObserver(()=>A()),i.observe(f.value,{attributes:!1,childList:!0,characterData:!0,subtree:!0}),A(),ve()}),t===void 0&&(t=C(()=>d.screen.width+"|"+d.screen.height+"|"+e.self+"|"+e.anchor+"|"+d.lang.rtl,A)),S(()=>{O(!0),a("show",M)},e.transitionDuration)}function ie(M){v(),R(),oe(),S(()=>{R(!0),a("hide",M)},e.transitionDuration)}function oe(){i!==void 0&&(i.disconnect(),i=void 0),t!==void 0&&(t(),t=void 0),y(),ne(B,"tooltipTemp")}function A(){St({targetEl:f.value,offset:e.offset,anchorEl:b.value,anchorOrigin:u.value,selfOrigin:p.value,maxHeight:e.maxHeight,maxWidth:e.maxWidth})}function re(M){if(d.platform.is.mobile===!0){Ce(),document.body.classList.add("non-selectable");const se=b.value,V=["touchmove","touchcancel","touchend","click"].map(he=>[se,he,"delayHide","passiveCapture"]);Y(B,"tooltipTemp",V)}S(()=>{$(M)},e.delay)}function ue(M){d.platform.is.mobile===!0&&(ne(B,"tooltipTemp"),Ce(),setTimeout(()=>{document.body.classList.remove("non-selectable")},10)),S(()=>{H(M)},e.hideDelay)}function G(){if(e.noParentEvent===!0||b.value===null)return;const M=d.platform.is.mobile===!0?[[b.value,"touchstart","delayShow","passive"]]:[[b.value,"mouseenter","delayShow","passive"],[b.value,"mouseleave","delayHide","passive"]];Y(B,"anchor",M)}function ve(){if(b.value!==null||e.scrollTarget!==void 0){m.value=Ct(b.value,e.scrollTarget);const M=e.noParentEvent===!0?A:H;g(m.value,M)}}function Le(){return r.value===!0?k("div",{...l,ref:f,class:["q-tooltip q-tooltip--style q-position-engine no-pointer-events",l.class],style:[l.style,x.value],role:"tooltip"},U(n.default)):null}function Ee(){return k(Vt,T.value,Le)}return N(oe),Object.assign(o.proxy,{updatePosition:A}),fe}});const Xe={left:!0,right:!0,up:!0,down:!0,horizontal:!0,vertical:!0},mn=Object.keys(Xe);Xe.all=!0;function ft(e){const n={};for(const a of mn)e[a]===!0&&(n[a]=!0);return Object.keys(n).length===0?Xe:(n.horizontal===!0?n.left=n.right=!0:n.left===!0&&n.right===!0&&(n.horizontal=!0),n.vertical===!0?n.up=n.down=!0:n.up===!0&&n.down===!0&&(n.vertical=!0),n.horizontal===!0&&n.vertical===!0&&(n.all=!0),n)}const gn=["INPUT","TEXTAREA"];function vt(e,n){return n.event===void 0&&e.target!==void 0&&e.target.draggable!==!0&&typeof n.handler=="function"&&gn.includes(e.target.nodeName.toUpperCase())===!1&&(e.qClonedBy===void 0||e.qClonedBy.indexOf(n.uid)===-1)}function Ae(e,n,a){const l=Re(e);let t,i=l.left-n.event.x,o=l.top-n.event.y,d=Math.abs(i),f=Math.abs(o);const r=n.direction;r.horizontal===!0&&r.vertical!==!0?t=i<0?"left":"right":r.horizontal!==!0&&r.vertical===!0?t=o<0?"up":"down":r.up===!0&&o<0?(t="up",d>f&&(r.left===!0&&i<0?t="left":r.right===!0&&i>0&&(t="right"))):r.down===!0&&o>0?(t="down",d>f&&(r.left===!0&&i<0?t="left":r.right===!0&&i>0&&(t="right"))):r.left===!0&&i<0?(t="left",d<f&&(r.up===!0&&o<0?t="up":r.down===!0&&o>0&&(t="down"))):r.right===!0&&i>0&&(t="right",d<f&&(r.up===!0&&o<0?t="up":r.down===!0&&o>0&&(t="down")));let u=!1;if(t===void 0&&a===!1){if(n.event.isFirst===!0||n.event.lastDir===void 0)return{};t=n.event.lastDir,u=!0,t==="left"||t==="right"?(l.left-=i,d=0,i=0):(l.top-=o,f=0,o=0)}return{synthetic:u,payload:{evt:e,touch:n.event.mouse!==!0,mouse:n.event.mouse===!0,position:l,direction:t,isFirst:n.event.isFirst,isFinal:a===!0,duration:Date.now()-n.event.time,distance:{x:d,y:f},offset:{x:i,y:o},delta:{x:l.left-n.event.lastX,y:l.top-n.event.lastY}}}}let bn=0;var De=Ft({name:"touch-pan",beforeMount(e,{value:n,modifiers:a}){if(a.mouse!==!0&&te.has.touch!==!0)return;function l(i,o){a.mouse===!0&&o===!0?Ke(i):(a.stop===!0&&Pe(i),a.prevent===!0&&qe(i))}const t={uid:"qvtp_"+bn++,handler:n,modifiers:a,direction:ft(a),noop:Ne,mouseStart(i){vt(i,t)&&Nt(i)&&(Y(t,"temp",[[document,"mousemove","move","notPassiveCapture"],[document,"mouseup","end","passiveCapture"]]),t.start(i,!0))},touchStart(i){if(vt(i,t)){const o=i.target;Y(t,"temp",[[o,"touchmove","move","notPassiveCapture"],[o,"touchcancel","end","passiveCapture"],[o,"touchend","end","passiveCapture"]]),t.start(i)}},start(i,o){if(te.is.firefox===!0&&$e(e,!0),t.lastEvt=i,o===!0||a.stop===!0){if(t.direction.all!==!0&&(o!==!0||t.modifiers.mouseAllDir!==!0&&t.modifiers.mousealldir!==!0)){const r=i.type.indexOf("mouse")!==-1?new MouseEvent(i.type,i):new TouchEvent(i.type,i);i.defaultPrevented===!0&&qe(r),i.cancelBubble===!0&&Pe(r),Object.assign(r,{qKeyEvent:i.qKeyEvent,qClickOutside:i.qClickOutside,qAnchorHandled:i.qAnchorHandled,qClonedBy:i.qClonedBy===void 0?[t.uid]:i.qClonedBy.concat(t.uid)}),t.initialEvent={target:i.target,event:r}}Pe(i)}const{left:d,top:f}=Re(i);t.event={x:d,y:f,time:Date.now(),mouse:o===!0,detected:!1,isFirst:!0,isFinal:!1,lastX:d,lastY:f}},move(i){if(t.event===void 0)return;const o=Re(i),d=o.left-t.event.x,f=o.top-t.event.y;if(d===0&&f===0)return;t.lastEvt=i;const r=t.event.mouse===!0,u=()=>{l(i,r);let s;a.preserveCursor!==!0&&a.preservecursor!==!0&&(s=document.documentElement.style.cursor||"",document.documentElement.style.cursor="grabbing"),r===!0&&document.body.classList.add("no-pointer-events--children"),document.body.classList.add("non-selectable"),Ce(),t.styleCleanup=v=>{if(t.styleCleanup=void 0,s!==void 0&&(document.documentElement.style.cursor=s),document.body.classList.remove("non-selectable"),r===!0){const S=()=>{document.body.classList.remove("no-pointer-events--children")};v!==void 0?setTimeout(()=>{S(),v()},50):S()}else v!==void 0&&v()}};if(t.event.detected===!0){t.event.isFirst!==!0&&l(i,t.event.mouse);const{payload:s,synthetic:v}=Ae(i,t,!1);s!==void 0&&(t.handler(s)===!1?t.end(i):(t.styleCleanup===void 0&&t.event.isFirst===!0&&u(),t.event.lastX=s.position.left,t.event.lastY=s.position.top,t.event.lastDir=v===!0?void 0:s.direction,t.event.isFirst=!1));return}if(t.direction.all===!0||r===!0&&(t.modifiers.mouseAllDir===!0||t.modifiers.mousealldir===!0)){u(),t.event.detected=!0,t.move(i);return}const p=Math.abs(d),w=Math.abs(f);p!==w&&(t.direction.horizontal===!0&&p>w||t.direction.vertical===!0&&p<w||t.direction.up===!0&&p<w&&f<0||t.direction.down===!0&&p<w&&f>0||t.direction.left===!0&&p>w&&d<0||t.direction.right===!0&&p>w&&d>0?(t.event.detected=!0,t.move(i)):t.end(i,!0))},end(i,o){if(t.event!==void 0){if(ne(t,"temp"),te.is.firefox===!0&&$e(e,!1),o===!0)t.styleCleanup!==void 0&&t.styleCleanup(),t.event.detected!==!0&&t.initialEvent!==void 0&&t.initialEvent.target.dispatchEvent(t.initialEvent.event);else if(t.event.detected===!0){t.event.isFirst===!0&&t.handler(Ae(i===void 0?t.lastEvt:i,t).payload);const{payload:d}=Ae(i===void 0?t.lastEvt:i,t,!0),f=()=>{t.handler(d)};t.styleCleanup!==void 0?t.styleCleanup(f):f()}t.event=void 0,t.initialEvent=void 0,t.lastEvt=void 0}}};if(e.__qtouchpan=t,a.mouse===!0){const i=a.mouseCapture===!0||a.mousecapture===!0?"Capture":"";Y(t,"main",[[e,"mousedown","mouseStart",`passive${i}`]])}te.has.touch===!0&&Y(t,"main",[[e,"touchstart","touchStart",`passive${a.capture===!0?"Capture":""}`],[e,"touchmove","noop","notPassiveCapture"]])},updated(e,n){const a=e.__qtouchpan;a!==void 0&&(n.oldValue!==n.value&&(typeof value!="function"&&a.end(),a.handler=n.value),a.direction=ft(n.modifiers))},beforeUnmount(e){const n=e.__qtouchpan;n!==void 0&&(n.event!==void 0&&n.end(),ne(n,"main"),ne(n,"temp"),te.is.firefox===!0&&$e(e,!1),n.styleCleanup!==void 0&&n.styleCleanup(),delete e.__qtouchpan)}});function we(e,n,a){return a<=n?n:Math.min(a,Math.max(n,e))}const ht=150;var yn=W({name:"QDrawer",inheritAttrs:!1,props:{...pt,...je,side:{type:String,default:"left",validator:e=>["left","right"].includes(e)},width:{type:Number,default:300},mini:Boolean,miniToOverlay:Boolean,miniWidth:{type:Number,default:57},noMiniAnimation:Boolean,breakpoint:{type:Number,default:1023},showIfAbove:Boolean,behavior:{type:String,validator:e=>["default","desktop","mobile"].includes(e),default:"default"},bordered:Boolean,elevated:Boolean,overlay:Boolean,persistent:Boolean,noSwipeOpen:Boolean,noSwipeClose:Boolean,noSwipeBackdrop:Boolean},emits:[...wt,"onLayout","miniState"],setup(e,{slots:n,emit:a,attrs:l}){const t=D(),{proxy:{$q:i}}=t,o=Ie(e,i),{preventBodyScroll:d}=Kt(),{registerTimeout:f,removeTimeout:r}=xt(),u=Se(_e,F);if(u===F)return console.error("QDrawer needs to be child of QLayout"),F;let p,w=null,s;const v=E(e.behavior==="mobile"||e.behavior!=="desktop"&&u.totalWidth.value<=e.breakpoint),S=h(()=>e.mini===!0&&v.value!==!0),T=h(()=>S.value===!0?e.miniWidth:e.width),x=E(e.showIfAbove===!0&&v.value===!1?!0:e.modelValue===!0),m=h(()=>e.persistent!==!0&&(v.value===!0||ve.value===!0));function g(c,q){if(B(),c!==!1&&u.animate(),Q(0),v.value===!0){const P=u.instances[A.value];P!==void 0&&P.belowBreakpoint===!0&&P.hide(!1),I(1),u.isContainer.value!==!0&&d(!0)}else I(0),c!==!1&&Be(!1);f(()=>{c!==!1&&Be(!0),q!==!0&&a("show",c)},ht)}function y(c,q){$(),c!==!1&&u.animate(),I(0),Q(R.value*T.value),He(),q!==!0?f(()=>{a("hide",c)},ht):r()}const{show:b,hide:z}=qt({showing:x,hideOnRouteChange:m,handleShow:g,handleHide:y}),{addToHistory:B,removeFromHistory:$}=jt(x,z,m),H={belowBreakpoint:v,hide:z},O=h(()=>e.side==="right"),R=h(()=>(i.lang.rtl===!0?-1:1)*(O.value===!0?1:-1)),fe=E(0),j=E(!1),ie=E(!1),oe=E(T.value*R.value),A=h(()=>O.value===!0?"left":"right"),re=h(()=>x.value===!0&&v.value===!1&&e.overlay===!1?e.miniToOverlay===!0?e.miniWidth:T.value:0),ue=h(()=>e.overlay===!0||e.miniToOverlay===!0||u.view.value.indexOf(O.value?"R":"L")!==-1||i.platform.is.ios===!0&&u.isContainer.value===!0),G=h(()=>e.overlay===!1&&x.value===!0&&v.value===!1),ve=h(()=>e.overlay===!0&&x.value===!0&&v.value===!1),Le=h(()=>"fullscreen q-drawer__backdrop"+(x.value===!1&&j.value===!1?" hidden":"")),Ee=h(()=>({backgroundColor:`rgba(0,0,0,${fe.value*.4})`})),M=h(()=>O.value===!0?u.rows.value.top[2]==="r":u.rows.value.top[0]==="l"),se=h(()=>O.value===!0?u.rows.value.bottom[2]==="r":u.rows.value.bottom[0]==="l"),V=h(()=>{const c={};return u.header.space===!0&&M.value===!1&&(ue.value===!0?c.top=`${u.header.offset}px`:u.header.space===!0&&(c.top=`${u.header.size}px`)),u.footer.space===!0&&se.value===!1&&(ue.value===!0?c.bottom=`${u.footer.offset}px`:u.footer.space===!0&&(c.bottom=`${u.footer.size}px`)),c}),he=h(()=>{const c={width:`${T.value}px`,transform:`translateX(${oe.value}px)`};return v.value===!0?c:Object.assign(c,V.value)}),_t=h(()=>"q-drawer__content fit "+(u.isContainer.value!==!0?"scroll":"overflow-auto")),Lt=h(()=>`q-drawer q-drawer--${e.side}`+(ie.value===!0?" q-drawer--mini-animate":"")+(e.bordered===!0?" q-drawer--bordered":"")+(o.value===!0?" q-drawer--dark q-dark":"")+(j.value===!0?" no-transition":x.value===!0?"":" q-layout--prevent-focus")+(v.value===!0?" fixed q-drawer--on-top q-drawer--mobile q-drawer--top-padding":` q-drawer--${S.value===!0?"mini":"standard"}`+(ue.value===!0||G.value!==!0?" fixed":"")+(e.overlay===!0||e.miniToOverlay===!0?" q-drawer--on-top":"")+(M.value===!0?" q-drawer--top-padding":""))),Et=h(()=>{const c=i.lang.rtl===!0?e.side:A.value;return[[De,Mt,void 0,{[c]:!0,mouse:!0}]]}),zt=h(()=>{const c=i.lang.rtl===!0?A.value:e.side;return[[De,Ye,void 0,{[c]:!0,mouse:!0}]]}),Bt=h(()=>{const c=i.lang.rtl===!0?A.value:e.side;return[[De,Ye,void 0,{[c]:!0,mouse:!0,mouseAllDir:!0}]]});function ze(){$t(v,e.behavior==="mobile"||e.behavior!=="desktop"&&u.totalWidth.value<=e.breakpoint)}C(v,c=>{c===!0?(p=x.value,x.value===!0&&z(!1)):e.overlay===!1&&e.behavior!=="mobile"&&p!==!1&&(x.value===!0?(Q(0),I(0),He()):b(!1))}),C(()=>e.side,(c,q)=>{u.instances[q]===H&&(u.instances[q]=void 0,u[q].space=!1,u[q].offset=0),u.instances[c]=H,u[c].size=T.value,u[c].space=G.value,u[c].offset=re.value}),C(u.totalWidth,()=>{(u.isContainer.value===!0||document.qScrollPrevented!==!0)&&ze()}),C(()=>e.behavior+e.breakpoint,ze),C(u.isContainer,c=>{x.value===!0&&d(c!==!0),c===!0&&ze()}),C(u.scrollbarWidth,()=>{Q(x.value===!0?0:void 0)}),C(re,c=>{K("offset",c)}),C(G,c=>{a("onLayout",c),K("space",c)}),C(O,()=>{Q()}),C(T,c=>{Q(),Me(e.miniToOverlay,c)}),C(()=>e.miniToOverlay,c=>{Me(c,T.value)}),C(()=>i.lang.rtl,()=>{Q()}),C(()=>e.mini,()=>{e.noMiniAnimation||e.modelValue===!0&&(Ht(),u.animate())}),C(S,c=>{a("miniState",c)});function Q(c){c===void 0?de(()=>{c=x.value===!0?0:T.value,Q(R.value*c)}):(u.isContainer.value===!0&&O.value===!0&&(v.value===!0||Math.abs(c)===T.value)&&(c+=R.value*u.scrollbarWidth.value),oe.value=c)}function I(c){fe.value=c}function Be(c){const q=c===!0?"remove":u.isContainer.value!==!0?"add":"";q!==""&&document.body.classList[q]("q-body--drawer-toggle")}function Ht(){w!==null&&clearTimeout(w),t.proxy&&t.proxy.$el&&t.proxy.$el.classList.add("q-drawer--mini-animate"),ie.value=!0,w=setTimeout(()=>{w=null,ie.value=!1,t&&t.proxy&&t.proxy.$el&&t.proxy.$el.classList.remove("q-drawer--mini-animate")},150)}function Mt(c){if(x.value!==!1)return;const q=T.value,P=we(c.distance.x,0,q);if(c.isFinal===!0){P>=Math.min(75,q)===!0?b():(u.animate(),I(0),Q(R.value*q)),j.value=!1;return}Q((i.lang.rtl===!0?O.value!==!0:O.value)?Math.max(q-P,0):Math.min(0,P-q)),I(we(P/q,0,1)),c.isFirst===!0&&(j.value=!0)}function Ye(c){if(x.value!==!0)return;const q=T.value,P=c.direction===e.side,me=(i.lang.rtl===!0?P!==!0:P)?we(c.distance.x,0,q):0;if(c.isFinal===!0){Math.abs(me)<Math.min(75,q)===!0?(u.animate(),I(1),Q(0)):z(),j.value=!1;return}Q(R.value*me),I(we(1-me/q,0,1)),c.isFirst===!0&&(j.value=!0)}function He(){d(!1),Be(!0)}function K(c,q){u.update(e.side,c,q)}function $t(c,q){c.value!==q&&(c.value=q)}function Me(c,q){K("size",c===!0?e.miniWidth:q)}return u.instances[e.side]=H,Me(e.miniToOverlay,T.value),K("space",G.value),K("offset",re.value),e.showIfAbove===!0&&e.modelValue!==!0&&x.value===!0&&e["onUpdate:modelValue"]!==void 0&&a("update:modelValue",!0),ae(()=>{a("onLayout",G.value),a("miniState",S.value),p=e.showIfAbove===!0;const c=()=>{(x.value===!0?g:y)(!1,!0)};if(u.totalWidth.value!==0){de(c);return}s=C(u.totalWidth,()=>{s(),s=void 0,x.value===!1&&e.showIfAbove===!0&&v.value===!1?b(!1):c()})}),N(()=>{s!==void 0&&s(),w!==null&&(clearTimeout(w),w=null),x.value===!0&&He(),u.instances[e.side]===H&&(u.instances[e.side]=void 0,K("size",0),K("offset",0),K("space",!1))}),()=>{const c=[];v.value===!0&&(e.noSwipeOpen===!1&&c.push(It(k("div",{key:"open",class:`q-drawer__opener fixed-${e.side}`,"aria-hidden":"true"}),Et.value)),c.push(Ge("div",{ref:"backdrop",class:Le.value,style:Ee.value,"aria-hidden":"true",onClick:z},void 0,"backdrop",e.noSwipeBackdrop!==!0&&x.value===!0,()=>Bt.value)));const q=S.value===!0&&n.mini!==void 0,P=[k("div",{...l,key:""+q,class:[_t.value,l.class]},q===!0?n.mini():U(n.default))];return e.elevated===!0&&x.value===!0&&P.push(k("div",{class:"q-layout__shadow absolute-full overflow-hidden no-pointer-events"})),c.push(Ge("aside",{ref:"content",class:Lt.value,style:he.value},P,"contentclose",e.noSwipeClose!==!0&&v.value===!0,()=>zt.value)),k("div",{class:"q-drawer-container"},c)}}}),pn=W({name:"QPageContainer",setup(e,{slots:n}){const{proxy:{$q:a}}=D(),l=Se(_e,F);if(l===F)return console.error("QPageContainer needs to be child of QLayout"),F;kt(Xt,!0);const t=h(()=>{const i={};return l.header.space===!0&&(i.paddingTop=`${l.header.size}px`),l.right.space===!0&&(i[`padding${a.lang.rtl===!0?"Left":"Right"}`]=`${l.right.size}px`),l.footer.space===!0&&(i.paddingBottom=`${l.footer.size}px`),l.left.space===!0&&(i[`padding${a.lang.rtl===!0?"Right":"Left"}`]=`${l.left.size}px`),i});return()=>k("div",{class:"q-page-container",style:t.value},U(n.default))}});const{passive:mt}=le,wn=["both","horizontal","vertical"];var xn=W({name:"QScrollObserver",props:{axis:{type:String,validator:e=>wn.includes(e),default:"vertical"},debounce:[String,Number],scrollTarget:{default:void 0}},emits:["scroll"],setup(e,{emit:n}){const a={position:{top:0,left:0},direction:"down",directionChanged:!1,delta:{top:0,left:0},inflectionPoint:{top:0,left:0}};let l=null,t,i;C(()=>e.scrollTarget,()=>{f(),d()});function o(){l!==null&&l();const p=Math.max(0,Yt(t)),w=Ut(t),s={top:p-a.position.top,left:w-a.position.left};if(e.axis==="vertical"&&s.top===0||e.axis==="horizontal"&&s.left===0)return;const v=Math.abs(s.top)>=Math.abs(s.left)?s.top<0?"up":"down":s.left<0?"left":"right";a.position={top:p,left:w},a.directionChanged=a.direction!==v,a.delta=s,a.directionChanged===!0&&(a.direction=v,a.inflectionPoint=a.position),n("scroll",{...a})}function d(){t=Ct(i,e.scrollTarget),t.addEventListener("scroll",r,mt),r(!0)}function f(){t!==void 0&&(t.removeEventListener("scroll",r,mt),t=void 0)}function r(p){if(p===!0||e.debounce===0||e.debounce==="0")o();else if(l===null){const[w,s]=e.debounce?[setTimeout(o,e.debounce),clearTimeout]:[requestAnimationFrame(o),cancelAnimationFrame];l=()=>{s(w),l=null}}}const{proxy:u}=D();return C(()=>u.$q.lang.rtl,o),ae(()=>{i=u.$el.parentNode,d()}),N(()=>{l!==null&&l(),f()}),Object.assign(u,{trigger:r,getPosition:()=>a}),Ne}}),qn=W({name:"QLayout",props:{container:Boolean,view:{type:String,default:"hhh lpr fff",validator:e=>/^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(e.toLowerCase())},onScroll:Function,onScrollHeight:Function,onResize:Function},setup(e,{slots:n,emit:a}){const{proxy:{$q:l}}=D(),t=E(null),i=E(l.screen.height),o=E(e.container===!0?0:l.screen.width),d=E({position:0,direction:"down",inflectionPoint:0}),f=E(0),r=E(gt.value===!0?0:xe()),u=h(()=>"q-layout q-layout--"+(e.container===!0?"containerized":"standard")),p=h(()=>e.container===!1?{minHeight:l.screen.height+"px"}:null),w=h(()=>r.value!==0?{[l.lang.rtl===!0?"left":"right"]:`${r.value}px`}:null),s=h(()=>r.value!==0?{[l.lang.rtl===!0?"right":"left"]:0,[l.lang.rtl===!0?"left":"right"]:`-${r.value}px`,width:`calc(100% + ${r.value}px)`}:null);function v(y){if(e.container===!0||document.qScrollPrevented!==!0){const b={position:y.position.top,direction:y.direction,directionChanged:y.directionChanged,inflectionPoint:y.inflectionPoint.top,delta:y.delta.top};d.value=b,e.onScroll!==void 0&&a("scroll",b)}}function S(y){const{height:b,width:z}=y;let B=!1;i.value!==b&&(B=!0,i.value=b,e.onScrollHeight!==void 0&&a("scrollHeight",b),x()),o.value!==z&&(B=!0,o.value=z),B===!0&&e.onResize!==void 0&&a("resize",y)}function T({height:y}){f.value!==y&&(f.value=y,x())}function x(){if(e.container===!0){const y=i.value>f.value?xe():0;r.value!==y&&(r.value=y)}}let m=null;const g={instances:{},view:h(()=>e.view),isContainer:h(()=>e.container),rootRef:t,height:i,containerHeight:f,scrollbarWidth:r,totalWidth:h(()=>o.value+r.value),rows:h(()=>{const y=e.view.toLowerCase().split(" ");return{top:y[0].split(""),middle:y[1].split(""),bottom:y[2].split("")}}),header:ge({size:0,offset:0,space:!1}),right:ge({size:300,offset:0,space:!1}),footer:ge({size:0,offset:0,space:!1}),left:ge({size:300,offset:0,space:!1}),scroll:d,animate(){m!==null?clearTimeout(m):document.body.classList.add("q-body--layout-animate"),m=setTimeout(()=>{m=null,document.body.classList.remove("q-body--layout-animate")},155)},update(y,b,z){g[y][b]=z}};if(kt(_e,g),xe()>0){let z=function(){y=null,b.classList.remove("hide-scrollbar")},B=function(){if(y===null){if(b.scrollHeight>l.screen.height)return;b.classList.add("hide-scrollbar")}else clearTimeout(y);y=setTimeout(z,300)},$=function(H){y!==null&&H==="remove"&&(clearTimeout(y),z()),window[`${H}EventListener`]("resize",B)},y=null;const b=document.body;C(()=>e.container!==!0?"add":"remove",$),e.container!==!0&&$("add"),Gt(()=>{$("remove")})}return()=>{const y=Jt(n.default,[k(xn,{onScroll:v}),k(Ve,{onResize:S})]),b=k("div",{class:u.value,style:p.value,ref:e.container===!0?void 0:t,tabindex:-1},y);return e.container===!0?k("div",{class:"q-layout-container overflow-hidden",ref:t},[k(Ve,{onResize:T}),k("div",{class:"absolute-full",style:w.value},[k("div",{class:"scroll",style:s.value},[b])])]):b}}});const Cn={class:"h-100 d-flex-column"},kn={class:"d-flex items-center"},_n={__name:"MainLayout",setup(e){const n=E(!1),a=Se("app");function l(){n.value=!n.value}return(t,i)=>{const o=Zt("router-view");return X(),ee(qn,{view:"lHh Lpr lFf"},{default:_(()=>[L(ln,{class:"obiwan-background-blue-gradient-horizontal",elevated:""},{default:_(()=>[L(nn,null,{default:_(()=>[L(We,{flat:"",dense:"",round:"",icon:"mdi-menu","aria-label":"Menu",onClick:l}),L(tn,null,{default:_(()=>[J(be(ye(a).title),1)]),_:1})]),_:1})]),_:1}),L(yn,{modelValue:n.value,"onUpdate:modelValue":i[0]||(i[0]=d=>n.value=d),bordered:""},{default:_(()=>[Je("div",Cn,[ye(a).mainMenu?(X(),ee(on,{key:0,class:"flex-grow-1"},{default:_(()=>[L(pe,{header:""},{default:_(()=>[J(" Main Menu ")]),_:1}),(X(!0),Ze(et,null,en(ye(a).mainMenu,d=>(X(),Ze(et,{key:d.id},[d.tag==="q-separator"?(X(),ee(tt,{key:0})):(X(),ee(lt,{key:1,clickable:""},{default:_(()=>[d.icon?(X(),ee(ce,{key:0,avatar:""},{default:_(()=>[L(nt,{name:d.icon},null,8,["name"])]),_:2},1024)):Oe("",!0),L(ce,null,{default:_(()=>[L(pe,null,{default:_(()=>[J(be(d.title),1)]),_:2},1024),d.caption?(X(),ee(pe,{key:0,caption:""},{default:_(()=>[J(be(d.caption),1)]),_:2},1024)):Oe("",!0)]),_:2},1024)]),_:2},1024))],64))),128))]),_:1})):Oe("",!0),L(tt),L(lt,null,{default:_(()=>[L(ce,{avatar:""},{default:_(()=>[L(nt,{name:"mdi-tag-outline"})]),_:1}),L(ce,null,{default:_(()=>[L(pe,null,{default:_(()=>[J("v"+be(ye(a).version),1)]),_:1})]),_:1}),L(ce,{side:""},{default:_(()=>[Je("div",kn,[L(We,{color:"primary",dense:"",flat:"",icon:"mdi-developer-board",round:"",size:"md"},{default:_(()=>[L(dt,null,{default:_(()=>[J(" Request for Change ")]),_:1})]),_:1}),L(We,{color:"primary",dense:"",flat:"",icon:"mdi-bug",round:"",size:"md"},{default:_(()=>[L(dt,null,{default:_(()=>[J(" Report Bug ")]),_:1})]),_:1})])]),_:1})]),_:1})])]),_:1},8,["modelValue"]),L(pn,null,{default:_(()=>[L(o)]),_:1})]),_:1})}}};export{_n as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbkxheW91dC45MTdmNTc4OC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy90b29sYmFyL1FUb29sYmFyVGl0bGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3Rvb2xiYXIvUVRvb2xiYXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb3NhYmxlcy91c2UtaHlkcmF0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9yZXNpemUtb2JzZXJ2ZXIvUVJlc2l6ZU9ic2VydmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9oZWFkZXIvUUhlYWRlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvaXRlbS9RSXRlbUxhYmVsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9pdGVtL1FJdGVtU2VjdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvaXRlbS9RSXRlbS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2NvbXBvbmVudHMvaXRlbS9RTGlzdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL3V0aWxzL3ByaXZhdGUvc2VsZWN0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9zYWJsZXMvcHJpdmF0ZS91c2UtYW5jaG9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9zYWJsZXMvcHJpdmF0ZS91c2Utc2Nyb2xsLXRhcmdldC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL3V0aWxzL3ByaXZhdGUvY2xpY2stb3V0c2lkZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL3V0aWxzL3ByaXZhdGUvcG9zaXRpb24tZW5naW5lLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy90b29sdGlwL1FUb29sdGlwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvdXRpbHMvcHJpdmF0ZS90b3VjaC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWFzYXIvc3JjL2RpcmVjdGl2ZXMvVG91Y2hQYW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy91dGlscy9mb3JtYXQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL2RyYXdlci9RRHJhd2VyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9wYWdlL1FQYWdlQ29udGFpbmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9zY3JvbGwtb2JzZXJ2ZXIvUVNjcm9sbE9ic2VydmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3F1YXNhci9zcmMvY29tcG9uZW50cy9sYXlvdXQvUUxheW91dC5qcyIsIi4uLy4uLy4uL3NyYy9sYXlvdXRzL01haW5MYXlvdXQudnVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGhTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9yZW5kZXIuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRVG9vbGJhclRpdGxlJyxcblxuICBwcm9wczoge1xuICAgIHNocmluazogQm9vbGVhblxuICB9LFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAncS10b29sYmFyX190aXRsZSBlbGxpcHNpcydcbiAgICAgICsgKHByb3BzLnNocmluayA9PT0gdHJ1ZSA/ICcgY29sLXNocmluaycgOiAnJylcbiAgICApXG5cbiAgICByZXR1cm4gKCkgPT4gaCgnZGl2JywgeyBjbGFzczogY2xhc3Nlcy52YWx1ZSB9LCBoU2xvdChzbG90cy5kZWZhdWx0KSlcbiAgfVxufSlcbiIsImltcG9ydCB7IGgsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGhTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9yZW5kZXIuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRVG9vbGJhcicsXG5cbiAgcHJvcHM6IHtcbiAgICBpbnNldDogQm9vbGVhblxuICB9LFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAncS10b29sYmFyIHJvdyBuby13cmFwIGl0ZW1zLWNlbnRlcidcbiAgICAgICsgKHByb3BzLmluc2V0ID09PSB0cnVlID8gJyBxLXRvb2xiYXItLWluc2V0JyA6ICcnKVxuICAgIClcblxuICAgIHJldHVybiAoKSA9PiBoKCdkaXYnLCB7IGNsYXNzOiBjbGFzc2VzLnZhbHVlLCByb2xlOiAndG9vbGJhcicgfSwgaFNsb3Qoc2xvdHMuZGVmYXVsdCkpXG4gIH1cbn0pXG4iLCJpbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gJ3Z1ZSdcblxuLy8gdXNpbmcgaXQgdG8gbWFuYWdlIFNTUiByZW5kZXJpbmcgd2l0aCBiZXN0IHBlcmZvcm1hbmNlXG5pbXBvcnQgeyBpc1J1bnRpbWVTc3JQcmVIeWRyYXRpb24gfSBmcm9tICcuLi9wbHVnaW5zL1BsYXRmb3JtLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGlzSHlkcmF0ZWQgPSByZWYoIWlzUnVudGltZVNzclByZUh5ZHJhdGlvbi52YWx1ZSlcblxuICBpZiAoaXNIeWRyYXRlZC52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaXNIeWRyYXRlZC52YWx1ZSA9IHRydWVcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHsgaXNIeWRyYXRlZCB9XG59XG4iLCJpbXBvcnQgeyBoLCBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCwgZ2V0Q3VycmVudEluc3RhbmNlLCBuZXh0VGljayB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHVzZUh5ZHJhdGlvbiBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtaHlkcmF0aW9uLmpzJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGxpc3Rlbk9wdHMsIG5vb3AgfSBmcm9tICcuLi8uLi91dGlscy9ldmVudC5qcydcblxuY29uc3QgaGFzT2JzZXJ2ZXIgPSB0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnXG5jb25zdCByZXNpemVQcm9wcyA9IGhhc09ic2VydmVyID09PSB0cnVlXG4gID8ge31cbiAgOiB7XG4gICAgICBzdHlsZTogJ2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtvdmVyZmxvdzpoaWRkZW47cG9pbnRlci1ldmVudHM6bm9uZTt6LWluZGV4Oi0xOycsXG4gICAgICB1cmw6ICdhYm91dDpibGFuaydcbiAgICB9XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRUmVzaXplT2JzZXJ2ZXInLFxuXG4gIHByb3BzOiB7XG4gICAgZGVib3VuY2U6IHtcbiAgICAgIHR5cGU6IFsgU3RyaW5nLCBOdW1iZXIgXSxcbiAgICAgIGRlZmF1bHQ6IDEwMFxuICAgIH1cbiAgfSxcblxuICBlbWl0czogWyAncmVzaXplJyBdLFxuXG4gIHNldHVwIChwcm9wcywgeyBlbWl0IH0pIHtcbiAgICBpZiAoX19RVUFTQVJfU1NSX1NFUlZFUl9fKSB7IHJldHVybiBub29wIH1cblxuICAgIGxldCB0aW1lciA9IG51bGwsIHRhcmdldEVsLCBzaXplID0geyB3aWR0aDogLTEsIGhlaWdodDogLTEgfVxuXG4gICAgZnVuY3Rpb24gdHJpZ2dlciAoaW1tZWRpYXRlbHkpIHtcbiAgICAgIGlmIChpbW1lZGlhdGVseSA9PT0gdHJ1ZSB8fCBwcm9wcy5kZWJvdW5jZSA9PT0gMCB8fCBwcm9wcy5kZWJvdW5jZSA9PT0gJzAnKSB7XG4gICAgICAgIGVtaXRFdmVudCgpXG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZW1pdEV2ZW50LCBwcm9wcy5kZWJvdW5jZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbWl0RXZlbnQgKCkge1xuICAgICAgaWYgKHRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICAgICAgdGltZXIgPSBudWxsXG4gICAgICB9XG5cbiAgICAgIGlmICh0YXJnZXRFbCkge1xuICAgICAgICBjb25zdCB7IG9mZnNldFdpZHRoOiB3aWR0aCwgb2Zmc2V0SGVpZ2h0OiBoZWlnaHQgfSA9IHRhcmdldEVsXG5cbiAgICAgICAgaWYgKHdpZHRoICE9PSBzaXplLndpZHRoIHx8IGhlaWdodCAhPT0gc2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICBzaXplID0geyB3aWR0aCwgaGVpZ2h0IH1cbiAgICAgICAgICBlbWl0KCdyZXNpemUnLCBzaXplKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgeyBwcm94eSB9ID0gZ2V0Q3VycmVudEluc3RhbmNlKClcblxuICAgIC8vIGV4cG9zZSBwdWJsaWMgbWV0aG9kXG4gICAgcHJveHkudHJpZ2dlciA9IHRyaWdnZXJcblxuICAgIGlmIChoYXNPYnNlcnZlciA9PT0gdHJ1ZSkge1xuICAgICAgbGV0IG9ic2VydmVyXG5cbiAgICAgIC8vIGluaXRpYWxpemUgYXMgc29vbiBhcyBwb3NzaWJsZVxuICAgICAgY29uc3QgaW5pdCA9IHN0b3AgPT4ge1xuICAgICAgICB0YXJnZXRFbCA9IHByb3h5LiRlbC5wYXJlbnROb2RlXG5cbiAgICAgICAgaWYgKHRhcmdldEVsKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIodHJpZ2dlcilcbiAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldEVsKVxuICAgICAgICAgIGVtaXRFdmVudCgpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RvcCAhPT0gdHJ1ZSkge1xuICAgICAgICAgIG5leHRUaWNrKCgpID0+IHsgaW5pdCh0cnVlKSB9KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9uTW91bnRlZCgoKSA9PiB7IGluaXQoKSB9KVxuXG4gICAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgICB0aW1lciAhPT0gbnVsbCAmJiBjbGVhclRpbWVvdXQodGltZXIpXG5cbiAgICAgICAgaWYgKG9ic2VydmVyICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIuZGlzY29ubmVjdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KClcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAodGFyZ2V0RWwpIHsgLy8gRkYgZm9yIEFuZHJvaWRcbiAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZSh0YXJnZXRFbClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBub29wXG4gICAgfVxuICAgIGVsc2UgeyAvLyBubyBvYnNlcnZlciwgc28gZmFsbGJhY2sgdG8gb2xkIGlmcmFtZSBtZXRob2RcbiAgICAgIGNvbnN0IHsgaXNIeWRyYXRlZCB9ID0gdXNlSHlkcmF0aW9uKClcblxuICAgICAgbGV0IGN1ckRvY1ZpZXdcblxuICAgICAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgICAgIGlmICh0aW1lciAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICAgICAgICB0aW1lciA9IG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJEb2NWaWV3ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAvLyBpT1MgaXMgZnV6enksIG5lZWQgdG8gY2hlY2sgaXQgZmlyc3RcbiAgICAgICAgICBpZiAoY3VyRG9jVmlldy5yZW1vdmVFdmVudExpc3RlbmVyICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGN1ckRvY1ZpZXcucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdHJpZ2dlciwgbGlzdGVuT3B0cy5wYXNzaXZlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJEb2NWaWV3ID0gdm9pZCAwXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25PYmpMb2FkICgpIHtcbiAgICAgICAgY2xlYW51cCgpXG5cbiAgICAgICAgaWYgKHRhcmdldEVsICYmIHRhcmdldEVsLmNvbnRlbnREb2N1bWVudCkge1xuICAgICAgICAgIGN1ckRvY1ZpZXcgPSB0YXJnZXRFbC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgICAgICBjdXJEb2NWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRyaWdnZXIsIGxpc3Rlbk9wdHMucGFzc2l2ZSlcbiAgICAgICAgICBlbWl0RXZlbnQoKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICB0YXJnZXRFbCA9IHByb3h5LiRlbFxuICAgICAgICAgIHRhcmdldEVsICYmIG9uT2JqTG9hZCgpXG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgICBvbkJlZm9yZVVubW91bnQoY2xlYW51cClcblxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKGlzSHlkcmF0ZWQudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gaCgnb2JqZWN0Jywge1xuICAgICAgICAgICAgY2xhc3M6ICdxLS1hdm9pZC1jYXJkLWJvcmRlcicsXG4gICAgICAgICAgICBzdHlsZTogcmVzaXplUHJvcHMuc3R5bGUsXG4gICAgICAgICAgICB0YWJpbmRleDogLTEsIC8vIGZpeCBmb3IgRmlyZWZveFxuICAgICAgICAgICAgdHlwZTogJ3RleHQvaHRtbCcsXG4gICAgICAgICAgICBkYXRhOiByZXNpemVQcm9wcy51cmwsXG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICAgICBvbkxvYWQ6IG9uT2JqTG9hZFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBoLCByZWYsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVVbm1vdW50LCBpbmplY3QsIGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IFFSZXNpemVPYnNlcnZlciBmcm9tICcuLi9yZXNpemUtb2JzZXJ2ZXIvUVJlc2l6ZU9ic2VydmVyLmpzJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGhVbmlxdWVTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9yZW5kZXIuanMnXG5pbXBvcnQgeyBsYXlvdXRLZXksIGVtcHR5UmVuZGVyRm4gfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL3N5bWJvbHMuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRSGVhZGVyJyxcblxuICBwcm9wczoge1xuICAgIG1vZGVsVmFsdWU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICByZXZlYWw6IEJvb2xlYW4sXG4gICAgcmV2ZWFsT2Zmc2V0OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAyNTBcbiAgICB9LFxuICAgIGJvcmRlcmVkOiBCb29sZWFuLFxuICAgIGVsZXZhdGVkOiBCb29sZWFuLFxuXG4gICAgaGVpZ2h0SGludDoge1xuICAgICAgdHlwZTogWyBTdHJpbmcsIE51bWJlciBdLFxuICAgICAgZGVmYXVsdDogNTBcbiAgICB9XG4gIH0sXG5cbiAgZW1pdHM6IFsgJ3JldmVhbCcsICdmb2N1c2luJyBdLFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBwcm94eTogeyAkcSB9IH0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuXG4gICAgY29uc3QgJGxheW91dCA9IGluamVjdChsYXlvdXRLZXksIGVtcHR5UmVuZGVyRm4pXG4gICAgaWYgKCRsYXlvdXQgPT09IGVtcHR5UmVuZGVyRm4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1FIZWFkZXIgbmVlZHMgdG8gYmUgY2hpbGQgb2YgUUxheW91dCcpXG4gICAgICByZXR1cm4gZW1wdHlSZW5kZXJGblxuICAgIH1cblxuICAgIGNvbnN0IHNpemUgPSByZWYocGFyc2VJbnQocHJvcHMuaGVpZ2h0SGludCwgMTApKVxuICAgIGNvbnN0IHJldmVhbGVkID0gcmVmKHRydWUpXG5cbiAgICBjb25zdCBmaXhlZCA9IGNvbXB1dGVkKCgpID0+XG4gICAgICBwcm9wcy5yZXZlYWwgPT09IHRydWVcbiAgICAgIHx8ICRsYXlvdXQudmlldy52YWx1ZS5pbmRleE9mKCdIJykgIT09IC0xXG4gICAgICB8fCAoJHEucGxhdGZvcm0uaXMuaW9zICYmICRsYXlvdXQuaXNDb250YWluZXIudmFsdWUgPT09IHRydWUpXG4gICAgKVxuXG4gICAgY29uc3Qgb2Zmc2V0ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLm1vZGVsVmFsdWUgIT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH1cbiAgICAgIGlmIChmaXhlZC52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gcmV2ZWFsZWQudmFsdWUgPT09IHRydWUgPyBzaXplLnZhbHVlIDogMFxuICAgICAgfVxuICAgICAgY29uc3Qgb2Zmc2V0ID0gc2l6ZS52YWx1ZSAtICRsYXlvdXQuc2Nyb2xsLnZhbHVlLnBvc2l0aW9uXG4gICAgICByZXR1cm4gb2Zmc2V0ID4gMCA/IG9mZnNldCA6IDBcbiAgICB9KVxuXG4gICAgY29uc3QgaGlkZGVuID0gY29tcHV0ZWQoKCkgPT4gcHJvcHMubW9kZWxWYWx1ZSAhPT0gdHJ1ZVxuICAgICAgfHwgKGZpeGVkLnZhbHVlID09PSB0cnVlICYmIHJldmVhbGVkLnZhbHVlICE9PSB0cnVlKVxuICAgIClcblxuICAgIGNvbnN0IHJldmVhbE9uRm9jdXMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgcHJvcHMubW9kZWxWYWx1ZSA9PT0gdHJ1ZSAmJiBoaWRkZW4udmFsdWUgPT09IHRydWUgJiYgcHJvcHMucmV2ZWFsID09PSB0cnVlXG4gICAgKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAncS1oZWFkZXIgcS1sYXlvdXRfX3NlY3Rpb24tLW1hcmdpbmFsICdcbiAgICAgICsgKGZpeGVkLnZhbHVlID09PSB0cnVlID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScpICsgJy10b3AnXG4gICAgICArIChwcm9wcy5ib3JkZXJlZCA9PT0gdHJ1ZSA/ICcgcS1oZWFkZXItLWJvcmRlcmVkJyA6ICcnKVxuICAgICAgKyAoaGlkZGVuLnZhbHVlID09PSB0cnVlID8gJyBxLWhlYWRlci0taGlkZGVuJyA6ICcnKVxuICAgICAgKyAocHJvcHMubW9kZWxWYWx1ZSAhPT0gdHJ1ZSA/ICcgcS1sYXlvdXQtLXByZXZlbnQtZm9jdXMnIDogJycpXG4gICAgKVxuXG4gICAgY29uc3Qgc3R5bGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdFxuICAgICAgICB2aWV3ID0gJGxheW91dC5yb3dzLnZhbHVlLnRvcCxcbiAgICAgICAgY3NzID0ge31cblxuICAgICAgaWYgKHZpZXdbIDAgXSA9PT0gJ2wnICYmICRsYXlvdXQubGVmdC5zcGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjc3NbICRxLmxhbmcucnRsID09PSB0cnVlID8gJ3JpZ2h0JyA6ICdsZWZ0JyBdID0gYCR7ICRsYXlvdXQubGVmdC5zaXplIH1weGBcbiAgICAgIH1cbiAgICAgIGlmICh2aWV3WyAyIF0gPT09ICdyJyAmJiAkbGF5b3V0LnJpZ2h0LnNwYWNlID09PSB0cnVlKSB7XG4gICAgICAgIGNzc1sgJHEubGFuZy5ydGwgPT09IHRydWUgPyAnbGVmdCcgOiAncmlnaHQnIF0gPSBgJHsgJGxheW91dC5yaWdodC5zaXplIH1weGBcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNzc1xuICAgIH0pXG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMYXlvdXQgKHByb3AsIHZhbCkge1xuICAgICAgJGxheW91dC51cGRhdGUoJ2hlYWRlcicsIHByb3AsIHZhbClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbCAocHJvcCwgdmFsKSB7XG4gICAgICBpZiAocHJvcC52YWx1ZSAhPT0gdmFsKSB7XG4gICAgICAgIHByb3AudmFsdWUgPSB2YWxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblJlc2l6ZSAoeyBoZWlnaHQgfSkge1xuICAgICAgdXBkYXRlTG9jYWwoc2l6ZSwgaGVpZ2h0KVxuICAgICAgdXBkYXRlTGF5b3V0KCdzaXplJywgaGVpZ2h0KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRm9jdXNpbiAoZXZ0KSB7XG4gICAgICBpZiAocmV2ZWFsT25Gb2N1cy52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICB1cGRhdGVMb2NhbChyZXZlYWxlZCwgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgZW1pdCgnZm9jdXNpbicsIGV2dClcbiAgICB9XG5cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5tb2RlbFZhbHVlLCB2YWwgPT4ge1xuICAgICAgdXBkYXRlTGF5b3V0KCdzcGFjZScsIHZhbClcbiAgICAgIHVwZGF0ZUxvY2FsKHJldmVhbGVkLCB0cnVlKVxuICAgICAgJGxheW91dC5hbmltYXRlKClcbiAgICB9KVxuXG4gICAgd2F0Y2gob2Zmc2V0LCB2YWwgPT4ge1xuICAgICAgdXBkYXRlTGF5b3V0KCdvZmZzZXQnLCB2YWwpXG4gICAgfSlcblxuICAgIHdhdGNoKCgpID0+IHByb3BzLnJldmVhbCwgdmFsID0+IHtcbiAgICAgIHZhbCA9PT0gZmFsc2UgJiYgdXBkYXRlTG9jYWwocmV2ZWFsZWQsIHByb3BzLm1vZGVsVmFsdWUpXG4gICAgfSlcblxuICAgIHdhdGNoKHJldmVhbGVkLCB2YWwgPT4ge1xuICAgICAgJGxheW91dC5hbmltYXRlKClcbiAgICAgIGVtaXQoJ3JldmVhbCcsIHZhbClcbiAgICB9KVxuXG4gICAgd2F0Y2goJGxheW91dC5zY3JvbGwsIHNjcm9sbCA9PiB7XG4gICAgICBwcm9wcy5yZXZlYWwgPT09IHRydWUgJiYgdXBkYXRlTG9jYWwocmV2ZWFsZWQsXG4gICAgICAgIHNjcm9sbC5kaXJlY3Rpb24gPT09ICd1cCdcbiAgICAgICAgfHwgc2Nyb2xsLnBvc2l0aW9uIDw9IHByb3BzLnJldmVhbE9mZnNldFxuICAgICAgICB8fCBzY3JvbGwucG9zaXRpb24gLSBzY3JvbGwuaW5mbGVjdGlvblBvaW50IDwgMTAwXG4gICAgICApXG4gICAgfSlcblxuICAgIGNvbnN0IGluc3RhbmNlID0ge31cblxuICAgICRsYXlvdXQuaW5zdGFuY2VzLmhlYWRlciA9IGluc3RhbmNlXG4gICAgcHJvcHMubW9kZWxWYWx1ZSA9PT0gdHJ1ZSAmJiB1cGRhdGVMYXlvdXQoJ3NpemUnLCBzaXplLnZhbHVlKVxuICAgIHVwZGF0ZUxheW91dCgnc3BhY2UnLCBwcm9wcy5tb2RlbFZhbHVlKVxuICAgIHVwZGF0ZUxheW91dCgnb2Zmc2V0Jywgb2Zmc2V0LnZhbHVlKVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGlmICgkbGF5b3V0Lmluc3RhbmNlcy5oZWFkZXIgPT09IGluc3RhbmNlKSB7XG4gICAgICAgICRsYXlvdXQuaW5zdGFuY2VzLmhlYWRlciA9IHZvaWQgMFxuICAgICAgICB1cGRhdGVMYXlvdXQoJ3NpemUnLCAwKVxuICAgICAgICB1cGRhdGVMYXlvdXQoJ29mZnNldCcsIDApXG4gICAgICAgIHVwZGF0ZUxheW91dCgnc3BhY2UnLCBmYWxzZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkID0gaFVuaXF1ZVNsb3Qoc2xvdHMuZGVmYXVsdCwgW10pXG5cbiAgICAgIHByb3BzLmVsZXZhdGVkID09PSB0cnVlICYmIGNoaWxkLnB1c2goXG4gICAgICAgIGgoJ2RpdicsIHtcbiAgICAgICAgICBjbGFzczogJ3EtbGF5b3V0X19zaGFkb3cgYWJzb2x1dGUtZnVsbCBvdmVyZmxvdy1oaWRkZW4gbm8tcG9pbnRlci1ldmVudHMnXG4gICAgICAgIH0pXG4gICAgICApXG5cbiAgICAgIGNoaWxkLnB1c2goXG4gICAgICAgIGgoUVJlc2l6ZU9ic2VydmVyLCB7XG4gICAgICAgICAgZGVib3VuY2U6IDAsXG4gICAgICAgICAgb25SZXNpemVcbiAgICAgICAgfSlcbiAgICAgIClcblxuICAgICAgcmV0dXJuIGgoJ2hlYWRlcicsIHtcbiAgICAgICAgY2xhc3M6IGNsYXNzZXMudmFsdWUsXG4gICAgICAgIHN0eWxlOiBzdHlsZS52YWx1ZSxcbiAgICAgICAgb25Gb2N1c2luXG4gICAgICB9LCBjaGlsZClcbiAgICB9XG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBoU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvcmVuZGVyLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb21wb25lbnQoe1xuICBuYW1lOiAnUUl0ZW1MYWJlbCcsXG5cbiAgcHJvcHM6IHtcbiAgICBvdmVybGluZTogQm9vbGVhbixcbiAgICBjYXB0aW9uOiBCb29sZWFuLFxuICAgIGhlYWRlcjogQm9vbGVhbixcbiAgICBsaW5lczogWyBOdW1iZXIsIFN0cmluZyBdXG4gIH0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBwYXJzZWRMaW5lcyA9IGNvbXB1dGVkKCgpID0+IHBhcnNlSW50KHByb3BzLmxpbmVzLCAxMCkpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgICdxLWl0ZW1fX2xhYmVsJ1xuICAgICAgKyAocHJvcHMub3ZlcmxpbmUgPT09IHRydWUgPyAnIHEtaXRlbV9fbGFiZWwtLW92ZXJsaW5lIHRleHQtb3ZlcmxpbmUnIDogJycpXG4gICAgICArIChwcm9wcy5jYXB0aW9uID09PSB0cnVlID8gJyBxLWl0ZW1fX2xhYmVsLS1jYXB0aW9uIHRleHQtY2FwdGlvbicgOiAnJylcbiAgICAgICsgKHByb3BzLmhlYWRlciA9PT0gdHJ1ZSA/ICcgcS1pdGVtX19sYWJlbC0taGVhZGVyJyA6ICcnKVxuICAgICAgKyAocGFyc2VkTGluZXMudmFsdWUgPT09IDEgPyAnIGVsbGlwc2lzJyA6ICcnKVxuICAgIClcblxuICAgIGNvbnN0IHN0eWxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLmxpbmVzICE9PSB2b2lkIDAgJiYgcGFyc2VkTGluZXMudmFsdWUgPiAxXG4gICAgICAgID8ge1xuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgZGlzcGxheTogJy13ZWJraXQtYm94JyxcbiAgICAgICAgICAgICctd2Via2l0LWJveC1vcmllbnQnOiAndmVydGljYWwnLFxuICAgICAgICAgICAgJy13ZWJraXQtbGluZS1jbGFtcCc6IHBhcnNlZExpbmVzLnZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICA6IG51bGxcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHtcbiAgICAgIHN0eWxlOiBzdHlsZS52YWx1ZSxcbiAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlXG4gICAgfSwgaFNsb3Qoc2xvdHMuZGVmYXVsdCkpXG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBoLCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBoU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvcmVuZGVyLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb21wb25lbnQoe1xuICBuYW1lOiAnUUl0ZW1TZWN0aW9uJyxcblxuICBwcm9wczoge1xuICAgIGF2YXRhcjogQm9vbGVhbixcbiAgICB0aHVtYm5haWw6IEJvb2xlYW4sXG4gICAgc2lkZTogQm9vbGVhbixcbiAgICB0b3A6IEJvb2xlYW4sXG4gICAgbm9XcmFwOiBCb29sZWFuXG4gIH0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgICdxLWl0ZW1fX3NlY3Rpb24gY29sdW1uJ1xuICAgICAgKyBgIHEtaXRlbV9fc2VjdGlvbi0tJHsgcHJvcHMuYXZhdGFyID09PSB0cnVlIHx8IHByb3BzLnNpZGUgPT09IHRydWUgfHwgcHJvcHMudGh1bWJuYWlsID09PSB0cnVlID8gJ3NpZGUnIDogJ21haW4nIH1gXG4gICAgICArIChwcm9wcy50b3AgPT09IHRydWUgPyAnIHEtaXRlbV9fc2VjdGlvbi0tdG9wIGp1c3RpZnktc3RhcnQnIDogJyBqdXN0aWZ5LWNlbnRlcicpXG4gICAgICArIChwcm9wcy5hdmF0YXIgPT09IHRydWUgPyAnIHEtaXRlbV9fc2VjdGlvbi0tYXZhdGFyJyA6ICcnKVxuICAgICAgKyAocHJvcHMudGh1bWJuYWlsID09PSB0cnVlID8gJyBxLWl0ZW1fX3NlY3Rpb24tLXRodW1ibmFpbCcgOiAnJylcbiAgICAgICsgKHByb3BzLm5vV3JhcCA9PT0gdHJ1ZSA/ICcgcS1pdGVtX19zZWN0aW9uLS1ub3dyYXAnIDogJycpXG4gICAgKVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ2RpdicsIHsgY2xhc3M6IGNsYXNzZXMudmFsdWUgfSwgaFNsb3Qoc2xvdHMuZGVmYXVsdCkpXG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBoLCByZWYsIGNvbXB1dGVkLCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB1c2VEYXJrLCB7IHVzZURhcmtQcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUvdXNlLWRhcmsuanMnXG5pbXBvcnQgdXNlUm91dGVyTGluaywgeyB1c2VSb3V0ZXJMaW5rUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlL3VzZS1yb3V0ZXItbGluay5qcydcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBoVW5pcXVlU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvcmVuZGVyLmpzJ1xuaW1wb3J0IHsgc3RvcEFuZFByZXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9ldmVudC5qcydcbmltcG9ydCB7IGlzS2V5Q29kZSB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUva2V5LWNvbXBvc2l0aW9uLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb21wb25lbnQoe1xuICBuYW1lOiAnUUl0ZW0nLFxuXG4gIHByb3BzOiB7XG4gICAgLi4udXNlRGFya1Byb3BzLFxuICAgIC4uLnVzZVJvdXRlckxpbmtQcm9wcyxcblxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2RpdidcbiAgICB9LFxuXG4gICAgYWN0aXZlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG5cbiAgICBjbGlja2FibGU6IEJvb2xlYW4sXG4gICAgZGVuc2U6IEJvb2xlYW4sXG4gICAgaW5zZXRMZXZlbDogTnVtYmVyLFxuXG4gICAgdGFiaW5kZXg6IFsgU3RyaW5nLCBOdW1iZXIgXSxcblxuICAgIGZvY3VzZWQ6IEJvb2xlYW4sXG4gICAgbWFudWFsRm9jdXM6IEJvb2xlYW5cbiAgfSxcblxuICBlbWl0czogWyAnY2xpY2snLCAna2V5dXAnIF0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzLCBlbWl0IH0pIHtcbiAgICBjb25zdCB7IHByb3h5OiB7ICRxIH0gfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG5cbiAgICBjb25zdCBpc0RhcmsgPSB1c2VEYXJrKHByb3BzLCAkcSlcbiAgICBjb25zdCB7IGhhc0xpbmssIGxpbmtBdHRycywgbGlua0NsYXNzLCBsaW5rVGFnLCBuYXZpZ2F0ZU9uQ2xpY2sgfSA9IHVzZVJvdXRlckxpbmsoKVxuXG4gICAgY29uc3Qgcm9vdFJlZiA9IHJlZihudWxsKVxuICAgIGNvbnN0IGJsdXJUYXJnZXRSZWYgPSByZWYobnVsbClcblxuICAgIGNvbnN0IGlzQWN0aW9uYWJsZSA9IGNvbXB1dGVkKCgpID0+XG4gICAgICBwcm9wcy5jbGlja2FibGUgPT09IHRydWVcbiAgICAgICAgfHwgaGFzTGluay52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICB8fCBwcm9wcy50YWcgPT09ICdsYWJlbCdcbiAgICApXG5cbiAgICBjb25zdCBpc0NsaWNrYWJsZSA9IGNvbXB1dGVkKCgpID0+XG4gICAgICBwcm9wcy5kaXNhYmxlICE9PSB0cnVlICYmIGlzQWN0aW9uYWJsZS52YWx1ZSA9PT0gdHJ1ZVxuICAgIClcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgJ3EtaXRlbSBxLWl0ZW0tdHlwZSByb3cgbm8td3JhcCdcbiAgICAgICsgKHByb3BzLmRlbnNlID09PSB0cnVlID8gJyBxLWl0ZW0tLWRlbnNlJyA6ICcnKVxuICAgICAgKyAoaXNEYXJrLnZhbHVlID09PSB0cnVlID8gJyBxLWl0ZW0tLWRhcmsnIDogJycpXG4gICAgICArIChcbiAgICAgICAgaGFzTGluay52YWx1ZSA9PT0gdHJ1ZSAmJiBwcm9wcy5hY3RpdmUgPT09IG51bGxcbiAgICAgICAgICA/IGxpbmtDbGFzcy52YWx1ZVxuICAgICAgICAgIDogKFxuICAgICAgICAgICAgICBwcm9wcy5hY3RpdmUgPT09IHRydWVcbiAgICAgICAgICAgICAgICA/IGAgcS1pdGVtLS1hY3RpdmUkeyBwcm9wcy5hY3RpdmVDbGFzcyAhPT0gdm9pZCAwID8gYCAkeyBwcm9wcy5hY3RpdmVDbGFzcyB9YCA6ICcnIH1gXG4gICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgKVxuICAgICAgKVxuICAgICAgKyAocHJvcHMuZGlzYWJsZSA9PT0gdHJ1ZSA/ICcgZGlzYWJsZWQnIDogJycpXG4gICAgICArIChcbiAgICAgICAgaXNDbGlja2FibGUudmFsdWUgPT09IHRydWVcbiAgICAgICAgICA/ICcgcS1pdGVtLS1jbGlja2FibGUgcS1saW5rIGN1cnNvci1wb2ludGVyICdcbiAgICAgICAgICAgICsgKHByb3BzLm1hbnVhbEZvY3VzID09PSB0cnVlID8gJ3EtbWFudWFsLWZvY3VzYWJsZScgOiAncS1mb2N1c2FibGUgcS1ob3ZlcmFibGUnKVxuICAgICAgICAgICAgKyAocHJvcHMuZm9jdXNlZCA9PT0gdHJ1ZSA/ICcgcS1tYW51YWwtZm9jdXNhYmxlLS1mb2N1c2VkJyA6ICcnKVxuICAgICAgICAgIDogJydcbiAgICAgIClcbiAgICApXG5cbiAgICBjb25zdCBzdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5pbnNldExldmVsID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGlyID0gJHEubGFuZy5ydGwgPT09IHRydWUgPyAnUmlnaHQnIDogJ0xlZnQnXG4gICAgICByZXR1cm4ge1xuICAgICAgICBbICdwYWRkaW5nJyArIGRpciBdOiAoMTYgKyBwcm9wcy5pbnNldExldmVsICogNTYpICsgJ3B4J1xuICAgICAgfVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBvbkNsaWNrIChlKSB7XG4gICAgICBpZiAoaXNDbGlja2FibGUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgaWYgKGJsdXJUYXJnZXRSZWYudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoZS5xS2V5RXZlbnQgIT09IHRydWUgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gcm9vdFJlZi52YWx1ZSkge1xuICAgICAgICAgICAgYmx1clRhcmdldFJlZi52YWx1ZS5mb2N1cygpXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGJsdXJUYXJnZXRSZWYudmFsdWUpIHtcbiAgICAgICAgICAgIHJvb3RSZWYudmFsdWUuZm9jdXMoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5hdmlnYXRlT25DbGljayhlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uS2V5dXAgKGUpIHtcbiAgICAgIGlmIChpc0NsaWNrYWJsZS52YWx1ZSA9PT0gdHJ1ZSAmJiBpc0tleUNvZGUoZSwgWyAxMywgMzIgXSkgPT09IHRydWUpIHtcbiAgICAgICAgc3RvcEFuZFByZXZlbnQoZSlcblxuICAgICAgICAvLyBmb3IgcmlwcGxlXG4gICAgICAgIGUucUtleUV2ZW50ID0gdHJ1ZVxuXG4gICAgICAgIC8vIGZvciBjbGljayB0cmlnZ2VyXG4gICAgICAgIGNvbnN0IGV2dCA9IG5ldyBNb3VzZUV2ZW50KCdjbGljaycsIGUpXG4gICAgICAgIGV2dC5xS2V5RXZlbnQgPSB0cnVlXG4gICAgICAgIHJvb3RSZWYudmFsdWUuZGlzcGF0Y2hFdmVudChldnQpXG4gICAgICB9XG5cbiAgICAgIGVtaXQoJ2tleXVwJywgZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb250ZW50ICgpIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gaFVuaXF1ZVNsb3Qoc2xvdHMuZGVmYXVsdCwgW10pXG5cbiAgICAgIGlzQ2xpY2thYmxlLnZhbHVlID09PSB0cnVlICYmIGNoaWxkLnVuc2hpZnQoXG4gICAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICdxLWZvY3VzLWhlbHBlcicsIHRhYmluZGV4OiAtMSwgcmVmOiBibHVyVGFyZ2V0UmVmIH0pXG4gICAgICApXG5cbiAgICAgIHJldHVybiBjaGlsZFxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICByZWY6IHJvb3RSZWYsXG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnZhbHVlLFxuICAgICAgICBzdHlsZTogc3R5bGUudmFsdWUsXG4gICAgICAgIHJvbGU6ICdsaXN0aXRlbScsXG4gICAgICAgIG9uQ2xpY2ssXG4gICAgICAgIG9uS2V5dXBcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQ2xpY2thYmxlLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGRhdGEudGFiaW5kZXggPSBwcm9wcy50YWJpbmRleCB8fCAnMCdcbiAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCBsaW5rQXR0cnMudmFsdWUpXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0FjdGlvbmFibGUudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgZGF0YVsgJ2FyaWEtZGlzYWJsZWQnIF0gPSAndHJ1ZSdcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgoXG4gICAgICAgIGxpbmtUYWcudmFsdWUsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGdldENvbnRlbnQoKVxuICAgICAgKVxuICAgIH1cbiAgfVxufSlcbiIsImltcG9ydCB7IGgsIGNvbXB1dGVkLCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHVzZURhcmssIHsgdXNlRGFya1Byb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS91c2UtZGFyay5qcydcbmltcG9ydCB7IGhTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9yZW5kZXIuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRTGlzdCcsXG5cbiAgcHJvcHM6IHtcbiAgICAuLi51c2VEYXJrUHJvcHMsXG5cbiAgICBib3JkZXJlZDogQm9vbGVhbixcbiAgICBkZW5zZTogQm9vbGVhbixcbiAgICBzZXBhcmF0b3I6IEJvb2xlYW4sXG4gICAgcGFkZGluZzogQm9vbGVhbixcblxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2RpdidcbiAgICB9XG4gIH0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG4gICAgY29uc3QgaXNEYXJrID0gdXNlRGFyayhwcm9wcywgdm0ucHJveHkuJHEpXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgICdxLWxpc3QnXG4gICAgICArIChwcm9wcy5ib3JkZXJlZCA9PT0gdHJ1ZSA/ICcgcS1saXN0LS1ib3JkZXJlZCcgOiAnJylcbiAgICAgICsgKHByb3BzLmRlbnNlID09PSB0cnVlID8gJyBxLWxpc3QtLWRlbnNlJyA6ICcnKVxuICAgICAgKyAocHJvcHMuc2VwYXJhdG9yID09PSB0cnVlID8gJyBxLWxpc3QtLXNlcGFyYXRvcicgOiAnJylcbiAgICAgICsgKGlzRGFyay52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1saXN0LS1kYXJrJyA6ICcnKVxuICAgICAgKyAocHJvcHMucGFkZGluZyA9PT0gdHJ1ZSA/ICcgcS1saXN0LS1wYWRkaW5nJyA6ICcnKVxuICAgIClcblxuICAgIHJldHVybiAoKSA9PiBoKHByb3BzLnRhZywgeyBjbGFzczogY2xhc3Nlcy52YWx1ZSB9LCBoU2xvdChzbG90cy5kZWZhdWx0KSlcbiAgfVxufSlcbiIsImltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi8uLi9wbHVnaW5zL1BsYXRmb3JtLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJTZWxlY3Rpb24gKCkge1xuICBpZiAod2luZG93LmdldFNlbGVjdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpXG4gICAgaWYgKHNlbGVjdGlvbi5lbXB0eSAhPT0gdm9pZCAwKSB7XG4gICAgICBzZWxlY3Rpb24uZW1wdHkoKVxuICAgIH1cbiAgICBlbHNlIGlmIChzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzICE9PSB2b2lkIDApIHtcbiAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKVxuICAgICAgUGxhdGZvcm0uaXMubW9iaWxlICE9PSB0cnVlICYmIHNlbGVjdGlvbi5hZGRSYW5nZShkb2N1bWVudC5jcmVhdGVSYW5nZSgpKVxuICAgIH1cbiAgfVxuICBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gIT09IHZvaWQgMCkge1xuICAgIGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpXG4gIH1cbn1cbiIsImltcG9ydCB7IHJlZiwgd2F0Y2gsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50LCBuZXh0VGljaywgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBjbGVhclNlbGVjdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvc2VsZWN0aW9uLmpzJ1xuaW1wb3J0IHsgYWRkRXZ0LCBjbGVhbkV2dCwgcHJldmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL2V2ZW50LmpzJ1xuaW1wb3J0IHsgaXNLZXlDb2RlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9rZXktY29tcG9zaXRpb24uanMnXG5cbmV4cG9ydCBjb25zdCB1c2VBbmNob3JQcm9wcyA9IHtcbiAgdGFyZ2V0OiB7XG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBub1BhcmVudEV2ZW50OiBCb29sZWFuLFxuICBjb250ZXh0TWVudTogQm9vbGVhblxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoe1xuICBzaG93aW5nLFxuICBhdm9pZEVtaXQsIC8vIHJlcXVpcmVkIGZvciBRUG9wdXBQcm94eSAodHJ1ZSlcbiAgY29uZmlndXJlQW5jaG9yRWwgLy8gb3B0aW9uYWxcbn0pIHtcbiAgY29uc3QgeyBwcm9wcywgcHJveHksIGVtaXQgfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG5cbiAgY29uc3QgYW5jaG9yRWwgPSByZWYobnVsbClcblxuICBsZXQgdG91Y2hUaW1lciA9IG51bGxcblxuICBmdW5jdGlvbiBjYW5TaG93IChldnQpIHtcbiAgICAvLyBhYm9ydCB3aXRoIG5vIHBhcmVudCBjb25maWd1cmVkIG9yIG9uIG11bHRpLXRvdWNoXG4gICAgcmV0dXJuIGFuY2hvckVsLnZhbHVlID09PSBudWxsXG4gICAgICA/IGZhbHNlXG4gICAgICA6IChldnQgPT09IHZvaWQgMCB8fCBldnQudG91Y2hlcyA9PT0gdm9pZCAwIHx8IGV2dC50b3VjaGVzLmxlbmd0aCA8PSAxKVxuICB9XG5cbiAgY29uc3QgYW5jaG9yRXZlbnRzID0ge31cblxuICBpZiAoY29uZmlndXJlQW5jaG9yRWwgPT09IHZvaWQgMCkge1xuICAgIC8vIGRlZmF1bHQgY29uZmlndXJlQW5jaG9yRWwgaXMgZGVzaWduZWQgZm9yXG4gICAgLy8gUU1lbnUgJiBRUG9wdXBQcm94eSAod2hpY2ggaXMgd2h5IGl0J3MgaGFuZGxlZCBoZXJlKVxuXG4gICAgT2JqZWN0LmFzc2lnbihhbmNob3JFdmVudHMsIHtcbiAgICAgIGhpZGUgKGV2dCkge1xuICAgICAgICBwcm94eS5oaWRlKGV2dClcbiAgICAgIH0sXG5cbiAgICAgIHRvZ2dsZSAoZXZ0KSB7XG4gICAgICAgIHByb3h5LnRvZ2dsZShldnQpXG4gICAgICAgIGV2dC5xQW5jaG9ySGFuZGxlZCA9IHRydWVcbiAgICAgIH0sXG5cbiAgICAgIHRvZ2dsZUtleSAoZXZ0KSB7XG4gICAgICAgIGlzS2V5Q29kZShldnQsIDEzKSA9PT0gdHJ1ZSAmJiBhbmNob3JFdmVudHMudG9nZ2xlKGV2dClcbiAgICAgIH0sXG5cbiAgICAgIGNvbnRleHRDbGljayAoZXZ0KSB7XG4gICAgICAgIHByb3h5LmhpZGUoZXZ0KVxuICAgICAgICBwcmV2ZW50KGV2dClcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHByb3h5LnNob3coZXZ0KVxuICAgICAgICAgIGV2dC5xQW5jaG9ySGFuZGxlZCA9IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH0sXG5cbiAgICAgIHByZXZlbnQsXG5cbiAgICAgIG1vYmlsZVRvdWNoIChldnQpIHtcbiAgICAgICAgYW5jaG9yRXZlbnRzLm1vYmlsZUNsZWFudXAoZXZ0KVxuXG4gICAgICAgIGlmIChjYW5TaG93KGV2dCkgIT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHByb3h5LmhpZGUoZXZ0KVxuICAgICAgICBhbmNob3JFbC52YWx1ZS5jbGFzc0xpc3QuYWRkKCdub24tc2VsZWN0YWJsZScpXG5cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZ0LnRhcmdldFxuICAgICAgICBhZGRFdnQoYW5jaG9yRXZlbnRzLCAnYW5jaG9yJywgW1xuICAgICAgICAgIFsgdGFyZ2V0LCAndG91Y2htb3ZlJywgJ21vYmlsZUNsZWFudXAnLCAncGFzc2l2ZScgXSxcbiAgICAgICAgICBbIHRhcmdldCwgJ3RvdWNoZW5kJywgJ21vYmlsZUNsZWFudXAnLCAncGFzc2l2ZScgXSxcbiAgICAgICAgICBbIHRhcmdldCwgJ3RvdWNoY2FuY2VsJywgJ21vYmlsZUNsZWFudXAnLCAncGFzc2l2ZScgXSxcbiAgICAgICAgICBbIGFuY2hvckVsLnZhbHVlLCAnY29udGV4dG1lbnUnLCAncHJldmVudCcsICdub3RQYXNzaXZlJyBdXG4gICAgICAgIF0pXG5cbiAgICAgICAgdG91Y2hUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRvdWNoVGltZXIgPSBudWxsXG4gICAgICAgICAgcHJveHkuc2hvdyhldnQpXG4gICAgICAgICAgZXZ0LnFBbmNob3JIYW5kbGVkID0gdHJ1ZVxuICAgICAgICB9LCAzMDApXG4gICAgICB9LFxuXG4gICAgICBtb2JpbGVDbGVhbnVwIChldnQpIHtcbiAgICAgICAgYW5jaG9yRWwudmFsdWUuY2xhc3NMaXN0LnJlbW92ZSgnbm9uLXNlbGVjdGFibGUnKVxuXG4gICAgICAgIGlmICh0b3VjaFRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRvdWNoVGltZXIpXG4gICAgICAgICAgdG91Y2hUaW1lciA9IG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG93aW5nLnZhbHVlID09PSB0cnVlICYmIGV2dCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgY2xlYXJTZWxlY3Rpb24oKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbmZpZ3VyZUFuY2hvckVsID0gZnVuY3Rpb24gKGNvbnRleHQgPSBwcm9wcy5jb250ZXh0TWVudSkge1xuICAgICAgaWYgKHByb3BzLm5vUGFyZW50RXZlbnQgPT09IHRydWUgfHwgYW5jaG9yRWwudmFsdWUgPT09IG51bGwpIHJldHVyblxuXG4gICAgICBsZXQgZXZ0c1xuXG4gICAgICBpZiAoY29udGV4dCA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAocHJveHkuJHEucGxhdGZvcm0uaXMubW9iaWxlID09PSB0cnVlKSB7XG4gICAgICAgICAgZXZ0cyA9IFtcbiAgICAgICAgICAgIFsgYW5jaG9yRWwudmFsdWUsICd0b3VjaHN0YXJ0JywgJ21vYmlsZVRvdWNoJywgJ3Bhc3NpdmUnIF1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZXZ0cyA9IFtcbiAgICAgICAgICAgIFsgYW5jaG9yRWwudmFsdWUsICdtb3VzZWRvd24nLCAnaGlkZScsICdwYXNzaXZlJyBdLFxuICAgICAgICAgICAgWyBhbmNob3JFbC52YWx1ZSwgJ2NvbnRleHRtZW51JywgJ2NvbnRleHRDbGljaycsICdub3RQYXNzaXZlJyBdXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZXZ0cyA9IFtcbiAgICAgICAgICBbIGFuY2hvckVsLnZhbHVlLCAnY2xpY2snLCAndG9nZ2xlJywgJ3Bhc3NpdmUnIF0sXG4gICAgICAgICAgWyBhbmNob3JFbC52YWx1ZSwgJ2tleXVwJywgJ3RvZ2dsZUtleScsICdwYXNzaXZlJyBdXG4gICAgICAgIF1cbiAgICAgIH1cblxuICAgICAgYWRkRXZ0KGFuY2hvckV2ZW50cywgJ2FuY2hvcicsIGV2dHMpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdW5jb25maWd1cmVBbmNob3JFbCAoKSB7XG4gICAgY2xlYW5FdnQoYW5jaG9yRXZlbnRzLCAnYW5jaG9yJylcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFuY2hvckVsIChlbCkge1xuICAgIGFuY2hvckVsLnZhbHVlID0gZWxcbiAgICB3aGlsZSAoYW5jaG9yRWwudmFsdWUuY2xhc3NMaXN0LmNvbnRhaW5zKCdxLWFuY2hvci0tc2tpcCcpKSB7XG4gICAgICBhbmNob3JFbC52YWx1ZSA9IGFuY2hvckVsLnZhbHVlLnBhcmVudE5vZGVcbiAgICB9XG4gICAgY29uZmlndXJlQW5jaG9yRWwoKVxuICB9XG5cbiAgZnVuY3Rpb24gcGlja0FuY2hvckVsICgpIHtcbiAgICBpZiAocHJvcHMudGFyZ2V0ID09PSBmYWxzZSB8fCBwcm9wcy50YXJnZXQgPT09ICcnIHx8IHByb3h5LiRlbC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICBhbmNob3JFbC52YWx1ZSA9IG51bGxcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvcHMudGFyZ2V0ID09PSB0cnVlKSB7XG4gICAgICBzZXRBbmNob3JFbChwcm94eS4kZWwucGFyZW50Tm9kZSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsZXQgZWwgPSBwcm9wcy50YXJnZXRcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy50YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb3BzLnRhcmdldClcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgZWwgPSB2b2lkIDBcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZWwgIT09IHZvaWQgMCAmJiBlbCAhPT0gbnVsbCkge1xuICAgICAgICBhbmNob3JFbC52YWx1ZSA9IGVsLiRlbCB8fCBlbFxuICAgICAgICBjb25maWd1cmVBbmNob3JFbCgpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYW5jaG9yRWwudmFsdWUgPSBudWxsXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEFuY2hvcjogdGFyZ2V0IFwiJHsgcHJvcHMudGFyZ2V0IH1cIiBub3QgZm91bmRgKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdhdGNoKCgpID0+IHByb3BzLmNvbnRleHRNZW51LCB2YWwgPT4ge1xuICAgIGlmIChhbmNob3JFbC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgdW5jb25maWd1cmVBbmNob3JFbCgpXG4gICAgICBjb25maWd1cmVBbmNob3JFbCh2YWwpXG4gICAgfVxuICB9KVxuXG4gIHdhdGNoKCgpID0+IHByb3BzLnRhcmdldCwgKCkgPT4ge1xuICAgIGlmIChhbmNob3JFbC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgdW5jb25maWd1cmVBbmNob3JFbCgpXG4gICAgfVxuXG4gICAgcGlja0FuY2hvckVsKClcbiAgfSlcblxuICB3YXRjaCgoKSA9PiBwcm9wcy5ub1BhcmVudEV2ZW50LCB2YWwgPT4ge1xuICAgIGlmIChhbmNob3JFbC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xuICAgICAgICB1bmNvbmZpZ3VyZUFuY2hvckVsKClcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25maWd1cmVBbmNob3JFbCgpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgcGlja0FuY2hvckVsKClcblxuICAgIGlmIChhdm9pZEVtaXQgIT09IHRydWUgJiYgcHJvcHMubW9kZWxWYWx1ZSA9PT0gdHJ1ZSAmJiBhbmNob3JFbC52YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCBmYWxzZSlcbiAgICB9XG4gIH0pXG5cbiAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICB0b3VjaFRpbWVyICE9PSBudWxsICYmIGNsZWFyVGltZW91dCh0b3VjaFRpbWVyKVxuICAgIHVuY29uZmlndXJlQW5jaG9yRWwoKVxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgYW5jaG9yRWwsXG4gICAgY2FuU2hvdyxcbiAgICBhbmNob3JFdmVudHNcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVmLCB3YXRjaCwgb25CZWZvcmVVbm1vdW50IH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBsaXN0ZW5PcHRzIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXZlbnQuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChcbiAgcHJvcHMsXG4gIGNvbmZpZ3VyZVNjcm9sbFRhcmdldFxuKSB7XG4gIGNvbnN0IGxvY2FsU2Nyb2xsVGFyZ2V0ID0gcmVmKG51bGwpXG4gIGxldCBzY3JvbGxGblxuXG4gIGZ1bmN0aW9uIGNoYW5nZVNjcm9sbEV2ZW50IChzY3JvbGxUYXJnZXQsIGZuKSB7XG4gICAgY29uc3QgZm5Qcm9wID0gYCR7IGZuICE9PSB2b2lkIDAgPyAnYWRkJyA6ICdyZW1vdmUnIH1FdmVudExpc3RlbmVyYFxuICAgIGNvbnN0IGZuSGFuZGxlciA9IGZuICE9PSB2b2lkIDAgPyBmbiA6IHNjcm9sbEZuXG5cbiAgICBpZiAoc2Nyb2xsVGFyZ2V0ICE9PSB3aW5kb3cpIHtcbiAgICAgIHNjcm9sbFRhcmdldFsgZm5Qcm9wIF0oJ3Njcm9sbCcsIGZuSGFuZGxlciwgbGlzdGVuT3B0cy5wYXNzaXZlKVxuICAgIH1cblxuICAgIHdpbmRvd1sgZm5Qcm9wIF0oJ3Njcm9sbCcsIGZuSGFuZGxlciwgbGlzdGVuT3B0cy5wYXNzaXZlKVxuXG4gICAgc2Nyb2xsRm4gPSBmblxuICB9XG5cbiAgZnVuY3Rpb24gdW5jb25maWd1cmVTY3JvbGxUYXJnZXQgKCkge1xuICAgIGlmIChsb2NhbFNjcm9sbFRhcmdldC52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgY2hhbmdlU2Nyb2xsRXZlbnQobG9jYWxTY3JvbGxUYXJnZXQudmFsdWUpXG4gICAgICBsb2NhbFNjcm9sbFRhcmdldC52YWx1ZSA9IG51bGxcbiAgICB9XG4gIH1cblxuICBjb25zdCBub1BhcmVudEV2ZW50V2F0Y2hlciA9IHdhdGNoKCgpID0+IHByb3BzLm5vUGFyZW50RXZlbnQsICgpID0+IHtcbiAgICBpZiAobG9jYWxTY3JvbGxUYXJnZXQudmFsdWUgIT09IG51bGwpIHtcbiAgICAgIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0KClcbiAgICAgIGNvbmZpZ3VyZVNjcm9sbFRhcmdldCgpXG4gICAgfVxuICB9KVxuXG4gIG9uQmVmb3JlVW5tb3VudChub1BhcmVudEV2ZW50V2F0Y2hlcilcblxuICByZXR1cm4ge1xuICAgIGxvY2FsU2Nyb2xsVGFyZ2V0LFxuICAgIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0LFxuICAgIGNoYW5nZVNjcm9sbEV2ZW50XG4gIH1cbn1cbiIsImltcG9ydCB7IGxpc3Rlbk9wdHMgfSBmcm9tICcuLi9ldmVudC5qcydcbmltcG9ydCB7IHBvcnRhbFByb3h5TGlzdCB9IGZyb20gJy4uL3ByaXZhdGUvcG9ydGFsLmpzJ1xuXG5sZXQgdGltZXIgPSBudWxsXG5cbmNvbnN0XG4gIHsgbm90UGFzc2l2ZUNhcHR1cmUgfSA9IGxpc3Rlbk9wdHMsXG4gIHJlZ2lzdGVyZWRMaXN0ID0gW11cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlciAoZXZ0KSB7XG4gIGlmICh0aW1lciAhPT0gbnVsbCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICB0aW1lciA9IG51bGxcbiAgfVxuXG4gIGNvbnN0IHRhcmdldCA9IGV2dC50YXJnZXRcblxuICBpZiAoXG4gICAgdGFyZ2V0ID09PSB2b2lkIDBcbiAgICB8fCB0YXJnZXQubm9kZVR5cGUgPT09IDhcbiAgICB8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCduby1wb2ludGVyLWV2ZW50cycpID09PSB0cnVlXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gY2hlY2sgbGFzdCBwb3J0YWwgdm0gaWYgaXQnc1xuICAvLyBhIFFEaWFsb2cgYW5kIG5vdCBpbiBzZWFtbGVzcyBtb2RlXG4gIGxldCBwb3J0YWxJbmRleCA9IHBvcnRhbFByb3h5TGlzdC5sZW5ndGggLSAxXG5cbiAgd2hpbGUgKHBvcnRhbEluZGV4ID49IDApIHtcbiAgICBjb25zdCBwcm94eSA9IHBvcnRhbFByb3h5TGlzdFsgcG9ydGFsSW5kZXggXS4kXG5cbiAgICAvLyBza2lwIFFUb29sdGlwIHBvcnRhbHNcbiAgICBpZiAocHJveHkudHlwZS5uYW1lID09PSAnUVRvb2x0aXAnKSB7XG4gICAgICBwb3J0YWxJbmRleC0tXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmIChwcm94eS50eXBlLm5hbWUgIT09ICdRRGlhbG9nJykge1xuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpZiAocHJveHkucHJvcHMuc2VhbWxlc3MgIT09IHRydWUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHBvcnRhbEluZGV4LS1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSByZWdpc3RlcmVkTGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IHN0YXRlID0gcmVnaXN0ZXJlZExpc3RbIGkgXVxuXG4gICAgaWYgKFxuICAgICAgKFxuICAgICAgICBzdGF0ZS5hbmNob3JFbC52YWx1ZSA9PT0gbnVsbFxuICAgICAgICB8fCBzdGF0ZS5hbmNob3JFbC52YWx1ZS5jb250YWlucyh0YXJnZXQpID09PSBmYWxzZVxuICAgICAgKVxuICAgICAgJiYgKFxuICAgICAgICB0YXJnZXQgPT09IGRvY3VtZW50LmJvZHlcbiAgICAgICAgfHwgKFxuICAgICAgICAgIHN0YXRlLmlubmVyUmVmLnZhbHVlICE9PSBudWxsXG4gICAgICAgICAgJiYgc3RhdGUuaW5uZXJSZWYudmFsdWUuY29udGFpbnModGFyZ2V0KSA9PT0gZmFsc2VcbiAgICAgICAgKVxuICAgICAgKVxuICAgICkge1xuICAgICAgLy8gbWFyayB0aGUgZXZlbnQgYXMgYmVpbmcgcHJvY2Vzc2VkIGJ5IGNsaWNrT3V0c2lkZVxuICAgICAgLy8gdXNlZCB0byBwcmV2ZW50IHJlZm9jdXMgYWZ0ZXIgbWVudSBjbG9zZVxuICAgICAgZXZ0LnFDbGlja091dHNpZGUgPSB0cnVlXG4gICAgICBzdGF0ZS5vbkNsaWNrT3V0c2lkZShldnQpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRDbGlja091dHNpZGUgKGNsaWNrT3V0c2lkZVByb3BzKSB7XG4gIHJlZ2lzdGVyZWRMaXN0LnB1c2goY2xpY2tPdXRzaWRlUHJvcHMpXG5cbiAgaWYgKHJlZ2lzdGVyZWRMaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGdsb2JhbEhhbmRsZXIsIG5vdFBhc3NpdmVDYXB0dXJlKVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBnbG9iYWxIYW5kbGVyLCBub3RQYXNzaXZlQ2FwdHVyZSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ2xpY2tPdXRzaWRlIChjbGlja091dHNpZGVQcm9wcykge1xuICBjb25zdCBpbmRleCA9IHJlZ2lzdGVyZWRMaXN0LmZpbmRJbmRleChoID0+IGggPT09IGNsaWNrT3V0c2lkZVByb3BzKVxuXG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICByZWdpc3RlcmVkTGlzdC5zcGxpY2UoaW5kZXgsIDEpXG5cbiAgICBpZiAocmVnaXN0ZXJlZExpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAodGltZXIgIT09IG51bGwpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICAgICAgICB0aW1lciA9IG51bGxcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZ2xvYmFsSGFuZGxlciwgbm90UGFzc2l2ZUNhcHR1cmUpXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZ2xvYmFsSGFuZGxlciwgbm90UGFzc2l2ZUNhcHR1cmUpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBnZXRTY3JvbGxiYXJXaWR0aCB9IGZyb20gJy4uL3Njcm9sbC5qcydcbmltcG9ydCB7IGNsaWVudCB9IGZyb20gJy4uLy4uL3BsdWdpbnMvUGxhdGZvcm0uanMnXG5cbmxldCB2cExlZnQsIHZwVG9wXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVBvc2l0aW9uIChwb3MpIHtcbiAgY29uc3QgcGFydHMgPSBwb3Muc3BsaXQoJyAnKVxuICBpZiAocGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKFsgJ3RvcCcsICdjZW50ZXInLCAnYm90dG9tJyBdLmluY2x1ZGVzKHBhcnRzWyAwIF0pICE9PSB0cnVlKSB7XG4gICAgY29uc29sZS5lcnJvcignQW5jaG9yL1NlbGYgcG9zaXRpb24gbXVzdCBzdGFydCB3aXRoIG9uZSBvZiB0b3AvY2VudGVyL2JvdHRvbScpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgaWYgKFsgJ2xlZnQnLCAnbWlkZGxlJywgJ3JpZ2h0JywgJ3N0YXJ0JywgJ2VuZCcgXS5pbmNsdWRlcyhwYXJ0c1sgMSBdKSAhPT0gdHJ1ZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0FuY2hvci9TZWxmIHBvc2l0aW9uIG11c3QgZW5kIHdpdGggb25lIG9mIGxlZnQvbWlkZGxlL3JpZ2h0L3N0YXJ0L2VuZCcpXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlT2Zmc2V0ICh2YWwpIHtcbiAgaWYgKCF2YWwpIHsgcmV0dXJuIHRydWUgfVxuICBpZiAodmFsLmxlbmd0aCAhPT0gMikgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAodHlwZW9mIHZhbFsgMCBdICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsWyAxIF0gIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuY29uc3QgaG9yaXpvbnRhbFBvcyA9IHtcbiAgJ3N0YXJ0I2x0cic6ICdsZWZ0JyxcbiAgJ3N0YXJ0I3J0bCc6ICdyaWdodCcsXG4gICdlbmQjbHRyJzogJ3JpZ2h0JyxcbiAgJ2VuZCNydGwnOiAnbGVmdCdcbn1cblxuO1sgJ2xlZnQnLCAnbWlkZGxlJywgJ3JpZ2h0JyBdLmZvckVhY2gocG9zID0+IHtcbiAgaG9yaXpvbnRhbFBvc1sgYCR7IHBvcyB9I2x0cmAgXSA9IHBvc1xuICBob3Jpem9udGFsUG9zWyBgJHsgcG9zIH0jcnRsYCBdID0gcG9zXG59KVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQb3NpdGlvbiAocG9zLCBydGwpIHtcbiAgY29uc3QgcGFydHMgPSBwb3Muc3BsaXQoJyAnKVxuICByZXR1cm4ge1xuICAgIHZlcnRpY2FsOiBwYXJ0c1sgMCBdLFxuICAgIGhvcml6b250YWw6IGhvcml6b250YWxQb3NbIGAkeyBwYXJ0c1sgMSBdIH0jJHsgcnRsID09PSB0cnVlID8gJ3J0bCcgOiAnbHRyJyB9YCBdXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFuY2hvclByb3BzIChlbCwgb2Zmc2V0KSB7XG4gIGxldCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgd2lkdGgsIGhlaWdodCB9ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICBpZiAob2Zmc2V0ICE9PSB2b2lkIDApIHtcbiAgICB0b3AgLT0gb2Zmc2V0WyAxIF1cbiAgICBsZWZ0IC09IG9mZnNldFsgMCBdXG4gICAgYm90dG9tICs9IG9mZnNldFsgMSBdXG4gICAgcmlnaHQgKz0gb2Zmc2V0WyAwIF1cblxuICAgIHdpZHRoICs9IG9mZnNldFsgMCBdXG4gICAgaGVpZ2h0ICs9IG9mZnNldFsgMSBdXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcCwgYm90dG9tLCBoZWlnaHQsXG4gICAgbGVmdCwgcmlnaHQsIHdpZHRoLFxuICAgIG1pZGRsZTogbGVmdCArIChyaWdodCAtIGxlZnQpIC8gMixcbiAgICBjZW50ZXI6IHRvcCArIChib3R0b20gLSB0b3ApIC8gMlxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFic29sdXRlQW5jaG9yUHJvcHMgKGVsLCBhYnNvbHV0ZU9mZnNldCwgb2Zmc2V0KSB7XG4gIGxldCB7IHRvcCwgbGVmdCB9ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuICB0b3AgKz0gYWJzb2x1dGVPZmZzZXQudG9wXG4gIGxlZnQgKz0gYWJzb2x1dGVPZmZzZXQubGVmdFxuXG4gIGlmIChvZmZzZXQgIT09IHZvaWQgMCkge1xuICAgIHRvcCArPSBvZmZzZXRbIDEgXVxuICAgIGxlZnQgKz0gb2Zmc2V0WyAwIF1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wLCBib3R0b206IHRvcCArIDEsIGhlaWdodDogMSxcbiAgICBsZWZ0LCByaWdodDogbGVmdCArIDEsIHdpZHRoOiAxLFxuICAgIG1pZGRsZTogbGVmdCxcbiAgICBjZW50ZXI6IHRvcFxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldFByb3BzICh3aWR0aCwgaGVpZ2h0KSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIGNlbnRlcjogaGVpZ2h0IC8gMixcbiAgICBib3R0b206IGhlaWdodCxcbiAgICBsZWZ0OiAwLFxuICAgIG1pZGRsZTogd2lkdGggLyAyLFxuICAgIHJpZ2h0OiB3aWR0aFxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRvcExlZnRQcm9wcyAoYW5jaG9yUHJvcHMsIHRhcmdldFByb3BzLCBhbmNob3JPcmlnaW4sIHNlbGZPcmlnaW4pIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IGFuY2hvclByb3BzWyBhbmNob3JPcmlnaW4udmVydGljYWwgXSAtIHRhcmdldFByb3BzWyBzZWxmT3JpZ2luLnZlcnRpY2FsIF0sXG4gICAgbGVmdDogYW5jaG9yUHJvcHNbIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsIF0gLSB0YXJnZXRQcm9wc1sgc2VsZk9yaWdpbi5ob3Jpem9udGFsIF1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0UG9zaXRpb24gKGNmZywgcmV0cnlOdW1iZXIgPSAwKSB7XG4gIGlmIChcbiAgICBjZmcudGFyZ2V0RWwgPT09IG51bGxcbiAgICB8fCBjZmcuYW5jaG9yRWwgPT09IG51bGxcbiAgICB8fCByZXRyeU51bWJlciA+IDUgLy8gd2Ugc2hvdWxkIHRyeSBvbmx5IGEgZmV3IHRpbWVzXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gc29tZSBicm93c2VycyByZXBvcnQgemVybyBoZWlnaHQgb3Igd2lkdGggYmVjYXVzZVxuICAvLyB3ZSBhcmUgdHJ5aW5nIHRvbyBlYXJseSB0byBnZXQgdGhlc2UgZGltZW5zaW9uc1xuICBpZiAoY2ZnLnRhcmdldEVsLm9mZnNldEhlaWdodCA9PT0gMCB8fCBjZmcudGFyZ2V0RWwub2Zmc2V0V2lkdGggPT09IDApIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNldFBvc2l0aW9uKGNmZywgcmV0cnlOdW1iZXIgKyAxKVxuICAgIH0sIDEwKVxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3Qge1xuICAgIHRhcmdldEVsLFxuICAgIG9mZnNldCxcbiAgICBhbmNob3JFbCxcbiAgICBhbmNob3JPcmlnaW4sXG4gICAgc2VsZk9yaWdpbixcbiAgICBhYnNvbHV0ZU9mZnNldCxcbiAgICBmaXQsXG4gICAgY292ZXIsXG4gICAgbWF4SGVpZ2h0LFxuICAgIG1heFdpZHRoXG4gIH0gPSBjZmdcblxuICBpZiAoY2xpZW50LmlzLmlvcyA9PT0gdHJ1ZSAmJiB3aW5kb3cudmlzdWFsVmlld3BvcnQgIT09IHZvaWQgMCkge1xuICAgIC8vIHVzZXMgdGhlIHEtcG9zaXRpb24tZW5naW5lIENTUyBjbGFzc1xuXG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5ib2R5LnN0eWxlXG4gICAgY29uc3QgeyBvZmZzZXRMZWZ0OiBsZWZ0LCBvZmZzZXRUb3A6IHRvcCB9ID0gd2luZG93LnZpc3VhbFZpZXdwb3J0XG5cbiAgICBpZiAobGVmdCAhPT0gdnBMZWZ0KSB7XG4gICAgICBlbC5zZXRQcm9wZXJ0eSgnLS1xLXBlLWxlZnQnLCBsZWZ0ICsgJ3B4JylcbiAgICAgIHZwTGVmdCA9IGxlZnRcbiAgICB9XG4gICAgaWYgKHRvcCAhPT0gdnBUb3ApIHtcbiAgICAgIGVsLnNldFByb3BlcnR5KCctLXEtcGUtdG9wJywgdG9wICsgJ3B4JylcbiAgICAgIHZwVG9wID0gdG9wXG4gICAgfVxuICB9XG5cbiAgLy8gc2Nyb2xsIHBvc2l0aW9uIG1pZ2h0IGNoYW5nZVxuICAvLyBpZiBtYXgtaGVpZ2h0Ly13aWR0aCBjaGFuZ2VzLCBzbyB3ZVxuICAvLyBuZWVkIHRvIHJlc3RvcmUgaXQgYWZ0ZXIgd2UgY2FsY3VsYXRlXG4gIC8vIHRoZSBuZXcgcG9zaXRpb25pbmdcbiAgY29uc3QgeyBzY3JvbGxMZWZ0LCBzY3JvbGxUb3AgfSA9IHRhcmdldEVsXG5cbiAgY29uc3QgYW5jaG9yUHJvcHMgPSBhYnNvbHV0ZU9mZnNldCA9PT0gdm9pZCAwXG4gICAgPyBnZXRBbmNob3JQcm9wcyhhbmNob3JFbCwgY292ZXIgPT09IHRydWUgPyBbIDAsIDAgXSA6IG9mZnNldClcbiAgICA6IGdldEFic29sdXRlQW5jaG9yUHJvcHMoYW5jaG9yRWwsIGFic29sdXRlT2Zmc2V0LCBvZmZzZXQpXG5cbiAgLy8gd2UgXCJyZXNldFwiIHRoZSBjcml0aWNhbCBDU1MgcHJvcGVydGllc1xuICAvLyBzbyB3ZSBjYW4gdGFrZSBhbiBhY2N1cmF0ZSBtZWFzdXJlbWVudFxuICBPYmplY3QuYXNzaWduKHRhcmdldEVsLnN0eWxlLCB7XG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgbWluV2lkdGg6IG51bGwsXG4gICAgbWluSGVpZ2h0OiBudWxsLFxuICAgIG1heFdpZHRoOiBtYXhXaWR0aCB8fCAnMTAwdncnLFxuICAgIG1heEhlaWdodDogbWF4SGVpZ2h0IHx8ICcxMDB2aCcsXG4gICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gIH0pXG5cbiAgY29uc3QgeyBvZmZzZXRXaWR0aDogb3JpZ0VsV2lkdGgsIG9mZnNldEhlaWdodDogb3JpZ0VsSGVpZ2h0IH0gPSB0YXJnZXRFbFxuICBjb25zdCB7IGVsV2lkdGgsIGVsSGVpZ2h0IH0gPSBmaXQgPT09IHRydWUgfHwgY292ZXIgPT09IHRydWVcbiAgICA/IHsgZWxXaWR0aDogTWF0aC5tYXgoYW5jaG9yUHJvcHMud2lkdGgsIG9yaWdFbFdpZHRoKSwgZWxIZWlnaHQ6IGNvdmVyID09PSB0cnVlID8gTWF0aC5tYXgoYW5jaG9yUHJvcHMuaGVpZ2h0LCBvcmlnRWxIZWlnaHQpIDogb3JpZ0VsSGVpZ2h0IH1cbiAgICA6IHsgZWxXaWR0aDogb3JpZ0VsV2lkdGgsIGVsSGVpZ2h0OiBvcmlnRWxIZWlnaHQgfVxuXG4gIGxldCBlbFN0eWxlID0geyBtYXhXaWR0aCwgbWF4SGVpZ2h0IH1cblxuICBpZiAoZml0ID09PSB0cnVlIHx8IGNvdmVyID09PSB0cnVlKSB7XG4gICAgZWxTdHlsZS5taW5XaWR0aCA9IGFuY2hvclByb3BzLndpZHRoICsgJ3B4J1xuICAgIGlmIChjb3ZlciA9PT0gdHJ1ZSkge1xuICAgICAgZWxTdHlsZS5taW5IZWlnaHQgPSBhbmNob3JQcm9wcy5oZWlnaHQgKyAncHgnXG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmFzc2lnbih0YXJnZXRFbC5zdHlsZSwgZWxTdHlsZSlcblxuICBjb25zdCB0YXJnZXRQcm9wcyA9IGdldFRhcmdldFByb3BzKGVsV2lkdGgsIGVsSGVpZ2h0KVxuICBsZXQgcHJvcHMgPSBnZXRUb3BMZWZ0UHJvcHMoYW5jaG9yUHJvcHMsIHRhcmdldFByb3BzLCBhbmNob3JPcmlnaW4sIHNlbGZPcmlnaW4pXG5cbiAgaWYgKGFic29sdXRlT2Zmc2V0ID09PSB2b2lkIDAgfHwgb2Zmc2V0ID09PSB2b2lkIDApIHtcbiAgICBhcHBseUJvdW5kYXJpZXMocHJvcHMsIGFuY2hvclByb3BzLCB0YXJnZXRQcm9wcywgYW5jaG9yT3JpZ2luLCBzZWxmT3JpZ2luKVxuICB9XG4gIGVsc2UgeyAvLyB3ZSBoYXZlIHRvdWNoIHBvc2l0aW9uIG9yIGNvbnRleHQgbWVudSB3aXRoIG9mZnNldFxuICAgIGNvbnN0IHsgdG9wLCBsZWZ0IH0gPSBwcm9wcyAvLyBjYWNoZSBpbml0aWFsIHZhbHVlc1xuXG4gICAgLy8gYXBwbHkgaW5pdGlhbCBib3VuZGFyaWVzXG4gICAgYXBwbHlCb3VuZGFyaWVzKHByb3BzLCBhbmNob3JQcm9wcywgdGFyZ2V0UHJvcHMsIGFuY2hvck9yaWdpbiwgc2VsZk9yaWdpbilcblxuICAgIGxldCBoYXNDaGFuZ2VkID0gZmFsc2VcblxuICAgIC8vIGRpZCBpdCBmbGlwIHZlcnRpY2FsbHk/XG4gICAgaWYgKHByb3BzLnRvcCAhPT0gdG9wKSB7XG4gICAgICBoYXNDaGFuZ2VkID0gdHJ1ZVxuICAgICAgY29uc3Qgb2Zmc2V0WSA9IDIgKiBvZmZzZXRbIDEgXVxuICAgICAgYW5jaG9yUHJvcHMuY2VudGVyID0gYW5jaG9yUHJvcHMudG9wIC09IG9mZnNldFlcbiAgICAgIGFuY2hvclByb3BzLmJvdHRvbSAtPSBvZmZzZXRZICsgMlxuICAgIH1cblxuICAgIC8vIGRpZCBpdCBmbGlwIGhvcml6b250YWxseT9cbiAgICBpZiAocHJvcHMubGVmdCAhPT0gbGVmdCkge1xuICAgICAgaGFzQ2hhbmdlZCA9IHRydWVcbiAgICAgIGNvbnN0IG9mZnNldFggPSAyICogb2Zmc2V0WyAwIF1cbiAgICAgIGFuY2hvclByb3BzLm1pZGRsZSA9IGFuY2hvclByb3BzLmxlZnQgLT0gb2Zmc2V0WFxuICAgICAgYW5jaG9yUHJvcHMucmlnaHQgLT0gb2Zmc2V0WCArIDJcbiAgICB9XG5cbiAgICBpZiAoaGFzQ2hhbmdlZCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gcmUtY2FsY3VsYXRlIHByb3BzIHdpdGggdGhlIG5ldyBhbmNob3JcbiAgICAgIHByb3BzID0gZ2V0VG9wTGVmdFByb3BzKGFuY2hvclByb3BzLCB0YXJnZXRQcm9wcywgYW5jaG9yT3JpZ2luLCBzZWxmT3JpZ2luKVxuXG4gICAgICAvLyBhbmQgcmUtYXBwbHkgYm91bmRhcmllc1xuICAgICAgYXBwbHlCb3VuZGFyaWVzKHByb3BzLCBhbmNob3JQcm9wcywgdGFyZ2V0UHJvcHMsIGFuY2hvck9yaWdpbiwgc2VsZk9yaWdpbilcbiAgICB9XG4gIH1cblxuICBlbFN0eWxlID0ge1xuICAgIHRvcDogcHJvcHMudG9wICsgJ3B4JyxcbiAgICBsZWZ0OiBwcm9wcy5sZWZ0ICsgJ3B4J1xuICB9XG5cbiAgaWYgKHByb3BzLm1heEhlaWdodCAhPT0gdm9pZCAwKSB7XG4gICAgZWxTdHlsZS5tYXhIZWlnaHQgPSBwcm9wcy5tYXhIZWlnaHQgKyAncHgnXG5cbiAgICBpZiAoYW5jaG9yUHJvcHMuaGVpZ2h0ID4gcHJvcHMubWF4SGVpZ2h0KSB7XG4gICAgICBlbFN0eWxlLm1pbkhlaWdodCA9IGVsU3R5bGUubWF4SGVpZ2h0XG4gICAgfVxuICB9XG4gIGlmIChwcm9wcy5tYXhXaWR0aCAhPT0gdm9pZCAwKSB7XG4gICAgZWxTdHlsZS5tYXhXaWR0aCA9IHByb3BzLm1heFdpZHRoICsgJ3B4J1xuXG4gICAgaWYgKGFuY2hvclByb3BzLndpZHRoID4gcHJvcHMubWF4V2lkdGgpIHtcbiAgICAgIGVsU3R5bGUubWluV2lkdGggPSBlbFN0eWxlLm1heFdpZHRoXG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmFzc2lnbih0YXJnZXRFbC5zdHlsZSwgZWxTdHlsZSlcblxuICAvLyByZXN0b3JlIHNjcm9sbCBwb3NpdGlvblxuICBpZiAodGFyZ2V0RWwuc2Nyb2xsVG9wICE9PSBzY3JvbGxUb3ApIHtcbiAgICB0YXJnZXRFbC5zY3JvbGxUb3AgPSBzY3JvbGxUb3BcbiAgfVxuICBpZiAodGFyZ2V0RWwuc2Nyb2xsTGVmdCAhPT0gc2Nyb2xsTGVmdCkge1xuICAgIHRhcmdldEVsLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlCb3VuZGFyaWVzIChwcm9wcywgYW5jaG9yUHJvcHMsIHRhcmdldFByb3BzLCBhbmNob3JPcmlnaW4sIHNlbGZPcmlnaW4pIHtcbiAgY29uc3RcbiAgICBjdXJyZW50SGVpZ2h0ID0gdGFyZ2V0UHJvcHMuYm90dG9tLFxuICAgIGN1cnJlbnRXaWR0aCA9IHRhcmdldFByb3BzLnJpZ2h0LFxuICAgIG1hcmdpbiA9IGdldFNjcm9sbGJhcldpZHRoKCksXG4gICAgaW5uZXJIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSBtYXJnaW4sXG4gICAgaW5uZXJXaWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGhcblxuICBpZiAocHJvcHMudG9wIDwgMCB8fCBwcm9wcy50b3AgKyBjdXJyZW50SGVpZ2h0ID4gaW5uZXJIZWlnaHQpIHtcbiAgICBpZiAoc2VsZk9yaWdpbi52ZXJ0aWNhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIHByb3BzLnRvcCA9IGFuY2hvclByb3BzWyBhbmNob3JPcmlnaW4udmVydGljYWwgXSA+IGlubmVySGVpZ2h0IC8gMlxuICAgICAgICA/IE1hdGgubWF4KDAsIGlubmVySGVpZ2h0IC0gY3VycmVudEhlaWdodClcbiAgICAgICAgOiAwXG4gICAgICBwcm9wcy5tYXhIZWlnaHQgPSBNYXRoLm1pbihjdXJyZW50SGVpZ2h0LCBpbm5lckhlaWdodClcbiAgICB9XG4gICAgZWxzZSBpZiAoYW5jaG9yUHJvcHNbIGFuY2hvck9yaWdpbi52ZXJ0aWNhbCBdID4gaW5uZXJIZWlnaHQgLyAyKSB7XG4gICAgICBjb25zdCBhbmNob3JZID0gTWF0aC5taW4oXG4gICAgICAgIGlubmVySGVpZ2h0LFxuICAgICAgICBhbmNob3JPcmlnaW4udmVydGljYWwgPT09ICdjZW50ZXInXG4gICAgICAgICAgPyBhbmNob3JQcm9wcy5jZW50ZXJcbiAgICAgICAgICA6IChhbmNob3JPcmlnaW4udmVydGljYWwgPT09IHNlbGZPcmlnaW4udmVydGljYWwgPyBhbmNob3JQcm9wcy5ib3R0b20gOiBhbmNob3JQcm9wcy50b3ApXG4gICAgICApXG4gICAgICBwcm9wcy5tYXhIZWlnaHQgPSBNYXRoLm1pbihjdXJyZW50SGVpZ2h0LCBhbmNob3JZKVxuICAgICAgcHJvcHMudG9wID0gTWF0aC5tYXgoMCwgYW5jaG9yWSAtIGN1cnJlbnRIZWlnaHQpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcHJvcHMudG9wID0gTWF0aC5tYXgoMCwgYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAnY2VudGVyJ1xuICAgICAgICA/IGFuY2hvclByb3BzLmNlbnRlclxuICAgICAgICA6IChhbmNob3JPcmlnaW4udmVydGljYWwgPT09IHNlbGZPcmlnaW4udmVydGljYWwgPyBhbmNob3JQcm9wcy50b3AgOiBhbmNob3JQcm9wcy5ib3R0b20pXG4gICAgICApXG4gICAgICBwcm9wcy5tYXhIZWlnaHQgPSBNYXRoLm1pbihjdXJyZW50SGVpZ2h0LCBpbm5lckhlaWdodCAtIHByb3BzLnRvcClcbiAgICB9XG4gIH1cblxuICBpZiAocHJvcHMubGVmdCA8IDAgfHwgcHJvcHMubGVmdCArIGN1cnJlbnRXaWR0aCA+IGlubmVyV2lkdGgpIHtcbiAgICBwcm9wcy5tYXhXaWR0aCA9IE1hdGgubWluKGN1cnJlbnRXaWR0aCwgaW5uZXJXaWR0aClcbiAgICBpZiAoc2VsZk9yaWdpbi5ob3Jpem9udGFsID09PSAnbWlkZGxlJykge1xuICAgICAgcHJvcHMubGVmdCA9IGFuY2hvclByb3BzWyBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCBdID4gaW5uZXJXaWR0aCAvIDJcbiAgICAgICAgPyBNYXRoLm1heCgwLCBpbm5lcldpZHRoIC0gY3VycmVudFdpZHRoKVxuICAgICAgICA6IDBcbiAgICB9XG4gICAgZWxzZSBpZiAoYW5jaG9yUHJvcHNbIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsIF0gPiBpbm5lcldpZHRoIC8gMikge1xuICAgICAgY29uc3QgYW5jaG9yWCA9IE1hdGgubWluKFxuICAgICAgICBpbm5lcldpZHRoLFxuICAgICAgICBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ21pZGRsZSdcbiAgICAgICAgICA/IGFuY2hvclByb3BzLm1pZGRsZVxuICAgICAgICAgIDogKGFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSBzZWxmT3JpZ2luLmhvcml6b250YWwgPyBhbmNob3JQcm9wcy5yaWdodCA6IGFuY2hvclByb3BzLmxlZnQpXG4gICAgICApXG4gICAgICBwcm9wcy5tYXhXaWR0aCA9IE1hdGgubWluKGN1cnJlbnRXaWR0aCwgYW5jaG9yWClcbiAgICAgIHByb3BzLmxlZnQgPSBNYXRoLm1heCgwLCBhbmNob3JYIC0gcHJvcHMubWF4V2lkdGgpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcHJvcHMubGVmdCA9IE1hdGgubWF4KDAsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAnbWlkZGxlJ1xuICAgICAgICA/IGFuY2hvclByb3BzLm1pZGRsZVxuICAgICAgICA6IChhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gc2VsZk9yaWdpbi5ob3Jpem9udGFsID8gYW5jaG9yUHJvcHMubGVmdCA6IGFuY2hvclByb3BzLnJpZ2h0KVxuICAgICAgKVxuICAgICAgcHJvcHMubWF4V2lkdGggPSBNYXRoLm1pbihjdXJyZW50V2lkdGgsIGlubmVyV2lkdGggLSBwcm9wcy5sZWZ0KVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgaCwgcmVmLCBjb21wdXRlZCwgd2F0Y2gsIG9uQmVmb3JlVW5tb3VudCwgVHJhbnNpdGlvbiwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgdXNlQW5jaG9yLCB7IHVzZUFuY2hvclByb3BzIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcHJpdmF0ZS91c2UtYW5jaG9yLmpzJ1xuaW1wb3J0IHVzZVNjcm9sbFRhcmdldCBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlL3VzZS1zY3JvbGwtdGFyZ2V0LmpzJ1xuaW1wb3J0IHVzZU1vZGVsVG9nZ2xlLCB7IHVzZU1vZGVsVG9nZ2xlUHJvcHMsIHVzZU1vZGVsVG9nZ2xlRW1pdHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlL3VzZS1tb2RlbC10b2dnbGUuanMnXG5pbXBvcnQgdXNlUG9ydGFsIGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUvdXNlLXBvcnRhbC5qcydcbmltcG9ydCB1c2VUcmFuc2l0aW9uLCB7IHVzZVRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUvdXNlLXRyYW5zaXRpb24uanMnXG5pbXBvcnQgdXNlVGljayBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy91c2UtdGljay5qcydcbmltcG9ydCB1c2VUaW1lb3V0IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3VzZS10aW1lb3V0LmpzJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGdldFNjcm9sbFRhcmdldCB9IGZyb20gJy4uLy4uL3V0aWxzL3Njcm9sbC5qcydcbmltcG9ydCB7IHN0b3BBbmRQcmV2ZW50LCBhZGRFdnQsIGNsZWFuRXZ0IH0gZnJvbSAnLi4vLi4vdXRpbHMvZXZlbnQuanMnXG5pbXBvcnQgeyBjbGVhclNlbGVjdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvc2VsZWN0aW9uLmpzJ1xuaW1wb3J0IHsgaFNsb3QgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL3JlbmRlci5qcydcbmltcG9ydCB7IGFkZENsaWNrT3V0c2lkZSwgcmVtb3ZlQ2xpY2tPdXRzaWRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9jbGljay1vdXRzaWRlLmpzJ1xuaW1wb3J0IHtcbiAgdmFsaWRhdGVQb3NpdGlvbiwgdmFsaWRhdGVPZmZzZXQsIHNldFBvc2l0aW9uLCBwYXJzZVBvc2l0aW9uXG59IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvcG9zaXRpb24tZW5naW5lLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb21wb25lbnQoe1xuICBuYW1lOiAnUVRvb2x0aXAnLFxuXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG5cbiAgcHJvcHM6IHtcbiAgICAuLi51c2VBbmNob3JQcm9wcyxcbiAgICAuLi51c2VNb2RlbFRvZ2dsZVByb3BzLFxuICAgIC4uLnVzZVRyYW5zaXRpb25Qcm9wcyxcblxuICAgIG1heEhlaWdodDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG4gICAgbWF4V2lkdGg6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9LFxuXG4gICAgdHJhbnNpdGlvblNob3c6IHtcbiAgICAgIGRlZmF1bHQ6ICdqdW1wLWRvd24nXG4gICAgfSxcbiAgICB0cmFuc2l0aW9uSGlkZToge1xuICAgICAgZGVmYXVsdDogJ2p1bXAtdXAnXG4gICAgfSxcblxuICAgIGFuY2hvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2JvdHRvbSBtaWRkbGUnLFxuICAgICAgdmFsaWRhdG9yOiB2YWxpZGF0ZVBvc2l0aW9uXG4gICAgfSxcbiAgICBzZWxmOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAndG9wIG1pZGRsZScsXG4gICAgICB2YWxpZGF0b3I6IHZhbGlkYXRlUG9zaXRpb25cbiAgICB9LFxuICAgIG9mZnNldDoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbIDE0LCAxNCBdLFxuICAgICAgdmFsaWRhdG9yOiB2YWxpZGF0ZU9mZnNldFxuICAgIH0sXG5cbiAgICBzY3JvbGxUYXJnZXQ6IHtcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG5cbiAgICBkZWxheToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH0sXG5cbiAgICBoaWRlRGVsYXk6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDBcbiAgICB9LFxuXG4gICAgcGVyc2lzdGVudDogQm9vbGVhblxuICB9LFxuXG4gIGVtaXRzOiBbXG4gICAgLi4udXNlTW9kZWxUb2dnbGVFbWl0c1xuICBdLFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cywgZW1pdCwgYXR0cnMgfSkge1xuICAgIGxldCB1bndhdGNoUG9zaXRpb24sIG9ic2VydmVyXG5cbiAgICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG4gICAgY29uc3QgeyBwcm94eTogeyAkcSB9IH0gPSB2bVxuXG4gICAgY29uc3QgaW5uZXJSZWYgPSByZWYobnVsbClcbiAgICBjb25zdCBzaG93aW5nID0gcmVmKGZhbHNlKVxuXG4gICAgY29uc3QgYW5jaG9yT3JpZ2luID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VQb3NpdGlvbihwcm9wcy5hbmNob3IsICRxLmxhbmcucnRsKSlcbiAgICBjb25zdCBzZWxmT3JpZ2luID0gY29tcHV0ZWQoKCkgPT4gcGFyc2VQb3NpdGlvbihwcm9wcy5zZWxmLCAkcS5sYW5nLnJ0bCkpXG4gICAgY29uc3QgaGlkZU9uUm91dGVDaGFuZ2UgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5wZXJzaXN0ZW50ICE9PSB0cnVlKVxuXG4gICAgY29uc3QgeyByZWdpc3RlclRpY2ssIHJlbW92ZVRpY2sgfSA9IHVzZVRpY2soKVxuICAgIGNvbnN0IHsgcmVnaXN0ZXJUaW1lb3V0IH0gPSB1c2VUaW1lb3V0KClcbiAgICBjb25zdCB7IHRyYW5zaXRpb25Qcm9wcywgdHJhbnNpdGlvblN0eWxlIH0gPSB1c2VUcmFuc2l0aW9uKHByb3BzKVxuICAgIGNvbnN0IHsgbG9jYWxTY3JvbGxUYXJnZXQsIGNoYW5nZVNjcm9sbEV2ZW50LCB1bmNvbmZpZ3VyZVNjcm9sbFRhcmdldCB9ID0gdXNlU2Nyb2xsVGFyZ2V0KHByb3BzLCBjb25maWd1cmVTY3JvbGxUYXJnZXQpXG5cbiAgICBjb25zdCB7IGFuY2hvckVsLCBjYW5TaG93LCBhbmNob3JFdmVudHMgfSA9IHVzZUFuY2hvcih7IHNob3dpbmcsIGNvbmZpZ3VyZUFuY2hvckVsIH0pXG5cbiAgICBjb25zdCB7IHNob3csIGhpZGUgfSA9IHVzZU1vZGVsVG9nZ2xlKHtcbiAgICAgIHNob3dpbmcsIGNhblNob3csIGhhbmRsZVNob3csIGhhbmRsZUhpZGUsXG4gICAgICBoaWRlT25Sb3V0ZUNoYW5nZSxcbiAgICAgIHByb2Nlc3NPbk1vdW50OiB0cnVlXG4gICAgfSlcblxuICAgIE9iamVjdC5hc3NpZ24oYW5jaG9yRXZlbnRzLCB7IGRlbGF5U2hvdywgZGVsYXlIaWRlIH0pXG5cbiAgICBjb25zdCB7IHNob3dQb3J0YWwsIGhpZGVQb3J0YWwsIHJlbmRlclBvcnRhbCB9ID0gdXNlUG9ydGFsKHZtLCBpbm5lclJlZiwgcmVuZGVyUG9ydGFsQ29udGVudCwgJ3Rvb2x0aXAnKVxuXG4gICAgLy8gaWYgd2UncmUgb24gbW9iaWxlLCBsZXQncyBpbXByb3ZlIHRoZSBleHBlcmllbmNlXG4gICAgLy8gYnkgY2xvc2luZyBpdCB3aGVuIHVzZXIgdGFwcyBvdXRzaWRlIG9mIGl0XG4gICAgaWYgKCRxLnBsYXRmb3JtLmlzLm1vYmlsZSA9PT0gdHJ1ZSkge1xuICAgICAgY29uc3QgY2xpY2tPdXRzaWRlUHJvcHMgPSB7XG4gICAgICAgIGFuY2hvckVsLFxuICAgICAgICBpbm5lclJlZixcbiAgICAgICAgb25DbGlja091dHNpZGUgKGUpIHtcbiAgICAgICAgICBoaWRlKGUpXG5cbiAgICAgICAgICAvLyBwcmV2ZW50IGNsaWNrIGlmIGl0J3Mgb24gYSBkaWFsb2cgYmFja2Ryb3BcbiAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdxLWRpYWxvZ19fYmFja2Ryb3AnKSkge1xuICAgICAgICAgICAgc3RvcEFuZFByZXZlbnQoZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGhhc0NsaWNrT3V0c2lkZSA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgaGFzIGV4dGVybmFsIG1vZGVsXG4gICAgICAgIC8vIChudWxsIGlzIHRoZSBkZWZhdWx0IHZhbHVlKVxuICAgICAgICBwcm9wcy5tb2RlbFZhbHVlID09PSBudWxsXG4gICAgICAgIC8vIGFuZCBpdCdzIG5vdCBwZXJzaXN0ZW50XG4gICAgICAgICYmIHByb3BzLnBlcnNpc3RlbnQgIT09IHRydWVcbiAgICAgICAgJiYgc2hvd2luZy52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgKVxuXG4gICAgICB3YXRjaChoYXNDbGlja091dHNpZGUsIHZhbCA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gdmFsID09PSB0cnVlID8gYWRkQ2xpY2tPdXRzaWRlIDogcmVtb3ZlQ2xpY2tPdXRzaWRlXG4gICAgICAgIGZuKGNsaWNrT3V0c2lkZVByb3BzKVxuICAgICAgfSlcblxuICAgICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgICAgcmVtb3ZlQ2xpY2tPdXRzaWRlKGNsaWNrT3V0c2lkZVByb3BzKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTaG93IChldnQpIHtcbiAgICAgIHNob3dQb3J0YWwoKVxuXG4gICAgICAvLyBzaG91bGQgcmVtb3ZlVGljaygpIGlmIHRoaXMgZ2V0cyByZW1vdmVkXG4gICAgICByZWdpc3RlclRpY2soKCkgPT4ge1xuICAgICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHVwZGF0ZVBvc2l0aW9uKCkpXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoaW5uZXJSZWYudmFsdWUsIHsgYXR0cmlidXRlczogZmFsc2UsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KVxuICAgICAgICB1cGRhdGVQb3NpdGlvbigpXG4gICAgICAgIGNvbmZpZ3VyZVNjcm9sbFRhcmdldCgpXG4gICAgICB9KVxuXG4gICAgICBpZiAodW53YXRjaFBvc2l0aW9uID09PSB2b2lkIDApIHtcbiAgICAgICAgdW53YXRjaFBvc2l0aW9uID0gd2F0Y2goXG4gICAgICAgICAgKCkgPT4gJHEuc2NyZWVuLndpZHRoICsgJ3wnICsgJHEuc2NyZWVuLmhlaWdodCArICd8JyArIHByb3BzLnNlbGYgKyAnfCcgKyBwcm9wcy5hbmNob3IgKyAnfCcgKyAkcS5sYW5nLnJ0bCxcbiAgICAgICAgICB1cGRhdGVQb3NpdGlvblxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIC8vIHNob3VsZCByZW1vdmVUaW1lb3V0KCkgaWYgdGhpcyBnZXRzIHJlbW92ZWRcbiAgICAgIHJlZ2lzdGVyVGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNob3dQb3J0YWwodHJ1ZSkgLy8gZG9uZSBzaG93aW5nIHBvcnRhbFxuICAgICAgICBlbWl0KCdzaG93JywgZXZ0KVxuICAgICAgfSwgcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUhpZGUgKGV2dCkge1xuICAgICAgcmVtb3ZlVGljaygpXG4gICAgICBoaWRlUG9ydGFsKClcblxuICAgICAgYW5jaG9yQ2xlYW51cCgpXG5cbiAgICAgIC8vIHNob3VsZCByZW1vdmVUaW1lb3V0KCkgaWYgdGhpcyBnZXRzIHJlbW92ZWRcbiAgICAgIHJlZ2lzdGVyVGltZW91dCgoKSA9PiB7XG4gICAgICAgIGhpZGVQb3J0YWwodHJ1ZSkgLy8gZG9uZSBoaWRpbmcsIG5vdyBkZXN0cm95XG4gICAgICAgIGVtaXQoJ2hpZGUnLCBldnQpXG4gICAgICB9LCBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYW5jaG9yQ2xlYW51cCAoKSB7XG4gICAgICBpZiAob2JzZXJ2ZXIgIT09IHZvaWQgMCkge1xuICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KClcbiAgICAgICAgb2JzZXJ2ZXIgPSB2b2lkIDBcbiAgICAgIH1cblxuICAgICAgaWYgKHVud2F0Y2hQb3NpdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHVud2F0Y2hQb3NpdGlvbigpXG4gICAgICAgIHVud2F0Y2hQb3NpdGlvbiA9IHZvaWQgMFxuICAgICAgfVxuXG4gICAgICB1bmNvbmZpZ3VyZVNjcm9sbFRhcmdldCgpXG4gICAgICBjbGVhbkV2dChhbmNob3JFdmVudHMsICd0b29sdGlwVGVtcCcpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24gKCkge1xuICAgICAgc2V0UG9zaXRpb24oe1xuICAgICAgICB0YXJnZXRFbDogaW5uZXJSZWYudmFsdWUsXG4gICAgICAgIG9mZnNldDogcHJvcHMub2Zmc2V0LFxuICAgICAgICBhbmNob3JFbDogYW5jaG9yRWwudmFsdWUsXG4gICAgICAgIGFuY2hvck9yaWdpbjogYW5jaG9yT3JpZ2luLnZhbHVlLFxuICAgICAgICBzZWxmT3JpZ2luOiBzZWxmT3JpZ2luLnZhbHVlLFxuICAgICAgICBtYXhIZWlnaHQ6IHByb3BzLm1heEhlaWdodCxcbiAgICAgICAgbWF4V2lkdGg6IHByb3BzLm1heFdpZHRoXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGF5U2hvdyAoZXZ0KSB7XG4gICAgICBpZiAoJHEucGxhdGZvcm0uaXMubW9iaWxlID09PSB0cnVlKSB7XG4gICAgICAgIGNsZWFyU2VsZWN0aW9uKClcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdub24tc2VsZWN0YWJsZScpXG5cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gYW5jaG9yRWwudmFsdWVcbiAgICAgICAgY29uc3QgZXZ0cyA9IFsgJ3RvdWNobW92ZScsICd0b3VjaGNhbmNlbCcsICd0b3VjaGVuZCcsICdjbGljaycgXVxuICAgICAgICAgIC5tYXAoZSA9PiAoWyB0YXJnZXQsIGUsICdkZWxheUhpZGUnLCAncGFzc2l2ZUNhcHR1cmUnIF0pKVxuXG4gICAgICAgIGFkZEV2dChhbmNob3JFdmVudHMsICd0b29sdGlwVGVtcCcsIGV2dHMpXG4gICAgICB9XG5cbiAgICAgIHJlZ2lzdGVyVGltZW91dCgoKSA9PiB7IHNob3coZXZ0KSB9LCBwcm9wcy5kZWxheSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxheUhpZGUgKGV2dCkge1xuICAgICAgaWYgKCRxLnBsYXRmb3JtLmlzLm1vYmlsZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjbGVhbkV2dChhbmNob3JFdmVudHMsICd0b29sdGlwVGVtcCcpXG4gICAgICAgIGNsZWFyU2VsZWN0aW9uKClcbiAgICAgICAgLy8gZGVsYXkgbmVlZGVkIG90aGVyd2lzZSBzZWxlY3Rpb24gc3RpbGwgb2NjdXJzXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbm9uLXNlbGVjdGFibGUnKVxuICAgICAgICB9LCAxMClcbiAgICAgIH1cblxuICAgICAgLy8gc2hvdWxkIHJlbW92ZVRpbWVvdXQoKSBpZiB0aGlzIGdldHMgcmVtb3ZlZFxuICAgICAgcmVnaXN0ZXJUaW1lb3V0KCgpID0+IHsgaGlkZShldnQpIH0sIHByb3BzLmhpZGVEZWxheSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWd1cmVBbmNob3JFbCAoKSB7XG4gICAgICBpZiAocHJvcHMubm9QYXJlbnRFdmVudCA9PT0gdHJ1ZSB8fCBhbmNob3JFbC52YWx1ZSA9PT0gbnVsbCkgcmV0dXJuXG5cbiAgICAgIGNvbnN0IGV2dHMgPSAkcS5wbGF0Zm9ybS5pcy5tb2JpbGUgPT09IHRydWVcbiAgICAgICAgPyBbXG4gICAgICAgICAgICBbIGFuY2hvckVsLnZhbHVlLCAndG91Y2hzdGFydCcsICdkZWxheVNob3cnLCAncGFzc2l2ZScgXVxuICAgICAgICAgIF1cbiAgICAgICAgOiBbXG4gICAgICAgICAgICBbIGFuY2hvckVsLnZhbHVlLCAnbW91c2VlbnRlcicsICdkZWxheVNob3cnLCAncGFzc2l2ZScgXSxcbiAgICAgICAgICAgIFsgYW5jaG9yRWwudmFsdWUsICdtb3VzZWxlYXZlJywgJ2RlbGF5SGlkZScsICdwYXNzaXZlJyBdXG4gICAgICAgICAgXVxuXG4gICAgICBhZGRFdnQoYW5jaG9yRXZlbnRzLCAnYW5jaG9yJywgZXZ0cylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWd1cmVTY3JvbGxUYXJnZXQgKCkge1xuICAgICAgaWYgKGFuY2hvckVsLnZhbHVlICE9PSBudWxsIHx8IHByb3BzLnNjcm9sbFRhcmdldCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGxvY2FsU2Nyb2xsVGFyZ2V0LnZhbHVlID0gZ2V0U2Nyb2xsVGFyZ2V0KGFuY2hvckVsLnZhbHVlLCBwcm9wcy5zY3JvbGxUYXJnZXQpXG4gICAgICAgIGNvbnN0IGZuID0gcHJvcHMubm9QYXJlbnRFdmVudCA9PT0gdHJ1ZVxuICAgICAgICAgID8gdXBkYXRlUG9zaXRpb25cbiAgICAgICAgICA6IGhpZGVcblxuICAgICAgICBjaGFuZ2VTY3JvbGxFdmVudChsb2NhbFNjcm9sbFRhcmdldC52YWx1ZSwgZm4pXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VG9vbHRpcENvbnRlbnQgKCkge1xuICAgICAgcmV0dXJuIHNob3dpbmcudmFsdWUgPT09IHRydWVcbiAgICAgICAgPyBoKCdkaXYnLCB7XG4gICAgICAgICAgLi4uYXR0cnMsXG4gICAgICAgICAgcmVmOiBpbm5lclJlZixcbiAgICAgICAgICBjbGFzczogW1xuICAgICAgICAgICAgJ3EtdG9vbHRpcCBxLXRvb2x0aXAtLXN0eWxlIHEtcG9zaXRpb24tZW5naW5lIG5vLXBvaW50ZXItZXZlbnRzJyxcbiAgICAgICAgICAgIGF0dHJzLmNsYXNzXG4gICAgICAgICAgXSxcbiAgICAgICAgICBzdHlsZTogW1xuICAgICAgICAgICAgYXR0cnMuc3R5bGUsXG4gICAgICAgICAgICB0cmFuc2l0aW9uU3R5bGUudmFsdWVcbiAgICAgICAgICBdLFxuICAgICAgICAgIHJvbGU6ICd0b29sdGlwJ1xuICAgICAgICB9LCBoU2xvdChzbG90cy5kZWZhdWx0KSlcbiAgICAgICAgOiBudWxsXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyUG9ydGFsQ29udGVudCAoKSB7XG4gICAgICByZXR1cm4gaChUcmFuc2l0aW9uLCB0cmFuc2l0aW9uUHJvcHMudmFsdWUsIGdldFRvb2x0aXBDb250ZW50KVxuICAgIH1cblxuICAgIG9uQmVmb3JlVW5tb3VudChhbmNob3JDbGVhbnVwKVxuXG4gICAgLy8gZXhwb3NlIHB1YmxpYyBtZXRob2RzXG4gICAgT2JqZWN0LmFzc2lnbih2bS5wcm94eSwgeyB1cGRhdGVQb3NpdGlvbiB9KVxuXG4gICAgcmV0dXJuIHJlbmRlclBvcnRhbFxuICB9XG59KVxuIiwiY29uc3QgbW9kaWZpZXJzQWxsID0ge1xuICBsZWZ0OiB0cnVlLFxuICByaWdodDogdHJ1ZSxcbiAgdXA6IHRydWUsXG4gIGRvd246IHRydWUsXG4gIGhvcml6b250YWw6IHRydWUsXG4gIHZlcnRpY2FsOiB0cnVlXG59XG5cbmNvbnN0IGRpcmVjdGlvbkxpc3QgPSBPYmplY3Qua2V5cyhtb2RpZmllcnNBbGwpXG5cbm1vZGlmaWVyc0FsbC5hbGwgPSB0cnVlXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RpZmllckRpcmVjdGlvbnMgKG1vZCkge1xuICBjb25zdCBkaXIgPSB7fVxuXG4gIGZvciAoY29uc3QgZGlyZWN0aW9uIG9mIGRpcmVjdGlvbkxpc3QpIHtcbiAgICBpZiAobW9kWyBkaXJlY3Rpb24gXSA9PT0gdHJ1ZSkge1xuICAgICAgZGlyWyBkaXJlY3Rpb24gXSA9IHRydWVcbiAgICB9XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMoZGlyKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbW9kaWZpZXJzQWxsXG4gIH1cblxuICBpZiAoZGlyLmhvcml6b250YWwgPT09IHRydWUpIHtcbiAgICBkaXIubGVmdCA9IGRpci5yaWdodCA9IHRydWVcbiAgfVxuICBlbHNlIGlmIChkaXIubGVmdCA9PT0gdHJ1ZSAmJiBkaXIucmlnaHQgPT09IHRydWUpIHtcbiAgICBkaXIuaG9yaXpvbnRhbCA9IHRydWVcbiAgfVxuXG4gIGlmIChkaXIudmVydGljYWwgPT09IHRydWUpIHtcbiAgICBkaXIudXAgPSBkaXIuZG93biA9IHRydWVcbiAgfVxuICBlbHNlIGlmIChkaXIudXAgPT09IHRydWUgJiYgZGlyLmRvd24gPT09IHRydWUpIHtcbiAgICBkaXIudmVydGljYWwgPSB0cnVlXG4gIH1cblxuICBpZiAoZGlyLmhvcml6b250YWwgPT09IHRydWUgJiYgZGlyLnZlcnRpY2FsID09PSB0cnVlKSB7XG4gICAgZGlyLmFsbCA9IHRydWVcbiAgfVxuXG4gIHJldHVybiBkaXJcbn1cblxuLy8gVGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCAobm90IHRoZSBtYWluIHJlYXNvbiwgYnV0IGltcG9ydGFudClcbi8vIGZvciBUb3VjaFN3aXBlIGRpcmVjdGl2ZSBydW5uaW5nIG9uIEZpcmVmb3hcbi8vIGJlY2F1c2UgdGV4dCBzZWxlY3Rpb24gb24gc3VjaCBlbGVtZW50cyBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuLy8gd2l0aG91dCBhZGRpdGlvbmFsIHdvcmsgKG9uIHRvcCBvZiBnZXRTZWxlY3Rpb24oKSBBUEkpXG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NTY4NlxuY29uc3QgYXZvaWROb2RlTmFtZXNMaXN0ID0gWyAnSU5QVVQnLCAnVEVYVEFSRUEnIF1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFN0YXJ0IChldnQsIGN0eCkge1xuICByZXR1cm4gY3R4LmV2ZW50ID09PSB2b2lkIDBcbiAgICAmJiBldnQudGFyZ2V0ICE9PSB2b2lkIDBcbiAgICAmJiBldnQudGFyZ2V0LmRyYWdnYWJsZSAhPT0gdHJ1ZVxuICAgICYmIHR5cGVvZiBjdHguaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIGF2b2lkTm9kZU5hbWVzTGlzdC5pbmNsdWRlcyhldnQudGFyZ2V0Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkpID09PSBmYWxzZVxuICAgICYmIChldnQucUNsb25lZEJ5ID09PSB2b2lkIDAgfHwgZXZ0LnFDbG9uZWRCeS5pbmRleE9mKGN0eC51aWQpID09PSAtMSlcbn1cbiIsImltcG9ydCB7IGNsaWVudCB9IGZyb20gJy4uL3BsdWdpbnMvUGxhdGZvcm0uanMnXG5cbmltcG9ydCB7IGNyZWF0ZURpcmVjdGl2ZSB9IGZyb20gJy4uL3V0aWxzL3ByaXZhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgZ2V0TW9kaWZpZXJEaXJlY3Rpb25zLCBzaG91bGRTdGFydCB9IGZyb20gJy4uL3V0aWxzL3ByaXZhdGUvdG91Y2guanMnXG5pbXBvcnQgeyBhZGRFdnQsIGNsZWFuRXZ0LCBwb3NpdGlvbiwgbGVmdENsaWNrLCBwcmV2ZW50LCBzdG9wLCBzdG9wQW5kUHJldmVudCwgcHJldmVudERyYWdnYWJsZSwgbm9vcCB9IGZyb20gJy4uL3V0aWxzL2V2ZW50LmpzJ1xuaW1wb3J0IHsgY2xlYXJTZWxlY3Rpb24gfSBmcm9tICcuLi91dGlscy9wcml2YXRlL3NlbGVjdGlvbi5qcydcbmltcG9ydCBnZXRTU1JQcm9wcyBmcm9tICcuLi91dGlscy9wcml2YXRlL25vb3Atc3NyLWRpcmVjdGl2ZS10cmFuc2Zvcm0uanMnXG5cbmZ1bmN0aW9uIGdldENoYW5nZXMgKGV2dCwgY3R4LCBpc0ZpbmFsKSB7XG4gIGNvbnN0IHBvcyA9IHBvc2l0aW9uKGV2dClcbiAgbGV0XG4gICAgZGlyLFxuICAgIGRpc3RYID0gcG9zLmxlZnQgLSBjdHguZXZlbnQueCxcbiAgICBkaXN0WSA9IHBvcy50b3AgLSBjdHguZXZlbnQueSxcbiAgICBhYnNYID0gTWF0aC5hYnMoZGlzdFgpLFxuICAgIGFic1kgPSBNYXRoLmFicyhkaXN0WSlcblxuICBjb25zdCBkaXJlY3Rpb24gPSBjdHguZGlyZWN0aW9uXG5cbiAgaWYgKGRpcmVjdGlvbi5ob3Jpem9udGFsID09PSB0cnVlICYmIGRpcmVjdGlvbi52ZXJ0aWNhbCAhPT0gdHJ1ZSkge1xuICAgIGRpciA9IGRpc3RYIDwgMCA/ICdsZWZ0JyA6ICdyaWdodCdcbiAgfVxuICBlbHNlIGlmIChkaXJlY3Rpb24uaG9yaXpvbnRhbCAhPT0gdHJ1ZSAmJiBkaXJlY3Rpb24udmVydGljYWwgPT09IHRydWUpIHtcbiAgICBkaXIgPSBkaXN0WSA8IDAgPyAndXAnIDogJ2Rvd24nXG4gIH1cbiAgZWxzZSBpZiAoZGlyZWN0aW9uLnVwID09PSB0cnVlICYmIGRpc3RZIDwgMCkge1xuICAgIGRpciA9ICd1cCdcbiAgICBpZiAoYWJzWCA+IGFic1kpIHtcbiAgICAgIGlmIChkaXJlY3Rpb24ubGVmdCA9PT0gdHJ1ZSAmJiBkaXN0WCA8IDApIHtcbiAgICAgICAgZGlyID0gJ2xlZnQnXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChkaXJlY3Rpb24ucmlnaHQgPT09IHRydWUgJiYgZGlzdFggPiAwKSB7XG4gICAgICAgIGRpciA9ICdyaWdodCdcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoZGlyZWN0aW9uLmRvd24gPT09IHRydWUgJiYgZGlzdFkgPiAwKSB7XG4gICAgZGlyID0gJ2Rvd24nXG4gICAgaWYgKGFic1ggPiBhYnNZKSB7XG4gICAgICBpZiAoZGlyZWN0aW9uLmxlZnQgPT09IHRydWUgJiYgZGlzdFggPCAwKSB7XG4gICAgICAgIGRpciA9ICdsZWZ0J1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZGlyZWN0aW9uLnJpZ2h0ID09PSB0cnVlICYmIGRpc3RYID4gMCkge1xuICAgICAgICBkaXIgPSAncmlnaHQnXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGRpcmVjdGlvbi5sZWZ0ID09PSB0cnVlICYmIGRpc3RYIDwgMCkge1xuICAgIGRpciA9ICdsZWZ0J1xuICAgIGlmIChhYnNYIDwgYWJzWSkge1xuICAgICAgaWYgKGRpcmVjdGlvbi51cCA9PT0gdHJ1ZSAmJiBkaXN0WSA8IDApIHtcbiAgICAgICAgZGlyID0gJ3VwJ1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZGlyZWN0aW9uLmRvd24gPT09IHRydWUgJiYgZGlzdFkgPiAwKSB7XG4gICAgICAgIGRpciA9ICdkb3duJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbHNlIGlmIChkaXJlY3Rpb24ucmlnaHQgPT09IHRydWUgJiYgZGlzdFggPiAwKSB7XG4gICAgZGlyID0gJ3JpZ2h0J1xuICAgIGlmIChhYnNYIDwgYWJzWSkge1xuICAgICAgaWYgKGRpcmVjdGlvbi51cCA9PT0gdHJ1ZSAmJiBkaXN0WSA8IDApIHtcbiAgICAgICAgZGlyID0gJ3VwJ1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZGlyZWN0aW9uLmRvd24gPT09IHRydWUgJiYgZGlzdFkgPiAwKSB7XG4gICAgICAgIGRpciA9ICdkb3duJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBzeW50aGV0aWMgPSBmYWxzZVxuXG4gIGlmIChkaXIgPT09IHZvaWQgMCAmJiBpc0ZpbmFsID09PSBmYWxzZSkge1xuICAgIGlmIChjdHguZXZlbnQuaXNGaXJzdCA9PT0gdHJ1ZSB8fCBjdHguZXZlbnQubGFzdERpciA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4ge31cbiAgICB9XG5cbiAgICBkaXIgPSBjdHguZXZlbnQubGFzdERpclxuICAgIHN5bnRoZXRpYyA9IHRydWVcblxuICAgIGlmIChkaXIgPT09ICdsZWZ0JyB8fCBkaXIgPT09ICdyaWdodCcpIHtcbiAgICAgIHBvcy5sZWZ0IC09IGRpc3RYXG4gICAgICBhYnNYID0gMFxuICAgICAgZGlzdFggPSAwXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcG9zLnRvcCAtPSBkaXN0WVxuICAgICAgYWJzWSA9IDBcbiAgICAgIGRpc3RZID0gMFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3ludGhldGljLFxuICAgIHBheWxvYWQ6IHtcbiAgICAgIGV2dCxcbiAgICAgIHRvdWNoOiBjdHguZXZlbnQubW91c2UgIT09IHRydWUsXG4gICAgICBtb3VzZTogY3R4LmV2ZW50Lm1vdXNlID09PSB0cnVlLFxuICAgICAgcG9zaXRpb246IHBvcyxcbiAgICAgIGRpcmVjdGlvbjogZGlyLFxuICAgICAgaXNGaXJzdDogY3R4LmV2ZW50LmlzRmlyc3QsXG4gICAgICBpc0ZpbmFsOiBpc0ZpbmFsID09PSB0cnVlLFxuICAgICAgZHVyYXRpb246IERhdGUubm93KCkgLSBjdHguZXZlbnQudGltZSxcbiAgICAgIGRpc3RhbmNlOiB7XG4gICAgICAgIHg6IGFic1gsXG4gICAgICAgIHk6IGFic1lcbiAgICAgIH0sXG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgeDogZGlzdFgsXG4gICAgICAgIHk6IGRpc3RZXG4gICAgICB9LFxuICAgICAgZGVsdGE6IHtcbiAgICAgICAgeDogcG9zLmxlZnQgLSBjdHguZXZlbnQubGFzdFgsXG4gICAgICAgIHk6IHBvcy50b3AgLSBjdHguZXZlbnQubGFzdFlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubGV0IHVpZCA9IDBcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRGlyZWN0aXZlKF9fUVVBU0FSX1NTUl9TRVJWRVJfX1xuICA/IHsgbmFtZTogJ3RvdWNoLXBhbicsIGdldFNTUlByb3BzIH1cbiAgOiB7XG4gICAgICBuYW1lOiAndG91Y2gtcGFuJyxcblxuICAgICAgYmVmb3JlTW91bnQgKGVsLCB7IHZhbHVlLCBtb2RpZmllcnMgfSkge1xuICAgICAgICAvLyBlYXJseSByZXR1cm4sIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmdcbiAgICAgICAgaWYgKG1vZGlmaWVycy5tb3VzZSAhPT0gdHJ1ZSAmJiBjbGllbnQuaGFzLnRvdWNoICE9PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVFdmVudCAoZXZ0LCBtb3VzZUV2ZW50KSB7XG4gICAgICAgICAgaWYgKG1vZGlmaWVycy5tb3VzZSA9PT0gdHJ1ZSAmJiBtb3VzZUV2ZW50ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdG9wQW5kUHJldmVudChldnQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbW9kaWZpZXJzLnN0b3AgPT09IHRydWUgJiYgc3RvcChldnQpXG4gICAgICAgICAgICBtb2RpZmllcnMucHJldmVudCA9PT0gdHJ1ZSAmJiBwcmV2ZW50KGV2dClcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgdWlkOiAncXZ0cF8nICsgKHVpZCsrKSxcbiAgICAgICAgICBoYW5kbGVyOiB2YWx1ZSxcbiAgICAgICAgICBtb2RpZmllcnMsXG4gICAgICAgICAgZGlyZWN0aW9uOiBnZXRNb2RpZmllckRpcmVjdGlvbnMobW9kaWZpZXJzKSxcblxuICAgICAgICAgIG5vb3AsXG5cbiAgICAgICAgICBtb3VzZVN0YXJ0IChldnQpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRTdGFydChldnQsIGN0eCkgJiYgbGVmdENsaWNrKGV2dCkpIHtcbiAgICAgICAgICAgICAgYWRkRXZ0KGN0eCwgJ3RlbXAnLCBbXG4gICAgICAgICAgICAgICAgWyBkb2N1bWVudCwgJ21vdXNlbW92ZScsICdtb3ZlJywgJ25vdFBhc3NpdmVDYXB0dXJlJyBdLFxuICAgICAgICAgICAgICAgIFsgZG9jdW1lbnQsICdtb3VzZXVwJywgJ2VuZCcsICdwYXNzaXZlQ2FwdHVyZScgXVxuICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICAgIGN0eC5zdGFydChldnQsIHRydWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHRvdWNoU3RhcnQgKGV2dCkge1xuICAgICAgICAgICAgaWYgKHNob3VsZFN0YXJ0KGV2dCwgY3R4KSkge1xuICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldnQudGFyZ2V0XG5cbiAgICAgICAgICAgICAgYWRkRXZ0KGN0eCwgJ3RlbXAnLCBbXG4gICAgICAgICAgICAgICAgWyB0YXJnZXQsICd0b3VjaG1vdmUnLCAnbW92ZScsICdub3RQYXNzaXZlQ2FwdHVyZScgXSxcbiAgICAgICAgICAgICAgICBbIHRhcmdldCwgJ3RvdWNoY2FuY2VsJywgJ2VuZCcsICdwYXNzaXZlQ2FwdHVyZScgXSxcbiAgICAgICAgICAgICAgICBbIHRhcmdldCwgJ3RvdWNoZW5kJywgJ2VuZCcsICdwYXNzaXZlQ2FwdHVyZScgXVxuICAgICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICAgIGN0eC5zdGFydChldnQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHN0YXJ0IChldnQsIG1vdXNlRXZlbnQpIHtcbiAgICAgICAgICAgIGNsaWVudC5pcy5maXJlZm94ID09PSB0cnVlICYmIHByZXZlbnREcmFnZ2FibGUoZWwsIHRydWUpXG4gICAgICAgICAgICBjdHgubGFzdEV2dCA9IGV2dFxuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgKiBTdG9wIHByb3BhZ2F0aW9uIHNvIHBvc3NpYmxlIHVwcGVyIHYtdG91Y2gtcGFuIGRvbid0IGNhdGNoIHRoaXMgYXMgd2VsbDtcbiAgICAgICAgICAgICogSWYgd2UncmUgbm90IHRoZSB0YXJnZXQgKGJhc2VkIG9uIG1vZGlmaWVycyksIHdlJ2xsIHJlLWVtaXQgdGhlIGV2ZW50IGxhdGVyXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKG1vdXNlRXZlbnQgPT09IHRydWUgfHwgbW9kaWZpZXJzLnN0b3AgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgKiBhcmUgd2UgZGlyZWN0bHkgc3dpdGNoaW5nIHRvIGRldGVjdGVkIHN0YXRlP1xuICAgICAgICAgICAgICAqIGNsb25lIGV2ZW50IG9ubHkgb3RoZXJ3aXNlXG4gICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjdHguZGlyZWN0aW9uLmFsbCAhPT0gdHJ1ZVxuICAgICAgICAgICAgICAgIC8vIGFjY291bnQgZm9yIFVNRCB0b28gd2hlcmUgbW9kaWZpZXJzIHdpbGwgYmUgbG93ZXJjYXNlZCB0byB3b3JrXG4gICAgICAgICAgICAgICAgJiYgKG1vdXNlRXZlbnQgIT09IHRydWUgfHwgKGN0eC5tb2RpZmllcnMubW91c2VBbGxEaXIgIT09IHRydWUgJiYgY3R4Lm1vZGlmaWVycy5tb3VzZWFsbGRpciAhPT0gdHJ1ZSkpXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lID0gZXZ0LnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTFcbiAgICAgICAgICAgICAgICAgID8gbmV3IE1vdXNlRXZlbnQoZXZ0LnR5cGUsIGV2dClcbiAgICAgICAgICAgICAgICAgIDogbmV3IFRvdWNoRXZlbnQoZXZ0LnR5cGUsIGV2dClcblxuICAgICAgICAgICAgICAgIGV2dC5kZWZhdWx0UHJldmVudGVkID09PSB0cnVlICYmIHByZXZlbnQoY2xvbmUpXG4gICAgICAgICAgICAgICAgZXZ0LmNhbmNlbEJ1YmJsZSA9PT0gdHJ1ZSAmJiBzdG9wKGNsb25lKVxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihjbG9uZSwge1xuICAgICAgICAgICAgICAgICAgcUtleUV2ZW50OiBldnQucUtleUV2ZW50LFxuICAgICAgICAgICAgICAgICAgcUNsaWNrT3V0c2lkZTogZXZ0LnFDbGlja091dHNpZGUsXG4gICAgICAgICAgICAgICAgICBxQW5jaG9ySGFuZGxlZDogZXZ0LnFBbmNob3JIYW5kbGVkLFxuICAgICAgICAgICAgICAgICAgcUNsb25lZEJ5OiBldnQucUNsb25lZEJ5ID09PSB2b2lkIDBcbiAgICAgICAgICAgICAgICAgICAgPyBbIGN0eC51aWQgXVxuICAgICAgICAgICAgICAgICAgICA6IGV2dC5xQ2xvbmVkQnkuY29uY2F0KGN0eC51aWQpXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIGN0eC5pbml0aWFsRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IGV2dC50YXJnZXQsXG4gICAgICAgICAgICAgICAgICBldmVudDogY2xvbmVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzdG9wKGV2dClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgeyBsZWZ0LCB0b3AgfSA9IHBvc2l0aW9uKGV2dClcblxuICAgICAgICAgICAgY3R4LmV2ZW50ID0ge1xuICAgICAgICAgICAgICB4OiBsZWZ0LFxuICAgICAgICAgICAgICB5OiB0b3AsXG4gICAgICAgICAgICAgIHRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgIG1vdXNlOiBtb3VzZUV2ZW50ID09PSB0cnVlLFxuICAgICAgICAgICAgICBkZXRlY3RlZDogZmFsc2UsXG4gICAgICAgICAgICAgIGlzRmlyc3Q6IHRydWUsXG4gICAgICAgICAgICAgIGlzRmluYWw6IGZhbHNlLFxuICAgICAgICAgICAgICBsYXN0WDogbGVmdCxcbiAgICAgICAgICAgICAgbGFzdFk6IHRvcFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBtb3ZlIChldnQpIHtcbiAgICAgICAgICAgIGlmIChjdHguZXZlbnQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgcG9zID0gcG9zaXRpb24oZXZ0KSxcbiAgICAgICAgICAgICAgZGlzdFggPSBwb3MubGVmdCAtIGN0eC5ldmVudC54LFxuICAgICAgICAgICAgICBkaXN0WSA9IHBvcy50b3AgLSBjdHguZXZlbnQueVxuXG4gICAgICAgICAgICAvLyBwcmV2ZW50IGJ1Z2d5IGJyb3dzZXIgYmVoYXZpb3IgKGxpa2UgQmxpbmstYmFzZWQgZW5naW5lIG9uZXMgb24gV2luZG93cylcbiAgICAgICAgICAgIC8vIHdoZXJlIHRoZSBtb3VzZW1vdmUgZXZlbnQgb2NjdXJzIGV2ZW4gaWYgdGhlcmUncyBubyBtb3ZlbWVudCBhZnRlciBtb3VzZWRvd25cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTE2MTQ2NFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NzIxMzQxXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcXVhc2FyZnJhbWV3b3JrL3F1YXNhci9pc3N1ZXMvMTA3MjFcbiAgICAgICAgICAgIGlmIChkaXN0WCA9PT0gMCAmJiBkaXN0WSA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3R4Lmxhc3RFdnQgPSBldnRcblxuICAgICAgICAgICAgY29uc3QgaXNNb3VzZUV2dCA9IGN0eC5ldmVudC5tb3VzZSA9PT0gdHJ1ZVxuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGhhbmRsZUV2ZW50KGV2dCwgaXNNb3VzZUV2dClcblxuICAgICAgICAgICAgICBsZXQgY3Vyc29yXG4gICAgICAgICAgICAgIGlmIChtb2RpZmllcnMucHJlc2VydmVDdXJzb3IgIT09IHRydWUgJiYgbW9kaWZpZXJzLnByZXNlcnZlY3Vyc29yICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgY3Vyc29yID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmN1cnNvciB8fCAnJ1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5jdXJzb3IgPSAnZ3JhYmJpbmcnXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpc01vdXNlRXZ0ID09PSB0cnVlICYmIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnbm8tcG9pbnRlci1ldmVudHMtLWNoaWxkcmVuJylcbiAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdub24tc2VsZWN0YWJsZScpXG4gICAgICAgICAgICAgIGNsZWFyU2VsZWN0aW9uKClcblxuICAgICAgICAgICAgICBjdHguc3R5bGVDbGVhbnVwID0gd2l0aERlbGF5ZWRGbiA9PiB7XG4gICAgICAgICAgICAgICAgY3R4LnN0eWxlQ2xlYW51cCA9IHZvaWQgMFxuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnNvciAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuY3Vyc29yID0gY3Vyc29yXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdub24tc2VsZWN0YWJsZScpXG5cbiAgICAgICAgICAgICAgICBpZiAoaXNNb3VzZUV2dCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ25vLXBvaW50ZXItZXZlbnRzLS1jaGlsZHJlbicpXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmICh3aXRoRGVsYXllZEZuICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKClcbiAgICAgICAgICAgICAgICAgICAgICB3aXRoRGVsYXllZEZuKClcbiAgICAgICAgICAgICAgICAgICAgfSwgNTApXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbHNlIHsgcmVtb3ZlKCkgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh3aXRoRGVsYXllZEZuICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgIHdpdGhEZWxheWVkRm4oKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3R4LmV2ZW50LmRldGVjdGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIGN0eC5ldmVudC5pc0ZpcnN0ICE9PSB0cnVlICYmIGhhbmRsZUV2ZW50KGV2dCwgY3R4LmV2ZW50Lm1vdXNlKVxuXG4gICAgICAgICAgICAgIGNvbnN0IHsgcGF5bG9hZCwgc3ludGhldGljIH0gPSBnZXRDaGFuZ2VzKGV2dCwgY3R4LCBmYWxzZSlcblxuICAgICAgICAgICAgICBpZiAocGF5bG9hZCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN0eC5oYW5kbGVyKHBheWxvYWQpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgY3R4LmVuZChldnQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKGN0eC5zdHlsZUNsZWFudXAgPT09IHZvaWQgMCAmJiBjdHguZXZlbnQuaXNGaXJzdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydCgpXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGN0eC5ldmVudC5sYXN0WCA9IHBheWxvYWQucG9zaXRpb24ubGVmdFxuICAgICAgICAgICAgICAgICAgY3R4LmV2ZW50Lmxhc3RZID0gcGF5bG9hZC5wb3NpdGlvbi50b3BcbiAgICAgICAgICAgICAgICAgIGN0eC5ldmVudC5sYXN0RGlyID0gc3ludGhldGljID09PSB0cnVlID8gdm9pZCAwIDogcGF5bG9hZC5kaXJlY3Rpb25cbiAgICAgICAgICAgICAgICAgIGN0eC5ldmVudC5pc0ZpcnN0ID0gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBjdHguZGlyZWN0aW9uLmFsbCA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAvLyBhY2NvdW50IGZvciBVTUQgdG9vIHdoZXJlIG1vZGlmaWVycyB3aWxsIGJlIGxvd2VyY2FzZWQgdG8gd29ya1xuICAgICAgICAgICAgICB8fCAoaXNNb3VzZUV2dCA9PT0gdHJ1ZSAmJiAoY3R4Lm1vZGlmaWVycy5tb3VzZUFsbERpciA9PT0gdHJ1ZSB8fCBjdHgubW9kaWZpZXJzLm1vdXNlYWxsZGlyID09PSB0cnVlKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBzdGFydCgpXG4gICAgICAgICAgICAgIGN0eC5ldmVudC5kZXRlY3RlZCA9IHRydWVcbiAgICAgICAgICAgICAgY3R4Lm1vdmUoZXZ0KVxuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgYWJzWCA9IE1hdGguYWJzKGRpc3RYKSxcbiAgICAgICAgICAgICAgYWJzWSA9IE1hdGguYWJzKGRpc3RZKVxuXG4gICAgICAgICAgICBpZiAoYWJzWCAhPT0gYWJzWSkge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKGN0eC5kaXJlY3Rpb24uaG9yaXpvbnRhbCA9PT0gdHJ1ZSAmJiBhYnNYID4gYWJzWSlcbiAgICAgICAgICAgICAgICB8fCAoY3R4LmRpcmVjdGlvbi52ZXJ0aWNhbCA9PT0gdHJ1ZSAmJiBhYnNYIDwgYWJzWSlcbiAgICAgICAgICAgICAgICB8fCAoY3R4LmRpcmVjdGlvbi51cCA9PT0gdHJ1ZSAmJiBhYnNYIDwgYWJzWSAmJiBkaXN0WSA8IDApXG4gICAgICAgICAgICAgICAgfHwgKGN0eC5kaXJlY3Rpb24uZG93biA9PT0gdHJ1ZSAmJiBhYnNYIDwgYWJzWSAmJiBkaXN0WSA+IDApXG4gICAgICAgICAgICAgICAgfHwgKGN0eC5kaXJlY3Rpb24ubGVmdCA9PT0gdHJ1ZSAmJiBhYnNYID4gYWJzWSAmJiBkaXN0WCA8IDApXG4gICAgICAgICAgICAgICAgfHwgKGN0eC5kaXJlY3Rpb24ucmlnaHQgPT09IHRydWUgJiYgYWJzWCA+IGFic1kgJiYgZGlzdFggPiAwKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjdHguZXZlbnQuZGV0ZWN0ZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgY3R4Lm1vdmUoZXZ0KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0eC5lbmQoZXZ0LCB0cnVlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGVuZCAoZXZ0LCBhYm9ydCkge1xuICAgICAgICAgICAgaWYgKGN0eC5ldmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjbGVhbkV2dChjdHgsICd0ZW1wJylcbiAgICAgICAgICAgIGNsaWVudC5pcy5maXJlZm94ID09PSB0cnVlICYmIHByZXZlbnREcmFnZ2FibGUoZWwsIGZhbHNlKVxuXG4gICAgICAgICAgICBpZiAoYWJvcnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgY3R4LnN0eWxlQ2xlYW51cCAhPT0gdm9pZCAwICYmIGN0eC5zdHlsZUNsZWFudXAoKVxuXG4gICAgICAgICAgICAgIGlmIChjdHguZXZlbnQuZGV0ZWN0ZWQgIT09IHRydWUgJiYgY3R4LmluaXRpYWxFdmVudCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgY3R4LmluaXRpYWxFdmVudC50YXJnZXQuZGlzcGF0Y2hFdmVudChjdHguaW5pdGlhbEV2ZW50LmV2ZW50KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjdHguZXZlbnQuZGV0ZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgY3R4LmV2ZW50LmlzRmlyc3QgPT09IHRydWUgJiYgY3R4LmhhbmRsZXIoZ2V0Q2hhbmdlcyhldnQgPT09IHZvaWQgMCA/IGN0eC5sYXN0RXZ0IDogZXZ0LCBjdHgpLnBheWxvYWQpXG5cbiAgICAgICAgICAgICAgY29uc3QgeyBwYXlsb2FkIH0gPSBnZXRDaGFuZ2VzKGV2dCA9PT0gdm9pZCAwID8gY3R4Lmxhc3RFdnQgOiBldnQsIGN0eCwgdHJ1ZSlcbiAgICAgICAgICAgICAgY29uc3QgZm4gPSAoKSA9PiB7IGN0eC5oYW5kbGVyKHBheWxvYWQpIH1cblxuICAgICAgICAgICAgICBpZiAoY3R4LnN0eWxlQ2xlYW51cCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgY3R4LnN0eWxlQ2xlYW51cChmbilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmbigpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3R4LmV2ZW50ID0gdm9pZCAwXG4gICAgICAgICAgICBjdHguaW5pdGlhbEV2ZW50ID0gdm9pZCAwXG4gICAgICAgICAgICBjdHgubGFzdEV2dCA9IHZvaWQgMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGVsLl9fcXRvdWNocGFuID0gY3R4XG5cbiAgICAgICAgaWYgKG1vZGlmaWVycy5tb3VzZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIC8vIGFjY291bnQgZm9yIFVNRCB0b28gd2hlcmUgbW9kaWZpZXJzIHdpbGwgYmUgbG93ZXJjYXNlZCB0byB3b3JrXG4gICAgICAgICAgY29uc3QgY2FwdHVyZSA9IG1vZGlmaWVycy5tb3VzZUNhcHR1cmUgPT09IHRydWUgfHwgbW9kaWZpZXJzLm1vdXNlY2FwdHVyZSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyAnQ2FwdHVyZSdcbiAgICAgICAgICAgIDogJydcblxuICAgICAgICAgIGFkZEV2dChjdHgsICdtYWluJywgW1xuICAgICAgICAgICAgWyBlbCwgJ21vdXNlZG93bicsICdtb3VzZVN0YXJ0JywgYHBhc3NpdmUkeyBjYXB0dXJlIH1gIF1cbiAgICAgICAgICBdKVxuICAgICAgICB9XG5cbiAgICAgICAgY2xpZW50Lmhhcy50b3VjaCA9PT0gdHJ1ZSAmJiBhZGRFdnQoY3R4LCAnbWFpbicsIFtcbiAgICAgICAgICBbIGVsLCAndG91Y2hzdGFydCcsICd0b3VjaFN0YXJ0JywgYHBhc3NpdmUkeyBtb2RpZmllcnMuY2FwdHVyZSA9PT0gdHJ1ZSA/ICdDYXB0dXJlJyA6ICcnIH1gIF0sXG4gICAgICAgICAgWyBlbCwgJ3RvdWNobW92ZScsICdub29wJywgJ25vdFBhc3NpdmVDYXB0dXJlJyBdIC8vIGNhbm5vdCBiZSBwYXNzaXZlIChleDogaU9TIHNjcm9sbClcbiAgICAgICAgXSlcbiAgICAgIH0sXG5cbiAgICAgIHVwZGF0ZWQgKGVsLCBiaW5kaW5ncykge1xuICAgICAgICBjb25zdCBjdHggPSBlbC5fX3F0b3VjaHBhblxuXG4gICAgICAgIGlmIChjdHggIT09IHZvaWQgMCkge1xuICAgICAgICAgIGlmIChiaW5kaW5ncy5vbGRWYWx1ZSAhPT0gYmluZGluZ3MudmFsdWUpIHtcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiBjdHguZW5kKClcbiAgICAgICAgICAgIGN0eC5oYW5kbGVyID0gYmluZGluZ3MudmFsdWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdHguZGlyZWN0aW9uID0gZ2V0TW9kaWZpZXJEaXJlY3Rpb25zKGJpbmRpbmdzLm1vZGlmaWVycylcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgYmVmb3JlVW5tb3VudCAoZWwpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gZWwuX19xdG91Y2hwYW5cblxuICAgICAgICBpZiAoY3R4ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAvLyBlbWl0IHRoZSBlbmQgZXZlbnQgd2hlbiB0aGUgZGlyZWN0aXZlIGlzIGRlc3Ryb3llZCB3aGlsZSBhY3RpdmVcbiAgICAgICAgICAvLyB0aGlzIGlzIG9ubHkgbmVlZGVkIGluIFRvdWNoUGFuIGJlY2F1c2UgdGhlIHJlc3Qgb2YgdGhlIHRvdWNoIGRpcmVjdGl2ZXMgZG8gbm90IGVtaXQgYW4gZW5kIGV2ZW50XG4gICAgICAgICAgLy8gdGhlIGNvbmRpdGlvbiBpcyBhbHNvIGNoZWNrZWQgaW4gdGhlIHN0YXJ0IG9mIGZ1bmN0aW9uIGJ1dCB3ZSBhdm9pZCB0aGUgY2FsbFxuICAgICAgICAgIGN0eC5ldmVudCAhPT0gdm9pZCAwICYmIGN0eC5lbmQoKVxuXG4gICAgICAgICAgY2xlYW5FdnQoY3R4LCAnbWFpbicpXG4gICAgICAgICAgY2xlYW5FdnQoY3R4LCAndGVtcCcpXG5cbiAgICAgICAgICBjbGllbnQuaXMuZmlyZWZveCA9PT0gdHJ1ZSAmJiBwcmV2ZW50RHJhZ2dhYmxlKGVsLCBmYWxzZSlcbiAgICAgICAgICBjdHguc3R5bGVDbGVhbnVwICE9PSB2b2lkIDAgJiYgY3R4LnN0eWxlQ2xlYW51cCgpXG5cbiAgICAgICAgICBkZWxldGUgZWwuX19xdG91Y2hwYW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbilcbiIsImNvbnN0IHVuaXRzID0gWyAnQicsICdLQicsICdNQicsICdHQicsICdUQicsICdQQicgXVxuXG5leHBvcnQgZnVuY3Rpb24gaHVtYW5TdG9yYWdlU2l6ZSAoYnl0ZXMpIHtcbiAgbGV0IHUgPSAwXG5cbiAgd2hpbGUgKHBhcnNlSW50KGJ5dGVzLCAxMCkgPj0gMTAyNCAmJiB1IDwgdW5pdHMubGVuZ3RoIC0gMSkge1xuICAgIGJ5dGVzIC89IDEwMjRcbiAgICArK3VcbiAgfVxuXG4gIHJldHVybiBgJHsgYnl0ZXMudG9GaXhlZCgxKSB9JHsgdW5pdHNbIHUgXSB9YFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZSAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJldHdlZW4gKHYsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBtYXggPD0gbWluXG4gICAgPyBtaW5cbiAgICA6IE1hdGgubWluKG1heCwgTWF0aC5tYXgobWluLCB2KSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvSW50ZXJ2YWwgKHYsIG1pbiwgbWF4KSB7XG4gIGlmIChtYXggPD0gbWluKSB7XG4gICAgcmV0dXJuIG1pblxuICB9XG5cbiAgY29uc3Qgc2l6ZSA9IChtYXggLSBtaW4gKyAxKVxuXG4gIGxldCBpbmRleCA9IG1pbiArICh2IC0gbWluKSAlIHNpemVcbiAgaWYgKGluZGV4IDwgbWluKSB7XG4gICAgaW5kZXggPSBzaXplICsgaW5kZXhcbiAgfVxuXG4gIHJldHVybiBpbmRleCA9PT0gMCA/IDAgOiBpbmRleCAvLyBmaXggZm9yICgtYSAlIGEpID0+IC0wXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWQgKHYsIGxlbmd0aCA9IDIsIGNoYXIgPSAnMCcpIHtcbiAgaWYgKHYgPT09IHZvaWQgMCB8fCB2ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHZcbiAgfVxuXG4gIGNvbnN0IHZhbCA9ICcnICsgdlxuICByZXR1cm4gdmFsLmxlbmd0aCA+PSBsZW5ndGhcbiAgICA/IHZhbFxuICAgIDogbmV3IEFycmF5KGxlbmd0aCAtIHZhbC5sZW5ndGggKyAxKS5qb2luKGNoYXIpICsgdmFsXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaHVtYW5TdG9yYWdlU2l6ZSxcbiAgY2FwaXRhbGl6ZSxcbiAgYmV0d2VlbixcbiAgbm9ybWFsaXplVG9JbnRlcnZhbCxcbiAgcGFkXG59XG4iLCJpbXBvcnQgeyBoLCB3aXRoRGlyZWN0aXZlcywgcmVmLCBjb21wdXRlZCwgd2F0Y2gsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50LCBuZXh0VGljaywgaW5qZWN0LCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB1c2VIaXN0b3J5IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUvdXNlLWhpc3RvcnkuanMnXG5pbXBvcnQgdXNlTW9kZWxUb2dnbGUsIHsgdXNlTW9kZWxUb2dnbGVQcm9wcywgdXNlTW9kZWxUb2dnbGVFbWl0cyB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUvdXNlLW1vZGVsLXRvZ2dsZS5qcydcbmltcG9ydCB1c2VQcmV2ZW50U2Nyb2xsIGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL3ByaXZhdGUvdXNlLXByZXZlbnQtc2Nyb2xsLmpzJ1xuaW1wb3J0IHVzZVRpbWVvdXQgZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdXNlLXRpbWVvdXQuanMnXG5pbXBvcnQgdXNlRGFyaywgeyB1c2VEYXJrUHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wcml2YXRlL3VzZS1kYXJrLmpzJ1xuXG5pbXBvcnQgVG91Y2hQYW4gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9Ub3VjaFBhbi5qcydcblxuaW1wb3J0IHsgY3JlYXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9jcmVhdGUuanMnXG5pbXBvcnQgeyBiZXR3ZWVuIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9ybWF0LmpzJ1xuaW1wb3J0IHsgaFNsb3QsIGhEaXIgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL3JlbmRlci5qcydcbmltcG9ydCB7IGxheW91dEtleSwgZW1wdHlSZW5kZXJGbiB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvc3ltYm9scy5qcydcblxuY29uc3QgZHVyYXRpb24gPSAxNTBcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG9uZW50KHtcbiAgbmFtZTogJ1FEcmF3ZXInLFxuXG4gIGluaGVyaXRBdHRyczogZmFsc2UsXG5cbiAgcHJvcHM6IHtcbiAgICAuLi51c2VNb2RlbFRvZ2dsZVByb3BzLFxuICAgIC4uLnVzZURhcmtQcm9wcyxcblxuICAgIHNpZGU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdsZWZ0JyxcbiAgICAgIHZhbGlkYXRvcjogdiA9PiBbICdsZWZ0JywgJ3JpZ2h0JyBdLmluY2x1ZGVzKHYpXG4gICAgfSxcblxuICAgIHdpZHRoOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAzMDBcbiAgICB9LFxuXG4gICAgbWluaTogQm9vbGVhbixcbiAgICBtaW5pVG9PdmVybGF5OiBCb29sZWFuLFxuICAgIG1pbmlXaWR0aDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogNTdcbiAgICB9LFxuICAgIG5vTWluaUFuaW1hdGlvbjogQm9vbGVhbixcblxuICAgIGJyZWFrcG9pbnQ6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDEwMjNcbiAgICB9LFxuICAgIHNob3dJZkFib3ZlOiBCb29sZWFuLFxuXG4gICAgYmVoYXZpb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbGlkYXRvcjogdiA9PiBbICdkZWZhdWx0JywgJ2Rlc2t0b3AnLCAnbW9iaWxlJyBdLmluY2x1ZGVzKHYpLFxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnXG4gICAgfSxcblxuICAgIGJvcmRlcmVkOiBCb29sZWFuLFxuICAgIGVsZXZhdGVkOiBCb29sZWFuLFxuXG4gICAgb3ZlcmxheTogQm9vbGVhbixcbiAgICBwZXJzaXN0ZW50OiBCb29sZWFuLFxuICAgIG5vU3dpcGVPcGVuOiBCb29sZWFuLFxuICAgIG5vU3dpcGVDbG9zZTogQm9vbGVhbixcbiAgICBub1N3aXBlQmFja2Ryb3A6IEJvb2xlYW5cbiAgfSxcblxuICBlbWl0czogW1xuICAgIC4uLnVzZU1vZGVsVG9nZ2xlRW1pdHMsXG4gICAgJ29uTGF5b3V0JywgJ21pbmlTdGF0ZSdcbiAgXSxcblxuICBzZXR1cCAocHJvcHMsIHsgc2xvdHMsIGVtaXQsIGF0dHJzIH0pIHtcbiAgICBjb25zdCB2bSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG4gICAgY29uc3QgeyBwcm94eTogeyAkcSB9IH0gPSB2bVxuXG4gICAgY29uc3QgaXNEYXJrID0gdXNlRGFyayhwcm9wcywgJHEpXG4gICAgY29uc3QgeyBwcmV2ZW50Qm9keVNjcm9sbCB9ID0gdXNlUHJldmVudFNjcm9sbCgpXG4gICAgY29uc3QgeyByZWdpc3RlclRpbWVvdXQsIHJlbW92ZVRpbWVvdXQgfSA9IHVzZVRpbWVvdXQoKVxuXG4gICAgY29uc3QgJGxheW91dCA9IGluamVjdChsYXlvdXRLZXksIGVtcHR5UmVuZGVyRm4pXG4gICAgaWYgKCRsYXlvdXQgPT09IGVtcHR5UmVuZGVyRm4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1FEcmF3ZXIgbmVlZHMgdG8gYmUgY2hpbGQgb2YgUUxheW91dCcpXG4gICAgICByZXR1cm4gZW1wdHlSZW5kZXJGblxuICAgIH1cblxuICAgIGxldCBsYXN0RGVza3RvcFN0YXRlLCB0aW1lck1pbmkgPSBudWxsLCBsYXlvdXRUb3RhbFdpZHRoV2F0Y2hlclxuXG4gICAgY29uc3QgYmVsb3dCcmVha3BvaW50ID0gcmVmKFxuICAgICAgcHJvcHMuYmVoYXZpb3IgPT09ICdtb2JpbGUnXG4gICAgICB8fCAocHJvcHMuYmVoYXZpb3IgIT09ICdkZXNrdG9wJyAmJiAkbGF5b3V0LnRvdGFsV2lkdGgudmFsdWUgPD0gcHJvcHMuYnJlYWtwb2ludClcbiAgICApXG5cbiAgICBjb25zdCBpc01pbmkgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgcHJvcHMubWluaSA9PT0gdHJ1ZSAmJiBiZWxvd0JyZWFrcG9pbnQudmFsdWUgIT09IHRydWVcbiAgICApXG5cbiAgICBjb25zdCBzaXplID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgICAgaXNNaW5pLnZhbHVlID09PSB0cnVlXG4gICAgICAgID8gcHJvcHMubWluaVdpZHRoXG4gICAgICAgIDogcHJvcHMud2lkdGhcbiAgICApKVxuXG4gICAgY29uc3Qgc2hvd2luZyA9IHJlZihcbiAgICAgIHByb3BzLnNob3dJZkFib3ZlID09PSB0cnVlICYmIGJlbG93QnJlYWtwb2ludC52YWx1ZSA9PT0gZmFsc2VcbiAgICAgICAgPyB0cnVlXG4gICAgICAgIDogcHJvcHMubW9kZWxWYWx1ZSA9PT0gdHJ1ZVxuICAgIClcblxuICAgIGNvbnN0IGhpZGVPblJvdXRlQ2hhbmdlID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIHByb3BzLnBlcnNpc3RlbnQgIT09IHRydWVcbiAgICAgICYmIChiZWxvd0JyZWFrcG9pbnQudmFsdWUgPT09IHRydWUgfHwgb25TY3JlZW5PdmVybGF5LnZhbHVlID09PSB0cnVlKVxuICAgIClcblxuICAgIGZ1bmN0aW9uIGhhbmRsZVNob3cgKGV2dCwgbm9FdmVudCkge1xuICAgICAgYWRkVG9IaXN0b3J5KClcblxuICAgICAgZXZ0ICE9PSBmYWxzZSAmJiAkbGF5b3V0LmFuaW1hdGUoKVxuICAgICAgYXBwbHlQb3NpdGlvbigwKVxuXG4gICAgICBpZiAoYmVsb3dCcmVha3BvaW50LnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IG90aGVySW5zdGFuY2UgPSAkbGF5b3V0Lmluc3RhbmNlc1sgb3RoZXJTaWRlLnZhbHVlIF1cbiAgICAgICAgaWYgKG90aGVySW5zdGFuY2UgIT09IHZvaWQgMCAmJiBvdGhlckluc3RhbmNlLmJlbG93QnJlYWtwb2ludCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIG90aGVySW5zdGFuY2UuaGlkZShmYWxzZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcGx5QmFja2Ryb3AoMSlcbiAgICAgICAgJGxheW91dC5pc0NvbnRhaW5lci52YWx1ZSAhPT0gdHJ1ZSAmJiBwcmV2ZW50Qm9keVNjcm9sbCh0cnVlKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGFwcGx5QmFja2Ryb3AoMClcbiAgICAgICAgZXZ0ICE9PSBmYWxzZSAmJiBzZXRTY3JvbGxhYmxlKGZhbHNlKVxuICAgICAgfVxuXG4gICAgICByZWdpc3RlclRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBldnQgIT09IGZhbHNlICYmIHNldFNjcm9sbGFibGUodHJ1ZSlcbiAgICAgICAgbm9FdmVudCAhPT0gdHJ1ZSAmJiBlbWl0KCdzaG93JywgZXZ0KVxuICAgICAgfSwgZHVyYXRpb24pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlSGlkZSAoZXZ0LCBub0V2ZW50KSB7XG4gICAgICByZW1vdmVGcm9tSGlzdG9yeSgpXG5cbiAgICAgIGV2dCAhPT0gZmFsc2UgJiYgJGxheW91dC5hbmltYXRlKClcblxuICAgICAgYXBwbHlCYWNrZHJvcCgwKVxuICAgICAgYXBwbHlQb3NpdGlvbihzdGF0ZURpcmVjdGlvbi52YWx1ZSAqIHNpemUudmFsdWUpXG5cbiAgICAgIGNsZWFudXAoKVxuXG4gICAgICBpZiAobm9FdmVudCAhPT0gdHJ1ZSkge1xuICAgICAgICByZWdpc3RlclRpbWVvdXQoKCkgPT4geyBlbWl0KCdoaWRlJywgZXZ0KSB9LCBkdXJhdGlvbilcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZW1vdmVUaW1lb3V0KClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB7IHNob3csIGhpZGUgfSA9IHVzZU1vZGVsVG9nZ2xlKHtcbiAgICAgIHNob3dpbmcsXG4gICAgICBoaWRlT25Sb3V0ZUNoYW5nZSxcbiAgICAgIGhhbmRsZVNob3csXG4gICAgICBoYW5kbGVIaWRlXG4gICAgfSlcblxuICAgIGNvbnN0IHsgYWRkVG9IaXN0b3J5LCByZW1vdmVGcm9tSGlzdG9yeSB9ID0gdXNlSGlzdG9yeShzaG93aW5nLCBoaWRlLCBoaWRlT25Sb3V0ZUNoYW5nZSlcblxuICAgIGNvbnN0IGluc3RhbmNlID0ge1xuICAgICAgYmVsb3dCcmVha3BvaW50LFxuICAgICAgaGlkZVxuICAgIH1cblxuICAgIGNvbnN0IHJpZ2h0U2lkZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnNpZGUgPT09ICdyaWdodCcpXG5cbiAgICBjb25zdCBzdGF0ZURpcmVjdGlvbiA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAoJHEubGFuZy5ydGwgPT09IHRydWUgPyAtMSA6IDEpICogKHJpZ2h0U2lkZS52YWx1ZSA9PT0gdHJ1ZSA/IDEgOiAtMSlcbiAgICApXG5cbiAgICBjb25zdCBmbGFnQmFja2Ryb3BCZyA9IHJlZigwKVxuICAgIGNvbnN0IGZsYWdQYW5uaW5nID0gcmVmKGZhbHNlKVxuICAgIGNvbnN0IGZsYWdNaW5pQW5pbWF0ZSA9IHJlZihmYWxzZSlcbiAgICBjb25zdCBmbGFnQ29udGVudFBvc2l0aW9uID0gcmVmKCAvLyBzdGFydGluZyB3aXRoIFwiaGlkZGVuXCIgZm9yIFNTUlxuICAgICAgc2l6ZS52YWx1ZSAqIHN0YXRlRGlyZWN0aW9uLnZhbHVlXG4gICAgKVxuXG4gICAgY29uc3Qgb3RoZXJTaWRlID0gY29tcHV0ZWQoKCkgPT4gKHJpZ2h0U2lkZS52YWx1ZSA9PT0gdHJ1ZSA/ICdsZWZ0JyA6ICdyaWdodCcpKVxuICAgIGNvbnN0IG9mZnNldCA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHNob3dpbmcudmFsdWUgPT09IHRydWUgJiYgYmVsb3dCcmVha3BvaW50LnZhbHVlID09PSBmYWxzZSAmJiBwcm9wcy5vdmVybGF5ID09PSBmYWxzZVxuICAgICAgICA/IChwcm9wcy5taW5pVG9PdmVybGF5ID09PSB0cnVlID8gcHJvcHMubWluaVdpZHRoIDogc2l6ZS52YWx1ZSlcbiAgICAgICAgOiAwXG4gICAgKSlcblxuICAgIGNvbnN0IGZpeGVkID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIHByb3BzLm92ZXJsYXkgPT09IHRydWVcbiAgICAgIHx8IHByb3BzLm1pbmlUb092ZXJsYXkgPT09IHRydWVcbiAgICAgIHx8ICRsYXlvdXQudmlldy52YWx1ZS5pbmRleE9mKHJpZ2h0U2lkZS52YWx1ZSA/ICdSJyA6ICdMJykgIT09IC0xXG4gICAgICB8fCAoJHEucGxhdGZvcm0uaXMuaW9zID09PSB0cnVlICYmICRsYXlvdXQuaXNDb250YWluZXIudmFsdWUgPT09IHRydWUpXG4gICAgKVxuXG4gICAgY29uc3Qgb25MYXlvdXQgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgcHJvcHMub3ZlcmxheSA9PT0gZmFsc2VcbiAgICAgICYmIHNob3dpbmcudmFsdWUgPT09IHRydWVcbiAgICAgICYmIGJlbG93QnJlYWtwb2ludC52YWx1ZSA9PT0gZmFsc2VcbiAgICApXG5cbiAgICBjb25zdCBvblNjcmVlbk92ZXJsYXkgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgcHJvcHMub3ZlcmxheSA9PT0gdHJ1ZVxuICAgICAgJiYgc2hvd2luZy52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgJiYgYmVsb3dCcmVha3BvaW50LnZhbHVlID09PSBmYWxzZVxuICAgIClcblxuICAgIGNvbnN0IGJhY2tkcm9wQ2xhc3MgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgJ2Z1bGxzY3JlZW4gcS1kcmF3ZXJfX2JhY2tkcm9wJ1xuICAgICAgKyAoc2hvd2luZy52YWx1ZSA9PT0gZmFsc2UgJiYgZmxhZ1Bhbm5pbmcudmFsdWUgPT09IGZhbHNlID8gJyBoaWRkZW4nIDogJycpXG4gICAgKVxuXG4gICAgY29uc3QgYmFja2Ryb3BTdHlsZSA9IGNvbXB1dGVkKCgpID0+ICh7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGByZ2JhKDAsMCwwLCR7IGZsYWdCYWNrZHJvcEJnLnZhbHVlICogMC40IH0pYFxuICAgIH0pKVxuXG4gICAgY29uc3QgaGVhZGVyU2xvdCA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHJpZ2h0U2lkZS52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICA/ICRsYXlvdXQucm93cy52YWx1ZS50b3BbIDIgXSA9PT0gJ3InXG4gICAgICAgIDogJGxheW91dC5yb3dzLnZhbHVlLnRvcFsgMCBdID09PSAnbCdcbiAgICApKVxuXG4gICAgY29uc3QgZm9vdGVyU2xvdCA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHJpZ2h0U2lkZS52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICA/ICRsYXlvdXQucm93cy52YWx1ZS5ib3R0b21bIDIgXSA9PT0gJ3InXG4gICAgICAgIDogJGxheW91dC5yb3dzLnZhbHVlLmJvdHRvbVsgMCBdID09PSAnbCdcbiAgICApKVxuXG4gICAgY29uc3QgYWJvdmVTdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGNzcyA9IHt9XG5cbiAgICAgIGlmICgkbGF5b3V0LmhlYWRlci5zcGFjZSA9PT0gdHJ1ZSAmJiBoZWFkZXJTbG90LnZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBpZiAoZml4ZWQudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICBjc3MudG9wID0gYCR7ICRsYXlvdXQuaGVhZGVyLm9mZnNldCB9cHhgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJGxheW91dC5oZWFkZXIuc3BhY2UgPT09IHRydWUpIHtcbiAgICAgICAgICBjc3MudG9wID0gYCR7ICRsYXlvdXQuaGVhZGVyLnNpemUgfXB4YFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgkbGF5b3V0LmZvb3Rlci5zcGFjZSA9PT0gdHJ1ZSAmJiBmb290ZXJTbG90LnZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBpZiAoZml4ZWQudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICBjc3MuYm90dG9tID0gYCR7ICRsYXlvdXQuZm9vdGVyLm9mZnNldCB9cHhgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJGxheW91dC5mb290ZXIuc3BhY2UgPT09IHRydWUpIHtcbiAgICAgICAgICBjc3MuYm90dG9tID0gYCR7ICRsYXlvdXQuZm9vdGVyLnNpemUgfXB4YFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjc3NcbiAgICB9KVxuXG4gICAgY29uc3Qgc3R5bGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6IGAkeyBzaXplLnZhbHVlIH1weGAsXG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZVgoJHsgZmxhZ0NvbnRlbnRQb3NpdGlvbi52YWx1ZSB9cHgpYFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYmVsb3dCcmVha3BvaW50LnZhbHVlID09PSB0cnVlXG4gICAgICAgID8gc3R5bGVcbiAgICAgICAgOiBPYmplY3QuYXNzaWduKHN0eWxlLCBhYm92ZVN0eWxlLnZhbHVlKVxuICAgIH0pXG5cbiAgICBjb25zdCBjb250ZW50Q2xhc3MgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgJ3EtZHJhd2VyX19jb250ZW50IGZpdCAnXG4gICAgICArICgkbGF5b3V0LmlzQ29udGFpbmVyLnZhbHVlICE9PSB0cnVlID8gJ3Njcm9sbCcgOiAnb3ZlcmZsb3ctYXV0bycpXG4gICAgKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICBgcS1kcmF3ZXIgcS1kcmF3ZXItLSR7IHByb3BzLnNpZGUgfWBcbiAgICAgICsgKGZsYWdNaW5pQW5pbWF0ZS52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1kcmF3ZXItLW1pbmktYW5pbWF0ZScgOiAnJylcbiAgICAgICsgKHByb3BzLmJvcmRlcmVkID09PSB0cnVlID8gJyBxLWRyYXdlci0tYm9yZGVyZWQnIDogJycpXG4gICAgICArIChpc0RhcmsudmFsdWUgPT09IHRydWUgPyAnIHEtZHJhd2VyLS1kYXJrIHEtZGFyaycgOiAnJylcbiAgICAgICsgKFxuICAgICAgICBmbGFnUGFubmluZy52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICAgID8gJyBuby10cmFuc2l0aW9uJ1xuICAgICAgICAgIDogKHNob3dpbmcudmFsdWUgPT09IHRydWUgPyAnJyA6ICcgcS1sYXlvdXQtLXByZXZlbnQtZm9jdXMnKVxuICAgICAgKVxuICAgICAgKyAoXG4gICAgICAgIGJlbG93QnJlYWtwb2ludC52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICAgID8gJyBmaXhlZCBxLWRyYXdlci0tb24tdG9wIHEtZHJhd2VyLS1tb2JpbGUgcS1kcmF3ZXItLXRvcC1wYWRkaW5nJ1xuICAgICAgICAgIDogYCBxLWRyYXdlci0tJHsgaXNNaW5pLnZhbHVlID09PSB0cnVlID8gJ21pbmknIDogJ3N0YW5kYXJkJyB9YFxuICAgICAgICAgICsgKGZpeGVkLnZhbHVlID09PSB0cnVlIHx8IG9uTGF5b3V0LnZhbHVlICE9PSB0cnVlID8gJyBmaXhlZCcgOiAnJylcbiAgICAgICAgICArIChwcm9wcy5vdmVybGF5ID09PSB0cnVlIHx8IHByb3BzLm1pbmlUb092ZXJsYXkgPT09IHRydWUgPyAnIHEtZHJhd2VyLS1vbi10b3AnIDogJycpXG4gICAgICAgICAgKyAoaGVhZGVyU2xvdC52YWx1ZSA9PT0gdHJ1ZSA/ICcgcS1kcmF3ZXItLXRvcC1wYWRkaW5nJyA6ICcnKVxuICAgICAgKVxuICAgIClcblxuICAgIGNvbnN0IG9wZW5EaXJlY3RpdmUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAvLyBpZiBwcm9wcy5ub1N3aXBlT3BlbiAhPT0gdHJ1ZVxuICAgICAgY29uc3QgZGlyID0gJHEubGFuZy5ydGwgPT09IHRydWUgPyBwcm9wcy5zaWRlIDogb3RoZXJTaWRlLnZhbHVlXG5cbiAgICAgIHJldHVybiBbIFtcbiAgICAgICAgVG91Y2hQYW4sXG4gICAgICAgIG9uT3BlblBhbixcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICB7XG4gICAgICAgICAgWyBkaXIgXTogdHJ1ZSxcbiAgICAgICAgICBtb3VzZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdIF1cbiAgICB9KVxuXG4gICAgY29uc3QgY29udGVudENsb3NlRGlyZWN0aXZlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgLy8gaWYgYmVsb3dCcmVha3BvaW50LnZhbHVlID09PSB0cnVlICYmIHByb3BzLm5vU3dpcGVDbG9zZSAhPT0gdHJ1ZVxuICAgICAgY29uc3QgZGlyID0gJHEubGFuZy5ydGwgPT09IHRydWUgPyBvdGhlclNpZGUudmFsdWUgOiBwcm9wcy5zaWRlXG5cbiAgICAgIHJldHVybiBbIFtcbiAgICAgICAgVG91Y2hQYW4sXG4gICAgICAgIG9uQ2xvc2VQYW4sXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAge1xuICAgICAgICAgIFsgZGlyIF06IHRydWUsXG4gICAgICAgICAgbW91c2U6IHRydWVcbiAgICAgICAgfVxuICAgICAgXSBdXG4gICAgfSlcblxuICAgIGNvbnN0IGJhY2tkcm9wQ2xvc2VEaXJlY3RpdmUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAvLyBpZiBzaG93aW5nLnZhbHVlID09PSB0cnVlICYmIHByb3BzLm5vU3dpcGVCYWNrZHJvcCAhPT0gdHJ1ZVxuICAgICAgY29uc3QgZGlyID0gJHEubGFuZy5ydGwgPT09IHRydWUgPyBvdGhlclNpZGUudmFsdWUgOiBwcm9wcy5zaWRlXG5cbiAgICAgIHJldHVybiBbIFtcbiAgICAgICAgVG91Y2hQYW4sXG4gICAgICAgIG9uQ2xvc2VQYW4sXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAge1xuICAgICAgICAgIFsgZGlyIF06IHRydWUsXG4gICAgICAgICAgbW91c2U6IHRydWUsXG4gICAgICAgICAgbW91c2VBbGxEaXI6IHRydWVcbiAgICAgICAgfVxuICAgICAgXSBdXG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUJlbG93QnJlYWtwb2ludCAoKSB7XG4gICAgICB1cGRhdGVMb2NhbChiZWxvd0JyZWFrcG9pbnQsIChcbiAgICAgICAgcHJvcHMuYmVoYXZpb3IgPT09ICdtb2JpbGUnXG4gICAgICAgIHx8IChwcm9wcy5iZWhhdmlvciAhPT0gJ2Rlc2t0b3AnICYmICRsYXlvdXQudG90YWxXaWR0aC52YWx1ZSA8PSBwcm9wcy5icmVha3BvaW50KVxuICAgICAgKSlcbiAgICB9XG5cbiAgICB3YXRjaChiZWxvd0JyZWFrcG9pbnQsIHZhbCA9PiB7XG4gICAgICBpZiAodmFsID09PSB0cnVlKSB7IC8vIGZyb20gbGcgdG8geHNcbiAgICAgICAgbGFzdERlc2t0b3BTdGF0ZSA9IHNob3dpbmcudmFsdWVcbiAgICAgICAgc2hvd2luZy52YWx1ZSA9PT0gdHJ1ZSAmJiBoaWRlKGZhbHNlKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXG4gICAgICAgIHByb3BzLm92ZXJsYXkgPT09IGZhbHNlXG4gICAgICAgICYmIHByb3BzLmJlaGF2aW9yICE9PSAnbW9iaWxlJ1xuICAgICAgICAmJiBsYXN0RGVza3RvcFN0YXRlICE9PSBmYWxzZVxuICAgICAgKSB7IC8vIGZyb20geHMgdG8gbGdcbiAgICAgICAgaWYgKHNob3dpbmcudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICBhcHBseVBvc2l0aW9uKDApXG4gICAgICAgICAgYXBwbHlCYWNrZHJvcCgwKVxuICAgICAgICAgIGNsZWFudXAoKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNob3coZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuc2lkZSwgKG5ld1NpZGUsIG9sZFNpZGUpID0+IHtcbiAgICAgIGlmICgkbGF5b3V0Lmluc3RhbmNlc1sgb2xkU2lkZSBdID09PSBpbnN0YW5jZSkge1xuICAgICAgICAkbGF5b3V0Lmluc3RhbmNlc1sgb2xkU2lkZSBdID0gdm9pZCAwXG4gICAgICAgICRsYXlvdXRbIG9sZFNpZGUgXS5zcGFjZSA9IGZhbHNlXG4gICAgICAgICRsYXlvdXRbIG9sZFNpZGUgXS5vZmZzZXQgPSAwXG4gICAgICB9XG5cbiAgICAgICRsYXlvdXQuaW5zdGFuY2VzWyBuZXdTaWRlIF0gPSBpbnN0YW5jZVxuICAgICAgJGxheW91dFsgbmV3U2lkZSBdLnNpemUgPSBzaXplLnZhbHVlXG4gICAgICAkbGF5b3V0WyBuZXdTaWRlIF0uc3BhY2UgPSBvbkxheW91dC52YWx1ZVxuICAgICAgJGxheW91dFsgbmV3U2lkZSBdLm9mZnNldCA9IG9mZnNldC52YWx1ZVxuICAgIH0pXG5cbiAgICB3YXRjaCgkbGF5b3V0LnRvdGFsV2lkdGgsICgpID0+IHtcbiAgICAgIGlmICgkbGF5b3V0LmlzQ29udGFpbmVyLnZhbHVlID09PSB0cnVlIHx8IGRvY3VtZW50LnFTY3JvbGxQcmV2ZW50ZWQgIT09IHRydWUpIHtcbiAgICAgICAgdXBkYXRlQmVsb3dCcmVha3BvaW50KClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBwcm9wcy5iZWhhdmlvciArIHByb3BzLmJyZWFrcG9pbnQsXG4gICAgICB1cGRhdGVCZWxvd0JyZWFrcG9pbnRcbiAgICApXG5cbiAgICB3YXRjaCgkbGF5b3V0LmlzQ29udGFpbmVyLCB2YWwgPT4ge1xuICAgICAgc2hvd2luZy52YWx1ZSA9PT0gdHJ1ZSAmJiBwcmV2ZW50Qm9keVNjcm9sbCh2YWwgIT09IHRydWUpXG4gICAgICB2YWwgPT09IHRydWUgJiYgdXBkYXRlQmVsb3dCcmVha3BvaW50KClcbiAgICB9KVxuXG4gICAgd2F0Y2goJGxheW91dC5zY3JvbGxiYXJXaWR0aCwgKCkgPT4ge1xuICAgICAgYXBwbHlQb3NpdGlvbihzaG93aW5nLnZhbHVlID09PSB0cnVlID8gMCA6IHZvaWQgMClcbiAgICB9KVxuXG4gICAgd2F0Y2gob2Zmc2V0LCB2YWwgPT4geyB1cGRhdGVMYXlvdXQoJ29mZnNldCcsIHZhbCkgfSlcblxuICAgIHdhdGNoKG9uTGF5b3V0LCB2YWwgPT4ge1xuICAgICAgZW1pdCgnb25MYXlvdXQnLCB2YWwpXG4gICAgICB1cGRhdGVMYXlvdXQoJ3NwYWNlJywgdmFsKVxuICAgIH0pXG5cbiAgICB3YXRjaChyaWdodFNpZGUsICgpID0+IHsgYXBwbHlQb3NpdGlvbigpIH0pXG5cbiAgICB3YXRjaChzaXplLCB2YWwgPT4ge1xuICAgICAgYXBwbHlQb3NpdGlvbigpXG4gICAgICB1cGRhdGVTaXplT25MYXlvdXQocHJvcHMubWluaVRvT3ZlcmxheSwgdmFsKVxuICAgIH0pXG5cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5taW5pVG9PdmVybGF5LCB2YWwgPT4ge1xuICAgICAgdXBkYXRlU2l6ZU9uTGF5b3V0KHZhbCwgc2l6ZS52YWx1ZSlcbiAgICB9KVxuXG4gICAgd2F0Y2goKCkgPT4gJHEubGFuZy5ydGwsICgpID0+IHsgYXBwbHlQb3NpdGlvbigpIH0pXG5cbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5taW5pLCAoKSA9PiB7XG4gICAgICBpZiAocHJvcHMubm9NaW5pQW5pbWF0aW9uKSByZXR1cm5cbiAgICAgIGlmIChwcm9wcy5tb2RlbFZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGFuaW1hdGVNaW5pKClcbiAgICAgICAgJGxheW91dC5hbmltYXRlKClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgd2F0Y2goaXNNaW5pLCB2YWwgPT4geyBlbWl0KCdtaW5pU3RhdGUnLCB2YWwpIH0pXG5cbiAgICBmdW5jdGlvbiBhcHBseVBvc2l0aW9uIChwb3NpdGlvbikge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSB2b2lkIDApIHtcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHBvc2l0aW9uID0gc2hvd2luZy52YWx1ZSA9PT0gdHJ1ZSA/IDAgOiBzaXplLnZhbHVlXG4gICAgICAgICAgYXBwbHlQb3NpdGlvbihzdGF0ZURpcmVjdGlvbi52YWx1ZSAqIHBvc2l0aW9uKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAkbGF5b3V0LmlzQ29udGFpbmVyLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgJiYgcmlnaHRTaWRlLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgJiYgKGJlbG93QnJlYWtwb2ludC52YWx1ZSA9PT0gdHJ1ZSB8fCBNYXRoLmFicyhwb3NpdGlvbikgPT09IHNpemUudmFsdWUpXG4gICAgICAgICkge1xuICAgICAgICAgIHBvc2l0aW9uICs9IHN0YXRlRGlyZWN0aW9uLnZhbHVlICogJGxheW91dC5zY3JvbGxiYXJXaWR0aC52YWx1ZVxuICAgICAgICB9XG5cbiAgICAgICAgZmxhZ0NvbnRlbnRQb3NpdGlvbi52YWx1ZSA9IHBvc2l0aW9uXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlCYWNrZHJvcCAoeCkge1xuICAgICAgZmxhZ0JhY2tkcm9wQmcudmFsdWUgPSB4XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U2Nyb2xsYWJsZSAodikge1xuICAgICAgY29uc3QgYWN0aW9uID0gdiA9PT0gdHJ1ZVxuICAgICAgICA/ICdyZW1vdmUnXG4gICAgICAgIDogKCRsYXlvdXQuaXNDb250YWluZXIudmFsdWUgIT09IHRydWUgPyAnYWRkJyA6ICcnKVxuXG4gICAgICBhY3Rpb24gIT09ICcnICYmIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0WyBhY3Rpb24gXSgncS1ib2R5LS1kcmF3ZXItdG9nZ2xlJylcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhbmltYXRlTWluaSAoKSB7XG4gICAgICB0aW1lck1pbmkgIT09IG51bGwgJiYgY2xlYXJUaW1lb3V0KHRpbWVyTWluaSlcblxuICAgICAgaWYgKHZtLnByb3h5ICYmIHZtLnByb3h5LiRlbCkge1xuICAgICAgICAvLyBuZWVkIHRvIHNwZWVkIGl0IHVwIGFuZCBhcHBseSBpdCBpbW1lZGlhdGVseSxcbiAgICAgICAgLy8gZXZlbiBmYXN0ZXIgdGhhbiBWdWUncyBuZXh0VGljayFcbiAgICAgICAgdm0ucHJveHkuJGVsLmNsYXNzTGlzdC5hZGQoJ3EtZHJhd2VyLS1taW5pLWFuaW1hdGUnKVxuICAgICAgfVxuXG4gICAgICBmbGFnTWluaUFuaW1hdGUudmFsdWUgPSB0cnVlXG4gICAgICB0aW1lck1pbmkgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGltZXJNaW5pID0gbnVsbFxuICAgICAgICBmbGFnTWluaUFuaW1hdGUudmFsdWUgPSBmYWxzZVxuICAgICAgICBpZiAodm0gJiYgdm0ucHJveHkgJiYgdm0ucHJveHkuJGVsKSB7XG4gICAgICAgICAgdm0ucHJveHkuJGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3EtZHJhd2VyLS1taW5pLWFuaW1hdGUnKVxuICAgICAgICB9XG4gICAgICB9LCAxNTApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25PcGVuUGFuIChldnQpIHtcbiAgICAgIGlmIChzaG93aW5nLnZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgICAvLyBzb21lIGJyb3dzZXJzIG1pZ2h0IGNhcHR1cmUgYW5kIHRyaWdnZXIgdGhpc1xuICAgICAgICAvLyBldmVuIGlmIERyYXdlciBoYXMganVzdCBiZWVuIG9wZW5lZCAoYnV0IGFuaW1hdGlvbiBpcyBzdGlsbCBwZW5kaW5nKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3RcbiAgICAgICAgd2lkdGggPSBzaXplLnZhbHVlLFxuICAgICAgICBwb3NpdGlvbiA9IGJldHdlZW4oZXZ0LmRpc3RhbmNlLngsIDAsIHdpZHRoKVxuXG4gICAgICBpZiAoZXZ0LmlzRmluYWwgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3Qgb3BlbmVkID0gcG9zaXRpb24gPj0gTWF0aC5taW4oNzUsIHdpZHRoKVxuXG4gICAgICAgIGlmIChvcGVuZWQgPT09IHRydWUpIHtcbiAgICAgICAgICBzaG93KClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAkbGF5b3V0LmFuaW1hdGUoKVxuICAgICAgICAgIGFwcGx5QmFja2Ryb3AoMClcbiAgICAgICAgICBhcHBseVBvc2l0aW9uKHN0YXRlRGlyZWN0aW9uLnZhbHVlICogd2lkdGgpXG4gICAgICAgIH1cblxuICAgICAgICBmbGFnUGFubmluZy52YWx1ZSA9IGZhbHNlXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBhcHBseVBvc2l0aW9uKFxuICAgICAgICAoJHEubGFuZy5ydGwgPT09IHRydWUgPyByaWdodFNpZGUudmFsdWUgIT09IHRydWUgOiByaWdodFNpZGUudmFsdWUpXG4gICAgICAgICAgPyBNYXRoLm1heCh3aWR0aCAtIHBvc2l0aW9uLCAwKVxuICAgICAgICAgIDogTWF0aC5taW4oMCwgcG9zaXRpb24gLSB3aWR0aClcbiAgICAgIClcbiAgICAgIGFwcGx5QmFja2Ryb3AoXG4gICAgICAgIGJldHdlZW4ocG9zaXRpb24gLyB3aWR0aCwgMCwgMSlcbiAgICAgIClcblxuICAgICAgaWYgKGV2dC5pc0ZpcnN0ID09PSB0cnVlKSB7XG4gICAgICAgIGZsYWdQYW5uaW5nLnZhbHVlID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ2xvc2VQYW4gKGV2dCkge1xuICAgICAgaWYgKHNob3dpbmcudmFsdWUgIT09IHRydWUpIHtcbiAgICAgICAgLy8gc29tZSBicm93c2VycyBtaWdodCBjYXB0dXJlIGFuZCB0cmlnZ2VyIHRoaXNcbiAgICAgICAgLy8gZXZlbiBpZiBEcmF3ZXIgaGFzIGp1c3QgYmVlbiBjbG9zZWQgKGJ1dCBhbmltYXRpb24gaXMgc3RpbGwgcGVuZGluZylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0XG4gICAgICAgIHdpZHRoID0gc2l6ZS52YWx1ZSxcbiAgICAgICAgZGlyID0gZXZ0LmRpcmVjdGlvbiA9PT0gcHJvcHMuc2lkZSxcbiAgICAgICAgcG9zaXRpb24gPSAoJHEubGFuZy5ydGwgPT09IHRydWUgPyBkaXIgIT09IHRydWUgOiBkaXIpXG4gICAgICAgICAgPyBiZXR3ZWVuKGV2dC5kaXN0YW5jZS54LCAwLCB3aWR0aClcbiAgICAgICAgICA6IDBcblxuICAgICAgaWYgKGV2dC5pc0ZpbmFsID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IG9wZW5lZCA9IE1hdGguYWJzKHBvc2l0aW9uKSA8IE1hdGgubWluKDc1LCB3aWR0aClcblxuICAgICAgICBpZiAob3BlbmVkID09PSB0cnVlKSB7XG4gICAgICAgICAgJGxheW91dC5hbmltYXRlKClcbiAgICAgICAgICBhcHBseUJhY2tkcm9wKDEpXG4gICAgICAgICAgYXBwbHlQb3NpdGlvbigwKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGhpZGUoKVxuICAgICAgICB9XG5cbiAgICAgICAgZmxhZ1Bhbm5pbmcudmFsdWUgPSBmYWxzZVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgYXBwbHlQb3NpdGlvbihzdGF0ZURpcmVjdGlvbi52YWx1ZSAqIHBvc2l0aW9uKVxuICAgICAgYXBwbHlCYWNrZHJvcChiZXR3ZWVuKDEgLSBwb3NpdGlvbiAvIHdpZHRoLCAwLCAxKSlcblxuICAgICAgaWYgKGV2dC5pc0ZpcnN0ID09PSB0cnVlKSB7XG4gICAgICAgIGZsYWdQYW5uaW5nLnZhbHVlID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgICAgcHJldmVudEJvZHlTY3JvbGwoZmFsc2UpXG4gICAgICBzZXRTY3JvbGxhYmxlKHRydWUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTGF5b3V0IChwcm9wLCB2YWwpIHtcbiAgICAgICRsYXlvdXQudXBkYXRlKHByb3BzLnNpZGUsIHByb3AsIHZhbClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbCAocHJvcCwgdmFsKSB7XG4gICAgICBpZiAocHJvcC52YWx1ZSAhPT0gdmFsKSB7XG4gICAgICAgIHByb3AudmFsdWUgPSB2YWxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVTaXplT25MYXlvdXQgKG1pbmlUb092ZXJsYXksIHNpemUpIHtcbiAgICAgIHVwZGF0ZUxheW91dCgnc2l6ZScsIG1pbmlUb092ZXJsYXkgPT09IHRydWUgPyBwcm9wcy5taW5pV2lkdGggOiBzaXplKVxuICAgIH1cblxuICAgICRsYXlvdXQuaW5zdGFuY2VzWyBwcm9wcy5zaWRlIF0gPSBpbnN0YW5jZVxuICAgIHVwZGF0ZVNpemVPbkxheW91dChwcm9wcy5taW5pVG9PdmVybGF5LCBzaXplLnZhbHVlKVxuICAgIHVwZGF0ZUxheW91dCgnc3BhY2UnLCBvbkxheW91dC52YWx1ZSlcbiAgICB1cGRhdGVMYXlvdXQoJ29mZnNldCcsIG9mZnNldC52YWx1ZSlcblxuICAgIGlmIChcbiAgICAgIHByb3BzLnNob3dJZkFib3ZlID09PSB0cnVlXG4gICAgICAmJiBwcm9wcy5tb2RlbFZhbHVlICE9PSB0cnVlXG4gICAgICAmJiBzaG93aW5nLnZhbHVlID09PSB0cnVlXG4gICAgICAmJiBwcm9wc1sgJ29uVXBkYXRlOm1vZGVsVmFsdWUnIF0gIT09IHZvaWQgMFxuICAgICkge1xuICAgICAgZW1pdCgndXBkYXRlOm1vZGVsVmFsdWUnLCB0cnVlKVxuICAgIH1cblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBlbWl0KCdvbkxheW91dCcsIG9uTGF5b3V0LnZhbHVlKVxuICAgICAgZW1pdCgnbWluaVN0YXRlJywgaXNNaW5pLnZhbHVlKVxuXG4gICAgICBsYXN0RGVza3RvcFN0YXRlID0gcHJvcHMuc2hvd0lmQWJvdmUgPT09IHRydWVcblxuICAgICAgY29uc3QgZm4gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IHNob3dpbmcudmFsdWUgPT09IHRydWUgPyBoYW5kbGVTaG93IDogaGFuZGxlSGlkZVxuICAgICAgICBhY3Rpb24oZmFsc2UsIHRydWUpXG4gICAgICB9XG5cbiAgICAgIGlmICgkbGF5b3V0LnRvdGFsV2lkdGgudmFsdWUgIT09IDApIHtcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgYWxsIGNvbXB1dGVkIHByb3BlcnRpZXNcbiAgICAgICAgLy8gaGF2ZSBiZWVuIHVwZGF0ZWQgYmVmb3JlIGNhbGxpbmcgaGFuZGxlU2hvdy9oYW5kbGVIaWRlKClcbiAgICAgICAgbmV4dFRpY2soZm4pXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBsYXlvdXRUb3RhbFdpZHRoV2F0Y2hlciA9IHdhdGNoKCRsYXlvdXQudG90YWxXaWR0aCwgKCkgPT4ge1xuICAgICAgICBsYXlvdXRUb3RhbFdpZHRoV2F0Y2hlcigpXG4gICAgICAgIGxheW91dFRvdGFsV2lkdGhXYXRjaGVyID0gdm9pZCAwXG5cbiAgICAgICAgaWYgKHNob3dpbmcudmFsdWUgPT09IGZhbHNlICYmIHByb3BzLnNob3dJZkFib3ZlID09PSB0cnVlICYmIGJlbG93QnJlYWtwb2ludC52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBzaG93KGZhbHNlKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZuKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGxheW91dFRvdGFsV2lkdGhXYXRjaGVyICE9PSB2b2lkIDAgJiYgbGF5b3V0VG90YWxXaWR0aFdhdGNoZXIoKVxuXG4gICAgICBpZiAodGltZXJNaW5pICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lck1pbmkpXG4gICAgICAgIHRpbWVyTWluaSA9IG51bGxcbiAgICAgIH1cblxuICAgICAgc2hvd2luZy52YWx1ZSA9PT0gdHJ1ZSAmJiBjbGVhbnVwKClcblxuICAgICAgaWYgKCRsYXlvdXQuaW5zdGFuY2VzWyBwcm9wcy5zaWRlIF0gPT09IGluc3RhbmNlKSB7XG4gICAgICAgICRsYXlvdXQuaW5zdGFuY2VzWyBwcm9wcy5zaWRlIF0gPSB2b2lkIDBcbiAgICAgICAgdXBkYXRlTGF5b3V0KCdzaXplJywgMClcbiAgICAgICAgdXBkYXRlTGF5b3V0KCdvZmZzZXQnLCAwKVxuICAgICAgICB1cGRhdGVMYXlvdXQoJ3NwYWNlJywgZmFsc2UpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZCA9IFtdXG5cbiAgICAgIGlmIChiZWxvd0JyZWFrcG9pbnQudmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgcHJvcHMubm9Td2lwZU9wZW4gPT09IGZhbHNlICYmIGNoaWxkLnB1c2goXG4gICAgICAgICAgd2l0aERpcmVjdGl2ZXMoXG4gICAgICAgICAgICBoKCdkaXYnLCB7XG4gICAgICAgICAgICAgIGtleTogJ29wZW4nLFxuICAgICAgICAgICAgICBjbGFzczogYHEtZHJhd2VyX19vcGVuZXIgZml4ZWQtJHsgcHJvcHMuc2lkZSB9YCxcbiAgICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG9wZW5EaXJlY3RpdmUudmFsdWVcbiAgICAgICAgICApXG4gICAgICAgIClcblxuICAgICAgICBjaGlsZC5wdXNoKFxuICAgICAgICAgIGhEaXIoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcmVmOiAnYmFja2Ryb3AnLFxuICAgICAgICAgICAgICBjbGFzczogYmFja2Ryb3BDbGFzcy52YWx1ZSxcbiAgICAgICAgICAgICAgc3R5bGU6IGJhY2tkcm9wU3R5bGUudmFsdWUsXG4gICAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgICAgICAgICAgICAgb25DbGljazogaGlkZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgICdiYWNrZHJvcCcsXG4gICAgICAgICAgICBwcm9wcy5ub1N3aXBlQmFja2Ryb3AgIT09IHRydWUgJiYgc2hvd2luZy52YWx1ZSA9PT0gdHJ1ZSxcbiAgICAgICAgICAgICgpID0+IGJhY2tkcm9wQ2xvc2VEaXJlY3RpdmUudmFsdWVcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgY29uc3QgbWluaSA9IGlzTWluaS52YWx1ZSA9PT0gdHJ1ZSAmJiBzbG90cy5taW5pICE9PSB2b2lkIDBcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBbXG4gICAgICAgIGgoJ2RpdicsIHtcbiAgICAgICAgICAuLi5hdHRycyxcbiAgICAgICAgICBrZXk6ICcnICsgbWluaSwgLy8gcmVxdWlyZWQgb3RoZXJ3aXNlIFZ1ZSB3aWxsIG5vdCBkaWZmIGNvcnJlY3RseVxuICAgICAgICAgIGNsYXNzOiBbXG4gICAgICAgICAgICBjb250ZW50Q2xhc3MudmFsdWUsXG4gICAgICAgICAgICBhdHRycy5jbGFzc1xuICAgICAgICAgIF1cbiAgICAgICAgfSwgbWluaSA9PT0gdHJ1ZVxuICAgICAgICAgID8gc2xvdHMubWluaSgpXG4gICAgICAgICAgOiBoU2xvdChzbG90cy5kZWZhdWx0KVxuICAgICAgICApXG4gICAgICBdXG5cbiAgICAgIGlmIChwcm9wcy5lbGV2YXRlZCA9PT0gdHJ1ZSAmJiBzaG93aW5nLnZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnRlbnQucHVzaChcbiAgICAgICAgICBoKCdkaXYnLCB7XG4gICAgICAgICAgICBjbGFzczogJ3EtbGF5b3V0X19zaGFkb3cgYWJzb2x1dGUtZnVsbCBvdmVyZmxvdy1oaWRkZW4gbm8tcG9pbnRlci1ldmVudHMnXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBjaGlsZC5wdXNoKFxuICAgICAgICBoRGlyKFxuICAgICAgICAgICdhc2lkZScsXG4gICAgICAgICAgeyByZWY6ICdjb250ZW50JywgY2xhc3M6IGNsYXNzZXMudmFsdWUsIHN0eWxlOiBzdHlsZS52YWx1ZSB9LFxuICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgJ2NvbnRlbnRjbG9zZScsXG4gICAgICAgICAgcHJvcHMubm9Td2lwZUNsb3NlICE9PSB0cnVlICYmIGJlbG93QnJlYWtwb2ludC52YWx1ZSA9PT0gdHJ1ZSxcbiAgICAgICAgICAoKSA9PiBjb250ZW50Q2xvc2VEaXJlY3RpdmUudmFsdWVcbiAgICAgICAgKVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ3EtZHJhd2VyLWNvbnRhaW5lcicgfSwgY2hpbGQpXG4gICAgfVxuICB9XG59KVxuIiwiaW1wb3J0IHsgaCwgY29tcHV0ZWQsIHByb3ZpZGUsIGluamVjdCwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGhTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9yZW5kZXIuanMnXG5pbXBvcnQgeyBwYWdlQ29udGFpbmVyS2V5LCBsYXlvdXRLZXksIGVtcHR5UmVuZGVyRm4gfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL3N5bWJvbHMuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRUGFnZUNvbnRhaW5lcicsXG5cbiAgc2V0dXAgKF8sIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IHsgcHJveHk6IHsgJHEgfSB9ID0gZ2V0Q3VycmVudEluc3RhbmNlKClcblxuICAgIGNvbnN0ICRsYXlvdXQgPSBpbmplY3QobGF5b3V0S2V5LCBlbXB0eVJlbmRlckZuKVxuICAgIGlmICgkbGF5b3V0ID09PSBlbXB0eVJlbmRlckZuKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdRUGFnZUNvbnRhaW5lciBuZWVkcyB0byBiZSBjaGlsZCBvZiBRTGF5b3V0JylcbiAgICAgIHJldHVybiBlbXB0eVJlbmRlckZuXG4gICAgfVxuXG4gICAgcHJvdmlkZShwYWdlQ29udGFpbmVyS2V5LCB0cnVlKVxuXG4gICAgY29uc3Qgc3R5bGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCBjc3MgPSB7fVxuXG4gICAgICBpZiAoJGxheW91dC5oZWFkZXIuc3BhY2UgPT09IHRydWUpIHtcbiAgICAgICAgY3NzLnBhZGRpbmdUb3AgPSBgJHsgJGxheW91dC5oZWFkZXIuc2l6ZSB9cHhgXG4gICAgICB9XG4gICAgICBpZiAoJGxheW91dC5yaWdodC5zcGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjc3NbIGBwYWRkaW5nJHsgJHEubGFuZy5ydGwgPT09IHRydWUgPyAnTGVmdCcgOiAnUmlnaHQnIH1gIF0gPSBgJHsgJGxheW91dC5yaWdodC5zaXplIH1weGBcbiAgICAgIH1cbiAgICAgIGlmICgkbGF5b3V0LmZvb3Rlci5zcGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjc3MucGFkZGluZ0JvdHRvbSA9IGAkeyAkbGF5b3V0LmZvb3Rlci5zaXplIH1weGBcbiAgICAgIH1cbiAgICAgIGlmICgkbGF5b3V0LmxlZnQuc3BhY2UgPT09IHRydWUpIHtcbiAgICAgICAgY3NzWyBgcGFkZGluZyR7ICRxLmxhbmcucnRsID09PSB0cnVlID8gJ1JpZ2h0JyA6ICdMZWZ0JyB9YCBdID0gYCR7ICRsYXlvdXQubGVmdC5zaXplIH1weGBcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNzc1xuICAgIH0pXG5cbiAgICByZXR1cm4gKCkgPT4gaCgnZGl2Jywge1xuICAgICAgY2xhc3M6ICdxLXBhZ2UtY29udGFpbmVyJyxcbiAgICAgIHN0eWxlOiBzdHlsZS52YWx1ZVxuICAgIH0sIGhTbG90KHNsb3RzLmRlZmF1bHQpKVxuICB9XG59KVxuIiwiaW1wb3J0IHsgd2F0Y2gsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50LCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnXG5cbmltcG9ydCB7IGNyZWF0ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvY3JlYXRlLmpzJ1xuaW1wb3J0IHsgZ2V0U2Nyb2xsVGFyZ2V0LCBnZXRWZXJ0aWNhbFNjcm9sbFBvc2l0aW9uLCBnZXRIb3Jpem9udGFsU2Nyb2xsUG9zaXRpb24gfSBmcm9tICcuLi8uLi91dGlscy9zY3JvbGwuanMnXG5pbXBvcnQgeyBsaXN0ZW5PcHRzLCBub29wIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXZlbnQuanMnXG5cbmNvbnN0IHsgcGFzc2l2ZSB9ID0gbGlzdGVuT3B0c1xuY29uc3QgYXhpc1ZhbHVlcyA9IFsgJ2JvdGgnLCAnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCcgXVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb21wb25lbnQoe1xuICBuYW1lOiAnUVNjcm9sbE9ic2VydmVyJyxcblxuICBwcm9wczoge1xuICAgIGF4aXM6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbGlkYXRvcjogdiA9PiBheGlzVmFsdWVzLmluY2x1ZGVzKHYpLFxuICAgICAgZGVmYXVsdDogJ3ZlcnRpY2FsJ1xuICAgIH0sXG5cbiAgICBkZWJvdW5jZTogWyBTdHJpbmcsIE51bWJlciBdLFxuXG4gICAgc2Nyb2xsVGFyZ2V0OiB7XG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9XG4gIH0sXG5cbiAgZW1pdHM6IFsgJ3Njcm9sbCcgXSxcblxuICBzZXR1cCAocHJvcHMsIHsgZW1pdCB9KSB7XG4gICAgY29uc3Qgc2Nyb2xsID0ge1xuICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwXG4gICAgICB9LFxuXG4gICAgICBkaXJlY3Rpb246ICdkb3duJyxcbiAgICAgIGRpcmVjdGlvbkNoYW5nZWQ6IGZhbHNlLFxuXG4gICAgICBkZWx0YToge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDBcbiAgICAgIH0sXG5cbiAgICAgIGluZmxlY3Rpb25Qb2ludDoge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDBcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgY2xlYXJUaW1lciA9IG51bGwsIGxvY2FsU2Nyb2xsVGFyZ2V0LCBwYXJlbnRFbFxuXG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuc2Nyb2xsVGFyZ2V0LCAoKSA9PiB7XG4gICAgICB1bmNvbmZpZ3VyZVNjcm9sbFRhcmdldCgpXG4gICAgICBjb25maWd1cmVTY3JvbGxUYXJnZXQoKVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBlbWl0RXZlbnQgKCkge1xuICAgICAgY2xlYXJUaW1lciAhPT0gbnVsbCAmJiBjbGVhclRpbWVyKClcblxuICAgICAgY29uc3QgdG9wID0gTWF0aC5tYXgoMCwgZ2V0VmVydGljYWxTY3JvbGxQb3NpdGlvbihsb2NhbFNjcm9sbFRhcmdldCkpXG4gICAgICBjb25zdCBsZWZ0ID0gZ2V0SG9yaXpvbnRhbFNjcm9sbFBvc2l0aW9uKGxvY2FsU2Nyb2xsVGFyZ2V0KVxuXG4gICAgICBjb25zdCBkZWx0YSA9IHtcbiAgICAgICAgdG9wOiB0b3AgLSBzY3JvbGwucG9zaXRpb24udG9wLFxuICAgICAgICBsZWZ0OiBsZWZ0IC0gc2Nyb2xsLnBvc2l0aW9uLmxlZnRcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICAocHJvcHMuYXhpcyA9PT0gJ3ZlcnRpY2FsJyAmJiBkZWx0YS50b3AgPT09IDApXG4gICAgICAgIHx8IChwcm9wcy5heGlzID09PSAnaG9yaXpvbnRhbCcgJiYgZGVsdGEubGVmdCA9PT0gMClcbiAgICAgICkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgY3VyRGlyID0gTWF0aC5hYnMoZGVsdGEudG9wKSA+PSBNYXRoLmFicyhkZWx0YS5sZWZ0KVxuICAgICAgICA/IChkZWx0YS50b3AgPCAwID8gJ3VwJyA6ICdkb3duJylcbiAgICAgICAgOiAoZGVsdGEubGVmdCA8IDAgPyAnbGVmdCcgOiAncmlnaHQnKVxuXG4gICAgICBzY3JvbGwucG9zaXRpb24gPSB7IHRvcCwgbGVmdCB9XG4gICAgICBzY3JvbGwuZGlyZWN0aW9uQ2hhbmdlZCA9IHNjcm9sbC5kaXJlY3Rpb24gIT09IGN1ckRpclxuICAgICAgc2Nyb2xsLmRlbHRhID0gZGVsdGFcblxuICAgICAgaWYgKHNjcm9sbC5kaXJlY3Rpb25DaGFuZ2VkID09PSB0cnVlKSB7XG4gICAgICAgIHNjcm9sbC5kaXJlY3Rpb24gPSBjdXJEaXJcbiAgICAgICAgc2Nyb2xsLmluZmxlY3Rpb25Qb2ludCA9IHNjcm9sbC5wb3NpdGlvblxuICAgICAgfVxuXG4gICAgICBlbWl0KCdzY3JvbGwnLCB7IC4uLnNjcm9sbCB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZVNjcm9sbFRhcmdldCAoKSB7XG4gICAgICBsb2NhbFNjcm9sbFRhcmdldCA9IGdldFNjcm9sbFRhcmdldChwYXJlbnRFbCwgcHJvcHMuc2Nyb2xsVGFyZ2V0KVxuICAgICAgbG9jYWxTY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdHJpZ2dlciwgcGFzc2l2ZSlcbiAgICAgIHRyaWdnZXIodHJ1ZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmNvbmZpZ3VyZVNjcm9sbFRhcmdldCAoKSB7XG4gICAgICBpZiAobG9jYWxTY3JvbGxUYXJnZXQgIT09IHZvaWQgMCkge1xuICAgICAgICBsb2NhbFNjcm9sbFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0cmlnZ2VyLCBwYXNzaXZlKVxuICAgICAgICBsb2NhbFNjcm9sbFRhcmdldCA9IHZvaWQgMFxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaWdnZXIgKGltbWVkaWF0ZWx5KSB7XG4gICAgICBpZiAoaW1tZWRpYXRlbHkgPT09IHRydWUgfHwgcHJvcHMuZGVib3VuY2UgPT09IDAgfHwgcHJvcHMuZGVib3VuY2UgPT09ICcwJykge1xuICAgICAgICBlbWl0RXZlbnQoKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY2xlYXJUaW1lciA9PT0gbnVsbCkge1xuICAgICAgICBjb25zdCBbIHRpbWVyLCBmbiBdID0gcHJvcHMuZGVib3VuY2VcbiAgICAgICAgICA/IFsgc2V0VGltZW91dChlbWl0RXZlbnQsIHByb3BzLmRlYm91bmNlKSwgY2xlYXJUaW1lb3V0IF1cbiAgICAgICAgICA6IFsgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGVtaXRFdmVudCksIGNhbmNlbEFuaW1hdGlvbkZyYW1lIF1cblxuICAgICAgICBjbGVhclRpbWVyID0gKCkgPT4ge1xuICAgICAgICAgIGZuKHRpbWVyKVxuICAgICAgICAgIGNsZWFyVGltZXIgPSBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB7IHByb3h5IH0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuXG4gICAgd2F0Y2goKCkgPT4gcHJveHkuJHEubGFuZy5ydGwsIGVtaXRFdmVudClcblxuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICBwYXJlbnRFbCA9IHByb3h5LiRlbC5wYXJlbnROb2RlXG4gICAgICBjb25maWd1cmVTY3JvbGxUYXJnZXQoKVxuICAgIH0pXG5cbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lciAhPT0gbnVsbCAmJiBjbGVhclRpbWVyKClcbiAgICAgIHVuY29uZmlndXJlU2Nyb2xsVGFyZ2V0KClcbiAgICB9KVxuXG4gICAgLy8gZXhwb3NlIHB1YmxpYyBtZXRob2RzXG4gICAgT2JqZWN0LmFzc2lnbihwcm94eSwge1xuICAgICAgdHJpZ2dlcixcbiAgICAgIGdldFBvc2l0aW9uOiAoKSA9PiBzY3JvbGxcbiAgICB9KVxuXG4gICAgcmV0dXJuIG5vb3BcbiAgfVxufSlcbiIsImltcG9ydCB7IGgsIHJlZiwgcmVhY3RpdmUsIGNvbXB1dGVkLCB3YXRjaCwgcHJvdmlkZSwgb25Vbm1vdW50ZWQsIGdldEN1cnJlbnRJbnN0YW5jZSB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IHsgaXNSdW50aW1lU3NyUHJlSHlkcmF0aW9uIH0gZnJvbSAnLi4vLi4vcGx1Z2lucy9QbGF0Zm9ybS5qcydcblxuaW1wb3J0IFFTY3JvbGxPYnNlcnZlciBmcm9tICcuLi9zY3JvbGwtb2JzZXJ2ZXIvUVNjcm9sbE9ic2VydmVyLmpzJ1xuaW1wb3J0IFFSZXNpemVPYnNlcnZlciBmcm9tICcuLi9yZXNpemUtb2JzZXJ2ZXIvUVJlc2l6ZU9ic2VydmVyLmpzJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGdldFNjcm9sbGJhcldpZHRoIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2Nyb2xsLmpzJ1xuaW1wb3J0IHsgaE1lcmdlU2xvdCB9IGZyb20gJy4uLy4uL3V0aWxzL3ByaXZhdGUvcmVuZGVyLmpzJ1xuaW1wb3J0IHsgbGF5b3V0S2V5IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9zeW1ib2xzLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb21wb25lbnQoe1xuICBuYW1lOiAnUUxheW91dCcsXG5cbiAgcHJvcHM6IHtcbiAgICBjb250YWluZXI6IEJvb2xlYW4sXG4gICAgdmlldzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2hoaCBscHIgZmZmJyxcbiAgICAgIHZhbGlkYXRvcjogdiA9PiAvXihofGwpaChofHIpIGxwciAoZnxsKWYoZnxyKSQvLnRlc3Qodi50b0xvd2VyQ2FzZSgpKVxuICAgIH0sXG5cbiAgICBvblNjcm9sbDogRnVuY3Rpb24sXG4gICAgb25TY3JvbGxIZWlnaHQ6IEZ1bmN0aW9uLFxuICAgIG9uUmVzaXplOiBGdW5jdGlvblxuICB9LFxuXG4gIHNldHVwIChwcm9wcywgeyBzbG90cywgZW1pdCB9KSB7XG4gICAgY29uc3QgeyBwcm94eTogeyAkcSB9IH0gPSBnZXRDdXJyZW50SW5zdGFuY2UoKVxuXG4gICAgY29uc3Qgcm9vdFJlZiA9IHJlZihudWxsKVxuXG4gICAgLy8gcGFnZSByZWxhdGVkXG4gICAgY29uc3QgaGVpZ2h0ID0gcmVmKCRxLnNjcmVlbi5oZWlnaHQpXG4gICAgY29uc3Qgd2lkdGggPSByZWYocHJvcHMuY29udGFpbmVyID09PSB0cnVlID8gMCA6ICRxLnNjcmVlbi53aWR0aClcbiAgICBjb25zdCBzY3JvbGwgPSByZWYoeyBwb3NpdGlvbjogMCwgZGlyZWN0aW9uOiAnZG93bicsIGluZmxlY3Rpb25Qb2ludDogMCB9KVxuXG4gICAgLy8gY29udGFpbmVyIG9ubHkgcHJvcFxuICAgIGNvbnN0IGNvbnRhaW5lckhlaWdodCA9IHJlZigwKVxuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gcmVmKGlzUnVudGltZVNzclByZUh5ZHJhdGlvbi52YWx1ZSA9PT0gdHJ1ZSA/IDAgOiBnZXRTY3JvbGxiYXJXaWR0aCgpKVxuXG4gICAgY29uc3QgY2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+XG4gICAgICAncS1sYXlvdXQgcS1sYXlvdXQtLSdcbiAgICAgICsgKHByb3BzLmNvbnRhaW5lciA9PT0gdHJ1ZSA/ICdjb250YWluZXJpemVkJyA6ICdzdGFuZGFyZCcpXG4gICAgKVxuXG4gICAgY29uc3Qgc3R5bGUgPSBjb21wdXRlZCgoKSA9PiAoXG4gICAgICBwcm9wcy5jb250YWluZXIgPT09IGZhbHNlXG4gICAgICAgID8geyBtaW5IZWlnaHQ6ICRxLnNjcmVlbi5oZWlnaHQgKyAncHgnIH1cbiAgICAgICAgOiBudWxsXG4gICAgKSlcblxuICAgIC8vIHVzZWQgYnkgY29udGFpbmVyIG9ubHlcbiAgICBjb25zdCB0YXJnZXRTdHlsZSA9IGNvbXB1dGVkKCgpID0+IChcbiAgICAgIHNjcm9sbGJhcldpZHRoLnZhbHVlICE9PSAwXG4gICAgICAgID8geyBbICRxLmxhbmcucnRsID09PSB0cnVlID8gJ2xlZnQnIDogJ3JpZ2h0JyBdOiBgJHsgc2Nyb2xsYmFyV2lkdGgudmFsdWUgfXB4YCB9XG4gICAgICAgIDogbnVsbFxuICAgICkpXG5cbiAgICBjb25zdCB0YXJnZXRDaGlsZFN0eWxlID0gY29tcHV0ZWQoKCkgPT4gKFxuICAgICAgc2Nyb2xsYmFyV2lkdGgudmFsdWUgIT09IDBcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBbICRxLmxhbmcucnRsID09PSB0cnVlID8gJ3JpZ2h0JyA6ICdsZWZ0JyBdOiAwLFxuICAgICAgICAgICAgWyAkcS5sYW5nLnJ0bCA9PT0gdHJ1ZSA/ICdsZWZ0JyA6ICdyaWdodCcgXTogYC0keyBzY3JvbGxiYXJXaWR0aC52YWx1ZSB9cHhgLFxuICAgICAgICAgICAgd2lkdGg6IGBjYWxjKDEwMCUgKyAkeyBzY3JvbGxiYXJXaWR0aC52YWx1ZSB9cHgpYFxuICAgICAgICAgIH1cbiAgICAgICAgOiBudWxsXG4gICAgKSlcblxuICAgIGZ1bmN0aW9uIG9uUGFnZVNjcm9sbCAoZGF0YSkge1xuICAgICAgaWYgKHByb3BzLmNvbnRhaW5lciA9PT0gdHJ1ZSB8fCBkb2N1bWVudC5xU2Nyb2xsUHJldmVudGVkICE9PSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgICAgcG9zaXRpb246IGRhdGEucG9zaXRpb24udG9wLFxuICAgICAgICAgIGRpcmVjdGlvbjogZGF0YS5kaXJlY3Rpb24sXG4gICAgICAgICAgZGlyZWN0aW9uQ2hhbmdlZDogZGF0YS5kaXJlY3Rpb25DaGFuZ2VkLFxuICAgICAgICAgIGluZmxlY3Rpb25Qb2ludDogZGF0YS5pbmZsZWN0aW9uUG9pbnQudG9wLFxuICAgICAgICAgIGRlbHRhOiBkYXRhLmRlbHRhLnRvcFxuICAgICAgICB9XG5cbiAgICAgICAgc2Nyb2xsLnZhbHVlID0gaW5mb1xuICAgICAgICBwcm9wcy5vblNjcm9sbCAhPT0gdm9pZCAwICYmIGVtaXQoJ3Njcm9sbCcsIGluZm8pXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25QYWdlUmVzaXplIChkYXRhKSB7XG4gICAgICBjb25zdCB7IGhlaWdodDogbmV3SGVpZ2h0LCB3aWR0aDogbmV3V2lkdGggfSA9IGRhdGFcbiAgICAgIGxldCByZXNpemVkID0gZmFsc2VcblxuICAgICAgaWYgKGhlaWdodC52YWx1ZSAhPT0gbmV3SGVpZ2h0KSB7XG4gICAgICAgIHJlc2l6ZWQgPSB0cnVlXG4gICAgICAgIGhlaWdodC52YWx1ZSA9IG5ld0hlaWdodFxuICAgICAgICBwcm9wcy5vblNjcm9sbEhlaWdodCAhPT0gdm9pZCAwICYmIGVtaXQoJ3Njcm9sbEhlaWdodCcsIG5ld0hlaWdodClcbiAgICAgICAgdXBkYXRlU2Nyb2xsYmFyV2lkdGgoKVxuICAgICAgfVxuICAgICAgaWYgKHdpZHRoLnZhbHVlICE9PSBuZXdXaWR0aCkge1xuICAgICAgICByZXNpemVkID0gdHJ1ZVxuICAgICAgICB3aWR0aC52YWx1ZSA9IG5ld1dpZHRoXG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNpemVkID09PSB0cnVlICYmIHByb3BzLm9uUmVzaXplICE9PSB2b2lkIDApIHtcbiAgICAgICAgZW1pdCgncmVzaXplJywgZGF0YSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNvbnRhaW5lclJlc2l6ZSAoeyBoZWlnaHQgfSkge1xuICAgICAgaWYgKGNvbnRhaW5lckhlaWdodC52YWx1ZSAhPT0gaGVpZ2h0KSB7XG4gICAgICAgIGNvbnRhaW5lckhlaWdodC52YWx1ZSA9IGhlaWdodFxuICAgICAgICB1cGRhdGVTY3JvbGxiYXJXaWR0aCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlU2Nyb2xsYmFyV2lkdGggKCkge1xuICAgICAgaWYgKHByb3BzLmNvbnRhaW5lciA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zdCB3aWR0aCA9IGhlaWdodC52YWx1ZSA+IGNvbnRhaW5lckhlaWdodC52YWx1ZVxuICAgICAgICAgID8gZ2V0U2Nyb2xsYmFyV2lkdGgoKVxuICAgICAgICAgIDogMFxuXG4gICAgICAgIGlmIChzY3JvbGxiYXJXaWR0aC52YWx1ZSAhPT0gd2lkdGgpIHtcbiAgICAgICAgICBzY3JvbGxiYXJXaWR0aC52YWx1ZSA9IHdpZHRoXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgYW5pbWF0ZVRpbWVyID0gbnVsbFxuXG4gICAgY29uc3QgJGxheW91dCA9IHtcbiAgICAgIGluc3RhbmNlczoge30sXG4gICAgICB2aWV3OiBjb21wdXRlZCgoKSA9PiBwcm9wcy52aWV3KSxcbiAgICAgIGlzQ29udGFpbmVyOiBjb21wdXRlZCgoKSA9PiBwcm9wcy5jb250YWluZXIpLFxuXG4gICAgICByb290UmVmLFxuXG4gICAgICBoZWlnaHQsXG4gICAgICBjb250YWluZXJIZWlnaHQsXG4gICAgICBzY3JvbGxiYXJXaWR0aCxcbiAgICAgIHRvdGFsV2lkdGg6IGNvbXB1dGVkKCgpID0+IHdpZHRoLnZhbHVlICsgc2Nyb2xsYmFyV2lkdGgudmFsdWUpLFxuXG4gICAgICByb3dzOiBjb21wdXRlZCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJvd3MgPSBwcm9wcy52aWV3LnRvTG93ZXJDYXNlKCkuc3BsaXQoJyAnKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRvcDogcm93c1sgMCBdLnNwbGl0KCcnKSxcbiAgICAgICAgICBtaWRkbGU6IHJvd3NbIDEgXS5zcGxpdCgnJyksXG4gICAgICAgICAgYm90dG9tOiByb3dzWyAyIF0uc3BsaXQoJycpXG4gICAgICAgIH1cbiAgICAgIH0pLFxuXG4gICAgICBoZWFkZXI6IHJlYWN0aXZlKHsgc2l6ZTogMCwgb2Zmc2V0OiAwLCBzcGFjZTogZmFsc2UgfSksXG4gICAgICByaWdodDogcmVhY3RpdmUoeyBzaXplOiAzMDAsIG9mZnNldDogMCwgc3BhY2U6IGZhbHNlIH0pLFxuICAgICAgZm9vdGVyOiByZWFjdGl2ZSh7IHNpemU6IDAsIG9mZnNldDogMCwgc3BhY2U6IGZhbHNlIH0pLFxuICAgICAgbGVmdDogcmVhY3RpdmUoeyBzaXplOiAzMDAsIG9mZnNldDogMCwgc3BhY2U6IGZhbHNlIH0pLFxuXG4gICAgICBzY3JvbGwsXG5cbiAgICAgIGFuaW1hdGUgKCkge1xuICAgICAgICBpZiAoYW5pbWF0ZVRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1hdGVUaW1lcilcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3EtYm9keS0tbGF5b3V0LWFuaW1hdGUnKVxuICAgICAgICB9XG5cbiAgICAgICAgYW5pbWF0ZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgYW5pbWF0ZVRpbWVyID0gbnVsbFxuICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgncS1ib2R5LS1sYXlvdXQtYW5pbWF0ZScpXG4gICAgICAgIH0sIDE1NSlcbiAgICAgIH0sXG5cbiAgICAgIHVwZGF0ZSAocGFydCwgcHJvcCwgdmFsKSB7XG4gICAgICAgICRsYXlvdXRbIHBhcnQgXVsgcHJvcCBdID0gdmFsXG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvdmlkZShsYXlvdXRLZXksICRsYXlvdXQpXG5cbiAgICAvLyBwcmV2ZW50IHNjcm9sbGJhciBmbGlja2VyIHdoaWxlIHJlc2l6aW5nIHdpbmRvdyBoZWlnaHRcbiAgICAvLyBpZiBubyBwYWdlIHNjcm9sbGJhciBpcyBhbHJlYWR5IHByZXNlbnRcbiAgICBpZiAoX19RVUFTQVJfU1NSX1NFUlZFUl9fICE9PSB0cnVlICYmIGdldFNjcm9sbGJhcldpZHRoKCkgPiAwKSB7XG4gICAgICBsZXQgdGltZXIgPSBudWxsXG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmJvZHlcblxuICAgICAgZnVuY3Rpb24gcmVzdG9yZVNjcm9sbGJhciAoKSB7XG4gICAgICAgIHRpbWVyID0gbnVsbFxuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlLXNjcm9sbGJhcicpXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGhpZGVTY3JvbGxiYXIgKCkge1xuICAgICAgICBpZiAodGltZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBpZiBpdCBoYXMgbm8gc2Nyb2xsYmFyIHRoZW4gdGhlcmUncyBub3RoaW5nIHRvIGRvXG5cbiAgICAgICAgICBpZiAoZWwuc2Nyb2xsSGVpZ2h0ID4gJHEuc2NyZWVuLmhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnaGlkZS1zY3JvbGxiYXInKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcilcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dChyZXN0b3JlU2Nyb2xsYmFyLCAzMDApXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbEV2ZW50IChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHRpbWVyICE9PSBudWxsICYmIGFjdGlvbiA9PT0gJ3JlbW92ZScpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpXG4gICAgICAgICAgcmVzdG9yZVNjcm9sbGJhcigpXG4gICAgICAgIH1cblxuICAgICAgICB3aW5kb3dbIGAkeyBhY3Rpb24gfUV2ZW50TGlzdGVuZXJgIF0oJ3Jlc2l6ZScsIGhpZGVTY3JvbGxiYXIpXG4gICAgICB9XG5cbiAgICAgIHdhdGNoKFxuICAgICAgICAoKSA9PiAocHJvcHMuY29udGFpbmVyICE9PSB0cnVlID8gJ2FkZCcgOiAncmVtb3ZlJyksXG4gICAgICAgIHVwZGF0ZVNjcm9sbEV2ZW50XG4gICAgICApXG5cbiAgICAgIHByb3BzLmNvbnRhaW5lciAhPT0gdHJ1ZSAmJiB1cGRhdGVTY3JvbGxFdmVudCgnYWRkJylcblxuICAgICAgb25Vbm1vdW50ZWQoKCkgPT4ge1xuICAgICAgICB1cGRhdGVTY3JvbGxFdmVudCgncmVtb3ZlJylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBoTWVyZ2VTbG90KHNsb3RzLmRlZmF1bHQsIFtcbiAgICAgICAgaChRU2Nyb2xsT2JzZXJ2ZXIsIHsgb25TY3JvbGw6IG9uUGFnZVNjcm9sbCB9KSxcbiAgICAgICAgaChRUmVzaXplT2JzZXJ2ZXIsIHsgb25SZXNpemU6IG9uUGFnZVJlc2l6ZSB9KVxuICAgICAgXSlcblxuICAgICAgY29uc3QgbGF5b3V0ID0gaCgnZGl2Jywge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLnZhbHVlLFxuICAgICAgICByZWY6IHByb3BzLmNvbnRhaW5lciA9PT0gdHJ1ZSA/IHZvaWQgMCA6IHJvb3RSZWYsXG4gICAgICAgIHRhYmluZGV4OiAtMVxuICAgICAgfSwgY29udGVudClcblxuICAgICAgaWYgKHByb3BzLmNvbnRhaW5lciA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgICAgIGNsYXNzOiAncS1sYXlvdXQtY29udGFpbmVyIG92ZXJmbG93LWhpZGRlbicsXG4gICAgICAgICAgcmVmOiByb290UmVmXG4gICAgICAgIH0sIFtcbiAgICAgICAgICBoKFFSZXNpemVPYnNlcnZlciwgeyBvblJlc2l6ZTogb25Db250YWluZXJSZXNpemUgfSksXG4gICAgICAgICAgaCgnZGl2Jywge1xuICAgICAgICAgICAgY2xhc3M6ICdhYnNvbHV0ZS1mdWxsJyxcbiAgICAgICAgICAgIHN0eWxlOiB0YXJnZXRTdHlsZS52YWx1ZVxuICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgIGgoJ2RpdicsIHtcbiAgICAgICAgICAgICAgY2xhc3M6ICdzY3JvbGwnLFxuICAgICAgICAgICAgICBzdHlsZTogdGFyZ2V0Q2hpbGRTdHlsZS52YWx1ZVxuICAgICAgICAgICAgfSwgWyBsYXlvdXQgXSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGF5b3V0XG4gICAgfVxuICB9XG59KVxuIiwiPHRlbXBsYXRlPlxyXG4gIDxxLWxheW91dCB2aWV3PVwibEhoIExwciBsRmZcIj5cclxuICAgIDxxLWhlYWRlclxyXG4gICAgICBjbGFzcz1cIm9iaXdhbi1iYWNrZ3JvdW5kLWJsdWUtZ3JhZGllbnQtaG9yaXpvbnRhbFwiXHJcbiAgICAgIGVsZXZhdGVkXHJcbiAgICA+XHJcbiAgICAgIDxxLXRvb2xiYXI+XHJcbiAgICAgICAgPHEtYnRuXHJcbiAgICAgICAgICBmbGF0XHJcbiAgICAgICAgICBkZW5zZVxyXG4gICAgICAgICAgcm91bmRcclxuICAgICAgICAgIGljb249XCJtZGktbWVudVwiXHJcbiAgICAgICAgICBhcmlhLWxhYmVsPVwiTWVudVwiXHJcbiAgICAgICAgICBAY2xpY2s9XCJ0b2dnbGVMZWZ0RHJhd2VyXCJcclxuICAgICAgICAvPlxyXG5cclxuICAgICAgICA8cS10b29sYmFyLXRpdGxlPlxyXG4gICAgICAgICAge3sgYXBwLnRpdGxlIH19XHJcbiAgICAgICAgPC9xLXRvb2xiYXItdGl0bGU+XHJcbiAgICAgIDwvcS10b29sYmFyPlxyXG4gICAgPC9xLWhlYWRlcj5cclxuXHJcbiAgICA8cS1kcmF3ZXJcclxuICAgICAgdi1tb2RlbD1cImxlZnREcmF3ZXJPcGVuXCJcclxuICAgICAgYm9yZGVyZWRcclxuICAgID5cclxuICAgICAgPGRpdiBjbGFzcz1cImgtMTAwIGQtZmxleC1jb2x1bW5cIj5cclxuICAgICAgICA8cS1saXN0XHJcbiAgICAgICAgICBjbGFzcz1cImZsZXgtZ3Jvdy0xXCJcclxuICAgICAgICAgIHYtaWY9XCJhcHAubWFpbk1lbnVcIlxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxxLWl0ZW0tbGFiZWxcclxuICAgICAgICAgICAgaGVhZGVyXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIE1haW4gTWVudVxyXG4gICAgICAgICAgPC9xLWl0ZW0tbGFiZWw+XHJcblxyXG4gICAgICAgICAgPHRlbXBsYXRlXHJcbiAgICAgICAgICAgIHYtZm9yPVwiaXRlbSBpbiBhcHAubWFpbk1lbnVcIlxyXG4gICAgICAgICAgICA6a2V5PVwiaXRlbS5pZFwiXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxxLXNlcGFyYXRvclxyXG4gICAgICAgICAgICAgIHYtaWY9XCJpdGVtLnRhZyA9PT0gJ3Etc2VwYXJhdG9yJ1wiXHJcbiAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICA8cS1pdGVtXHJcbiAgICAgICAgICAgICAgdi1lbHNlXHJcbiAgICAgICAgICAgICAgY2xpY2thYmxlXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8cS1pdGVtLXNlY3Rpb25cclxuICAgICAgICAgICAgICAgIHYtaWY9XCJpdGVtLmljb25cIlxyXG4gICAgICAgICAgICAgICAgYXZhdGFyXHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPHEtaWNvbiA6bmFtZT1cIml0ZW0uaWNvblwiIC8+XHJcbiAgICAgICAgICAgICAgPC9xLWl0ZW0tc2VjdGlvbj5cclxuXHJcbiAgICAgICAgICAgICAgPHEtaXRlbS1zZWN0aW9uPlxyXG4gICAgICAgICAgICAgICAgPHEtaXRlbS1sYWJlbD57eyBpdGVtLnRpdGxlIH19PC9xLWl0ZW0tbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8cS1pdGVtLWxhYmVsXHJcbiAgICAgICAgICAgICAgICAgIHYtaWY9XCJpdGVtLmNhcHRpb25cIlxyXG4gICAgICAgICAgICAgICAgICBjYXB0aW9uXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIHt7IGl0ZW0uY2FwdGlvbiB9fVxyXG4gICAgICAgICAgICAgICAgPC9xLWl0ZW0tbGFiZWw+XHJcbiAgICAgICAgICAgICAgPC9xLWl0ZW0tc2VjdGlvbj5cclxuICAgICAgICAgICAgPC9xLWl0ZW0+XHJcbiAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgIDwvcS1saXN0PlxyXG5cclxuICAgICAgICA8cS1zZXBhcmF0b3IgLz5cclxuICAgICAgICBcclxuICAgICAgICA8cS1pdGVtPlxyXG4gICAgICAgICAgPHEtaXRlbS1zZWN0aW9uXHJcbiAgICAgICAgICAgIGF2YXRhclxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8cS1pY29uIG5hbWU9XCJtZGktdGFnLW91dGxpbmVcIiAvPlxyXG4gICAgICAgICAgPC9xLWl0ZW0tc2VjdGlvbj5cclxuXHJcbiAgICAgICAgICA8cS1pdGVtLXNlY3Rpb24+XHJcbiAgICAgICAgICAgIDxxLWl0ZW0tbGFiZWw+dnt7IGFwcC52ZXJzaW9uIH19PC9xLWl0ZW0tbGFiZWw+XHJcbiAgICAgICAgICA8L3EtaXRlbS1zZWN0aW9uPlxyXG5cclxuICAgICAgICAgIDxxLWl0ZW0tc2VjdGlvbiBzaWRlPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgIDxxLWJ0blxyXG4gICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgIGRlbnNlXHJcbiAgICAgICAgICAgICAgICBmbGF0XHJcbiAgICAgICAgICAgICAgICBpY29uPVwibWRpLWRldmVsb3Blci1ib2FyZFwiXHJcbiAgICAgICAgICAgICAgICByb3VuZFxyXG4gICAgICAgICAgICAgICAgc2l6ZT1cIm1kXCJcclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8cS10b29sdGlwPlxyXG4gICAgICAgICAgICAgICAgICBSZXF1ZXN0IGZvciBDaGFuZ2VcclxuICAgICAgICAgICAgICAgIDwvcS10b29sdGlwPlxyXG4gICAgICAgICAgICAgIDwvcS1idG4+XHJcblxyXG4gICAgICAgICAgICAgIDxxLWJ0blxyXG4gICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgIGRlbnNlXHJcbiAgICAgICAgICAgICAgICBmbGF0XHJcbiAgICAgICAgICAgICAgICBpY29uPVwibWRpLWJ1Z1wiXHJcbiAgICAgICAgICAgICAgICByb3VuZFxyXG4gICAgICAgICAgICAgICAgc2l6ZT1cIm1kXCJcclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8cS10b29sdGlwPlxyXG4gICAgICAgICAgICAgICAgICBSZXBvcnQgQnVnXHJcbiAgICAgICAgICAgICAgICA8L3EtdG9vbHRpcD5cclxuICAgICAgICAgICAgICA8L3EtYnRuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvcS1pdGVtLXNlY3Rpb24+XHJcbiAgICAgICAgPC9xLWl0ZW0+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9xLWRyYXdlcj5cclxuXHJcbiAgICA8cS1wYWdlLWNvbnRhaW5lcj5cclxuICAgICAgPHJvdXRlci12aWV3IC8+XHJcbiAgICA8L3EtcGFnZS1jb250YWluZXI+XHJcbiAgPC9xLWxheW91dD5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzdHlsZT5cclxuLm9iaXdhbi1zb3VyY2UtY29udHJvbC1tZW51IHtcclxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDExMXB4KSAhaW1wb3J0YW50O1xyXG59XHJcbjwvc3R5bGU+XHJcblxyXG48c2NyaXB0IHNldHVwPlxyXG5pbXBvcnQgeyBpbmplY3QsIHJlZiB9IGZyb20gJ3Z1ZSc7XHJcblxyXG5jb25zdCBsZWZ0RHJhd2VyT3BlbiA9IHJlZihmYWxzZSk7XHJcblxyXG5jb25zdCBhcHAgPSBpbmplY3QoJ2FwcCcpO1xyXG5cclxuZnVuY3Rpb24gdG9nZ2xlTGVmdERyYXdlciAoKSB7XHJcbiAgbGVmdERyYXdlck9wZW4udmFsdWUgPSAhbGVmdERyYXdlck9wZW4udmFsdWVcclxufVxyXG48L3NjcmlwdD5cclxuIl0sIm5hbWVzIjpbIlFUb29sYmFyVGl0bGUiLCJjcmVhdGVDb21wb25lbnQiLCJwcm9wcyIsInNsb3RzIiwiY2xhc3NlcyIsImNvbXB1dGVkIiwiaCIsImhTbG90IiwiUVRvb2xiYXIiLCJ1c2VIeWRyYXRpb24iLCJpc0h5ZHJhdGVkIiwicmVmIiwiaXNSdW50aW1lU3NyUHJlSHlkcmF0aW9uIiwib25Nb3VudGVkIiwiaGFzT2JzZXJ2ZXIiLCJyZXNpemVQcm9wcyIsIlFSZXNpemVPYnNlcnZlciIsImVtaXQiLCJ0aW1lciIsInRhcmdldEVsIiwic2l6ZSIsInRyaWdnZXIiLCJpbW1lZGlhdGVseSIsImVtaXRFdmVudCIsIndpZHRoIiwiaGVpZ2h0IiwicHJveHkiLCJnZXRDdXJyZW50SW5zdGFuY2UiLCJvYnNlcnZlciIsImluaXQiLCJzdG9wIiwibmV4dFRpY2siLCJvbkJlZm9yZVVubW91bnQiLCJub29wIiwiY2xlYW51cCIsImN1ckRvY1ZpZXciLCJsaXN0ZW5PcHRzIiwib25PYmpMb2FkIiwiUUhlYWRlciIsIiRxIiwiJGxheW91dCIsImluamVjdCIsImxheW91dEtleSIsImVtcHR5UmVuZGVyRm4iLCJyZXZlYWxlZCIsImZpeGVkIiwib2Zmc2V0IiwiaGlkZGVuIiwicmV2ZWFsT25Gb2N1cyIsInN0eWxlIiwidmlldyIsImNzcyIsInVwZGF0ZUxheW91dCIsInByb3AiLCJ2YWwiLCJ1cGRhdGVMb2NhbCIsIm9uUmVzaXplIiwib25Gb2N1c2luIiwiZXZ0Iiwid2F0Y2giLCJzY3JvbGwiLCJpbnN0YW5jZSIsImNoaWxkIiwiaFVuaXF1ZVNsb3QiLCJRSXRlbUxhYmVsIiwicGFyc2VkTGluZXMiLCJRSXRlbVNlY3Rpb24iLCJRSXRlbSIsInVzZURhcmtQcm9wcyIsInVzZVJvdXRlckxpbmtQcm9wcyIsImlzRGFyayIsInVzZURhcmsiLCJoYXNMaW5rIiwibGlua0F0dHJzIiwibGlua0NsYXNzIiwibGlua1RhZyIsIm5hdmlnYXRlT25DbGljayIsInVzZVJvdXRlckxpbmsiLCJyb290UmVmIiwiYmx1clRhcmdldFJlZiIsImlzQWN0aW9uYWJsZSIsImlzQ2xpY2thYmxlIiwiZGlyIiwib25DbGljayIsImUiLCJvbktleXVwIiwiaXNLZXlDb2RlIiwic3RvcEFuZFByZXZlbnQiLCJnZXRDb250ZW50IiwiZGF0YSIsIlFMaXN0Iiwidm0iLCJjbGVhclNlbGVjdGlvbiIsInNlbGVjdGlvbiIsIlBsYXRmb3JtIiwidXNlQW5jaG9yUHJvcHMiLCJ1c2VBbmNob3IiLCJzaG93aW5nIiwiYXZvaWRFbWl0IiwiY29uZmlndXJlQW5jaG9yRWwiLCJhbmNob3JFbCIsInRvdWNoVGltZXIiLCJjYW5TaG93IiwiYW5jaG9yRXZlbnRzIiwicHJldmVudCIsInRhcmdldCIsImFkZEV2dCIsImNvbnRleHQiLCJldnRzIiwidW5jb25maWd1cmVBbmNob3JFbCIsImNsZWFuRXZ0Iiwic2V0QW5jaG9yRWwiLCJlbCIsInBpY2tBbmNob3JFbCIsInVzZVNjcm9sbFRhcmdldCIsImNvbmZpZ3VyZVNjcm9sbFRhcmdldCIsImxvY2FsU2Nyb2xsVGFyZ2V0Iiwic2Nyb2xsRm4iLCJjaGFuZ2VTY3JvbGxFdmVudCIsInNjcm9sbFRhcmdldCIsImZuIiwiZm5Qcm9wIiwiZm5IYW5kbGVyIiwidW5jb25maWd1cmVTY3JvbGxUYXJnZXQiLCJub1BhcmVudEV2ZW50V2F0Y2hlciIsIm5vdFBhc3NpdmVDYXB0dXJlIiwicmVnaXN0ZXJlZExpc3QiLCJnbG9iYWxIYW5kbGVyIiwicG9ydGFsSW5kZXgiLCJwb3J0YWxQcm94eUxpc3QiLCJpIiwic3RhdGUiLCJhZGRDbGlja091dHNpZGUiLCJjbGlja091dHNpZGVQcm9wcyIsInJlbW92ZUNsaWNrT3V0c2lkZSIsImluZGV4IiwidnBMZWZ0IiwidnBUb3AiLCJ2YWxpZGF0ZVBvc2l0aW9uIiwicG9zIiwicGFydHMiLCJ2YWxpZGF0ZU9mZnNldCIsImhvcml6b250YWxQb3MiLCJwYXJzZVBvc2l0aW9uIiwicnRsIiwiZ2V0QW5jaG9yUHJvcHMiLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJnZXRBYnNvbHV0ZUFuY2hvclByb3BzIiwiYWJzb2x1dGVPZmZzZXQiLCJnZXRUYXJnZXRQcm9wcyIsImdldFRvcExlZnRQcm9wcyIsImFuY2hvclByb3BzIiwidGFyZ2V0UHJvcHMiLCJhbmNob3JPcmlnaW4iLCJzZWxmT3JpZ2luIiwic2V0UG9zaXRpb24iLCJjZmciLCJyZXRyeU51bWJlciIsImZpdCIsImNvdmVyIiwibWF4SGVpZ2h0IiwibWF4V2lkdGgiLCJjbGllbnQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib3JpZ0VsV2lkdGgiLCJvcmlnRWxIZWlnaHQiLCJlbFdpZHRoIiwiZWxIZWlnaHQiLCJlbFN0eWxlIiwiYXBwbHlCb3VuZGFyaWVzIiwiaGFzQ2hhbmdlZCIsIm9mZnNldFkiLCJvZmZzZXRYIiwiY3VycmVudEhlaWdodCIsImN1cnJlbnRXaWR0aCIsIm1hcmdpbiIsImdldFNjcm9sbGJhcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiYW5jaG9yWSIsImFuY2hvclgiLCJRVG9vbHRpcCIsInVzZU1vZGVsVG9nZ2xlUHJvcHMiLCJ1c2VUcmFuc2l0aW9uUHJvcHMiLCJ1c2VNb2RlbFRvZ2dsZUVtaXRzIiwiYXR0cnMiLCJ1bndhdGNoUG9zaXRpb24iLCJpbm5lclJlZiIsImhpZGVPblJvdXRlQ2hhbmdlIiwicmVnaXN0ZXJUaWNrIiwicmVtb3ZlVGljayIsInVzZVRpY2siLCJyZWdpc3RlclRpbWVvdXQiLCJ1c2VUaW1lb3V0IiwidHJhbnNpdGlvblByb3BzIiwidHJhbnNpdGlvblN0eWxlIiwidXNlVHJhbnNpdGlvbiIsInNob3ciLCJoaWRlIiwidXNlTW9kZWxUb2dnbGUiLCJoYW5kbGVTaG93IiwiaGFuZGxlSGlkZSIsImRlbGF5U2hvdyIsImRlbGF5SGlkZSIsInNob3dQb3J0YWwiLCJoaWRlUG9ydGFsIiwicmVuZGVyUG9ydGFsIiwidXNlUG9ydGFsIiwicmVuZGVyUG9ydGFsQ29udGVudCIsImhhc0NsaWNrT3V0c2lkZSIsInVwZGF0ZVBvc2l0aW9uIiwiYW5jaG9yQ2xlYW51cCIsImdldFNjcm9sbFRhcmdldCIsImdldFRvb2x0aXBDb250ZW50IiwiVHJhbnNpdGlvbiIsIm1vZGlmaWVyc0FsbCIsImRpcmVjdGlvbkxpc3QiLCJnZXRNb2RpZmllckRpcmVjdGlvbnMiLCJtb2QiLCJkaXJlY3Rpb24iLCJhdm9pZE5vZGVOYW1lc0xpc3QiLCJzaG91bGRTdGFydCIsImN0eCIsImdldENoYW5nZXMiLCJpc0ZpbmFsIiwicG9zaXRpb24iLCJkaXN0WCIsImRpc3RZIiwiYWJzWCIsImFic1kiLCJzeW50aGV0aWMiLCJ1aWQiLCJUb3VjaFBhbiIsImNyZWF0ZURpcmVjdGl2ZSIsInZhbHVlIiwibW9kaWZpZXJzIiwiaGFuZGxlRXZlbnQiLCJtb3VzZUV2ZW50IiwibGVmdENsaWNrIiwicHJldmVudERyYWdnYWJsZSIsImNsb25lIiwiaXNNb3VzZUV2dCIsInN0YXJ0IiwiY3Vyc29yIiwid2l0aERlbGF5ZWRGbiIsInJlbW92ZSIsInBheWxvYWQiLCJhYm9ydCIsImNhcHR1cmUiLCJiaW5kaW5ncyIsImJldHdlZW4iLCJ2IiwibWluIiwibWF4IiwiZHVyYXRpb24iLCJRRHJhd2VyIiwicHJldmVudEJvZHlTY3JvbGwiLCJ1c2VQcmV2ZW50U2Nyb2xsIiwicmVtb3ZlVGltZW91dCIsImxhc3REZXNrdG9wU3RhdGUiLCJ0aW1lck1pbmkiLCJsYXlvdXRUb3RhbFdpZHRoV2F0Y2hlciIsImJlbG93QnJlYWtwb2ludCIsImlzTWluaSIsIm9uU2NyZWVuT3ZlcmxheSIsIm5vRXZlbnQiLCJhZGRUb0hpc3RvcnkiLCJhcHBseVBvc2l0aW9uIiwib3RoZXJJbnN0YW5jZSIsIm90aGVyU2lkZSIsImFwcGx5QmFja2Ryb3AiLCJzZXRTY3JvbGxhYmxlIiwicmVtb3ZlRnJvbUhpc3RvcnkiLCJzdGF0ZURpcmVjdGlvbiIsInVzZUhpc3RvcnkiLCJyaWdodFNpZGUiLCJmbGFnQmFja2Ryb3BCZyIsImZsYWdQYW5uaW5nIiwiZmxhZ01pbmlBbmltYXRlIiwiZmxhZ0NvbnRlbnRQb3NpdGlvbiIsIm9uTGF5b3V0IiwiYmFja2Ryb3BDbGFzcyIsImJhY2tkcm9wU3R5bGUiLCJoZWFkZXJTbG90IiwiZm9vdGVyU2xvdCIsImFib3ZlU3R5bGUiLCJjb250ZW50Q2xhc3MiLCJvcGVuRGlyZWN0aXZlIiwib25PcGVuUGFuIiwiY29udGVudENsb3NlRGlyZWN0aXZlIiwib25DbG9zZVBhbiIsImJhY2tkcm9wQ2xvc2VEaXJlY3RpdmUiLCJ1cGRhdGVCZWxvd0JyZWFrcG9pbnQiLCJuZXdTaWRlIiwib2xkU2lkZSIsInVwZGF0ZVNpemVPbkxheW91dCIsImFuaW1hdGVNaW5pIiwieCIsImFjdGlvbiIsIm1pbmlUb092ZXJsYXkiLCJ3aXRoRGlyZWN0aXZlcyIsImhEaXIiLCJtaW5pIiwiY29udGVudCIsIlFQYWdlQ29udGFpbmVyIiwiXyIsInByb3ZpZGUiLCJwYWdlQ29udGFpbmVyS2V5IiwicGFzc2l2ZSIsImF4aXNWYWx1ZXMiLCJRU2Nyb2xsT2JzZXJ2ZXIiLCJjbGVhclRpbWVyIiwicGFyZW50RWwiLCJnZXRWZXJ0aWNhbFNjcm9sbFBvc2l0aW9uIiwiZ2V0SG9yaXpvbnRhbFNjcm9sbFBvc2l0aW9uIiwiZGVsdGEiLCJjdXJEaXIiLCJRTGF5b3V0IiwiY29udGFpbmVySGVpZ2h0Iiwic2Nyb2xsYmFyV2lkdGgiLCJ0YXJnZXRTdHlsZSIsInRhcmdldENoaWxkU3R5bGUiLCJvblBhZ2VTY3JvbGwiLCJpbmZvIiwib25QYWdlUmVzaXplIiwibmV3SGVpZ2h0IiwibmV3V2lkdGgiLCJyZXNpemVkIiwidXBkYXRlU2Nyb2xsYmFyV2lkdGgiLCJvbkNvbnRhaW5lclJlc2l6ZSIsImFuaW1hdGVUaW1lciIsInJvd3MiLCJyZWFjdGl2ZSIsInBhcnQiLCJyZXN0b3JlU2Nyb2xsYmFyIiwiaGlkZVNjcm9sbGJhciIsInVwZGF0ZVNjcm9sbEV2ZW50Iiwib25Vbm1vdW50ZWQiLCJoTWVyZ2VTbG90IiwibGF5b3V0IiwibGVmdERyYXdlck9wZW4iLCJhcHAiLCJ0b2dnbGVMZWZ0RHJhd2VyIl0sIm1hcHBpbmdzIjoiMm1CQUtBLElBQUFBLEdBQWVDLEVBQWdCLENBQzdCLEtBQU0sZ0JBRU4sTUFBTyxDQUNMLE9BQVEsT0FDVCxFQUVELE1BQU9DLEVBQU8sQ0FBRSxNQUFBQyxHQUFTLENBQ3ZCLE1BQU1DLEVBQVVDLEVBQVMsSUFDdkIsNkJBQ0dILEVBQU0sU0FBVyxHQUFPLGNBQWdCLEdBQzVDLEVBRUQsTUFBTyxJQUFNSSxFQUFFLE1BQU8sQ0FBRSxNQUFPRixFQUFRLEtBQUssRUFBSUcsRUFBTUosRUFBTSxPQUFPLENBQUMsQ0FDckUsQ0FDSCxDQUFDLEVDZkRLLEdBQWVQLEVBQWdCLENBQzdCLEtBQU0sV0FFTixNQUFPLENBQ0wsTUFBTyxPQUNSLEVBRUQsTUFBT0MsRUFBTyxDQUFFLE1BQUFDLEdBQVMsQ0FDdkIsTUFBTUMsRUFBVUMsRUFBUyxJQUN2QixzQ0FDR0gsRUFBTSxRQUFVLEdBQU8sb0JBQXNCLEdBQ2pELEVBRUQsTUFBTyxJQUFNSSxFQUFFLE1BQU8sQ0FBRSxNQUFPRixFQUFRLE1BQU8sS0FBTSxTQUFTLEVBQUlHLEVBQU1KLEVBQU0sT0FBTyxDQUFDLENBQ3RGLENBQ0gsQ0FBQyxFQ2ZjLFNBQUFNLElBQVksQ0FDekIsTUFBTUMsRUFBYUMsRUFBSSxDQUFDQyxHQUF5QixLQUFLLEVBRXRELE9BQUlGLEVBQVcsUUFBVSxJQUN2QkcsR0FBVSxJQUFNLENBQ2RILEVBQVcsTUFBUSxFQUN6QixDQUFLLEVBR0ksQ0FBRSxXQUFBQSxDQUFZLENBQ3ZCLENDUkEsTUFBTUksR0FBYyxPQUFPLGdCQUFtQixZQUN4Q0MsR0FBY0QsS0FBZ0IsR0FDaEMsQ0FBRSxFQUNGLENBQ0UsTUFBTyx1SUFDUCxJQUFLLGFBQ04sRUFFTCxJQUFBRSxHQUFlZixFQUFnQixDQUM3QixLQUFNLGtCQUVOLE1BQU8sQ0FDTCxTQUFVLENBQ1IsS0FBTSxDQUFFLE9BQVEsTUFBUSxFQUN4QixRQUFTLEdBQ1YsQ0FDRixFQUVELE1BQU8sQ0FBRSxRQUFVLEVBRW5CLE1BQU9DLEVBQU8sQ0FBRSxLQUFBZSxHQUFRLENBR3RCLElBQUlDLEVBQVEsS0FBTUMsRUFBVUMsRUFBTyxDQUFFLE1BQU8sR0FBSSxPQUFRLEVBQUksRUFFNUQsU0FBU0MsRUFBU0MsRUFBYSxDQUN6QkEsSUFBZ0IsSUFBUXBCLEVBQU0sV0FBYSxHQUFLQSxFQUFNLFdBQWEsSUFDckVxQixFQUFXLEVBRUpMLElBQVUsT0FDakJBLEVBQVEsV0FBV0ssRUFBV3JCLEVBQU0sUUFBUSxFQUUvQyxDQUVELFNBQVNxQixHQUFhLENBTXBCLEdBTElMLElBQVUsT0FDWixhQUFhQSxDQUFLLEVBQ2xCQSxFQUFRLE1BR05DLEVBQVUsQ0FDWixLQUFNLENBQUUsWUFBYUssRUFBTyxhQUFjQyxDQUFRLEVBQUdOLEdBRWpESyxJQUFVSixFQUFLLE9BQVNLLElBQVdMLEVBQUssVUFDMUNBLEVBQU8sQ0FBRSxNQUFBSSxFQUFPLE9BQUFDLENBQVEsRUFDeEJSLEVBQUssU0FBVUcsQ0FBSSxFQUV0QixDQUNGLENBRUQsS0FBTSxDQUFFLE1BQUFNLENBQU8sRUFBR0MsRUFBb0IsRUFLdEMsR0FGQUQsRUFBTSxRQUFVTCxFQUVaUCxLQUFnQixHQUFNLENBQ3hCLElBQUljLEVBR0osTUFBTUMsRUFBT0MsR0FBUSxDQUNuQlgsRUFBV08sRUFBTSxJQUFJLFdBRWpCUCxHQUNGUyxFQUFXLElBQUksZUFBZVAsQ0FBTyxFQUNyQ08sRUFBUyxRQUFRVCxDQUFRLEVBQ3pCSSxFQUFXLEdBRUpPLElBQVMsSUFDaEJDLEdBQVMsSUFBTSxDQUFFRixFQUFLLEVBQUksQ0FBQyxDQUFFLENBRWhDLEVBRUQsT0FBQWhCLEdBQVUsSUFBTSxDQUFFZ0IsRUFBSSxFQUFJLEVBRTFCRyxFQUFnQixJQUFNLENBQ3BCZCxJQUFVLE1BQVEsYUFBYUEsQ0FBSyxFQUVoQ1UsSUFBYSxTQUNYQSxFQUFTLGFBQWUsT0FDMUJBLEVBQVMsV0FBWSxFQUVkVCxHQUNQUyxFQUFTLFVBQVVULENBQVEsRUFHdkMsQ0FBTyxFQUVNYyxFQUNSLEtBQ0ksQ0FLSCxJQUFTQyxFQUFULFVBQW9CLENBQ2RoQixJQUFVLE9BQ1osYUFBYUEsQ0FBSyxFQUNsQkEsRUFBUSxNQUdOaUIsSUFBZSxTQUViQSxFQUFXLHNCQUF3QixRQUNyQ0EsRUFBVyxvQkFBb0IsU0FBVWQsRUFBU2UsR0FBVyxPQUFPLEVBRXRFRCxFQUFhLE9BRWhCLEVBRVFFLEVBQVQsVUFBc0IsQ0FDcEJILEVBQVMsRUFFTGYsR0FBWUEsRUFBUyxrQkFDdkJnQixFQUFhaEIsRUFBUyxnQkFBZ0IsWUFDdENnQixFQUFXLGlCQUFpQixTQUFVZCxFQUFTZSxHQUFXLE9BQU8sRUFDakViLEVBQVcsRUFFZCxFQTNCRCxLQUFNLENBQUUsV0FBQWIsQ0FBWSxFQUFHRCxHQUFjLEVBRXJDLElBQUkwQixFQTJCSixPQUFBdEIsR0FBVSxJQUFNLENBQ2RrQixHQUFTLElBQU0sQ0FDYlosRUFBV08sRUFBTSxJQUNqQlAsR0FBWWtCLEVBQVcsQ0FDakMsQ0FBUyxDQUNULENBQU8sRUFFREwsRUFBZ0JFLENBQU8sRUFFaEIsSUFBTSxDQUNYLEdBQUl4QixFQUFXLFFBQVUsR0FDdkIsT0FBT0osRUFBRSxTQUFVLENBQ2pCLE1BQU8sdUJBQ1AsTUFBT1MsR0FBWSxNQUNuQixTQUFVLEdBQ1YsS0FBTSxZQUNOLEtBQU1BLEdBQVksSUFDbEIsY0FBZSxPQUNmLE9BQVFzQixDQUNwQixDQUFXLENBRUosQ0FDRixDQUNGLENBQ0gsQ0FBQyxFQzlJREMsR0FBZXJDLEVBQWdCLENBQzdCLEtBQU0sVUFFTixNQUFPLENBQ0wsV0FBWSxDQUNWLEtBQU0sUUFDTixRQUFTLEVBQ1YsRUFDRCxPQUFRLFFBQ1IsYUFBYyxDQUNaLEtBQU0sT0FDTixRQUFTLEdBQ1YsRUFDRCxTQUFVLFFBQ1YsU0FBVSxRQUVWLFdBQVksQ0FDVixLQUFNLENBQUUsT0FBUSxNQUFRLEVBQ3hCLFFBQVMsRUFDVixDQUNGLEVBRUQsTUFBTyxDQUFFLFNBQVUsU0FBVyxFQUU5QixNQUFPQyxFQUFPLENBQUUsTUFBQUMsRUFBTyxLQUFBYyxDQUFJLEVBQUksQ0FDN0IsS0FBTSxDQUFFLE1BQU8sQ0FBRSxHQUFBc0IsQ0FBSSxDQUFBLEVBQUtaLEVBQW9CLEVBRXhDYSxFQUFVQyxHQUFPQyxHQUFXQyxDQUFhLEVBQy9DLEdBQUlILElBQVlHLEVBQ2QsZUFBUSxNQUFNLHNDQUFzQyxFQUM3Q0EsRUFHVCxNQUFNdkIsRUFBT1QsRUFBSSxTQUFTVCxFQUFNLFdBQVksRUFBRSxDQUFDLEVBQ3pDMEMsRUFBV2pDLEVBQUksRUFBSSxFQUVuQmtDLEVBQVF4QyxFQUFTLElBQ3JCSCxFQUFNLFNBQVcsSUFDZHNDLEVBQVEsS0FBSyxNQUFNLFFBQVEsR0FBRyxJQUFNLElBQ25DRCxFQUFHLFNBQVMsR0FBRyxLQUFPQyxFQUFRLFlBQVksUUFBVSxFQUN6RCxFQUVLTSxFQUFTekMsRUFBUyxJQUFNLENBQzVCLEdBQUlILEVBQU0sYUFBZSxHQUN2QixNQUFPLEdBRVQsR0FBSTJDLEVBQU0sUUFBVSxHQUNsQixPQUFPRCxFQUFTLFFBQVUsR0FBT3hCLEVBQUssTUFBUSxFQUVoRCxNQUFNMEIsRUFBUzFCLEVBQUssTUFBUW9CLEVBQVEsT0FBTyxNQUFNLFNBQ2pELE9BQU9NLEVBQVMsRUFBSUEsRUFBUyxDQUNuQyxDQUFLLEVBRUtDLEVBQVMxQyxFQUFTLElBQU1ILEVBQU0sYUFBZSxJQUM3QzJDLEVBQU0sUUFBVSxJQUFRRCxFQUFTLFFBQVUsRUFDaEQsRUFFS0ksRUFBZ0IzQyxFQUFTLElBQzdCSCxFQUFNLGFBQWUsSUFBUTZDLEVBQU8sUUFBVSxJQUFRN0MsRUFBTSxTQUFXLEVBQ3hFLEVBRUtFLEVBQVVDLEVBQVMsSUFDdkIseUNBQ0d3QyxFQUFNLFFBQVUsR0FBTyxRQUFVLFlBQWMsUUFDL0MzQyxFQUFNLFdBQWEsR0FBTyxzQkFBd0IsS0FDbEQ2QyxFQUFPLFFBQVUsR0FBTyxvQkFBc0IsS0FDOUM3QyxFQUFNLGFBQWUsR0FBTywyQkFBNkIsR0FDN0QsRUFFSytDLEVBQVE1QyxFQUFTLElBQU0sQ0FDM0IsTUFDRTZDLEVBQU9WLEVBQVEsS0FBSyxNQUFNLElBQzFCVyxFQUFNLENBQUUsRUFFVixPQUFJRCxFQUFNLEtBQVEsS0FBT1YsRUFBUSxLQUFLLFFBQVUsS0FDOUNXLEVBQUtaLEVBQUcsS0FBSyxNQUFRLEdBQU8sUUFBVSxRQUFXLEdBQUlDLEVBQVEsS0FBSyxVQUVoRVUsRUFBTSxLQUFRLEtBQU9WLEVBQVEsTUFBTSxRQUFVLEtBQy9DVyxFQUFLWixFQUFHLEtBQUssTUFBUSxHQUFPLE9BQVMsU0FBWSxHQUFJQyxFQUFRLE1BQU0sVUFHOURXLENBQ2IsQ0FBSyxFQUVELFNBQVNDLEVBQWNDLEVBQU1DLEVBQUssQ0FDaENkLEVBQVEsT0FBTyxTQUFVYSxFQUFNQyxDQUFHLENBQ25DLENBRUQsU0FBU0MsRUFBYUYsRUFBTUMsRUFBSyxDQUMzQkQsRUFBSyxRQUFVQyxJQUNqQkQsRUFBSyxNQUFRQyxFQUVoQixDQUVELFNBQVNFLEVBQVUsQ0FBRSxPQUFBL0IsR0FBVSxDQUM3QjhCLEVBQVluQyxFQUFNSyxDQUFNLEVBQ3hCMkIsRUFBYSxPQUFRM0IsQ0FBTSxDQUM1QixDQUVELFNBQVNnQyxFQUFXQyxFQUFLLENBQ25CVixFQUFjLFFBQVUsSUFDMUJPLEVBQVlYLEVBQVUsRUFBSSxFQUc1QjNCLEVBQUssVUFBV3lDLENBQUcsQ0FDcEIsQ0FFREMsRUFBTSxJQUFNekQsRUFBTSxXQUFZb0QsR0FBTyxDQUNuQ0YsRUFBYSxRQUFTRSxDQUFHLEVBQ3pCQyxFQUFZWCxFQUFVLEVBQUksRUFDMUJKLEVBQVEsUUFBUyxDQUN2QixDQUFLLEVBRURtQixFQUFNYixFQUFRUSxHQUFPLENBQ25CRixFQUFhLFNBQVVFLENBQUcsQ0FDaEMsQ0FBSyxFQUVESyxFQUFNLElBQU16RCxFQUFNLE9BQVFvRCxHQUFPLENBQy9CQSxJQUFRLElBQVNDLEVBQVlYLEVBQVUxQyxFQUFNLFVBQVUsQ0FDN0QsQ0FBSyxFQUVEeUQsRUFBTWYsRUFBVVUsR0FBTyxDQUNyQmQsRUFBUSxRQUFTLEVBQ2pCdkIsRUFBSyxTQUFVcUMsQ0FBRyxDQUN4QixDQUFLLEVBRURLLEVBQU1uQixFQUFRLE9BQVFvQixHQUFVLENBQzlCMUQsRUFBTSxTQUFXLElBQVFxRCxFQUFZWCxFQUNuQ2dCLEVBQU8sWUFBYyxNQUNsQkEsRUFBTyxVQUFZMUQsRUFBTSxjQUN6QjBELEVBQU8sU0FBV0EsRUFBTyxnQkFBa0IsR0FDL0MsQ0FDUCxDQUFLLEVBRUQsTUFBTUMsRUFBVyxDQUFFLEVBRW5CLE9BQUFyQixFQUFRLFVBQVUsT0FBU3FCLEVBQzNCM0QsRUFBTSxhQUFlLElBQVFrRCxFQUFhLE9BQVFoQyxFQUFLLEtBQUssRUFDNURnQyxFQUFhLFFBQVNsRCxFQUFNLFVBQVUsRUFDdENrRCxFQUFhLFNBQVVOLEVBQU8sS0FBSyxFQUVuQ2QsRUFBZ0IsSUFBTSxDQUNoQlEsRUFBUSxVQUFVLFNBQVdxQixJQUMvQnJCLEVBQVEsVUFBVSxPQUFTLE9BQzNCWSxFQUFhLE9BQVEsQ0FBQyxFQUN0QkEsRUFBYSxTQUFVLENBQUMsRUFDeEJBLEVBQWEsUUFBUyxFQUFLLEVBRW5DLENBQUssRUFFTSxJQUFNLENBQ1gsTUFBTVUsRUFBUUMsR0FBWTVELEVBQU0sUUFBUyxDQUFBLENBQUUsRUFFM0MsT0FBQUQsRUFBTSxXQUFhLElBQVE0RCxFQUFNLEtBQy9CeEQsRUFBRSxNQUFPLENBQ1AsTUFBTyxrRUFDakIsQ0FBUyxDQUNGLEVBRUR3RCxFQUFNLEtBQ0p4RCxFQUFFVSxHQUFpQixDQUNqQixTQUFVLEVBQ1YsU0FBQXdDLENBQ1YsQ0FBUyxDQUNGLEVBRU1sRCxFQUFFLFNBQVUsQ0FDakIsTUFBT0YsRUFBUSxNQUNmLE1BQU82QyxFQUFNLE1BQ2IsVUFBQVEsQ0FDRCxFQUFFSyxDQUFLLENBQ1QsQ0FDRixDQUNILENBQUMsRUNoTERFLEdBQWUvRCxFQUFnQixDQUM3QixLQUFNLGFBRU4sTUFBTyxDQUNMLFNBQVUsUUFDVixRQUFTLFFBQ1QsT0FBUSxRQUNSLE1BQU8sQ0FBRSxPQUFRLE1BQVEsQ0FDMUIsRUFFRCxNQUFPQyxFQUFPLENBQUUsTUFBQUMsR0FBUyxDQUN2QixNQUFNOEQsRUFBYzVELEVBQVMsSUFBTSxTQUFTSCxFQUFNLE1BQU8sRUFBRSxDQUFDLEVBRXRERSxFQUFVQyxFQUFTLElBQ3ZCLGlCQUNHSCxFQUFNLFdBQWEsR0FBTyx5Q0FBMkMsS0FDckVBLEVBQU0sVUFBWSxHQUFPLHVDQUF5QyxLQUNsRUEsRUFBTSxTQUFXLEdBQU8seUJBQTJCLEtBQ25EK0QsRUFBWSxRQUFVLEVBQUksWUFBYyxHQUM1QyxFQUVLaEIsRUFBUTVDLEVBQVMsSUFDZEgsRUFBTSxRQUFVLFFBQVUrRCxFQUFZLE1BQVEsRUFDakQsQ0FDRSxTQUFVLFNBQ1YsUUFBUyxjQUNULHFCQUFzQixXQUN0QixxQkFBc0JBLEVBQVksS0FDbkMsRUFDRCxJQUNMLEVBRUQsTUFBTyxJQUFNM0QsRUFBRSxNQUFPLENBQ3BCLE1BQU8yQyxFQUFNLE1BQ2IsTUFBTzdDLEVBQVEsS0FDckIsRUFBT0csRUFBTUosRUFBTSxPQUFPLENBQUMsQ0FDeEIsQ0FDSCxDQUFDLEVDckNEK0QsR0FBZWpFLEVBQWdCLENBQzdCLEtBQU0sZUFFTixNQUFPLENBQ0wsT0FBUSxRQUNSLFVBQVcsUUFDWCxLQUFNLFFBQ04sSUFBSyxRQUNMLE9BQVEsT0FDVCxFQUVELE1BQU9DLEVBQU8sQ0FBRSxNQUFBQyxHQUFTLENBQ3ZCLE1BQU1DLEVBQVVDLEVBQVMsSUFDdkIsMkNBQ3dCSCxFQUFNLFNBQVcsSUFBUUEsRUFBTSxPQUFTLElBQVFBLEVBQU0sWUFBYyxHQUFPLE9BQVMsVUFDekdBLEVBQU0sTUFBUSxHQUFPLHNDQUF3QyxvQkFDN0RBLEVBQU0sU0FBVyxHQUFPLDJCQUE2QixLQUNyREEsRUFBTSxZQUFjLEdBQU8sOEJBQWdDLEtBQzNEQSxFQUFNLFNBQVcsR0FBTywyQkFBNkIsR0FDekQsRUFFRCxNQUFPLElBQU1JLEVBQUUsTUFBTyxDQUFFLE1BQU9GLEVBQVEsS0FBSyxFQUFJRyxFQUFNSixFQUFNLE9BQU8sQ0FBQyxDQUNyRSxDQUNILENBQUMsRUNsQkRnRSxHQUFlbEUsRUFBZ0IsQ0FDN0IsS0FBTSxRQUVOLE1BQU8sQ0FDTCxHQUFHbUUsR0FDSCxHQUFHQyxHQUVILElBQUssQ0FDSCxLQUFNLE9BQ04sUUFBUyxLQUNWLEVBRUQsT0FBUSxDQUNOLEtBQU0sUUFDTixRQUFTLElBQ1YsRUFFRCxVQUFXLFFBQ1gsTUFBTyxRQUNQLFdBQVksT0FFWixTQUFVLENBQUUsT0FBUSxNQUFRLEVBRTVCLFFBQVMsUUFDVCxZQUFhLE9BQ2QsRUFFRCxNQUFPLENBQUUsUUFBUyxPQUFTLEVBRTNCLE1BQU9uRSxFQUFPLENBQUUsTUFBQUMsRUFBTyxLQUFBYyxDQUFJLEVBQUksQ0FDN0IsS0FBTSxDQUFFLE1BQU8sQ0FBRSxHQUFBc0IsQ0FBSSxDQUFBLEVBQUtaLEVBQW9CLEVBRXhDMkMsRUFBU0MsR0FBUXJFLEVBQU9xQyxDQUFFLEVBQzFCLENBQUUsUUFBQWlDLEVBQVMsVUFBQUMsRUFBVyxVQUFBQyxFQUFXLFFBQUFDLEVBQVMsZ0JBQUFDLENBQWlCLEVBQUdDLEdBQWUsRUFFN0VDLEVBQVVuRSxFQUFJLElBQUksRUFDbEJvRSxFQUFnQnBFLEVBQUksSUFBSSxFQUV4QnFFLEVBQWUzRSxFQUFTLElBQzVCSCxFQUFNLFlBQWMsSUFDZnNFLEVBQVEsUUFBVSxJQUNsQnRFLEVBQU0sTUFBUSxPQUNwQixFQUVLK0UsRUFBYzVFLEVBQVMsSUFDM0JILEVBQU0sVUFBWSxJQUFROEUsRUFBYSxRQUFVLEVBQ2xELEVBRUs1RSxFQUFVQyxFQUFTLElBQ3ZCLGtDQUNHSCxFQUFNLFFBQVUsR0FBTyxpQkFBbUIsS0FDMUNvRSxFQUFPLFFBQVUsR0FBTyxnQkFBa0IsS0FFM0NFLEVBQVEsUUFBVSxJQUFRdEUsRUFBTSxTQUFXLEtBQ3ZDd0UsRUFBVSxNQUVSeEUsRUFBTSxTQUFXLEdBQ2Isa0JBQW1CQSxFQUFNLGNBQWdCLE9BQVMsSUFBS0EsRUFBTSxjQUFpQixLQUM5RSxLQUdUQSxFQUFNLFVBQVksR0FBTyxZQUFjLEtBRXhDK0UsRUFBWSxRQUFVLEdBQ2xCLDZDQUNHL0UsRUFBTSxjQUFnQixHQUFPLHFCQUF1Qiw0QkFDcERBLEVBQU0sVUFBWSxHQUFPLCtCQUFpQyxJQUM3RCxHQUVQLEVBRUsrQyxFQUFRNUMsRUFBUyxJQUFNLENBQzNCLEdBQUlILEVBQU0sYUFBZSxPQUN2QixPQUFPLEtBR1QsTUFBTWdGLEVBQU0zQyxFQUFHLEtBQUssTUFBUSxHQUFPLFFBQVUsT0FDN0MsTUFBTyxDQUNMLENBQUUsVUFBWTJDLEdBQVEsR0FBS2hGLEVBQU0sV0FBYSxHQUFNLElBQ3JELENBQ1AsQ0FBSyxFQUVELFNBQVNpRixFQUFTQyxFQUFHLENBQ2ZILEVBQVksUUFBVSxLQUNwQkYsRUFBYyxRQUFVLE9BQ3RCSyxFQUFFLFlBQWMsSUFBUSxTQUFTLGdCQUFrQk4sRUFBUSxNQUM3REMsRUFBYyxNQUFNLE1BQU8sRUFFcEIsU0FBUyxnQkFBa0JBLEVBQWMsT0FDaERELEVBQVEsTUFBTSxNQUFPLEdBSXpCRixFQUFnQlEsQ0FBQyxFQUVwQixDQUVELFNBQVNDLEVBQVNELEVBQUcsQ0FDbkIsR0FBSUgsRUFBWSxRQUFVLElBQVFLLEdBQVVGLEVBQUcsQ0FBRSxHQUFJLEdBQUksSUFBTSxHQUFNLENBQ25FRyxHQUFlSCxDQUFDLEVBR2hCQSxFQUFFLFVBQVksR0FHZCxNQUFNMUIsRUFBTSxJQUFJLFdBQVcsUUFBUzBCLENBQUMsRUFDckMxQixFQUFJLFVBQVksR0FDaEJvQixFQUFRLE1BQU0sY0FBY3BCLENBQUcsQ0FDaEMsQ0FFRHpDLEVBQUssUUFBU21FLENBQUMsQ0FDaEIsQ0FFRCxTQUFTSSxHQUFjLENBQ3JCLE1BQU0xQixFQUFRQyxHQUFZNUQsRUFBTSxRQUFTLENBQUEsQ0FBRSxFQUUzQyxPQUFBOEUsRUFBWSxRQUFVLElBQVFuQixFQUFNLFFBQ2xDeEQsRUFBRSxNQUFPLENBQUUsTUFBTyxpQkFBa0IsU0FBVSxHQUFJLElBQUt5RSxFQUFlLENBQ3ZFLEVBRU1qQixDQUNSLENBRUQsTUFBTyxJQUFNLENBQ1gsTUFBTTJCLEVBQU8sQ0FDWCxJQUFLWCxFQUNMLE1BQU8xRSxFQUFRLE1BQ2YsTUFBTzZDLEVBQU0sTUFDYixLQUFNLFdBQ04sUUFBQWtDLEVBQ0EsUUFBQUUsQ0FDRCxFQUVELE9BQUlKLEVBQVksUUFBVSxJQUN4QlEsRUFBSyxTQUFXdkYsRUFBTSxVQUFZLElBQ2xDLE9BQU8sT0FBT3VGLEVBQU1oQixFQUFVLEtBQUssR0FFNUJPLEVBQWEsUUFBVSxLQUM5QlMsRUFBTSxpQkFBb0IsUUFHckJuRixFQUNMcUUsRUFBUSxNQUNSYyxFQUNBRCxFQUFZLENBQ2IsQ0FDRixDQUNGLENBQ0gsQ0FBQyxFQ3hKREUsR0FBZXpGLEVBQWdCLENBQzdCLEtBQU0sUUFFTixNQUFPLENBQ0wsR0FBR21FLEdBRUgsU0FBVSxRQUNWLE1BQU8sUUFDUCxVQUFXLFFBQ1gsUUFBUyxRQUVULElBQUssQ0FDSCxLQUFNLE9BQ04sUUFBUyxLQUNWLENBQ0YsRUFFRCxNQUFPbEUsRUFBTyxDQUFFLE1BQUFDLEdBQVMsQ0FDdkIsTUFBTXdGLEVBQUtoRSxFQUFvQixFQUN6QjJDLEVBQVNDLEdBQVFyRSxFQUFPeUYsRUFBRyxNQUFNLEVBQUUsRUFFbkN2RixFQUFVQyxFQUFTLElBQ3ZCLFVBQ0dILEVBQU0sV0FBYSxHQUFPLG9CQUFzQixLQUNoREEsRUFBTSxRQUFVLEdBQU8saUJBQW1CLEtBQzFDQSxFQUFNLFlBQWMsR0FBTyxxQkFBdUIsS0FDbERvRSxFQUFPLFFBQVUsR0FBTyxnQkFBa0IsS0FDMUNwRSxFQUFNLFVBQVksR0FBTyxtQkFBcUIsR0FDbEQsRUFFRCxNQUFPLElBQU1JLEVBQUVKLEVBQU0sSUFBSyxDQUFFLE1BQU9FLEVBQVEsT0FBU0csRUFBTUosRUFBTSxPQUFPLENBQUMsQ0FDekUsQ0FDSCxDQUFDLEVDcENNLFNBQVN5RixJQUFrQixDQUNoQyxHQUFJLE9BQU8sZUFBaUIsT0FBUSxDQUNsQyxNQUFNQyxFQUFZLE9BQU8sYUFBYyxFQUNuQ0EsRUFBVSxRQUFVLE9BQ3RCQSxFQUFVLE1BQU8sRUFFVkEsRUFBVSxrQkFBb0IsU0FDckNBLEVBQVUsZ0JBQWlCLEVBQzNCQyxHQUFTLEdBQUcsU0FBVyxJQUFRRCxFQUFVLFNBQVMsU0FBUyxhQUFhLEVBRTNFLE1BQ1EsU0FBUyxZQUFjLFFBQzlCLFNBQVMsVUFBVSxNQUFPLENBRTlCLENDVk8sTUFBTUUsR0FBaUIsQ0FDNUIsT0FBUSxDQUNOLFFBQVMsRUFDVixFQUNELGNBQWUsUUFDZixZQUFhLE9BQ2YsRUFFZSxTQUFBQyxHQUFVLENBQ3ZCLFFBQUFDLEVBQ0EsVUFBQUMsRUFDQSxrQkFBQUMsQ0FDRixFQUFHLENBQ0QsS0FBTSxDQUFFLE1BQUFqRyxFQUFPLE1BQUF3QixFQUFPLEtBQUFULENBQUksRUFBS1UsRUFBb0IsRUFFN0N5RSxFQUFXekYsRUFBSSxJQUFJLEVBRXpCLElBQUkwRixFQUFhLEtBRWpCLFNBQVNDLEVBQVM1QyxFQUFLLENBRXJCLE9BQU8wQyxFQUFTLFFBQVUsS0FDdEIsR0FDQzFDLElBQVEsUUFBVUEsRUFBSSxVQUFZLFFBQVVBLEVBQUksUUFBUSxRQUFVLENBQ3hFLENBRUQsTUFBTTZDLEVBQWUsQ0FBRSxFQUVuQkosSUFBc0IsU0FJeEIsT0FBTyxPQUFPSSxFQUFjLENBQzFCLEtBQU03QyxFQUFLLENBQ1RoQyxFQUFNLEtBQUtnQyxDQUFHLENBQ2YsRUFFRCxPQUFRQSxFQUFLLENBQ1hoQyxFQUFNLE9BQU9nQyxDQUFHLEVBQ2hCQSxFQUFJLGVBQWlCLEVBQ3RCLEVBRUQsVUFBV0EsRUFBSyxDQUNkNEIsR0FBVTVCLEVBQUssRUFBRSxJQUFNLElBQVE2QyxFQUFhLE9BQU83QyxDQUFHLENBQ3ZELEVBRUQsYUFBY0EsRUFBSyxDQUNqQmhDLEVBQU0sS0FBS2dDLENBQUcsRUFDZDhDLEdBQVE5QyxDQUFHLEVBQ1gzQixHQUFTLElBQU0sQ0FDYkwsRUFBTSxLQUFLZ0MsQ0FBRyxFQUNkQSxFQUFJLGVBQWlCLEVBQy9CLENBQVMsQ0FDRixFQUVELFFBQUE4QyxHQUVBLFlBQWE5QyxFQUFLLENBR2hCLEdBRkE2QyxFQUFhLGNBQWM3QyxDQUFHLEVBRTFCNEMsRUFBUTVDLENBQUcsSUFBTSxHQUNuQixPQUdGaEMsRUFBTSxLQUFLZ0MsQ0FBRyxFQUNkMEMsRUFBUyxNQUFNLFVBQVUsSUFBSSxnQkFBZ0IsRUFFN0MsTUFBTUssRUFBUy9DLEVBQUksT0FDbkJnRCxFQUFPSCxFQUFjLFNBQVUsQ0FDN0IsQ0FBRUUsRUFBUSxZQUFhLGdCQUFpQixTQUFXLEVBQ25ELENBQUVBLEVBQVEsV0FBWSxnQkFBaUIsU0FBVyxFQUNsRCxDQUFFQSxFQUFRLGNBQWUsZ0JBQWlCLFNBQVcsRUFDckQsQ0FBRUwsRUFBUyxNQUFPLGNBQWUsVUFBVyxZQUFjLENBQ3BFLENBQVMsRUFFREMsRUFBYSxXQUFXLElBQU0sQ0FDNUJBLEVBQWEsS0FDYjNFLEVBQU0sS0FBS2dDLENBQUcsRUFDZEEsRUFBSSxlQUFpQixFQUN0QixFQUFFLEdBQUcsQ0FDUCxFQUVELGNBQWVBLEVBQUssQ0FDbEIwQyxFQUFTLE1BQU0sVUFBVSxPQUFPLGdCQUFnQixFQUU1Q0MsSUFBZSxPQUNqQixhQUFhQSxDQUFVLEVBQ3ZCQSxFQUFhLE1BR1hKLEVBQVEsUUFBVSxJQUFRdkMsSUFBUSxRQUNwQ2tDLEdBQWdCLENBRW5CLENBQ1AsQ0FBSyxFQUVETyxFQUFvQixTQUFVUSxFQUFVekcsRUFBTSxZQUFhLENBQ3pELEdBQUlBLEVBQU0sZ0JBQWtCLElBQVFrRyxFQUFTLFFBQVUsS0FBTSxPQUU3RCxJQUFJUSxFQUVBRCxJQUFZLEdBQ1ZqRixFQUFNLEdBQUcsU0FBUyxHQUFHLFNBQVcsR0FDbENrRixFQUFPLENBQ0wsQ0FBRVIsRUFBUyxNQUFPLGFBQWMsY0FBZSxTQUFXLENBQzNELEVBR0RRLEVBQU8sQ0FDTCxDQUFFUixFQUFTLE1BQU8sWUFBYSxPQUFRLFNBQVcsRUFDbEQsQ0FBRUEsRUFBUyxNQUFPLGNBQWUsZUFBZ0IsWUFBYyxDQUNoRSxFQUlIUSxFQUFPLENBQ0wsQ0FBRVIsRUFBUyxNQUFPLFFBQVMsU0FBVSxTQUFXLEVBQ2hELENBQUVBLEVBQVMsTUFBTyxRQUFTLFlBQWEsU0FBVyxDQUNwRCxFQUdITSxFQUFPSCxFQUFjLFNBQVVLLENBQUksQ0FDcEMsR0FHSCxTQUFTQyxHQUF1QixDQUM5QkMsR0FBU1AsRUFBYyxRQUFRLENBQ2hDLENBRUQsU0FBU1EsRUFBYUMsRUFBSSxDQUV4QixJQURBWixFQUFTLE1BQVFZLEVBQ1ZaLEVBQVMsTUFBTSxVQUFVLFNBQVMsZ0JBQWdCLEdBQ3ZEQSxFQUFTLE1BQVFBLEVBQVMsTUFBTSxXQUVsQ0QsRUFBbUIsQ0FDcEIsQ0FFRCxTQUFTYyxHQUFnQixDQUN2QixHQUFJL0csRUFBTSxTQUFXLElBQVNBLEVBQU0sU0FBVyxJQUFNd0IsRUFBTSxJQUFJLGFBQWUsS0FDNUUwRSxFQUFTLE1BQVEsYUFFVmxHLEVBQU0sU0FBVyxHQUN4QjZHLEVBQVlyRixFQUFNLElBQUksVUFBVSxNQUU3QixDQUNILElBQUlzRixFQUFLOUcsRUFBTSxPQUVmLEdBQUksT0FBT0EsRUFBTSxRQUFXLFNBQzFCLEdBQUksQ0FDRjhHLEVBQUssU0FBUyxjQUFjOUcsRUFBTSxNQUFNLENBQ3pDLE1BQ0QsQ0FDRThHLEVBQUssTUFDTixDQUdrQkEsR0FBTyxNQUMxQlosRUFBUyxNQUFRWSxFQUFHLEtBQU9BLEVBQzNCYixFQUFtQixJQUduQkMsRUFBUyxNQUFRLEtBQ2pCLFFBQVEsTUFBTSxtQkFBb0JsRyxFQUFNLG1CQUFvQixFQUUvRCxDQUNGLENBRUQsT0FBQXlELEVBQU0sSUFBTXpELEVBQU0sWUFBYW9ELEdBQU8sQ0FDaEM4QyxFQUFTLFFBQVUsT0FDckJTLEVBQXFCLEVBQ3JCVixFQUFrQjdDLENBQUcsRUFFM0IsQ0FBRyxFQUVESyxFQUFNLElBQU16RCxFQUFNLE9BQVEsSUFBTSxDQUMxQmtHLEVBQVMsUUFBVSxNQUNyQlMsRUFBcUIsRUFHdkJJLEVBQWMsQ0FDbEIsQ0FBRyxFQUVEdEQsRUFBTSxJQUFNekQsRUFBTSxjQUFlb0QsR0FBTyxDQUNsQzhDLEVBQVMsUUFBVSxPQUNqQjlDLElBQVEsR0FDVnVELEVBQXFCLEVBR3JCVixFQUFtQixFQUczQixDQUFHLEVBRUR0RixHQUFVLElBQU0sQ0FDZG9HLEVBQWMsRUFFVmYsSUFBYyxJQUFRaEcsRUFBTSxhQUFlLElBQVFrRyxFQUFTLFFBQVUsTUFDeEVuRixFQUFLLG9CQUFxQixFQUFLLENBRXJDLENBQUcsRUFFRGUsRUFBZ0IsSUFBTSxDQUNwQnFFLElBQWUsTUFBUSxhQUFhQSxDQUFVLEVBQzlDUSxFQUFxQixDQUN6QixDQUFHLEVBRU0sQ0FDTCxTQUFBVCxFQUNBLFFBQUFFLEVBQ0EsYUFBQUMsQ0FDRCxDQUNILENDck5lLFNBQVFXLEdBQ3JCaEgsRUFDQWlILEVBQ0EsQ0FDQSxNQUFNQyxFQUFvQnpHLEVBQUksSUFBSSxFQUNsQyxJQUFJMEcsRUFFSixTQUFTQyxFQUFtQkMsRUFBY0MsRUFBSSxDQUM1QyxNQUFNQyxFQUFTLEdBQUlELElBQU8sT0FBUyxNQUFRLHdCQUNyQ0UsRUFBWUYsSUFBTyxPQUFTQSxFQUFLSCxFQUVuQ0UsSUFBaUIsUUFDbkJBLEVBQWNFLEdBQVMsU0FBVUMsRUFBV3RGLEdBQVcsT0FBTyxFQUdoRSxPQUFRcUYsR0FBUyxTQUFVQyxFQUFXdEYsR0FBVyxPQUFPLEVBRXhEaUYsRUFBV0csQ0FDWixDQUVELFNBQVNHLEdBQTJCLENBQzlCUCxFQUFrQixRQUFVLE9BQzlCRSxFQUFrQkYsRUFBa0IsS0FBSyxFQUN6Q0EsRUFBa0IsTUFBUSxLQUU3QixDQUVELE1BQU1RLEVBQXVCakUsRUFBTSxJQUFNekQsRUFBTSxjQUFlLElBQU0sQ0FDOURrSCxFQUFrQixRQUFVLE9BQzlCTyxFQUF5QixFQUN6QlIsRUFBdUIsRUFFN0IsQ0FBRyxFQUVELE9BQUFuRixFQUFnQjRGLENBQW9CLEVBRTdCLENBQ0wsa0JBQUFSLEVBQ0Esd0JBQUFPLEVBQ0Esa0JBQUFMLENBQ0QsQ0FDSCxDQ3hDQSxLQUNFLENBQUUsa0JBQUFPLEVBQW1CLEVBQUd6RixHQUN4QjBGLEVBQWlCLENBQUUsRUFFckIsU0FBU0MsR0FBZXJFLEVBQUssQ0FNM0IsTUFBTStDLEVBQVMvQyxFQUFJLE9BRW5CLEdBQ0UrQyxJQUFXLFFBQ1JBLEVBQU8sV0FBYSxHQUNwQkEsRUFBTyxVQUFVLFNBQVMsbUJBQW1CLElBQU0sR0FFdEQsT0FLRixJQUFJdUIsRUFBY0MsR0FBZ0IsT0FBUyxFQUUzQyxLQUFPRCxHQUFlLEdBQUcsQ0FDdkIsTUFBTXRHLEVBQVF1RyxHQUFpQkQsR0FBYyxFQUc3QyxHQUFJdEcsRUFBTSxLQUFLLE9BQVMsV0FBWSxDQUNsQ3NHLElBQ0EsUUFDRCxDQUVELEdBQUl0RyxFQUFNLEtBQUssT0FBUyxVQUN0QixNQUdGLEdBQUlBLEVBQU0sTUFBTSxXQUFhLEdBQzNCLE9BR0ZzRyxHQUNELENBRUQsUUFBU0UsRUFBSUosRUFBZSxPQUFTLEVBQUdJLEdBQUssRUFBR0EsSUFBSyxDQUNuRCxNQUFNQyxFQUFRTCxFQUFnQkksR0FFOUIsSUFFSUMsRUFBTSxTQUFTLFFBQVUsTUFDdEJBLEVBQU0sU0FBUyxNQUFNLFNBQVMxQixDQUFNLElBQU0sTUFHN0NBLElBQVcsU0FBUyxNQUVsQjBCLEVBQU0sU0FBUyxRQUFVLE1BQ3RCQSxFQUFNLFNBQVMsTUFBTSxTQUFTMUIsQ0FBTSxJQUFNLElBTWpEL0MsRUFBSSxjQUFnQixHQUNwQnlFLEVBQU0sZUFBZXpFLENBQUcsTUFHeEIsT0FFSCxDQUNILENBRU8sU0FBUzBFLEdBQWlCQyxFQUFtQixDQUNsRFAsRUFBZSxLQUFLTyxDQUFpQixFQUVqQ1AsRUFBZSxTQUFXLElBQzVCLFNBQVMsaUJBQWlCLFlBQWFDLEdBQWVGLEVBQWlCLEVBQ3ZFLFNBQVMsaUJBQWlCLGFBQWNFLEdBQWVGLEVBQWlCLEVBRTVFLENBRU8sU0FBU1MsR0FBb0JELEVBQW1CLENBQ3JELE1BQU1FLEVBQVFULEVBQWUsVUFBVXhILEdBQUtBLElBQU0rSCxDQUFpQixFQUUvREUsSUFBVSxLQUNaVCxFQUFlLE9BQU9TLEVBQU8sQ0FBQyxFQUUxQlQsRUFBZSxTQUFXLElBTTVCLFNBQVMsb0JBQW9CLFlBQWFDLEdBQWVGLEVBQWlCLEVBQzFFLFNBQVMsb0JBQW9CLGFBQWNFLEdBQWVGLEVBQWlCLEdBR2pGLENDbEdBLElBQUlXLEdBQVFDLEdBRUwsU0FBU0MsR0FBa0JDLEVBQUssQ0FDckMsTUFBTUMsRUFBUUQsRUFBSSxNQUFNLEdBQUcsRUFDM0IsT0FBSUMsRUFBTSxTQUFXLEVBQ1osR0FFTCxDQUFFLE1BQU8sU0FBVSxRQUFVLEVBQUMsU0FBU0EsRUFBTyxFQUFHLElBQU0sSUFDekQsUUFBUSxNQUFNLCtEQUErRCxFQUN0RSxJQUVMLENBQUUsT0FBUSxTQUFVLFFBQVMsUUFBUyxPQUFRLFNBQVNBLEVBQU8sRUFBRyxJQUFNLElBQ3pFLFFBQVEsTUFBTSx1RUFBdUUsRUFDOUUsSUFFRixFQUNULENBRU8sU0FBU0MsR0FBZ0J2RixFQUFLLENBQ25DLE9BQUtBLEVBQ0QsRUFBQUEsRUFBSSxTQUFXLEdBQ2YsT0FBT0EsRUFBSyxJQUFRLFVBQVksT0FBT0EsRUFBSyxJQUFRLFVBRnJDLEVBTXJCLENBRUEsTUFBTXdGLEdBQWdCLENBQ3BCLFlBQWEsT0FDYixZQUFhLFFBQ2IsVUFBVyxRQUNYLFVBQVcsTUFDYixFQUVDLENBQUUsT0FBUSxTQUFVLE9BQU8sRUFBRyxRQUFRSCxHQUFPLENBQzVDRyxHQUFlLEdBQUlILFNBQWVBLEVBQ2xDRyxHQUFlLEdBQUlILFNBQWVBLENBQ3BDLENBQUMsRUFFTSxTQUFTSSxHQUFlSixFQUFLSyxFQUFLLENBQ3ZDLE1BQU1KLEVBQVFELEVBQUksTUFBTSxHQUFHLEVBQzNCLE1BQU8sQ0FDTCxTQUFVQyxFQUFPLEdBQ2pCLFdBQVlFLEdBQWUsR0FBSUYsRUFBTyxNQUFTSSxJQUFRLEdBQU8sTUFBUSxRQUN2RSxDQUNILENBRU8sU0FBU0MsR0FBZ0JqQyxFQUFJbEUsRUFBUSxDQUMxQyxHQUFJLENBQUUsSUFBQW9HLEVBQUssS0FBQUMsRUFBTSxNQUFBQyxFQUFPLE9BQUFDLEVBQVEsTUFBQTdILEVBQU8sT0FBQUMsQ0FBTSxFQUFLdUYsRUFBRyxzQkFBdUIsRUFFNUUsT0FBSWxFLElBQVcsU0FDYm9HLEdBQU9wRyxFQUFRLEdBQ2ZxRyxHQUFRckcsRUFBUSxHQUNoQnVHLEdBQVV2RyxFQUFRLEdBQ2xCc0csR0FBU3RHLEVBQVEsR0FFakJ0QixHQUFTc0IsRUFBUSxHQUNqQnJCLEdBQVVxQixFQUFRLElBR2IsQ0FDTCxJQUFBb0csRUFBSyxPQUFBRyxFQUFRLE9BQUE1SCxFQUNiLEtBQUEwSCxFQUFNLE1BQUFDLEVBQU8sTUFBQTVILEVBQ2IsT0FBUTJILEdBQVFDLEVBQVFELEdBQVEsRUFDaEMsT0FBUUQsR0FBT0csRUFBU0gsR0FBTyxDQUNoQyxDQUNILENBRUEsU0FBU0ksR0FBd0J0QyxFQUFJdUMsRUFBZ0J6RyxFQUFRLENBQzNELEdBQUksQ0FBRSxJQUFBb0csRUFBSyxLQUFBQyxHQUFTbkMsRUFBRyxzQkFBdUIsRUFFOUMsT0FBQWtDLEdBQU9LLEVBQWUsSUFDdEJKLEdBQVFJLEVBQWUsS0FFbkJ6RyxJQUFXLFNBQ2JvRyxHQUFPcEcsRUFBUSxHQUNmcUcsR0FBUXJHLEVBQVEsSUFHWCxDQUNMLElBQUFvRyxFQUFLLE9BQVFBLEVBQU0sRUFBRyxPQUFRLEVBQzlCLEtBQUFDLEVBQU0sTUFBT0EsRUFBTyxFQUFHLE1BQU8sRUFDOUIsT0FBUUEsRUFDUixPQUFRRCxDQUNULENBQ0gsQ0FFQSxTQUFTTSxHQUFnQmhJLEVBQU9DLEVBQVEsQ0FDdEMsTUFBTyxDQUNMLElBQUssRUFDTCxPQUFRQSxFQUFTLEVBQ2pCLE9BQVFBLEVBQ1IsS0FBTSxFQUNOLE9BQVFELEVBQVEsRUFDaEIsTUFBT0EsQ0FDUixDQUNILENBRUEsU0FBU2lJLEdBQWlCQyxFQUFhQyxFQUFhQyxFQUFjQyxFQUFZLENBQzVFLE1BQU8sQ0FDTCxJQUFLSCxFQUFhRSxFQUFhLFVBQWFELEVBQWFFLEVBQVcsVUFDcEUsS0FBTUgsRUFBYUUsRUFBYSxZQUFlRCxFQUFhRSxFQUFXLFdBQ3hFLENBQ0gsQ0FFTyxTQUFTQyxHQUFhQyxFQUFLQyxFQUFjLEVBQUcsQ0FDakQsR0FDRUQsRUFBSSxXQUFhLE1BQ2RBLEVBQUksV0FBYSxNQUNqQkMsRUFBYyxFQUVqQixPQUtGLEdBQUlELEVBQUksU0FBUyxlQUFpQixHQUFLQSxFQUFJLFNBQVMsY0FBZ0IsRUFBRyxDQUNyRSxXQUFXLElBQU0sQ0FDZkQsR0FBWUMsRUFBS0MsRUFBYyxDQUFDLENBQ2pDLEVBQUUsRUFBRSxFQUNMLE1BQ0QsQ0FFRCxLQUFNLENBQ0osU0FBQTdJLEVBQ0EsT0FBQTJCLEVBQ0EsU0FBQXNELEVBQ0EsYUFBQXdELEVBQ0EsV0FBQUMsRUFDQSxlQUFBTixFQUNBLElBQUFVLEVBQ0EsTUFBQUMsRUFDQSxVQUFBQyxFQUNBLFNBQUFDLENBQ0osRUFBTUwsRUFFSixHQUFJTSxHQUFPLEdBQUcsTUFBUSxJQUFRLE9BQU8saUJBQW1CLE9BQVEsQ0FHOUQsTUFBTXJELEVBQUssU0FBUyxLQUFLLE1BQ25CLENBQUUsV0FBWW1DLEVBQU0sVUFBV0QsQ0FBRyxFQUFLLE9BQU8sZUFFaERDLElBQVNYLEtBQ1h4QixFQUFHLFlBQVksY0FBZW1DLEVBQU8sSUFBSSxFQUN6Q1gsR0FBU1csR0FFUEQsSUFBUVQsS0FDVnpCLEVBQUcsWUFBWSxhQUFja0MsRUFBTSxJQUFJLEVBQ3ZDVCxHQUFRUyxFQUVYLENBTUQsS0FBTSxDQUFFLFdBQUFvQixFQUFZLFVBQUFDLENBQVMsRUFBS3BKLEVBRTVCdUksRUFBY0gsSUFBbUIsT0FDbkNOLEdBQWU3QyxFQUFVOEQsSUFBVSxHQUFPLENBQUUsRUFBRyxDQUFHLEVBQUdwSCxDQUFNLEVBQzNEd0csR0FBdUJsRCxFQUFVbUQsRUFBZ0J6RyxDQUFNLEVBSTNELE9BQU8sT0FBTzNCLEVBQVMsTUFBTyxDQUM1QixJQUFLLEVBQ0wsS0FBTSxFQUNOLFNBQVUsS0FDVixVQUFXLEtBQ1gsU0FBVWlKLEdBQVksUUFDdEIsVUFBV0QsR0FBYSxRQUN4QixXQUFZLFNBQ2hCLENBQUcsRUFFRCxLQUFNLENBQUUsWUFBYUssRUFBYSxhQUFjQyxDQUFjLEVBQUd0SixFQUMzRCxDQUFFLFFBQUF1SixFQUFTLFNBQUFDLENBQVEsRUFBS1YsSUFBUSxJQUFRQyxJQUFVLEdBQ3BELENBQUUsUUFBUyxLQUFLLElBQUlSLEVBQVksTUFBT2MsQ0FBVyxFQUFHLFNBQVVOLElBQVUsR0FBTyxLQUFLLElBQUlSLEVBQVksT0FBUWUsQ0FBWSxFQUFJQSxDQUFjLEVBQzNJLENBQUUsUUFBU0QsRUFBYSxTQUFVQyxDQUFjLEVBRXBELElBQUlHLEVBQVUsQ0FBRSxTQUFBUixFQUFVLFVBQUFELENBQVcsR0FFakNGLElBQVEsSUFBUUMsSUFBVSxNQUM1QlUsRUFBUSxTQUFXbEIsRUFBWSxNQUFRLEtBQ25DUSxJQUFVLEtBQ1pVLEVBQVEsVUFBWWxCLEVBQVksT0FBUyxPQUk3QyxPQUFPLE9BQU92SSxFQUFTLE1BQU95SixDQUFPLEVBRXJDLE1BQU1qQixFQUFjSCxHQUFla0IsRUFBU0MsQ0FBUSxFQUNwRCxJQUFJekssRUFBUXVKLEdBQWdCQyxFQUFhQyxFQUFhQyxFQUFjQyxDQUFVLEVBRTlFLEdBQUlOLElBQW1CLFFBQVV6RyxJQUFXLE9BQzFDK0gsR0FBZ0IzSyxFQUFPd0osRUFBYUMsRUFBYUMsRUFBY0MsQ0FBVSxNQUV0RSxDQUNILEtBQU0sQ0FBRSxJQUFBWCxFQUFLLEtBQUFDLENBQUksRUFBS2pKLEVBR3RCMkssR0FBZ0IzSyxFQUFPd0osRUFBYUMsRUFBYUMsRUFBY0MsQ0FBVSxFQUV6RSxJQUFJaUIsRUFBYSxHQUdqQixHQUFJNUssRUFBTSxNQUFRZ0osRUFBSyxDQUNyQjRCLEVBQWEsR0FDYixNQUFNQyxFQUFVLEVBQUlqSSxFQUFRLEdBQzVCNEcsRUFBWSxPQUFTQSxFQUFZLEtBQU9xQixFQUN4Q3JCLEVBQVksUUFBVXFCLEVBQVUsQ0FDakMsQ0FHRCxHQUFJN0ssRUFBTSxPQUFTaUosRUFBTSxDQUN2QjJCLEVBQWEsR0FDYixNQUFNRSxFQUFVLEVBQUlsSSxFQUFRLEdBQzVCNEcsRUFBWSxPQUFTQSxFQUFZLE1BQVFzQixFQUN6Q3RCLEVBQVksT0FBU3NCLEVBQVUsQ0FDaEMsQ0FFR0YsSUFBZSxLQUVqQjVLLEVBQVF1SixHQUFnQkMsRUFBYUMsRUFBYUMsRUFBY0MsQ0FBVSxFQUcxRWdCLEdBQWdCM0ssRUFBT3dKLEVBQWFDLEVBQWFDLEVBQWNDLENBQVUsRUFFNUUsQ0FFRGUsRUFBVSxDQUNSLElBQUsxSyxFQUFNLElBQU0sS0FDakIsS0FBTUEsRUFBTSxLQUFPLElBQ3BCLEVBRUdBLEVBQU0sWUFBYyxTQUN0QjBLLEVBQVEsVUFBWTFLLEVBQU0sVUFBWSxLQUVsQ3dKLEVBQVksT0FBU3hKLEVBQU0sWUFDN0IwSyxFQUFRLFVBQVlBLEVBQVEsWUFHNUIxSyxFQUFNLFdBQWEsU0FDckIwSyxFQUFRLFNBQVcxSyxFQUFNLFNBQVcsS0FFaEN3SixFQUFZLE1BQVF4SixFQUFNLFdBQzVCMEssRUFBUSxTQUFXQSxFQUFRLFdBSS9CLE9BQU8sT0FBT3pKLEVBQVMsTUFBT3lKLENBQU8sRUFHakN6SixFQUFTLFlBQWNvSixJQUN6QnBKLEVBQVMsVUFBWW9KLEdBRW5CcEosRUFBUyxhQUFlbUosSUFDMUJuSixFQUFTLFdBQWFtSixFQUUxQixDQUVBLFNBQVNPLEdBQWlCM0ssRUFBT3dKLEVBQWFDLEVBQWFDLEVBQWNDLEVBQVksQ0FDbkYsTUFDRW9CLEVBQWdCdEIsRUFBWSxPQUM1QnVCLEVBQWV2QixFQUFZLE1BQzNCd0IsRUFBU0MsR0FBbUIsRUFDNUJDLEVBQWMsT0FBTyxZQUFjRixFQUNuQ0csRUFBYSxTQUFTLEtBQUssWUFFN0IsR0FBSXBMLEVBQU0sSUFBTSxHQUFLQSxFQUFNLElBQU0rSyxFQUFnQkksRUFDL0MsR0FBSXhCLEVBQVcsV0FBYSxTQUMxQjNKLEVBQU0sSUFBTXdKLEVBQWFFLEVBQWEsVUFBYXlCLEVBQWMsRUFDN0QsS0FBSyxJQUFJLEVBQUdBLEVBQWNKLENBQWEsRUFDdkMsRUFDSi9LLEVBQU0sVUFBWSxLQUFLLElBQUkrSyxFQUFlSSxDQUFXLFVBRTlDM0IsRUFBYUUsRUFBYSxVQUFheUIsRUFBYyxFQUFHLENBQy9ELE1BQU1FLEVBQVUsS0FBSyxJQUNuQkYsRUFDQXpCLEVBQWEsV0FBYSxTQUN0QkYsRUFBWSxPQUNYRSxFQUFhLFdBQWFDLEVBQVcsU0FBV0gsRUFBWSxPQUFTQSxFQUFZLEdBQ3ZGLEVBQ0R4SixFQUFNLFVBQVksS0FBSyxJQUFJK0ssRUFBZU0sQ0FBTyxFQUNqRHJMLEVBQU0sSUFBTSxLQUFLLElBQUksRUFBR3FMLEVBQVVOLENBQWEsQ0FDaEQsTUFFQy9LLEVBQU0sSUFBTSxLQUFLLElBQUksRUFBRzBKLEVBQWEsV0FBYSxTQUM5Q0YsRUFBWSxPQUNYRSxFQUFhLFdBQWFDLEVBQVcsU0FBV0gsRUFBWSxJQUFNQSxFQUFZLE1BQ2xGLEVBQ0R4SixFQUFNLFVBQVksS0FBSyxJQUFJK0ssRUFBZUksRUFBY25MLEVBQU0sR0FBRyxFQUlyRSxHQUFJQSxFQUFNLEtBQU8sR0FBS0EsRUFBTSxLQUFPZ0wsRUFBZUksRUFFaEQsR0FEQXBMLEVBQU0sU0FBVyxLQUFLLElBQUlnTCxFQUFjSSxDQUFVLEVBQzlDekIsRUFBVyxhQUFlLFNBQzVCM0osRUFBTSxLQUFPd0osRUFBYUUsRUFBYSxZQUFlMEIsRUFBYSxFQUMvRCxLQUFLLElBQUksRUFBR0EsRUFBYUosQ0FBWSxFQUNyQyxVQUVHeEIsRUFBYUUsRUFBYSxZQUFlMEIsRUFBYSxFQUFHLENBQ2hFLE1BQU1FLEVBQVUsS0FBSyxJQUNuQkYsRUFDQTFCLEVBQWEsYUFBZSxTQUN4QkYsRUFBWSxPQUNYRSxFQUFhLGFBQWVDLEVBQVcsV0FBYUgsRUFBWSxNQUFRQSxFQUFZLElBQzFGLEVBQ0R4SixFQUFNLFNBQVcsS0FBSyxJQUFJZ0wsRUFBY00sQ0FBTyxFQUMvQ3RMLEVBQU0sS0FBTyxLQUFLLElBQUksRUFBR3NMLEVBQVV0TCxFQUFNLFFBQVEsQ0FDbEQsTUFFQ0EsRUFBTSxLQUFPLEtBQUssSUFBSSxFQUFHMEosRUFBYSxhQUFlLFNBQ2pERixFQUFZLE9BQ1hFLEVBQWEsYUFBZUMsRUFBVyxXQUFhSCxFQUFZLEtBQU9BLEVBQVksS0FDdkYsRUFDRHhKLEVBQU0sU0FBVyxLQUFLLElBQUlnTCxFQUFjSSxFQUFhcEwsRUFBTSxJQUFJLENBR3JFLENDOVNBLElBQUF1TCxHQUFleEwsRUFBZ0IsQ0FDN0IsS0FBTSxXQUVOLGFBQWMsR0FFZCxNQUFPLENBQ0wsR0FBRzhGLEdBQ0gsR0FBRzJGLEdBQ0gsR0FBR0MsR0FFSCxVQUFXLENBQ1QsS0FBTSxPQUNOLFFBQVMsSUFDVixFQUNELFNBQVUsQ0FDUixLQUFNLE9BQ04sUUFBUyxJQUNWLEVBRUQsZUFBZ0IsQ0FDZCxRQUFTLFdBQ1YsRUFDRCxlQUFnQixDQUNkLFFBQVMsU0FDVixFQUVELE9BQVEsQ0FDTixLQUFNLE9BQ04sUUFBUyxnQkFDVCxVQUFXakQsRUFDWixFQUNELEtBQU0sQ0FDSixLQUFNLE9BQ04sUUFBUyxhQUNULFVBQVdBLEVBQ1osRUFDRCxPQUFRLENBQ04sS0FBTSxNQUNOLFFBQVMsSUFBTSxDQUFFLEdBQUksRUFBSSxFQUN6QixVQUFXRyxFQUNaLEVBRUQsYUFBYyxDQUNaLFFBQVMsTUFDVixFQUVELE1BQU8sQ0FDTCxLQUFNLE9BQ04sUUFBUyxDQUNWLEVBRUQsVUFBVyxDQUNULEtBQU0sT0FDTixRQUFTLENBQ1YsRUFFRCxXQUFZLE9BQ2IsRUFFRCxNQUFPLENBQ0wsR0FBRytDLEVBQ0osRUFFRCxNQUFPMUwsRUFBTyxDQUFFLE1BQUFDLEVBQU8sS0FBQWMsRUFBTSxNQUFBNEssQ0FBSyxFQUFJLENBQ3BDLElBQUlDLEVBQWlCbEssRUFFckIsTUFBTStELEVBQUtoRSxFQUFvQixFQUN6QixDQUFFLE1BQU8sQ0FBRSxHQUFBWSxDQUFFLENBQUksRUFBR29ELEVBRXBCb0csRUFBV3BMLEVBQUksSUFBSSxFQUNuQnNGLEVBQVV0RixFQUFJLEVBQUssRUFFbkJpSixFQUFldkosRUFBUyxJQUFNMEksR0FBYzdJLEVBQU0sT0FBUXFDLEVBQUcsS0FBSyxHQUFHLENBQUMsRUFDdEVzSCxFQUFheEosRUFBUyxJQUFNMEksR0FBYzdJLEVBQU0sS0FBTXFDLEVBQUcsS0FBSyxHQUFHLENBQUMsRUFDbEV5SixFQUFvQjNMLEVBQVMsSUFBTUgsRUFBTSxhQUFlLEVBQUksRUFFNUQsQ0FBRSxhQUFBK0wsRUFBYyxXQUFBQyxDQUFZLEVBQUdDLEdBQVMsRUFDeEMsQ0FBRSxnQkFBQUMsQ0FBaUIsRUFBR0MsR0FBWSxFQUNsQyxDQUFFLGdCQUFBQyxFQUFpQixnQkFBQUMsR0FBb0JDLEdBQWN0TSxDQUFLLEVBQzFELENBQUUsa0JBQUFrSCxFQUFtQixrQkFBQUUsRUFBbUIsd0JBQUFLLENBQXlCLEVBQUdULEdBQWdCaEgsRUFBT2lILEVBQXFCLEVBRWhILENBQUUsU0FBQWYsRUFBVSxRQUFBRSxFQUFTLGFBQUFDLENBQVksRUFBS1AsR0FBVSxDQUFFLFFBQUFDLEVBQVMsa0JBQUFFLEVBQW1CLEVBRTlFLENBQUUsS0FBQXNHLEVBQU0sS0FBQUMsQ0FBTSxFQUFHQyxHQUFlLENBQ3BDLFFBQUExRyxFQUFTLFFBQUFLLEVBQVMsV0FBQXNHLEVBQVksV0FBQUMsR0FDOUIsa0JBQUFiLEVBQ0EsZUFBZ0IsRUFDdEIsQ0FBSyxFQUVELE9BQU8sT0FBT3pGLEVBQWMsQ0FBRSxVQUFBdUcsR0FBVyxVQUFBQyxFQUFTLENBQUUsRUFFcEQsS0FBTSxDQUFFLFdBQUFDLEVBQVksV0FBQUMsRUFBWSxhQUFBQyxFQUFjLEVBQUdDLEdBQVV4SCxFQUFJb0csRUFBVXFCLEdBQXFCLFNBQVMsRUFJdkcsR0FBSTdLLEVBQUcsU0FBUyxHQUFHLFNBQVcsR0FBTSxDQUNsQyxNQUFNOEYsRUFBb0IsQ0FDeEIsU0FBQWpDLEVBQ0EsU0FBQTJGLEVBQ0EsZUFBZ0IzRyxFQUFHLENBQ2pCLE9BQUFzSCxFQUFLdEgsQ0FBQyxFQUdGQSxFQUFFLE9BQU8sVUFBVSxTQUFTLG9CQUFvQixHQUNsREcsR0FBZUgsQ0FBQyxFQUdYLEVBQ1IsQ0FDRixFQUVLaUksR0FBa0JoTixFQUFTLElBRy9CSCxFQUFNLGFBQWUsTUFFbEJBLEVBQU0sYUFBZSxJQUNyQitGLEVBQVEsUUFBVSxFQUN0QixFQUVEdEMsRUFBTTBKLEdBQWlCL0osR0FBTyxFQUNqQkEsSUFBUSxHQUFPOEUsR0FBa0JFLElBQ3pDRCxDQUFpQixDQUM1QixDQUFPLEVBRURyRyxFQUFnQixJQUFNLENBQ3BCc0csR0FBbUJELENBQWlCLENBQzVDLENBQU8sQ0FDRixDQUVELFNBQVN1RSxFQUFZbEosRUFBSyxDQUN4QnNKLEVBQVksRUFHWmYsRUFBYSxJQUFNLENBQ2pCckssRUFBVyxJQUFJLGlCQUFpQixJQUFNMEwsR0FBZ0IsRUFDdEQxTCxFQUFTLFFBQVFtSyxFQUFTLE1BQU8sQ0FBRSxXQUFZLEdBQU8sVUFBVyxHQUFNLGNBQWUsR0FBTSxRQUFTLEVBQUksQ0FBRSxFQUMzR3VCLEVBQWdCLEVBQ2hCbkcsR0FBdUIsQ0FDL0IsQ0FBTyxFQUVHMkUsSUFBb0IsU0FDdEJBLEVBQWtCbkksRUFDaEIsSUFBTXBCLEVBQUcsT0FBTyxNQUFRLElBQU1BLEVBQUcsT0FBTyxPQUFTLElBQU1yQyxFQUFNLEtBQU8sSUFBTUEsRUFBTSxPQUFTLElBQU1xQyxFQUFHLEtBQUssSUFDdkcrSyxDQUNELEdBSUhsQixFQUFnQixJQUFNLENBQ3BCWSxFQUFXLEVBQUksRUFDZi9MLEVBQUssT0FBUXlDLENBQUcsQ0FDeEIsRUFBU3hELEVBQU0sa0JBQWtCLENBQzVCLENBRUQsU0FBUzJNLEdBQVluSixFQUFLLENBQ3hCd0ksRUFBWSxFQUNaZSxFQUFZLEVBRVpNLEdBQWUsRUFHZm5CLEVBQWdCLElBQU0sQ0FDcEJhLEVBQVcsRUFBSSxFQUNmaE0sRUFBSyxPQUFReUMsQ0FBRyxDQUN4QixFQUFTeEQsRUFBTSxrQkFBa0IsQ0FDNUIsQ0FFRCxTQUFTcU4sSUFBaUIsQ0FDcEIzTCxJQUFhLFNBQ2ZBLEVBQVMsV0FBWSxFQUNyQkEsRUFBVyxRQUdUa0ssSUFBb0IsU0FDdEJBLEVBQWlCLEVBQ2pCQSxFQUFrQixRQUdwQm5FLEVBQXlCLEVBQ3pCYixHQUFTUCxFQUFjLGFBQWEsQ0FDckMsQ0FFRCxTQUFTK0csR0FBa0IsQ0FDekJ4RCxHQUFZLENBQ1YsU0FBVWlDLEVBQVMsTUFDbkIsT0FBUTdMLEVBQU0sT0FDZCxTQUFVa0csRUFBUyxNQUNuQixhQUFjd0QsRUFBYSxNQUMzQixXQUFZQyxFQUFXLE1BQ3ZCLFVBQVczSixFQUFNLFVBQ2pCLFNBQVVBLEVBQU0sUUFDeEIsQ0FBTyxDQUNGLENBRUQsU0FBUzRNLEdBQVdwSixFQUFLLENBQ3ZCLEdBQUluQixFQUFHLFNBQVMsR0FBRyxTQUFXLEdBQU0sQ0FDbENxRCxHQUFnQixFQUNoQixTQUFTLEtBQUssVUFBVSxJQUFJLGdCQUFnQixFQUU1QyxNQUFNYSxHQUFTTCxFQUFTLE1BQ2xCUSxFQUFPLENBQUUsWUFBYSxjQUFlLFdBQVksT0FBUyxFQUM3RCxJQUFJeEIsSUFBTSxDQUFFcUIsR0FBUXJCLEdBQUcsWUFBYSxnQkFBZ0IsQ0FBRyxFQUUxRHNCLEVBQU9ILEVBQWMsY0FBZUssQ0FBSSxDQUN6QyxDQUVEd0YsRUFBZ0IsSUFBTSxDQUFFSyxFQUFLL0ksQ0FBRyxDQUFHLEVBQUV4RCxFQUFNLEtBQUssQ0FDakQsQ0FFRCxTQUFTNk0sR0FBV3JKLEVBQUssQ0FDbkJuQixFQUFHLFNBQVMsR0FBRyxTQUFXLEtBQzVCdUUsR0FBU1AsRUFBYyxhQUFhLEVBQ3BDWCxHQUFnQixFQUVoQixXQUFXLElBQU0sQ0FDZixTQUFTLEtBQUssVUFBVSxPQUFPLGdCQUFnQixDQUNoRCxFQUFFLEVBQUUsR0FJUHdHLEVBQWdCLElBQU0sQ0FBRU0sRUFBS2hKLENBQUcsQ0FBRyxFQUFFeEQsRUFBTSxTQUFTLENBQ3JELENBRUQsU0FBU2lHLEdBQXFCLENBQzVCLEdBQUlqRyxFQUFNLGdCQUFrQixJQUFRa0csRUFBUyxRQUFVLEtBQU0sT0FFN0QsTUFBTVEsRUFBT3JFLEVBQUcsU0FBUyxHQUFHLFNBQVcsR0FDbkMsQ0FDRSxDQUFFNkQsRUFBUyxNQUFPLGFBQWMsWUFBYSxTQUFXLENBQ3pELEVBQ0QsQ0FDRSxDQUFFQSxFQUFTLE1BQU8sYUFBYyxZQUFhLFNBQVcsRUFDeEQsQ0FBRUEsRUFBUyxNQUFPLGFBQWMsWUFBYSxTQUFXLENBQ3pELEVBRUxNLEVBQU9ILEVBQWMsU0FBVUssQ0FBSSxDQUNwQyxDQUVELFNBQVNPLElBQXlCLENBQ2hDLEdBQUlmLEVBQVMsUUFBVSxNQUFRbEcsRUFBTSxlQUFpQixPQUFRLENBQzVEa0gsRUFBa0IsTUFBUW9HLEdBQWdCcEgsRUFBUyxNQUFPbEcsRUFBTSxZQUFZLEVBQzVFLE1BQU1zSCxFQUFLdEgsRUFBTSxnQkFBa0IsR0FDL0JvTixFQUNBWixFQUVKcEYsRUFBa0JGLEVBQWtCLE1BQU9JLENBQUUsQ0FDOUMsQ0FDRixDQUVELFNBQVNpRyxJQUFxQixDQUM1QixPQUFPeEgsRUFBUSxRQUFVLEdBQ3JCM0YsRUFBRSxNQUFPLENBQ1QsR0FBR3VMLEVBQ0gsSUFBS0UsRUFDTCxNQUFPLENBQ0wsaUVBQ0FGLEVBQU0sS0FDUCxFQUNELE1BQU8sQ0FDTEEsRUFBTSxNQUNOVSxFQUFnQixLQUNqQixFQUNELEtBQU0sU0FDaEIsRUFBV2hNLEVBQU1KLEVBQU0sT0FBTyxDQUFDLEVBQ3JCLElBQ0wsQ0FFRCxTQUFTaU4sSUFBdUIsQ0FDOUIsT0FBTzlNLEVBQUVvTixHQUFZcEIsRUFBZ0IsTUFBT21CLEVBQWlCLENBQzlELENBRUQsT0FBQXpMLEVBQWdCdUwsRUFBYSxFQUc3QixPQUFPLE9BQU81SCxFQUFHLE1BQU8sQ0FBRSxlQUFBMkgsQ0FBYyxDQUFFLEVBRW5DSixFQUNSLENBQ0gsQ0FBQyxFQzNTRCxNQUFNUyxHQUFlLENBQ25CLEtBQU0sR0FDTixNQUFPLEdBQ1AsR0FBSSxHQUNKLEtBQU0sR0FDTixXQUFZLEdBQ1osU0FBVSxFQUNaLEVBRU1DLEdBQWdCLE9BQU8sS0FBS0QsRUFBWSxFQUU5Q0EsR0FBYSxJQUFNLEdBRVosU0FBU0UsR0FBdUJDLEVBQUssQ0FDMUMsTUFBTTVJLEVBQU0sQ0FBRSxFQUVkLFVBQVc2SSxLQUFhSCxHQUNsQkUsRUFBS0MsS0FBZ0IsS0FDdkI3SSxFQUFLNkksR0FBYyxJQUl2QixPQUFJLE9BQU8sS0FBSzdJLENBQUcsRUFBRSxTQUFXLEVBQ3ZCeUksSUFHTHpJLEVBQUksYUFBZSxHQUNyQkEsRUFBSSxLQUFPQSxFQUFJLE1BQVEsR0FFaEJBLEVBQUksT0FBUyxJQUFRQSxFQUFJLFFBQVUsS0FDMUNBLEVBQUksV0FBYSxJQUdmQSxFQUFJLFdBQWEsR0FDbkJBLEVBQUksR0FBS0EsRUFBSSxLQUFPLEdBRWJBLEVBQUksS0FBTyxJQUFRQSxFQUFJLE9BQVMsS0FDdkNBLEVBQUksU0FBVyxJQUdiQSxFQUFJLGFBQWUsSUFBUUEsRUFBSSxXQUFhLEtBQzlDQSxFQUFJLElBQU0sSUFHTEEsRUFDVCxDQU9BLE1BQU04SSxHQUFxQixDQUFFLFFBQVMsVUFBWSxFQUUzQyxTQUFTQyxHQUFhdkssRUFBS3dLLEVBQUssQ0FDckMsT0FBT0EsRUFBSSxRQUFVLFFBQ2hCeEssRUFBSSxTQUFXLFFBQ2ZBLEVBQUksT0FBTyxZQUFjLElBQ3pCLE9BQU93SyxFQUFJLFNBQVksWUFDdkJGLEdBQW1CLFNBQVN0SyxFQUFJLE9BQU8sU0FBUyxZQUFhLENBQUEsSUFBTSxLQUNsRUEsRUFBSSxZQUFjLFFBQVVBLEVBQUksVUFBVSxRQUFRd0ssRUFBSSxHQUFHLElBQU0sR0FDdkUsQ0NyREEsU0FBU0MsR0FBWXpLLEVBQUt3SyxFQUFLRSxFQUFTLENBQ3RDLE1BQU16RixFQUFNMEYsR0FBUzNLLENBQUcsRUFDeEIsSUFDRXdCLEVBQ0FvSixFQUFRM0YsRUFBSSxLQUFPdUYsRUFBSSxNQUFNLEVBQzdCSyxFQUFRNUYsRUFBSSxJQUFNdUYsRUFBSSxNQUFNLEVBQzVCTSxFQUFPLEtBQUssSUFBSUYsQ0FBSyxFQUNyQkcsRUFBTyxLQUFLLElBQUlGLENBQUssRUFFdkIsTUFBTVIsRUFBWUcsRUFBSSxVQUVsQkgsRUFBVSxhQUFlLElBQVFBLEVBQVUsV0FBYSxHQUMxRDdJLEVBQU1vSixFQUFRLEVBQUksT0FBUyxRQUVwQlAsRUFBVSxhQUFlLElBQVFBLEVBQVUsV0FBYSxHQUMvRDdJLEVBQU1xSixFQUFRLEVBQUksS0FBTyxPQUVsQlIsRUFBVSxLQUFPLElBQVFRLEVBQVEsR0FDeENySixFQUFNLEtBQ0ZzSixFQUFPQyxJQUNMVixFQUFVLE9BQVMsSUFBUU8sRUFBUSxFQUNyQ3BKLEVBQU0sT0FFQzZJLEVBQVUsUUFBVSxJQUFRTyxFQUFRLElBQzNDcEosRUFBTSxXQUlINkksRUFBVSxPQUFTLElBQVFRLEVBQVEsR0FDMUNySixFQUFNLE9BQ0ZzSixFQUFPQyxJQUNMVixFQUFVLE9BQVMsSUFBUU8sRUFBUSxFQUNyQ3BKLEVBQU0sT0FFQzZJLEVBQVUsUUFBVSxJQUFRTyxFQUFRLElBQzNDcEosRUFBTSxXQUlINkksRUFBVSxPQUFTLElBQVFPLEVBQVEsR0FDMUNwSixFQUFNLE9BQ0ZzSixFQUFPQyxJQUNMVixFQUFVLEtBQU8sSUFBUVEsRUFBUSxFQUNuQ3JKLEVBQU0sS0FFQzZJLEVBQVUsT0FBUyxJQUFRUSxFQUFRLElBQzFDckosRUFBTSxVQUlINkksRUFBVSxRQUFVLElBQVFPLEVBQVEsSUFDM0NwSixFQUFNLFFBQ0ZzSixFQUFPQyxJQUNMVixFQUFVLEtBQU8sSUFBUVEsRUFBUSxFQUNuQ3JKLEVBQU0sS0FFQzZJLEVBQVUsT0FBUyxJQUFRUSxFQUFRLElBQzFDckosRUFBTSxVQUtaLElBQUl3SixFQUFZLEdBRWhCLEdBQUl4SixJQUFRLFFBQVVrSixJQUFZLEdBQU8sQ0FDdkMsR0FBSUYsRUFBSSxNQUFNLFVBQVksSUFBUUEsRUFBSSxNQUFNLFVBQVksT0FDdEQsTUFBTyxDQUFFLEVBR1hoSixFQUFNZ0osRUFBSSxNQUFNLFFBQ2hCUSxFQUFZLEdBRVJ4SixJQUFRLFFBQVVBLElBQVEsU0FDNUJ5RCxFQUFJLE1BQVEyRixFQUNaRSxFQUFPLEVBQ1BGLEVBQVEsSUFHUjNGLEVBQUksS0FBTzRGLEVBQ1hFLEVBQU8sRUFDUEYsRUFBUSxFQUVYLENBRUQsTUFBTyxDQUNMLFVBQUFHLEVBQ0EsUUFBUyxDQUNQLElBQUFoTCxFQUNBLE1BQU93SyxFQUFJLE1BQU0sUUFBVSxHQUMzQixNQUFPQSxFQUFJLE1BQU0sUUFBVSxHQUMzQixTQUFVdkYsRUFDVixVQUFXekQsRUFDWCxRQUFTZ0osRUFBSSxNQUFNLFFBQ25CLFFBQVNFLElBQVksR0FDckIsU0FBVSxLQUFLLElBQUssRUFBR0YsRUFBSSxNQUFNLEtBQ2pDLFNBQVUsQ0FDUixFQUFHTSxFQUNILEVBQUdDLENBQ0osRUFDRCxPQUFRLENBQ04sRUFBR0gsRUFDSCxFQUFHQyxDQUNKLEVBQ0QsTUFBTyxDQUNMLEVBQUc1RixFQUFJLEtBQU91RixFQUFJLE1BQU0sTUFDeEIsRUFBR3ZGLEVBQUksSUFBTXVGLEVBQUksTUFBTSxLQUN4QixDQUNGLENBQ0YsQ0FDSCxDQUVBLElBQUlTLEdBQU0sRUFFVixJQUFBQyxHQUFlQyxHQUVYLENBQ0UsS0FBTSxZQUVOLFlBQWE3SCxFQUFJLENBQUUsTUFBQThILEVBQU8sVUFBQUMsQ0FBUyxFQUFJLENBRXJDLEdBQUlBLEVBQVUsUUFBVSxJQUFRMUUsR0FBTyxJQUFJLFFBQVUsR0FDbkQsT0FHRixTQUFTMkUsRUFBYXRMLEVBQUt1TCxFQUFZLENBQ2pDRixFQUFVLFFBQVUsSUFBUUUsSUFBZSxHQUM3QzFKLEdBQWU3QixDQUFHLEdBR2xCcUwsRUFBVSxPQUFTLElBQVFqTixHQUFLNEIsQ0FBRyxFQUNuQ3FMLEVBQVUsVUFBWSxJQUFRdkksR0FBUTlDLENBQUcsRUFFNUMsQ0FFRCxNQUFNd0ssRUFBTSxDQUNWLElBQUssUUFBV1MsS0FDaEIsUUFBU0csRUFDVCxVQUFBQyxFQUNBLFVBQVdsQixHQUFzQmtCLENBQVMsRUFFMUMsS0FBQTlNLEdBRUEsV0FBWXlCLEVBQUssQ0FDWHVLLEdBQVl2SyxFQUFLd0ssQ0FBRyxHQUFLZ0IsR0FBVXhMLENBQUcsSUFDeENnRCxFQUFPd0gsRUFBSyxPQUFRLENBQ2xCLENBQUUsU0FBVSxZQUFhLE9BQVEsbUJBQXFCLEVBQ3RELENBQUUsU0FBVSxVQUFXLE1BQU8sZ0JBQWtCLENBQ2hFLENBQWUsRUFFREEsRUFBSSxNQUFNeEssRUFBSyxFQUFJLEVBRXRCLEVBRUQsV0FBWUEsRUFBSyxDQUNmLEdBQUl1SyxHQUFZdkssRUFBS3dLLENBQUcsRUFBRyxDQUN6QixNQUFNekgsRUFBUy9DLEVBQUksT0FFbkJnRCxFQUFPd0gsRUFBSyxPQUFRLENBQ2xCLENBQUV6SCxFQUFRLFlBQWEsT0FBUSxtQkFBcUIsRUFDcEQsQ0FBRUEsRUFBUSxjQUFlLE1BQU8sZ0JBQWtCLEVBQ2xELENBQUVBLEVBQVEsV0FBWSxNQUFPLGdCQUFrQixDQUMvRCxDQUFlLEVBRUR5SCxFQUFJLE1BQU14SyxDQUFHLENBQ2QsQ0FDRixFQUVELE1BQU9BLEVBQUt1TCxFQUFZLENBUXRCLEdBUEE1RSxHQUFPLEdBQUcsVUFBWSxJQUFROEUsR0FBaUJuSSxFQUFJLEVBQUksRUFDdkRrSCxFQUFJLFFBQVV4SyxFQU1WdUwsSUFBZSxJQUFRRixFQUFVLE9BQVMsR0FBTSxDQUtsRCxHQUNFYixFQUFJLFVBQVUsTUFBUSxLQUVsQmUsSUFBZSxJQUFTZixFQUFJLFVBQVUsY0FBZ0IsSUFBUUEsRUFBSSxVQUFVLGNBQWdCLElBQ2hHLENBQ0EsTUFBTWtCLEVBQVExTCxFQUFJLEtBQUssUUFBUSxPQUFPLElBQU0sR0FDeEMsSUFBSSxXQUFXQSxFQUFJLEtBQU1BLENBQUcsRUFDNUIsSUFBSSxXQUFXQSxFQUFJLEtBQU1BLENBQUcsRUFFaENBLEVBQUksbUJBQXFCLElBQVE4QyxHQUFRNEksQ0FBSyxFQUM5QzFMLEVBQUksZUFBaUIsSUFBUTVCLEdBQUtzTixDQUFLLEVBRXZDLE9BQU8sT0FBT0EsRUFBTyxDQUNuQixVQUFXMUwsRUFBSSxVQUNmLGNBQWVBLEVBQUksY0FDbkIsZUFBZ0JBLEVBQUksZUFDcEIsVUFBV0EsRUFBSSxZQUFjLE9BQ3pCLENBQUV3SyxFQUFJLEdBQUssRUFDWHhLLEVBQUksVUFBVSxPQUFPd0ssRUFBSSxHQUFHLENBQ2xELENBQWlCLEVBRURBLEVBQUksYUFBZSxDQUNqQixPQUFReEssRUFBSSxPQUNaLE1BQU8wTCxDQUNSLENBQ0YsQ0FFRHROLEdBQUs0QixDQUFHLENBQ1QsQ0FFRCxLQUFNLENBQUUsS0FBQXlGLEVBQU0sSUFBQUQsR0FBUW1GLEdBQVMzSyxDQUFHLEVBRWxDd0ssRUFBSSxNQUFRLENBQ1YsRUFBRy9FLEVBQ0gsRUFBR0QsRUFDSCxLQUFNLEtBQUssSUFBSyxFQUNoQixNQUFPK0YsSUFBZSxHQUN0QixTQUFVLEdBQ1YsUUFBUyxHQUNULFFBQVMsR0FDVCxNQUFPOUYsRUFDUCxNQUFPRCxDQUNSLENBQ0YsRUFFRCxLQUFNeEYsRUFBSyxDQUNULEdBQUl3SyxFQUFJLFFBQVUsT0FDaEIsT0FHRixNQUNFdkYsRUFBTTBGLEdBQVMzSyxDQUFHLEVBQ2xCNEssRUFBUTNGLEVBQUksS0FBT3VGLEVBQUksTUFBTSxFQUM3QkssRUFBUTVGLEVBQUksSUFBTXVGLEVBQUksTUFBTSxFQU85QixHQUFJSSxJQUFVLEdBQUtDLElBQVUsRUFDM0IsT0FHRkwsRUFBSSxRQUFVeEssRUFFZCxNQUFNMkwsRUFBYW5CLEVBQUksTUFBTSxRQUFVLEdBQ2pDb0IsRUFBUSxJQUFNLENBQ2xCTixFQUFZdEwsRUFBSzJMLENBQVUsRUFFM0IsSUFBSUUsRUFDQVIsRUFBVSxpQkFBbUIsSUFBUUEsRUFBVSxpQkFBbUIsS0FDcEVRLEVBQVMsU0FBUyxnQkFBZ0IsTUFBTSxRQUFVLEdBQ2xELFNBQVMsZ0JBQWdCLE1BQU0sT0FBUyxZQUcxQ0YsSUFBZSxJQUFRLFNBQVMsS0FBSyxVQUFVLElBQUksNkJBQTZCLEVBQ2hGLFNBQVMsS0FBSyxVQUFVLElBQUksZ0JBQWdCLEVBQzVDekosR0FBZ0IsRUFFaEJzSSxFQUFJLGFBQWVzQixHQUFpQixDQVNsQyxHQVJBdEIsRUFBSSxhQUFlLE9BRWZxQixJQUFXLFNBQ2IsU0FBUyxnQkFBZ0IsTUFBTSxPQUFTQSxHQUcxQyxTQUFTLEtBQUssVUFBVSxPQUFPLGdCQUFnQixFQUUzQ0YsSUFBZSxHQUFNLENBQ3ZCLE1BQU1JLEVBQVMsSUFBTSxDQUNuQixTQUFTLEtBQUssVUFBVSxPQUFPLDZCQUE2QixDQUM3RCxFQUVHRCxJQUFrQixPQUNwQixXQUFXLElBQU0sQ0FDZkMsRUFBUSxFQUNSRCxFQUFlLENBQ2hCLEVBQUUsRUFBRSxFQUVBQyxFQUFNLENBQ2QsTUFDUUQsSUFBa0IsUUFDekJBLEVBQWUsQ0FFbEIsQ0FDRixFQUVELEdBQUl0QixFQUFJLE1BQU0sV0FBYSxHQUFNLENBQy9CQSxFQUFJLE1BQU0sVUFBWSxJQUFRYyxFQUFZdEwsRUFBS3dLLEVBQUksTUFBTSxLQUFLLEVBRTlELEtBQU0sQ0FBRSxRQUFBd0IsRUFBUyxVQUFBaEIsQ0FBVyxFQUFHUCxHQUFXekssRUFBS3dLLEVBQUssRUFBSyxFQUVyRHdCLElBQVksU0FDVnhCLEVBQUksUUFBUXdCLENBQU8sSUFBTSxHQUMzQnhCLEVBQUksSUFBSXhLLENBQUcsR0FHUHdLLEVBQUksZUFBaUIsUUFBVUEsRUFBSSxNQUFNLFVBQVksSUFDdkRvQixFQUFPLEVBR1RwQixFQUFJLE1BQU0sTUFBUXdCLEVBQVEsU0FBUyxLQUNuQ3hCLEVBQUksTUFBTSxNQUFRd0IsRUFBUSxTQUFTLElBQ25DeEIsRUFBSSxNQUFNLFFBQVVRLElBQWMsR0FBTyxPQUFTZ0IsRUFBUSxVQUMxRHhCLEVBQUksTUFBTSxRQUFVLEtBSXhCLE1BQ0QsQ0FFRCxHQUNFQSxFQUFJLFVBQVUsTUFBUSxJQUVsQm1CLElBQWUsS0FBU25CLEVBQUksVUFBVSxjQUFnQixJQUFRQSxFQUFJLFVBQVUsY0FBZ0IsSUFDaEcsQ0FDQW9CLEVBQU8sRUFDUHBCLEVBQUksTUFBTSxTQUFXLEdBQ3JCQSxFQUFJLEtBQUt4SyxDQUFHLEVBQ1osTUFDRCxDQUVELE1BQ0U4SyxFQUFPLEtBQUssSUFBSUYsQ0FBSyxFQUNyQkcsRUFBTyxLQUFLLElBQUlGLENBQUssRUFFbkJDLElBQVNDLElBRVJQLEVBQUksVUFBVSxhQUFlLElBQVFNLEVBQU9DLEdBQ3pDUCxFQUFJLFVBQVUsV0FBYSxJQUFRTSxFQUFPQyxHQUMxQ1AsRUFBSSxVQUFVLEtBQU8sSUFBUU0sRUFBT0MsR0FBUUYsRUFBUSxHQUNwREwsRUFBSSxVQUFVLE9BQVMsSUFBUU0sRUFBT0MsR0FBUUYsRUFBUSxHQUN0REwsRUFBSSxVQUFVLE9BQVMsSUFBUU0sRUFBT0MsR0FBUUgsRUFBUSxHQUN0REosRUFBSSxVQUFVLFFBQVUsSUFBUU0sRUFBT0MsR0FBUUgsRUFBUSxHQUUzREosRUFBSSxNQUFNLFNBQVcsR0FDckJBLEVBQUksS0FBS3hLLENBQUcsR0FHWndLLEVBQUksSUFBSXhLLEVBQUssRUFBSSxFQUd0QixFQUVELElBQUtBLEVBQUtpTSxFQUFPLENBQ2YsR0FBSXpCLEVBQUksUUFBVSxPQU9sQixJQUhBcEgsR0FBU29ILEVBQUssTUFBTSxFQUNwQjdELEdBQU8sR0FBRyxVQUFZLElBQVE4RSxHQUFpQm5JLEVBQUksRUFBSyxFQUVwRDJJLElBQVUsR0FDWnpCLEVBQUksZUFBaUIsUUFBVUEsRUFBSSxhQUFjLEVBRTdDQSxFQUFJLE1BQU0sV0FBYSxJQUFRQSxFQUFJLGVBQWlCLFFBQ3REQSxFQUFJLGFBQWEsT0FBTyxjQUFjQSxFQUFJLGFBQWEsS0FBSyxVQUd2REEsRUFBSSxNQUFNLFdBQWEsR0FBTSxDQUNwQ0EsRUFBSSxNQUFNLFVBQVksSUFBUUEsRUFBSSxRQUFRQyxHQUFXekssSUFBUSxPQUFTd0ssRUFBSSxRQUFVeEssRUFBS3dLLENBQUcsRUFBRSxPQUFPLEVBRXJHLEtBQU0sQ0FBRSxRQUFBd0IsQ0FBTyxFQUFLdkIsR0FBV3pLLElBQVEsT0FBU3dLLEVBQUksUUFBVXhLLEVBQUt3SyxFQUFLLEVBQUksRUFDdEUxRyxFQUFLLElBQU0sQ0FBRTBHLEVBQUksUUFBUXdCLENBQU8sQ0FBRyxFQUVyQ3hCLEVBQUksZUFBaUIsT0FDdkJBLEVBQUksYUFBYTFHLENBQUUsRUFHbkJBLEVBQUksQ0FFUCxDQUVEMEcsRUFBSSxNQUFRLE9BQ1pBLEVBQUksYUFBZSxPQUNuQkEsRUFBSSxRQUFVLE9BQ2YsQ0FDRixFQUlELEdBRkFsSCxFQUFHLFlBQWNrSCxFQUViYSxFQUFVLFFBQVUsR0FBTSxDQUU1QixNQUFNYSxFQUFVYixFQUFVLGVBQWlCLElBQVFBLEVBQVUsZUFBaUIsR0FDMUUsVUFDQSxHQUVKckksRUFBT3dILEVBQUssT0FBUSxDQUNsQixDQUFFbEgsRUFBSSxZQUFhLGFBQWMsVUFBVzRJLEdBQVksQ0FDcEUsQ0FBVyxDQUNGLENBRUR2RixHQUFPLElBQUksUUFBVSxJQUFRM0QsRUFBT3dILEVBQUssT0FBUSxDQUMvQyxDQUFFbEgsRUFBSSxhQUFjLGFBQWMsVUFBVytILEVBQVUsVUFBWSxHQUFPLFVBQVksSUFBTyxFQUM3RixDQUFFL0gsRUFBSSxZQUFhLE9BQVEsbUJBQXFCLENBQzFELENBQVMsQ0FDRixFQUVELFFBQVNBLEVBQUk2SSxFQUFVLENBQ3JCLE1BQU0zQixFQUFNbEgsRUFBRyxZQUVYa0gsSUFBUSxTQUNOMkIsRUFBUyxXQUFhQSxFQUFTLFFBQ2pDLE9BQU8sT0FBVSxZQUFjM0IsRUFBSSxJQUFLLEVBQ3hDQSxFQUFJLFFBQVUyQixFQUFTLE9BR3pCM0IsRUFBSSxVQUFZTCxHQUFzQmdDLEVBQVMsU0FBUyxFQUUzRCxFQUVELGNBQWU3SSxFQUFJLENBQ2pCLE1BQU1rSCxFQUFNbEgsRUFBRyxZQUVYa0gsSUFBUSxTQUlWQSxFQUFJLFFBQVUsUUFBVUEsRUFBSSxJQUFLLEVBRWpDcEgsR0FBU29ILEVBQUssTUFBTSxFQUNwQnBILEdBQVNvSCxFQUFLLE1BQU0sRUFFcEI3RCxHQUFPLEdBQUcsVUFBWSxJQUFROEUsR0FBaUJuSSxFQUFJLEVBQUssRUFDeERrSCxFQUFJLGVBQWlCLFFBQVVBLEVBQUksYUFBYyxFQUVqRCxPQUFPbEgsRUFBRyxZQUViLENBQ0YsQ0FDTCxFQ3RhTyxTQUFTOEksR0FBU0MsRUFBR0MsRUFBS0MsRUFBSyxDQUNwQyxPQUFPQSxHQUFPRCxFQUNWQSxFQUNBLEtBQUssSUFBSUMsRUFBSyxLQUFLLElBQUlELEVBQUtELENBQUMsQ0FBQyxDQUNwQyxDQ05BLE1BQU1HLEdBQVcsSUFFakIsSUFBQUMsR0FBZWxRLEVBQWdCLENBQzdCLEtBQU0sVUFFTixhQUFjLEdBRWQsTUFBTyxDQUNMLEdBQUd5TCxHQUNILEdBQUd0SCxHQUVILEtBQU0sQ0FDSixLQUFNLE9BQ04sUUFBUyxPQUNULFVBQVcyTCxHQUFLLENBQUUsT0FBUSxPQUFTLEVBQUMsU0FBU0EsQ0FBQyxDQUMvQyxFQUVELE1BQU8sQ0FDTCxLQUFNLE9BQ04sUUFBUyxHQUNWLEVBRUQsS0FBTSxRQUNOLGNBQWUsUUFDZixVQUFXLENBQ1QsS0FBTSxPQUNOLFFBQVMsRUFDVixFQUNELGdCQUFpQixRQUVqQixXQUFZLENBQ1YsS0FBTSxPQUNOLFFBQVMsSUFDVixFQUNELFlBQWEsUUFFYixTQUFVLENBQ1IsS0FBTSxPQUNOLFVBQVdBLEdBQUssQ0FBRSxVQUFXLFVBQVcsUUFBVSxFQUFDLFNBQVNBLENBQUMsRUFDN0QsUUFBUyxTQUNWLEVBRUQsU0FBVSxRQUNWLFNBQVUsUUFFVixRQUFTLFFBQ1QsV0FBWSxRQUNaLFlBQWEsUUFDYixhQUFjLFFBQ2QsZ0JBQWlCLE9BQ2xCLEVBRUQsTUFBTyxDQUNMLEdBQUduRSxHQUNILFdBQVksV0FDYixFQUVELE1BQU8xTCxFQUFPLENBQUUsTUFBQUMsRUFBTyxLQUFBYyxFQUFNLE1BQUE0SyxDQUFLLEVBQUksQ0FDcEMsTUFBTWxHLEVBQUtoRSxFQUFvQixFQUN6QixDQUFFLE1BQU8sQ0FBRSxHQUFBWSxDQUFFLENBQUksRUFBR29ELEVBRXBCckIsRUFBU0MsR0FBUXJFLEVBQU9xQyxDQUFFLEVBQzFCLENBQUUsa0JBQUE2TixDQUFtQixFQUFHQyxHQUFrQixFQUMxQyxDQUFFLGdCQUFBakUsRUFBaUIsY0FBQWtFLENBQWUsRUFBR2pFLEdBQVksRUFFakQ3SixFQUFVQyxHQUFPQyxHQUFXQyxDQUFhLEVBQy9DLEdBQUlILElBQVlHLEVBQ2QsZUFBUSxNQUFNLHNDQUFzQyxFQUM3Q0EsRUFHVCxJQUFJNE4sRUFBa0JDLEVBQVksS0FBTUMsRUFFeEMsTUFBTUMsRUFBa0IvUCxFQUN0QlQsRUFBTSxXQUFhLFVBQ2ZBLEVBQU0sV0FBYSxXQUFhc0MsRUFBUSxXQUFXLE9BQVN0QyxFQUFNLFVBQ3ZFLEVBRUt5USxFQUFTdFEsRUFBUyxJQUN0QkgsRUFBTSxPQUFTLElBQVF3USxFQUFnQixRQUFVLEVBQ2xELEVBRUt0UCxFQUFPZixFQUFTLElBQ3BCc1EsRUFBTyxRQUFVLEdBQ2J6USxFQUFNLFVBQ05BLEVBQU0sS0FDWCxFQUVLK0YsRUFBVXRGLEVBQ2RULEVBQU0sY0FBZ0IsSUFBUXdRLEVBQWdCLFFBQVUsR0FDcEQsR0FDQXhRLEVBQU0sYUFBZSxFQUMxQixFQUVLOEwsRUFBb0IzTCxFQUFTLElBQ2pDSCxFQUFNLGFBQWUsS0FDakJ3USxFQUFnQixRQUFVLElBQVFFLEdBQWdCLFFBQVUsR0FDakUsRUFFRCxTQUFTaEUsRUFBWWxKLEVBQUttTixFQUFTLENBTWpDLEdBTEFDLEVBQWMsRUFFZHBOLElBQVEsSUFBU2xCLEVBQVEsUUFBUyxFQUNsQ3VPLEVBQWMsQ0FBQyxFQUVYTCxFQUFnQixRQUFVLEdBQU0sQ0FDbEMsTUFBTU0sRUFBZ0J4TyxFQUFRLFVBQVd5TyxFQUFVLE9BQy9DRCxJQUFrQixRQUFVQSxFQUFjLGtCQUFvQixJQUNoRUEsRUFBYyxLQUFLLEVBQUssRUFHMUJFLEVBQWMsQ0FBQyxFQUNmMU8sRUFBUSxZQUFZLFFBQVUsSUFBUTROLEVBQWtCLEVBQUksQ0FDN0QsTUFFQ2MsRUFBYyxDQUFDLEVBQ2Z4TixJQUFRLElBQVN5TixHQUFjLEVBQUssRUFHdEMvRSxFQUFnQixJQUFNLENBQ3BCMUksSUFBUSxJQUFTeU4sR0FBYyxFQUFJLEVBQ25DTixJQUFZLElBQVE1UCxFQUFLLE9BQVF5QyxDQUFHLENBQ3JDLEVBQUV3TSxFQUFRLENBQ1osQ0FFRCxTQUFTckQsRUFBWW5KLEVBQUttTixFQUFTLENBQ2pDTyxFQUFtQixFQUVuQjFOLElBQVEsSUFBU2xCLEVBQVEsUUFBUyxFQUVsQzBPLEVBQWMsQ0FBQyxFQUNmSCxFQUFjTSxFQUFlLE1BQVFqUSxFQUFLLEtBQUssRUFFL0NjLEdBQVMsRUFFTDJPLElBQVksR0FDZHpFLEVBQWdCLElBQU0sQ0FBRW5MLEVBQUssT0FBUXlDLENBQUcsQ0FBRyxFQUFFd00sRUFBUSxFQUdyREksRUFBZSxDQUVsQixDQUVELEtBQU0sQ0FBRSxLQUFBN0QsRUFBTSxLQUFBQyxDQUFNLEVBQUdDLEdBQWUsQ0FDcEMsUUFBQTFHLEVBQ0Esa0JBQUErRixFQUNBLFdBQUFZLEVBQ0EsV0FBQUMsQ0FDTixDQUFLLEVBRUssQ0FBRSxhQUFBaUUsRUFBYyxrQkFBQU0sQ0FBbUIsRUFBR0UsR0FBV3JMLEVBQVN5RyxFQUFNVixDQUFpQixFQUVqRm5JLEVBQVcsQ0FDZixnQkFBQTZNLEVBQ0EsS0FBQWhFLENBQ0QsRUFFSzZFLEVBQVlsUixFQUFTLElBQU1ILEVBQU0sT0FBUyxPQUFPLEVBRWpEbVIsRUFBaUJoUixFQUFTLEtBQzdCa0MsRUFBRyxLQUFLLE1BQVEsR0FBTyxHQUFLLElBQU1nUCxFQUFVLFFBQVUsR0FBTyxFQUFJLEdBQ25FLEVBRUtDLEdBQWlCN1EsRUFBSSxDQUFDLEVBQ3RCOFEsRUFBYzlRLEVBQUksRUFBSyxFQUN2QitRLEdBQWtCL1EsRUFBSSxFQUFLLEVBQzNCZ1IsR0FBc0JoUixFQUMxQlMsRUFBSyxNQUFRaVEsRUFBZSxLQUM3QixFQUVLSixFQUFZNVEsRUFBUyxJQUFPa1IsRUFBVSxRQUFVLEdBQU8sT0FBUyxPQUFRLEVBQ3hFek8sR0FBU3pDLEVBQVMsSUFDdEI0RixFQUFRLFFBQVUsSUFBUXlLLEVBQWdCLFFBQVUsSUFBU3hRLEVBQU0sVUFBWSxHQUMxRUEsRUFBTSxnQkFBa0IsR0FBT0EsRUFBTSxVQUFZa0IsRUFBSyxNQUN2RCxDQUNMLEVBRUt5QixHQUFReEMsRUFBUyxJQUNyQkgsRUFBTSxVQUFZLElBQ2ZBLEVBQU0sZ0JBQWtCLElBQ3hCc0MsRUFBUSxLQUFLLE1BQU0sUUFBUStPLEVBQVUsTUFBUSxJQUFNLEdBQUcsSUFBTSxJQUMzRGhQLEVBQUcsU0FBUyxHQUFHLE1BQVEsSUFBUUMsRUFBUSxZQUFZLFFBQVUsRUFDbEUsRUFFS29QLEVBQVd2UixFQUFTLElBQ3hCSCxFQUFNLFVBQVksSUFDZitGLEVBQVEsUUFBVSxJQUNsQnlLLEVBQWdCLFFBQVUsRUFDOUIsRUFFS0UsR0FBa0J2USxFQUFTLElBQy9CSCxFQUFNLFVBQVksSUFDZitGLEVBQVEsUUFBVSxJQUNsQnlLLEVBQWdCLFFBQVUsRUFDOUIsRUFFS21CLEdBQWdCeFIsRUFBUyxJQUM3QixpQ0FDRzRGLEVBQVEsUUFBVSxJQUFTd0wsRUFBWSxRQUFVLEdBQVEsVUFBWSxHQUN6RSxFQUVLSyxHQUFnQnpSLEVBQVMsS0FBTyxDQUNwQyxnQkFBaUIsY0FBZW1SLEdBQWUsTUFBUSxLQUM3RCxFQUFNLEVBRUlPLEVBQWExUixFQUFTLElBQzFCa1IsRUFBVSxRQUFVLEdBQ2hCL08sRUFBUSxLQUFLLE1BQU0sSUFBSyxLQUFRLElBQ2hDQSxFQUFRLEtBQUssTUFBTSxJQUFLLEtBQVEsR0FDckMsRUFFS3dQLEdBQWEzUixFQUFTLElBQzFCa1IsRUFBVSxRQUFVLEdBQ2hCL08sRUFBUSxLQUFLLE1BQU0sT0FBUSxLQUFRLElBQ25DQSxFQUFRLEtBQUssTUFBTSxPQUFRLEtBQVEsR0FDeEMsRUFFS3lQLEVBQWE1UixFQUFTLElBQU0sQ0FDaEMsTUFBTThDLEVBQU0sQ0FBRSxFQUVkLE9BQUlYLEVBQVEsT0FBTyxRQUFVLElBQVF1UCxFQUFXLFFBQVUsS0FDcERsUCxHQUFNLFFBQVUsR0FDbEJNLEVBQUksSUFBTSxHQUFJWCxFQUFRLE9BQU8sV0FFdEJBLEVBQVEsT0FBTyxRQUFVLEtBQ2hDVyxFQUFJLElBQU0sR0FBSVgsRUFBUSxPQUFPLFdBSTdCQSxFQUFRLE9BQU8sUUFBVSxJQUFRd1AsR0FBVyxRQUFVLEtBQ3BEblAsR0FBTSxRQUFVLEdBQ2xCTSxFQUFJLE9BQVMsR0FBSVgsRUFBUSxPQUFPLFdBRXpCQSxFQUFRLE9BQU8sUUFBVSxLQUNoQ1csRUFBSSxPQUFTLEdBQUlYLEVBQVEsT0FBTyxXQUk3QlcsQ0FDYixDQUFLLEVBRUtGLEdBQVE1QyxFQUFTLElBQU0sQ0FDM0IsTUFBTTRDLEVBQVEsQ0FDWixNQUFPLEdBQUk3QixFQUFLLFVBQ2hCLFVBQVcsY0FBZXVRLEdBQW9CLFVBQy9DLEVBRUQsT0FBT2pCLEVBQWdCLFFBQVUsR0FDN0J6TixFQUNBLE9BQU8sT0FBT0EsRUFBT2dQLEVBQVcsS0FBSyxDQUMvQyxDQUFLLEVBRUtDLEdBQWU3UixFQUFTLElBQzVCLDBCQUNHbUMsRUFBUSxZQUFZLFFBQVUsR0FBTyxTQUFXLGdCQUNwRCxFQUVLcEMsR0FBVUMsRUFBUyxJQUN2QixzQkFBdUJILEVBQU0sUUFDMUJ3UixHQUFnQixRQUFVLEdBQU8sMEJBQTRCLEtBQzdEeFIsRUFBTSxXQUFhLEdBQU8sc0JBQXdCLEtBQ2xEb0UsRUFBTyxRQUFVLEdBQU8seUJBQTJCLEtBRXBEbU4sRUFBWSxRQUFVLEdBQ2xCLGlCQUNDeEwsRUFBUSxRQUFVLEdBQU8sR0FBSyw2QkFHbkN5SyxFQUFnQixRQUFVLEdBQ3RCLGlFQUNBLGNBQWVDLEVBQU8sUUFBVSxHQUFPLE9BQVMsY0FDL0M5TixHQUFNLFFBQVUsSUFBUStPLEVBQVMsUUFBVSxHQUFPLFNBQVcsS0FDN0QxUixFQUFNLFVBQVksSUFBUUEsRUFBTSxnQkFBa0IsR0FBTyxvQkFBc0IsS0FDL0U2UixFQUFXLFFBQVUsR0FBTyx5QkFBMkIsSUFFL0QsRUFFS0ksR0FBZ0I5UixFQUFTLElBQU0sQ0FFbkMsTUFBTTZFLEVBQU0zQyxFQUFHLEtBQUssTUFBUSxHQUFPckMsRUFBTSxLQUFPK1EsRUFBVSxNQUUxRCxNQUFPLENBQUUsQ0FDUHJDLEdBQ0F3RCxHQUNBLE9BQ0EsQ0FDRSxDQUFFbE4sR0FBTyxHQUNULE1BQU8sRUFDUixDQUNULENBQVMsQ0FDVCxDQUFLLEVBRUttTixHQUF3QmhTLEVBQVMsSUFBTSxDQUUzQyxNQUFNNkUsRUFBTTNDLEVBQUcsS0FBSyxNQUFRLEdBQU8wTyxFQUFVLE1BQVEvUSxFQUFNLEtBRTNELE1BQU8sQ0FBRSxDQUNQME8sR0FDQTBELEdBQ0EsT0FDQSxDQUNFLENBQUVwTixHQUFPLEdBQ1QsTUFBTyxFQUNSLENBQ1QsQ0FBUyxDQUNULENBQUssRUFFS3FOLEdBQXlCbFMsRUFBUyxJQUFNLENBRTVDLE1BQU02RSxFQUFNM0MsRUFBRyxLQUFLLE1BQVEsR0FBTzBPLEVBQVUsTUFBUS9RLEVBQU0sS0FFM0QsTUFBTyxDQUFFLENBQ1AwTyxHQUNBMEQsR0FDQSxPQUNBLENBQ0UsQ0FBRXBOLEdBQU8sR0FDVCxNQUFPLEdBQ1AsWUFBYSxFQUNkLENBQ1QsQ0FBUyxDQUNULENBQUssRUFFRCxTQUFTc04sSUFBeUIsQ0FDaENqUCxHQUFZbU4sRUFDVnhRLEVBQU0sV0FBYSxVQUNmQSxFQUFNLFdBQWEsV0FBYXNDLEVBQVEsV0FBVyxPQUFTdEMsRUFBTSxVQUN0RSxDQUNILENBRUR5RCxFQUFNK00sRUFBaUJwTixHQUFPLENBQ3hCQSxJQUFRLElBQ1ZpTixFQUFtQnRLLEVBQVEsTUFDM0JBLEVBQVEsUUFBVSxJQUFReUcsRUFBSyxFQUFLLEdBR3BDeE0sRUFBTSxVQUFZLElBQ2ZBLEVBQU0sV0FBYSxVQUNuQnFRLElBQXFCLEtBRXBCdEssRUFBUSxRQUFVLElBQ3BCOEssRUFBYyxDQUFDLEVBQ2ZHLEVBQWMsQ0FBQyxFQUNmaFAsR0FBUyxHQUdUdUssRUFBSyxFQUFLLEVBR3BCLENBQUssRUFFRDlJLEVBQU0sSUFBTXpELEVBQU0sS0FBTSxDQUFDdVMsRUFBU0MsSUFBWSxDQUN4Q2xRLEVBQVEsVUFBV2tRLEtBQWM3TyxJQUNuQ3JCLEVBQVEsVUFBV2tRLEdBQVksT0FDL0JsUSxFQUFTa1EsR0FBVSxNQUFRLEdBQzNCbFEsRUFBU2tRLEdBQVUsT0FBUyxHQUc5QmxRLEVBQVEsVUFBV2lRLEdBQVk1TyxFQUMvQnJCLEVBQVNpUSxHQUFVLEtBQU9yUixFQUFLLE1BQy9Cb0IsRUFBU2lRLEdBQVUsTUFBUWIsRUFBUyxNQUNwQ3BQLEVBQVNpUSxHQUFVLE9BQVMzUCxHQUFPLEtBQ3pDLENBQUssRUFFRGEsRUFBTW5CLEVBQVEsV0FBWSxJQUFNLEVBQzFCQSxFQUFRLFlBQVksUUFBVSxJQUFRLFNBQVMsbUJBQXFCLEtBQ3RFZ1EsR0FBdUIsQ0FFL0IsQ0FBSyxFQUVEN08sRUFDRSxJQUFNekQsRUFBTSxTQUFXQSxFQUFNLFdBQzdCc1MsRUFDRCxFQUVEN08sRUFBTW5CLEVBQVEsWUFBYWMsR0FBTyxDQUNoQzJDLEVBQVEsUUFBVSxJQUFRbUssRUFBa0I5TSxJQUFRLEVBQUksRUFDeERBLElBQVEsSUFBUWtQLEdBQXVCLENBQzdDLENBQUssRUFFRDdPLEVBQU1uQixFQUFRLGVBQWdCLElBQU0sQ0FDbEN1TyxFQUFjOUssRUFBUSxRQUFVLEdBQU8sRUFBSSxNQUFNLENBQ3ZELENBQUssRUFFRHRDLEVBQU1iLEdBQVFRLEdBQU8sQ0FBRUYsRUFBYSxTQUFVRSxDQUFHLEVBQUcsRUFFcERLLEVBQU1pTyxFQUFVdE8sR0FBTyxDQUNyQnJDLEVBQUssV0FBWXFDLENBQUcsRUFDcEJGLEVBQWEsUUFBU0UsQ0FBRyxDQUMvQixDQUFLLEVBRURLLEVBQU00TixFQUFXLElBQU0sQ0FBRVIsRUFBZSxDQUFBLENBQUUsRUFFMUNwTixFQUFNdkMsRUFBTWtDLEdBQU8sQ0FDakJ5TixFQUFlLEVBQ2Y0QixHQUFtQnpTLEVBQU0sY0FBZW9ELENBQUcsQ0FDakQsQ0FBSyxFQUVESyxFQUFNLElBQU16RCxFQUFNLGNBQWVvRCxHQUFPLENBQ3RDcVAsR0FBbUJyUCxFQUFLbEMsRUFBSyxLQUFLLENBQ3hDLENBQUssRUFFRHVDLEVBQU0sSUFBTXBCLEVBQUcsS0FBSyxJQUFLLElBQU0sQ0FBRXdPLEVBQWEsRUFBSSxFQUVsRHBOLEVBQU0sSUFBTXpELEVBQU0sS0FBTSxJQUFNLENBQ3hCQSxFQUFNLGlCQUNOQSxFQUFNLGFBQWUsS0FDdkIwUyxHQUFhLEVBQ2JwUSxFQUFRLFFBQVMsRUFFekIsQ0FBSyxFQUVEbUIsRUFBTWdOLEVBQVFyTixHQUFPLENBQUVyQyxFQUFLLFlBQWFxQyxDQUFHLEVBQUcsRUFFL0MsU0FBU3lOLEVBQWUxQyxFQUFVLENBQzVCQSxJQUFhLE9BQ2Z0TSxHQUFTLElBQU0sQ0FDYnNNLEVBQVdwSSxFQUFRLFFBQVUsR0FBTyxFQUFJN0UsRUFBSyxNQUM3QzJQLEVBQWNNLEVBQWUsTUFBUWhELENBQVEsQ0FDdkQsQ0FBUyxHQUlDN0wsRUFBUSxZQUFZLFFBQVUsSUFDM0IrTyxFQUFVLFFBQVUsS0FDbkJiLEVBQWdCLFFBQVUsSUFBUSxLQUFLLElBQUlyQyxDQUFRLElBQU1qTixFQUFLLFNBRWxFaU4sR0FBWWdELEVBQWUsTUFBUTdPLEVBQVEsZUFBZSxPQUc1RG1QLEdBQW9CLE1BQVF0RCxFQUUvQixDQUVELFNBQVM2QyxFQUFlMkIsRUFBRyxDQUN6QnJCLEdBQWUsTUFBUXFCLENBQ3hCLENBRUQsU0FBUzFCLEdBQWVwQixFQUFHLENBQ3pCLE1BQU0rQyxFQUFTL0MsSUFBTSxHQUNqQixTQUNDdk4sRUFBUSxZQUFZLFFBQVUsR0FBTyxNQUFRLEdBRWxEc1EsSUFBVyxJQUFNLFNBQVMsS0FBSyxVQUFXQSxHQUFTLHVCQUF1QixDQUMzRSxDQUVELFNBQVNGLElBQWUsQ0FDdEJwQyxJQUFjLE1BQVEsYUFBYUEsQ0FBUyxFQUV4QzdLLEVBQUcsT0FBU0EsRUFBRyxNQUFNLEtBR3ZCQSxFQUFHLE1BQU0sSUFBSSxVQUFVLElBQUksd0JBQXdCLEVBR3JEK0wsR0FBZ0IsTUFBUSxHQUN4QmxCLEVBQVksV0FBVyxJQUFNLENBQzNCQSxFQUFZLEtBQ1prQixHQUFnQixNQUFRLEdBQ3BCL0wsR0FBTUEsRUFBRyxPQUFTQSxFQUFHLE1BQU0sS0FDN0JBLEVBQUcsTUFBTSxJQUFJLFVBQVUsT0FBTyx3QkFBd0IsQ0FFekQsRUFBRSxHQUFHLENBQ1AsQ0FFRCxTQUFTeU0sR0FBVzFPLEVBQUssQ0FDdkIsR0FBSXVDLEVBQVEsUUFBVSxHQUdwQixPQUdGLE1BQ0V6RSxFQUFRSixFQUFLLE1BQ2JpTixFQUFXeUIsR0FBUXBNLEVBQUksU0FBUyxFQUFHLEVBQUdsQyxDQUFLLEVBRTdDLEdBQUlrQyxFQUFJLFVBQVksR0FBTSxDQUNUMkssR0FBWSxLQUFLLElBQUksR0FBSTdNLENBQUssSUFFOUIsR0FDYmlMLEVBQU0sR0FHTmpLLEVBQVEsUUFBUyxFQUNqQjBPLEVBQWMsQ0FBQyxFQUNmSCxFQUFjTSxFQUFlLE1BQVE3UCxDQUFLLEdBRzVDaVEsRUFBWSxNQUFRLEdBQ3BCLE1BQ0QsQ0FFRFYsR0FDR3hPLEVBQUcsS0FBSyxNQUFRLEdBQU9nUCxFQUFVLFFBQVUsR0FBT0EsRUFBVSxPQUN6RCxLQUFLLElBQUkvUCxFQUFRNk0sRUFBVSxDQUFDLEVBQzVCLEtBQUssSUFBSSxFQUFHQSxFQUFXN00sQ0FBSyxDQUNqQyxFQUNEMFAsRUFDRXBCLEdBQVF6QixFQUFXN00sRUFBTyxFQUFHLENBQUMsQ0FDL0IsRUFFR2tDLEVBQUksVUFBWSxLQUNsQitOLEVBQVksTUFBUSxHQUV2QixDQUVELFNBQVNhLEdBQVk1TyxFQUFLLENBQ3hCLEdBQUl1QyxFQUFRLFFBQVUsR0FHcEIsT0FHRixNQUNFekUsRUFBUUosRUFBSyxNQUNiOEQsRUFBTXhCLEVBQUksWUFBY3hELEVBQU0sS0FDOUJtTyxJQUFZOUwsRUFBRyxLQUFLLE1BQVEsR0FBTzJDLElBQVEsR0FBT0EsR0FDOUM0SyxHQUFRcE0sRUFBSSxTQUFTLEVBQUcsRUFBR2xDLENBQUssRUFDaEMsRUFFTixHQUFJa0MsRUFBSSxVQUFZLEdBQU0sQ0FDVCxLQUFLLElBQUkySyxFQUFRLEVBQUksS0FBSyxJQUFJLEdBQUk3TSxDQUFLLElBRXZDLElBQ2JnQixFQUFRLFFBQVMsRUFDakIwTyxFQUFjLENBQUMsRUFDZkgsRUFBYyxDQUFDLEdBR2ZyRSxFQUFNLEVBR1IrRSxFQUFZLE1BQVEsR0FDcEIsTUFDRCxDQUVEVixFQUFjTSxFQUFlLE1BQVFoRCxFQUFRLEVBQzdDNkMsRUFBY3BCLEdBQVEsRUFBSXpCLEdBQVc3TSxFQUFPLEVBQUcsQ0FBQyxDQUFDLEVBRTdDa0MsRUFBSSxVQUFZLEtBQ2xCK04sRUFBWSxNQUFRLEdBRXZCLENBRUQsU0FBU3ZQLElBQVcsQ0FDbEJrTyxFQUFrQixFQUFLLEVBQ3ZCZSxHQUFjLEVBQUksQ0FDbkIsQ0FFRCxTQUFTL04sRUFBY0MsRUFBTUMsRUFBSyxDQUNoQ2QsRUFBUSxPQUFPdEMsRUFBTSxLQUFNbUQsRUFBTUMsQ0FBRyxDQUNyQyxDQUVELFNBQVNDLEdBQWFGLEVBQU1DLEVBQUssQ0FDM0JELEVBQUssUUFBVUMsSUFDakJELEVBQUssTUFBUUMsRUFFaEIsQ0FFRCxTQUFTcVAsR0FBb0JJLEVBQWUzUixFQUFNLENBQ2hEZ0MsRUFBYSxPQUFRMlAsSUFBa0IsR0FBTzdTLEVBQU0sVUFBWWtCLENBQUksQ0FDckUsQ0FFRCxPQUFBb0IsRUFBUSxVQUFXdEMsRUFBTSxNQUFTMkQsRUFDbEM4TyxHQUFtQnpTLEVBQU0sY0FBZWtCLEVBQUssS0FBSyxFQUNsRGdDLEVBQWEsUUFBU3dPLEVBQVMsS0FBSyxFQUNwQ3hPLEVBQWEsU0FBVU4sR0FBTyxLQUFLLEVBR2pDNUMsRUFBTSxjQUFnQixJQUNuQkEsRUFBTSxhQUFlLElBQ3JCK0YsRUFBUSxRQUFVLElBQ2xCL0YsRUFBTyx5QkFBNEIsUUFFdENlLEVBQUssb0JBQXFCLEVBQUksRUFHaENKLEdBQVUsSUFBTSxDQUNkSSxFQUFLLFdBQVkyUSxFQUFTLEtBQUssRUFDL0IzUSxFQUFLLFlBQWEwUCxFQUFPLEtBQUssRUFFOUJKLEVBQW1CclEsRUFBTSxjQUFnQixHQUV6QyxNQUFNc0gsRUFBSyxJQUFNLEVBQ0F2QixFQUFRLFFBQVUsR0FBTzJHLEVBQWFDLEdBQzlDLEdBQU8sRUFBSSxDQUNuQixFQUVELEdBQUlySyxFQUFRLFdBQVcsUUFBVSxFQUFHLENBR2xDVCxHQUFTeUYsQ0FBRSxFQUNYLE1BQ0QsQ0FFRGlKLEVBQTBCOU0sRUFBTW5CLEVBQVEsV0FBWSxJQUFNLENBQ3hEaU8sRUFBeUIsRUFDekJBLEVBQTBCLE9BRXRCeEssRUFBUSxRQUFVLElBQVMvRixFQUFNLGNBQWdCLElBQVF3USxFQUFnQixRQUFVLEdBQ3JGakUsRUFBSyxFQUFLLEVBR1ZqRixFQUFJLENBRWQsQ0FBTyxDQUNQLENBQUssRUFFRHhGLEVBQWdCLElBQU0sQ0FDcEJ5TyxJQUE0QixRQUFVQSxFQUF5QixFQUUzREQsSUFBYyxPQUNoQixhQUFhQSxDQUFTLEVBQ3RCQSxFQUFZLE1BR2R2SyxFQUFRLFFBQVUsSUFBUS9ELEdBQVMsRUFFL0JNLEVBQVEsVUFBV3RDLEVBQU0sUUFBVzJELElBQ3RDckIsRUFBUSxVQUFXdEMsRUFBTSxNQUFTLE9BQ2xDa0QsRUFBYSxPQUFRLENBQUMsRUFDdEJBLEVBQWEsU0FBVSxDQUFDLEVBQ3hCQSxFQUFhLFFBQVMsRUFBSyxFQUVuQyxDQUFLLEVBRU0sSUFBTSxDQUNYLE1BQU1VLEVBQVEsQ0FBRSxFQUVaNE0sRUFBZ0IsUUFBVSxLQUM1QnhRLEVBQU0sY0FBZ0IsSUFBUzRELEVBQU0sS0FDbkNrUCxHQUNFMVMsRUFBRSxNQUFPLENBQ1AsSUFBSyxPQUNMLE1BQU8sMEJBQTJCSixFQUFNLE9BQ3hDLGNBQWUsTUFDN0IsQ0FBYSxFQUNEaVMsR0FBYyxLQUNmLENBQ0YsRUFFRHJPLEVBQU0sS0FDSm1QLEdBQ0UsTUFDQSxDQUNFLElBQUssV0FDTCxNQUFPcEIsR0FBYyxNQUNyQixNQUFPQyxHQUFjLE1BQ3JCLGNBQWUsT0FDZixRQUFTcEYsQ0FDVixFQUNELE9BQ0EsV0FDQXhNLEVBQU0sa0JBQW9CLElBQVErRixFQUFRLFFBQVUsR0FDcEQsSUFBTXNNLEdBQXVCLEtBQzlCLENBQ0YsR0FHSCxNQUFNVyxFQUFPdkMsRUFBTyxRQUFVLElBQVF4USxFQUFNLE9BQVMsT0FDL0NnVCxFQUFVLENBQ2Q3UyxFQUFFLE1BQU8sQ0FDUCxHQUFHdUwsRUFDSCxJQUFLLEdBQUtxSCxFQUNWLE1BQU8sQ0FDTGhCLEdBQWEsTUFDYnJHLEVBQU0sS0FDUCxDQUNGLEVBQUVxSCxJQUFTLEdBQ1IvUyxFQUFNLEtBQU0sRUFDWkksRUFBTUosRUFBTSxPQUFPLENBQ3RCLENBQ0YsRUFFRCxPQUFJRCxFQUFNLFdBQWEsSUFBUStGLEVBQVEsUUFBVSxJQUMvQ2tOLEVBQVEsS0FDTjdTLEVBQUUsTUFBTyxDQUNQLE1BQU8sa0VBQ25CLENBQVcsQ0FDRixFQUdId0QsRUFBTSxLQUNKbVAsR0FDRSxRQUNBLENBQUUsSUFBSyxVQUFXLE1BQU83UyxHQUFRLE1BQU8sTUFBTzZDLEdBQU0sS0FBTyxFQUM1RGtRLEVBQ0EsZUFDQWpULEVBQU0sZUFBaUIsSUFBUXdRLEVBQWdCLFFBQVUsR0FDekQsSUFBTTJCLEdBQXNCLEtBQzdCLENBQ0YsRUFFTS9SLEVBQUUsTUFBTyxDQUFFLE1BQU8sb0JBQW9CLEVBQUl3RCxDQUFLLENBQ3ZELENBQ0YsQ0FDSCxDQUFDLEVDanNCRHNQLEdBQWVuVCxFQUFnQixDQUM3QixLQUFNLGlCQUVOLE1BQU9vVCxFQUFHLENBQUUsTUFBQWxULEdBQVMsQ0FDbkIsS0FBTSxDQUFFLE1BQU8sQ0FBRSxHQUFBb0MsQ0FBSSxDQUFBLEVBQUtaLEVBQW9CLEVBRXhDYSxFQUFVQyxHQUFPQyxHQUFXQyxDQUFhLEVBQy9DLEdBQUlILElBQVlHLEVBQ2QsZUFBUSxNQUFNLDZDQUE2QyxFQUNwREEsRUFHVDJRLEdBQVFDLEdBQWtCLEVBQUksRUFFOUIsTUFBTXRRLEVBQVE1QyxFQUFTLElBQU0sQ0FDM0IsTUFBTThDLEVBQU0sQ0FBRSxFQUVkLE9BQUlYLEVBQVEsT0FBTyxRQUFVLEtBQzNCVyxFQUFJLFdBQWEsR0FBSVgsRUFBUSxPQUFPLFVBRWxDQSxFQUFRLE1BQU0sUUFBVSxLQUMxQlcsRUFBSyxVQUFXWixFQUFHLEtBQUssTUFBUSxHQUFPLE9BQVMsV0FBZSxHQUFJQyxFQUFRLE1BQU0sVUFFL0VBLEVBQVEsT0FBTyxRQUFVLEtBQzNCVyxFQUFJLGNBQWdCLEdBQUlYLEVBQVEsT0FBTyxVQUVyQ0EsRUFBUSxLQUFLLFFBQVUsS0FDekJXLEVBQUssVUFBV1osRUFBRyxLQUFLLE1BQVEsR0FBTyxRQUFVLFVBQWMsR0FBSUMsRUFBUSxLQUFLLFVBRzNFVyxDQUNiLENBQUssRUFFRCxNQUFPLElBQU03QyxFQUFFLE1BQU8sQ0FDcEIsTUFBTyxtQkFDUCxNQUFPMkMsRUFBTSxLQUNuQixFQUFPMUMsRUFBTUosRUFBTSxPQUFPLENBQUMsQ0FDeEIsQ0FDSCxDQUFDLEVDdENELEtBQU0sQ0FBRSxRQUFBcVQsRUFBUyxFQUFHcFIsR0FDZHFSLEdBQWEsQ0FBRSxPQUFRLGFBQWMsVUFBWSxFQUV2RCxJQUFBQyxHQUFlelQsRUFBZ0IsQ0FDN0IsS0FBTSxrQkFFTixNQUFPLENBQ0wsS0FBTSxDQUNKLEtBQU0sT0FDTixVQUFXOFAsR0FBSzBELEdBQVcsU0FBUzFELENBQUMsRUFDckMsUUFBUyxVQUNWLEVBRUQsU0FBVSxDQUFFLE9BQVEsTUFBUSxFQUU1QixhQUFjLENBQ1osUUFBUyxNQUNWLENBQ0YsRUFFRCxNQUFPLENBQUUsUUFBVSxFQUVuQixNQUFPN1AsRUFBTyxDQUFFLEtBQUFlLEdBQVEsQ0FDdEIsTUFBTTJDLEVBQVMsQ0FDYixTQUFVLENBQ1IsSUFBSyxFQUNMLEtBQU0sQ0FDUCxFQUVELFVBQVcsT0FDWCxpQkFBa0IsR0FFbEIsTUFBTyxDQUNMLElBQUssRUFDTCxLQUFNLENBQ1AsRUFFRCxnQkFBaUIsQ0FDZixJQUFLLEVBQ0wsS0FBTSxDQUNQLENBQ0YsRUFFRCxJQUFJK1AsRUFBYSxLQUFNdk0sRUFBbUJ3TSxFQUUxQ2pRLEVBQU0sSUFBTXpELEVBQU0sYUFBYyxJQUFNLENBQ3BDeUgsRUFBeUIsRUFDekJSLEVBQXVCLENBQzdCLENBQUssRUFFRCxTQUFTNUYsR0FBYSxDQUNwQm9TLElBQWUsTUFBUUEsRUFBWSxFQUVuQyxNQUFNekssRUFBTSxLQUFLLElBQUksRUFBRzJLLEdBQTBCek0sQ0FBaUIsQ0FBQyxFQUM5RCtCLEVBQU8ySyxHQUE0QjFNLENBQWlCLEVBRXBEMk0sRUFBUSxDQUNaLElBQUs3SyxFQUFNdEYsRUFBTyxTQUFTLElBQzNCLEtBQU11RixFQUFPdkYsRUFBTyxTQUFTLElBQzlCLEVBRUQsR0FDRzFELEVBQU0sT0FBUyxZQUFjNlQsRUFBTSxNQUFRLEdBQ3hDN1QsRUFBTSxPQUFTLGNBQWdCNlQsRUFBTSxPQUFTLEVBRWxELE9BR0YsTUFBTUMsRUFBUyxLQUFLLElBQUlELEVBQU0sR0FBRyxHQUFLLEtBQUssSUFBSUEsRUFBTSxJQUFJLEVBQ3BEQSxFQUFNLElBQU0sRUFBSSxLQUFPLE9BQ3ZCQSxFQUFNLEtBQU8sRUFBSSxPQUFTLFFBRS9CblEsRUFBTyxTQUFXLENBQUUsSUFBQXNGLEVBQUssS0FBQUMsQ0FBTSxFQUMvQnZGLEVBQU8saUJBQW1CQSxFQUFPLFlBQWNvUSxFQUMvQ3BRLEVBQU8sTUFBUW1RLEVBRVhuUSxFQUFPLG1CQUFxQixLQUM5QkEsRUFBTyxVQUFZb1EsRUFDbkJwUSxFQUFPLGdCQUFrQkEsRUFBTyxVQUdsQzNDLEVBQUssU0FBVSxDQUFFLEdBQUcyQyxFQUFRLENBQzdCLENBRUQsU0FBU3VELEdBQXlCLENBQ2hDQyxFQUFvQm9HLEdBQWdCb0csRUFBVTFULEVBQU0sWUFBWSxFQUNoRWtILEVBQWtCLGlCQUFpQixTQUFVL0YsRUFBU21TLEVBQU8sRUFDN0RuUyxFQUFRLEVBQUksQ0FDYixDQUVELFNBQVNzRyxHQUEyQixDQUM5QlAsSUFBc0IsU0FDeEJBLEVBQWtCLG9CQUFvQixTQUFVL0YsRUFBU21TLEVBQU8sRUFDaEVwTSxFQUFvQixPQUV2QixDQUVELFNBQVMvRixFQUFTQyxFQUFhLENBQzdCLEdBQUlBLElBQWdCLElBQVFwQixFQUFNLFdBQWEsR0FBS0EsRUFBTSxXQUFhLElBQ3JFcUIsRUFBVyxVQUVKb1MsSUFBZSxLQUFNLENBQzVCLEtBQU0sQ0FBRXpTLEVBQU9zRyxDQUFJLEVBQUd0SCxFQUFNLFNBQ3hCLENBQUUsV0FBV3FCLEVBQVdyQixFQUFNLFFBQVEsRUFBRyxZQUFjLEVBQ3ZELENBQUUsc0JBQXNCcUIsQ0FBUyxFQUFHLG9CQUFzQixFQUU5RG9TLEVBQWEsSUFBTSxDQUNqQm5NLEVBQUd0RyxDQUFLLEVBQ1J5UyxFQUFhLElBQ2QsQ0FDRixDQUNGLENBRUQsS0FBTSxDQUFFLE1BQUFqUyxDQUFPLEVBQUdDLEVBQW9CLEVBRXRDLE9BQUFnQyxFQUFNLElBQU1qQyxFQUFNLEdBQUcsS0FBSyxJQUFLSCxDQUFTLEVBRXhDVixHQUFVLElBQU0sQ0FDZCtTLEVBQVdsUyxFQUFNLElBQUksV0FDckJ5RixFQUF1QixDQUM3QixDQUFLLEVBRURuRixFQUFnQixJQUFNLENBQ3BCMlIsSUFBZSxNQUFRQSxFQUFZLEVBQ25DaE0sRUFBeUIsQ0FDL0IsQ0FBSyxFQUdELE9BQU8sT0FBT2pHLEVBQU8sQ0FDbkIsUUFBQUwsRUFDQSxZQUFhLElBQU11QyxDQUN6QixDQUFLLEVBRU0zQixFQUNSLENBQ0gsQ0FBQyxFQ2pJRGdTLEdBQWVoVSxFQUFnQixDQUM3QixLQUFNLFVBRU4sTUFBTyxDQUNMLFVBQVcsUUFDWCxLQUFNLENBQ0osS0FBTSxPQUNOLFFBQVMsY0FDVCxVQUFXOFAsR0FBSyxnQ0FBZ0MsS0FBS0EsRUFBRSxZQUFXLENBQUUsQ0FDckUsRUFFRCxTQUFVLFNBQ1YsZUFBZ0IsU0FDaEIsU0FBVSxRQUNYLEVBRUQsTUFBTzdQLEVBQU8sQ0FBRSxNQUFBQyxFQUFPLEtBQUFjLENBQUksRUFBSSxDQUM3QixLQUFNLENBQUUsTUFBTyxDQUFFLEdBQUFzQixDQUFJLENBQUEsRUFBS1osRUFBb0IsRUFFeENtRCxFQUFVbkUsRUFBSSxJQUFJLEVBR2xCYyxFQUFTZCxFQUFJNEIsRUFBRyxPQUFPLE1BQU0sRUFDN0JmLEVBQVFiLEVBQUlULEVBQU0sWUFBYyxHQUFPLEVBQUlxQyxFQUFHLE9BQU8sS0FBSyxFQUMxRHFCLEVBQVNqRCxFQUFJLENBQUUsU0FBVSxFQUFHLFVBQVcsT0FBUSxnQkFBaUIsRUFBRyxFQUduRXVULEVBQWtCdlQsRUFBSSxDQUFDLEVBQ3ZCd1QsRUFBaUJ4VCxFQUFJQyxHQUF5QixRQUFVLEdBQU8sRUFBSXdLLElBQW1CLEVBRXRGaEwsRUFBVUMsRUFBUyxJQUN2Qix1QkFDR0gsRUFBTSxZQUFjLEdBQU8sZ0JBQWtCLFdBQ2pELEVBRUsrQyxFQUFRNUMsRUFBUyxJQUNyQkgsRUFBTSxZQUFjLEdBQ2hCLENBQUUsVUFBV3FDLEVBQUcsT0FBTyxPQUFTLElBQU0sRUFDdEMsSUFDTCxFQUdLNlIsRUFBYy9ULEVBQVMsSUFDM0I4VCxFQUFlLFFBQVUsRUFDckIsQ0FBRSxDQUFFNVIsRUFBRyxLQUFLLE1BQVEsR0FBTyxPQUFTLFNBQVcsR0FBSTRSLEVBQWUsU0FBWSxFQUM5RSxJQUNMLEVBRUtFLEVBQW1CaFUsRUFBUyxJQUNoQzhULEVBQWUsUUFBVSxFQUNyQixDQUNFLENBQUU1UixFQUFHLEtBQUssTUFBUSxHQUFPLFFBQVUsUUFBVSxFQUM3QyxDQUFFQSxFQUFHLEtBQUssTUFBUSxHQUFPLE9BQVMsU0FBVyxJQUFLNFIsRUFBZSxVQUNqRSxNQUFPLGVBQWdCQSxFQUFlLFVBQ3ZDLEVBQ0QsSUFDTCxFQUVELFNBQVNHLEVBQWM3TyxFQUFNLENBQzNCLEdBQUl2RixFQUFNLFlBQWMsSUFBUSxTQUFTLG1CQUFxQixHQUFNLENBQ2xFLE1BQU1xVSxFQUFPLENBQ1gsU0FBVTlPLEVBQUssU0FBUyxJQUN4QixVQUFXQSxFQUFLLFVBQ2hCLGlCQUFrQkEsRUFBSyxpQkFDdkIsZ0JBQWlCQSxFQUFLLGdCQUFnQixJQUN0QyxNQUFPQSxFQUFLLE1BQU0sR0FDbkIsRUFFRDdCLEVBQU8sTUFBUTJRLEVBQ2ZyVSxFQUFNLFdBQWEsUUFBVWUsRUFBSyxTQUFVc1QsQ0FBSSxDQUNqRCxDQUNGLENBRUQsU0FBU0MsRUFBYy9PLEVBQU0sQ0FDM0IsS0FBTSxDQUFFLE9BQVFnUCxFQUFXLE1BQU9DLENBQVUsRUFBR2pQLEVBQy9DLElBQUlrUCxFQUFVLEdBRVZsVCxFQUFPLFFBQVVnVCxJQUNuQkUsRUFBVSxHQUNWbFQsRUFBTyxNQUFRZ1QsRUFDZnZVLEVBQU0saUJBQW1CLFFBQVVlLEVBQUssZUFBZ0J3VCxDQUFTLEVBQ2pFRyxFQUFzQixHQUVwQnBULEVBQU0sUUFBVWtULElBQ2xCQyxFQUFVLEdBQ1ZuVCxFQUFNLE1BQVFrVCxHQUdaQyxJQUFZLElBQVF6VSxFQUFNLFdBQWEsUUFDekNlLEVBQUssU0FBVXdFLENBQUksQ0FFdEIsQ0FFRCxTQUFTb1AsRUFBbUIsQ0FBRSxPQUFBcFQsR0FBVSxDQUNsQ3lTLEVBQWdCLFFBQVV6UyxJQUM1QnlTLEVBQWdCLE1BQVF6UyxFQUN4Qm1ULEVBQXNCLEVBRXpCLENBRUQsU0FBU0EsR0FBd0IsQ0FDL0IsR0FBSTFVLEVBQU0sWUFBYyxHQUFNLENBQzVCLE1BQU1zQixFQUFRQyxFQUFPLE1BQVF5UyxFQUFnQixNQUN6QzlJLEdBQW1CLEVBQ25CLEVBRUErSSxFQUFlLFFBQVUzUyxJQUMzQjJTLEVBQWUsTUFBUTNTLEVBRTFCLENBQ0YsQ0FFRCxJQUFJc1QsRUFBZSxLQUVuQixNQUFNdFMsRUFBVSxDQUNkLFVBQVcsQ0FBRSxFQUNiLEtBQU1uQyxFQUFTLElBQU1ILEVBQU0sSUFBSSxFQUMvQixZQUFhRyxFQUFTLElBQU1ILEVBQU0sU0FBUyxFQUUzQyxRQUFBNEUsRUFFQSxPQUFBckQsRUFDQSxnQkFBQXlTLEVBQ0EsZUFBQUMsRUFDQSxXQUFZOVQsRUFBUyxJQUFNbUIsRUFBTSxNQUFRMlMsRUFBZSxLQUFLLEVBRTdELEtBQU05VCxFQUFTLElBQU0sQ0FDbkIsTUFBTTBVLEVBQU83VSxFQUFNLEtBQUssWUFBYSxFQUFDLE1BQU0sR0FBRyxFQUMvQyxNQUFPLENBQ0wsSUFBSzZVLEVBQU0sR0FBSSxNQUFNLEVBQUUsRUFDdkIsT0FBUUEsRUFBTSxHQUFJLE1BQU0sRUFBRSxFQUMxQixPQUFRQSxFQUFNLEdBQUksTUFBTSxFQUFFLENBQzNCLENBQ1QsQ0FBTyxFQUVELE9BQVFDLEdBQVMsQ0FBRSxLQUFNLEVBQUcsT0FBUSxFQUFHLE1BQU8sR0FBTyxFQUNyRCxNQUFPQSxHQUFTLENBQUUsS0FBTSxJQUFLLE9BQVEsRUFBRyxNQUFPLEdBQU8sRUFDdEQsT0FBUUEsR0FBUyxDQUFFLEtBQU0sRUFBRyxPQUFRLEVBQUcsTUFBTyxHQUFPLEVBQ3JELEtBQU1BLEdBQVMsQ0FBRSxLQUFNLElBQUssT0FBUSxFQUFHLE1BQU8sR0FBTyxFQUVyRCxPQUFBcFIsRUFFQSxTQUFXLENBQ0xrUixJQUFpQixLQUNuQixhQUFhQSxDQUFZLEVBR3pCLFNBQVMsS0FBSyxVQUFVLElBQUksd0JBQXdCLEVBR3REQSxFQUFlLFdBQVcsSUFBTSxDQUM5QkEsRUFBZSxLQUNmLFNBQVMsS0FBSyxVQUFVLE9BQU8sd0JBQXdCLENBQ3hELEVBQUUsR0FBRyxDQUNQLEVBRUQsT0FBUUcsRUFBTTVSLEVBQU1DLEVBQUssQ0FDdkJkLEVBQVN5UyxHQUFRNVIsR0FBU0MsQ0FDM0IsQ0FDRixFQU1ELEdBSkFnUSxHQUFRNVEsR0FBV0YsQ0FBTyxFQUlZNEksR0FBbUIsRUFBRyxFQUFHLENBSTdELElBQVM4SixFQUFULFVBQTZCLENBQzNCaFUsRUFBUSxLQUNSOEYsRUFBRyxVQUFVLE9BQU8sZ0JBQWdCLENBQ3JDLEVBRVFtTyxFQUFULFVBQTBCLENBQ3hCLEdBQUlqVSxJQUFVLEtBQU0sQ0FHbEIsR0FBSThGLEVBQUcsYUFBZXpFLEVBQUcsT0FBTyxPQUM5QixPQUdGeUUsRUFBRyxVQUFVLElBQUksZ0JBQWdCLENBQ2xDLE1BRUMsYUFBYTlGLENBQUssRUFHcEJBLEVBQVEsV0FBV2dVLEVBQWtCLEdBQUcsQ0FDekMsRUFFUUUsRUFBVCxTQUE0QnRDLEVBQVEsQ0FDOUI1UixJQUFVLE1BQVE0UixJQUFXLFdBQy9CLGFBQWE1UixDQUFLLEVBQ2xCZ1UsRUFBa0IsR0FHcEIsT0FBUSxHQUFJcEMsa0JBQXlCLFNBQVVxQyxDQUFhLENBQzdELEVBaENHalUsRUFBUSxLQUNaLE1BQU04RixFQUFLLFNBQVMsS0FpQ3BCckQsRUFDRSxJQUFPekQsRUFBTSxZQUFjLEdBQU8sTUFBUSxTQUMxQ2tWLENBQ0QsRUFFRGxWLEVBQU0sWUFBYyxJQUFRa1YsRUFBa0IsS0FBSyxFQUVuREMsR0FBWSxJQUFNLENBQ2hCRCxFQUFrQixRQUFRLENBQ2xDLENBQU8sQ0FDRixDQUVELE1BQU8sSUFBTSxDQUNYLE1BQU1qQyxFQUFVbUMsR0FBV25WLEVBQU0sUUFBUyxDQUN4Q0csRUFBRW9ULEdBQWlCLENBQUUsU0FBVVksQ0FBWSxDQUFFLEVBQzdDaFUsRUFBRVUsR0FBaUIsQ0FBRSxTQUFVd1QsQ0FBWSxDQUFFLENBQ3JELENBQU8sRUFFS2UsRUFBU2pWLEVBQUUsTUFBTyxDQUN0QixNQUFPRixFQUFRLE1BQ2YsTUFBTzZDLEVBQU0sTUFDYixJQUFLL0MsRUFBTSxZQUFjLEdBQU8sT0FBUzRFLEVBQ3pDLFNBQVUsRUFDWCxFQUFFcU8sQ0FBTyxFQUVWLE9BQUlqVCxFQUFNLFlBQWMsR0FDZkksRUFBRSxNQUFPLENBQ2QsTUFBTyxxQ0FDUCxJQUFLd0UsQ0FDZixFQUFXLENBQ0R4RSxFQUFFVSxHQUFpQixDQUFFLFNBQVU2VCxDQUFpQixDQUFFLEVBQ2xEdlUsRUFBRSxNQUFPLENBQ1AsTUFBTyxnQkFDUCxNQUFPOFQsRUFBWSxLQUMvQixFQUFhLENBQ0Q5VCxFQUFFLE1BQU8sQ0FDUCxNQUFPLFNBQ1AsTUFBTytULEVBQWlCLEtBQ3RDLEVBQWUsQ0FBRWtCLENBQU0sQ0FBRSxDQUN6QixDQUFXLENBQ1gsQ0FBUyxFQUdJQSxDQUNSLENBQ0YsQ0FDSCxDQUFDLDJHQ2hJRCxNQUFNQyxFQUFpQjdVLEVBQUksRUFBSyxFQUUxQjhVLEVBQU1oVCxHQUFPLEtBQUssRUFFeEIsU0FBU2lULEdBQW9CLENBQzNCRixFQUFlLE1BQVEsQ0FBQ0EsRUFBZSxLQUN6QyJ9
