import{_ as a}from"./index.55edfe91.js";import{D as E,f as H,k as l}from"./index.4634898b.js";class _{constructor(){this.__stack={}}on(t,n,o){return(this.__stack[t]||(this.__stack[t]=[])).push({fn:n,ctx:o}),this}once(t,n,o){const r=(...s)=>{this.off(t,r),n.apply(o,s)};return r.__callback=n,this.on(t,r,o)}emit(t){const n=this.__stack[t];if(n!==void 0){const o=[].slice.call(arguments,1);n.forEach(r=>{r.fn.apply(r.ctx,o)})}return this}off(t,n){const o=this.__stack[t];if(o===void 0)return this;if(n===void 0)return delete this.__stack[t],this;const r=o.filter(s=>s.fn!==n&&s.fn.__callback!==n);return r.length!==0?this.__stack[t]=r:delete this.__stack[t],this}}function g(d,{props:t,children:n,element:o,app:r}={}){let s=o,c=H(d,t,n);r&&r._context&&(c.appContext=r._context),s?l(c,s):typeof document!="undefined"&&l(c,s=document.createElement("div"));const f=c.destroy=()=>{s&&l(null,s),s=null,c=null};return{vNode:c,destroy:f,el:s}}function m(d){function t({ele:e,values:i}){var u;return a.merge(c({ele:e,values:i}),{maximumOpen:{isHidden:!0},minimumOpen:{isHidden:!0},multipleOf:{isHidden:!0},pattern:{isHidden:!!((u=e.eType)!=null&&u.$.isKindOf("ecore.EString"))}})}function n({ele:e,values:i}){return a.merge(f({ele:e,values:i}),{eGenericSuperTypes:{isHidden:!0},abstract:{isHidden:i.interface===!0},interface:{isHidden:i.abstract===!0}})}function o({ele:e,values:i}){return a.merge(c({ele:e,values:i}),{eGenericType:{isHidden:!0},resolveProxies:{isHidden:!0}})}function r({ele:e,values:i}){return a.merge(f({ele:e,values:i}),{eGenericExceptions:{isHidden:!0},eGenericType:{isHidden:!0},resolveProxies:{isHidden:!0},ordered:{isHidden:a.isNil(i.upperBound)||i.upperBound===1},unique:{isHidden:a.isNil(i.upperBound)||i.upperBound===1}})}function s({ele:e,values:i}){return a.merge(f({ele:e,values:i}),{eGenericType:{isHidden:!0}})}function c({ele:e,values:i}){return a.merge(f({ele:e,values:i}),{ordered:{isHidden:a.isNil(i.upperBound)||i.upperBound===1},unique:{isHidden:a.isNil(i.upperBound)||i.upperBound===1},redefines:{isHidden:!0},transient:{isHidden:!!i.derived&&!i.volatile},volatile:{isHidden:!!i.derived}})}function f({ele:e,values:i}){return{eAnnotations:{isHidden:!0},eTypeParameters:{isHidden:!0}}}return function(){const{ele:e,fields:i,values:u,initialValues:p}=d;if(e.$.isKindOf("ecore.EAttribute"))return t({ele:e,values:u});if(e.$.isKindOf("ecore.EClass"))return n({ele:e,values:u});if(e.$.isKindOf("ecore.EEnum"))return f({ele:e,values:u});if(e.$.isKindOf("ecore.EEnumLiteral"))return{eAnnotations:{isHidden:!0}};if(e.$.isKindOf("ecore.EDataType"))return f({ele:e,values:u});if(e.$.isKindOf("ecore.EOperation"))return r({ele:e,values:u});if(e.$.isKindOf("ecore.EParameter"))return s({ele:e,values:u});if(e.$.isKindOf("ecore.EReference"))return o({ele:e,values:u})}}var h=({app:d,eventBus:t})=>{const n="@kasper-aanstoot/moddle",o="UML Class Diagramming App";let r={}.title;const s="0.0.1";!r&&n&&(r=a.last(n.split("/")),r=a.startCase(r));const c={id:a.hash(n),description:o,dialog(f){return new Promise((e,i)=>{let u=!0;E.create(f).onOk((p={})=>{u=!1,e({result:p,event:"ok"})}).onCancel(()=>{u=!1,e({event:"cancel"})}).onDismiss(()=>{u&&e({event:"dismiss"})})})},mount(f,e={}){return e.app||(e.app=d),g(f,e)},name:n,title:r,version:s};return d.config.globalProperties.$app=c,d.provide("app",c),d.config.globalProperties.$useMeta=m,d.provide("useMeta",m),t||(t=new _),d.config.globalProperties.$bus=t,d.provide("bus",t),c},k=({app:d,eventBus:t})=>{debugger;const n=h({app:d,eventBus:t});n.mainMenu=[{id:"info",icon:"mdi-information-variant-circle-outline",title:"Info"}]};export{k as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
