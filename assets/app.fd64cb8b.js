import{_ as n}from"./index.64638d34.js";class c{constructor(){this.__stack={}}on(t,s,o){return(this.__stack[t]||(this.__stack[t]=[])).push({fn:s,ctx:o}),this}once(t,s,o){const i=(...r)=>{this.off(t,i),s.apply(o,r)};return i.__callback=s,this.on(t,i,o)}emit(t){const s=this.__stack[t];if(s!==void 0){const o=[].slice.call(arguments,1);s.forEach(i=>{i.fn.apply(i.ctx,o)})}return this}off(t,s){const o=this.__stack[t];if(o===void 0)return this;if(s===void 0)return delete this.__stack[t],this;const i=o.filter(r=>r.fn!==s&&r.fn.__callback!==s);return i.length!==0?this.__stack[t]=i:delete this.__stack[t],this}}var p=({app:a,eventBus:t})=>{const s="@kasper-aanstoot/test-app",o="";let i={}.title;const r="0.0.1";!i&&s&&(i=n.last(s.split("/")),i=n.startCase(i));const e={id:n.hash(s),description:o,name:s,title:i,version:r};return a.config.globalProperties.$app=e,a.provide("app",e),t||(t=new c),a.config.globalProperties.$bus=t,a.provide("bus",t),e};export{p as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmZkNjRjYjhiLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy91dGlscy9FdmVudEJ1cy5qcyIsIi4uLy4uLy4uL3NyYy9ib290L2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZvcmtlZCBmcm9tIHRpbnktZW1pdHRlclxuICogQ29weXJpZ2h0IChjKSAyMDE3IFNjb3R0IENvcmdhblxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50QnVzIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuX19zdGFjayA9IHt9XG4gIH1cblxuICBvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgICh0aGlzLl9fc3RhY2tbIG5hbWUgXSB8fCAodGhpcy5fX3N0YWNrWyBuYW1lIF0gPSBbXSkpLnB1c2goe1xuICAgICAgZm46IGNhbGxiYWNrLFxuICAgICAgY3R4XG4gICAgfSlcblxuICAgIHJldHVybiB0aGlzIC8vIGNoYWluYWJsZVxuICB9XG5cbiAgb25jZSAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHRoaXMub2ZmKG5hbWUsIGxpc3RlbmVyKVxuICAgICAgY2FsbGJhY2suYXBwbHkoY3R4LCBhcmdzKVxuICAgIH1cblxuICAgIGxpc3RlbmVyLl9fY2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIGxpc3RlbmVyLCBjdHgpIC8vIGNoYWluYWJsZVxuICB9XG5cbiAgZW1pdCAobmFtZSkge1xuICAgIGNvbnN0IGxpc3QgPSB0aGlzLl9fc3RhY2tbIG5hbWUgXVxuXG4gICAgaWYgKGxpc3QgIT09IHZvaWQgMCkge1xuICAgICAgY29uc3QgcGFyYW1zID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gICAgICBsaXN0LmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICBlbnRyeS5mbi5hcHBseShlbnRyeS5jdHgsIHBhcmFtcylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMgLy8gY2hhaW5hYmxlXG4gIH1cblxuICBvZmYgKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgbGlzdCA9IHRoaXMuX19zdGFja1sgbmFtZSBdXG5cbiAgICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gdGhpcyAvLyBjaGFpbmFibGVcbiAgICB9XG5cbiAgICBpZiAoY2FsbGJhY2sgPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlIHRoaXMuX19zdGFja1sgbmFtZSBdXG4gICAgICByZXR1cm4gdGhpcyAvLyBjaGFpbmFibGVcbiAgICB9XG5cbiAgICBjb25zdCBsaXZlRXZlbnRzID0gbGlzdC5maWx0ZXIoXG4gICAgICBlbnRyeSA9PiBlbnRyeS5mbiAhPT0gY2FsbGJhY2sgJiYgZW50cnkuZm4uX19jYWxsYmFjayAhPT0gY2FsbGJhY2tcbiAgICApXG5cbiAgICBpZiAobGl2ZUV2ZW50cy5sZW5ndGggIT09IDApIHtcbiAgICAgIHRoaXMuX19zdGFja1sgbmFtZSBdID0gbGl2ZUV2ZW50c1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9fc3RhY2tbIG5hbWUgXVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzIC8vIGNoYWluYWJsZVxuICB9XG59XG4iLCJpbXBvcnQgXyBmcm9tICdAa2FzcGVyLWFhbnN0b290L2xvZGFzaC14JztcclxuaW1wb3J0IHsgRXZlbnRCdXMgfSBmcm9tICdxdWFzYXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHsgYXBwOiB2dWVBcHAsIGV2ZW50QnVzIH0pID0+IHtcclxuICBjb25zdCBuYW1lID0gcHJvY2Vzcy5lbnYubmFtZTtcclxuICBjb25zdCBkZXNjcmlwdGlvbiA9IHByb2Nlc3MuZW52LmRlc2NyaXB0aW9uO1xyXG4gIGxldCB0aXRsZSA9IHByb2Nlc3MuZW52LnRpdGxlO1xyXG4gIGNvbnN0IHZlcnNpb24gPSBwcm9jZXNzLmVudi52ZXJzaW9uO1xyXG4gIGlmICghdGl0bGUgJiYgbmFtZSkge1xyXG4gICAgdGl0bGUgPSBfLmxhc3QobmFtZS5zcGxpdCgnLycpKTtcclxuICAgIHRpdGxlID0gXy5zdGFydENhc2UodGl0bGUpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYXBwID0ge1xyXG4gICAgaWQ6IF8uaGFzaChuYW1lKSxcclxuICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgbmFtZSxcclxuICAgIHRpdGxlLFxyXG4gICAgdmVyc2lvblxyXG4gIH07XHJcblxyXG4gIHZ1ZUFwcC5jb25maWcuZ2xvYmFsUHJvcGVydGllcy4kYXBwID0gYXBwO1xyXG4gIHZ1ZUFwcC5wcm92aWRlKCdhcHAnLCBhcHApOyAvLyBmb3IgQ29tcG9zaXRpb24gQVBJXHJcblxyXG4gIGlmICghZXZlbnRCdXMpIGV2ZW50QnVzID0gbmV3IEV2ZW50QnVzKCk7XHJcbiAgdnVlQXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRidXMgPSBldmVudEJ1cztcclxuICB2dWVBcHAucHJvdmlkZSgnYnVzJywgZXZlbnRCdXMpOyAvLyBmb3IgQ29tcG9zaXRpb24gQVBJXHJcblxyXG4gIHJldHVybiBhcHA7XHJcbn0iXSwibmFtZXMiOlsiRXZlbnRCdXMiLCJuYW1lIiwiY2FsbGJhY2siLCJjdHgiLCJsaXN0ZW5lciIsImFyZ3MiLCJsaXN0IiwicGFyYW1zIiwiZW50cnkiLCJsaXZlRXZlbnRzIiwiYXBwIiwidnVlQXBwIiwiZXZlbnRCdXMiLCJkZXNjcmlwdGlvbiIsInRpdGxlIiwidmVyc2lvbiIsIl8iXSwibWFwcGluZ3MiOiJ3Q0FLZSxNQUFNQSxDQUFTLENBQzVCLGFBQWUsQ0FDYixLQUFLLFFBQVUsQ0FBRSxDQUNsQixDQUVELEdBQUlDLEVBQU1DLEVBQVVDLEVBQUssQ0FDdkIsT0FBQyxLQUFLLFFBQVNGLEtBQVcsS0FBSyxRQUFTQSxHQUFTLEtBQUssS0FBSyxDQUN6RCxHQUFJQyxFQUNKLElBQUFDLENBQ04sQ0FBSyxFQUVNLElBQ1IsQ0FFRCxLQUFNRixFQUFNQyxFQUFVQyxFQUFLLENBQ3pCLE1BQU1DLEVBQVcsSUFBSUMsSUFBUyxDQUM1QixLQUFLLElBQUlKLEVBQU1HLENBQVEsRUFDdkJGLEVBQVMsTUFBTUMsRUFBS0UsQ0FBSSxDQUN6QixFQUVELE9BQUFELEVBQVMsV0FBYUYsRUFDZixLQUFLLEdBQUdELEVBQU1HLEVBQVVELENBQUcsQ0FDbkMsQ0FFRCxLQUFNRixFQUFNLENBQ1YsTUFBTUssRUFBTyxLQUFLLFFBQVNMLEdBRTNCLEdBQUlLLElBQVMsT0FBUSxDQUNuQixNQUFNQyxFQUFTLENBQUEsRUFBRyxNQUFNLEtBQUssVUFBVyxDQUFDLEVBQ3pDRCxFQUFLLFFBQVFFLEdBQVMsQ0FDcEJBLEVBQU0sR0FBRyxNQUFNQSxFQUFNLElBQUtELENBQU0sQ0FDeEMsQ0FBTyxDQUNGLENBRUQsT0FBTyxJQUNSLENBRUQsSUFBS04sRUFBTUMsRUFBVSxDQUNuQixNQUFNSSxFQUFPLEtBQUssUUFBU0wsR0FFM0IsR0FBSUssSUFBUyxPQUNYLE9BQU8sS0FHVCxHQUFJSixJQUFhLE9BQ2YsY0FBTyxLQUFLLFFBQVNELEdBQ2QsS0FHVCxNQUFNUSxFQUFhSCxFQUFLLE9BQ3RCRSxHQUFTQSxFQUFNLEtBQU9OLEdBQVlNLEVBQU0sR0FBRyxhQUFlTixDQUMzRCxFQUVELE9BQUlPLEVBQVcsU0FBVyxFQUN4QixLQUFLLFFBQVNSLEdBQVNRLEVBR3ZCLE9BQU8sS0FBSyxRQUFTUixHQUdoQixJQUNSLENBQ0gsQ0NoRUEsSUFBZVMsRUFBQSxDQUFDLENBQUUsSUFBS0MsRUFBUSxTQUFBQyxLQUFlLENBQzVDLE1BQU1YLEVBQU8sNEJBQ1BZLEVBQWMsR0FDcEIsSUFBSUMsS0FBb0IsTUFDeEIsTUFBTUMsRUFBVSxRQUNaLENBQUNELEdBQVNiLElBQ1phLEVBQVFFLEVBQUUsS0FBS2YsRUFBSyxNQUFNLEdBQUcsQ0FBQyxFQUM5QmEsRUFBUUUsRUFBRSxVQUFVRixDQUFLLEdBRzNCLE1BQU1KLEVBQU0sQ0FDVixHQUFJTSxFQUFFLEtBQUtmLENBQUksRUFDZixZQUFBWSxFQUNBLEtBQUFaLEVBQ0EsTUFBQWEsRUFDQSxRQUFBQyxDQUNKLEVBRUUsT0FBQUosRUFBTyxPQUFPLGlCQUFpQixLQUFPRCxFQUN0Q0MsRUFBTyxRQUFRLE1BQU9ELENBQUcsRUFFcEJFLElBQVVBLEVBQVcsSUFBSVosR0FDOUJXLEVBQU8sT0FBTyxpQkFBaUIsS0FBT0MsRUFDdENELEVBQU8sUUFBUSxNQUFPQyxDQUFRLEVBRXZCRixDQUNUIn0=
