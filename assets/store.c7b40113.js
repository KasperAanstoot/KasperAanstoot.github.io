import{_ as x}from"./index.55edfe91.js";import{l as Ar,D as Bn,w as Br,n as Rr}from"./index.4634898b.js";import{E as ln,A as J,R as we,S as Ir,N as Dt}from"./Node.9a909cb3.js";import{u as Dr}from"./index.a83e0e01.js";class ft{constructor(e){var n;if((n=e.$)!=null&&n.toChecksum){const r=e.$.toChecksum({returnData:!0});this.id=x.hash(r),this.data=r}else Object.assign(this,e)}toGraphQL(){return`
      type RepositoryObject implements Node @model {
        data: JSONObject
      }
    `}toJSON(){return this}}const Rn=new WeakMap,In=new WeakMap;class De extends ln{constructor(e){super(),this.id=x.randomId(),this.date=new Date,Object.assign(this,e),this.objects&&(this.objects=new J(x.sortBy(this.objects,"id"),{key:"id",owner:this,type:ft,unique:!0}),this._objectsByIdMap=x.keyBy(this.objects,"data.id")),this.checksum=this._createChecksum()}static fromJSON(e){return x.isString(e)&&(e=JSON.parse(e)),new De(e)}_createChecksum(){return x.hash(x.sortBy(this.objects,"id"))}_getObjectsByChecksumMap(){let e=In.get(this);return e||(e={},In.set(this,e)),e}_getObjectsByIdMap(){let e=Rn.get(this);return e||(e={},Rn.set(this,e)),e}amend(e){const n=this,r=[];return x.forEach(x.castArray(e),i=>{if(n.getObjectByChecksum(i))return;const o=n.getObjectById(i);o&&n.objects.remove(o),n.objects.add(i),r.push(i)}),r.length&&(this.checksum=this._createChecksum()),this}get(e){return this.getObjectByChecksum(e)||this.getObjectById(e)}getObjectByChecksum(e){return this.objects.get((e==null?void 0:e.id)||e)}getObjectById(e){var n;return(n=this._objectsByIdMap)==null?void 0:n[(e==null?void 0:e.id)||e]}getChanges(){return this.parent?{added:new J,changed:new J,removed:new J}:{added:new J}}getParent(e=1){return this.getParents(e)[e-1]}getParents(e=1/0){const n=[];let r=this.parent;for(;r&&n.length<e;)n.push(r),r=r.parent;return n}revert({change:e}){}toGraphQL(){return`
      type Commit implements Node {
        authorId: String @ownerId
        author: User @join @owner
        children: [Commit!] @derived # @flatMap(collection: "_parents", iteratee: "child")
        commitObjects: [CommitObject!]! @composition @join(fk: "CommitObject.commitId")
        date: DateTime! @createdAt
        name: String
        message: String
        objects: [CommittedObject!]! @delegates(to: ["commitObjects.object"])
        parentId: String
        # parent: Commit @join
        _parents: [CommitHierarchy!] @join(fk: "CommitHierarchy.parentId")
        # _parents: [CommitParents!] @composition @join(fk: "CommitParents.parentId")
        parents: [CommitParents!] @derived # @flatMap(list: "_parents", iteratee: "parent")
        repositoryId: String!
        repository: Repository!
      }

      type CommitHierarchy implements Node {
        childId: String
        child: Commit @join(fk: "childId")
        parentId: String
        parent: Commit @join(fk: "childId")
      }
    `}toJSON(){var e;return{__typename:"Repository.Commit",id:this.id,authorId:(e=this.author)==null?void 0:e.id,date:this.date,name:this.name,message:this.message,objects:this.objects,parents:x.map(this.parents,n=>({__typename:"ecore.EREf",eClass:"Repository.Commit",id:n.id}))}}}class Dn extends ln{constructor(e,n){super(),this.id=x.randomId(),this.name="main",this.commit=null,this.commitId=null,this.repository=null,this.repositoryId=null,Object.assign(this,e)}getHistory(){const e=this.commit.getParents();return[this.commit,...e]}toGraphQL(){return`
      interface Branch implements Node {
        description: String
        name: String
        # mergeOptions: JSONObject
        repositoryId: String!
        repository: Repository! @join(fk: "repositoryId")
      }

      type MainBranch implements Branch {
        commitId: String # Als die null is, dan is het main!
        commit: Commit # Als die null is, dan is het main!
        name: String @default(value: "main")
      }

      type DevergedBranch implements Branch {
        commitId: String!
        commit: Commit!
      }
    `}}class Kn{constructor(e){this.id=x.randomId(),this.checksum=x.hash(JSON.stringify(this.toChecksum())),Object.assign(this,e)}toGraphQL(){return`
      type MergeConflict implements Node @model {
        checksum: Checksum!
        sourceObject: CommittedObject @join(fk: "sourceChecksum")
        sourceChecksum: Checksum!
        targetObject: CommittedObject! @join(fk: "targetChecksum")
        targetChecksum: Checksum!
      }
    `}toChecksum(){return{sourceChecksum:this.sourceChecksum,targetChecksum:this.targetChecksum}}toJSON(){return{id:this.id,sourceChecksum:this.sourceChecksum,targetChecksum:this.targetChecksum}}}class Kr extends ln{constructor(e){if(super(),!(e!=null&&e.name))throw new we("name");if(!(e!=null&&e.url))throw new we("url");Object.assign(this,e)}async fetch(e){}async pull(e){var o;let{branch:n="main"}=e;const r=(n==null?void 0:n.name)||n;if(n=this.branches[r],!n)throw new ValidationError(`Branch ${r} does not exist`);(((o=this.$)==null?void 0:o.container)||this.repository).merge(n)}async push(e){let{allBranches:n,branches:r,branch:i}=e;if(!x.isEmpty(this.branches)&&(r||(r=n?x.values(this.branches):[i||this.currentBranch]),!(!remotes&&(remotes=allRemotes?x.values(this.remotes):[remote||this.origin],!remotes[0]))))for(const o of remotes)for(const a of r);}toGraphQL(){return`
      type Remote {
        name: String!
        url: String!
      }
    `}}class On extends Error{constructor(e){super(e),this.name="MergeError"}}const de=Symbol("stagingArea");class Or extends Ir{constructor(e){super(e),this.id=x.randomId(),this.branches=new J({key:"name",owner:this,type:Dn}),this.currentBranch=null,this.commits=new J({key:"id",owner:this,type:De}),this.head=null,this.main=this.createBranch({name:"main"}),this.checkout(this.main),this.objects=new J({key:"id",owner:this,type:ft,unique:!0}),this.remotes=new J({key:"name",owner:this,type:this.constructor}),this.schema=null,this._createStagingArea(),e!=null&&e.clone||x.isEmpty(e)||Object.assign(this,e),this.origin=null}static fromJSON(e){}_addObject(e){return this.objects.add(e),e}_createStagingArea(){this[de]=new J({key:"id",owner:this,type:ft,unique:!0})}_createObject(e){return new ft(e)}_getCommonAncestor(e){const n=x.map(e,i=>new J(i.getHistory(),{key:"checksum"}));return x.intersectionBy(n,"checksum")}add(e,n){if(!e)return;const r=this;if(x.isArray(e))return x.map(e,a=>r.add(a,n));const i=this.head.commit,o=this.get(e.data.id);if(!(o&&o.$.removedAt&&!i.getObjectById(o.id))&&!(i!=null&&i.getObjectByChecksum(e)))return this[de].add(e),e}addRemote(e){if(!e)throw we("data");if(this.remotes[e==null?void 0:e.name])throw new ValidationError(`A Remote with name '${e.name}' already exists. Use Remote.remove to remove. An .addRemote to re-create`);const r=new Kr(e);return this.remotes.add(r),r}checkout(e){const n=this.branches.get((e==null?void 0:e.name)||e);if(n)return this._createStagingArea(),this.currentBranch=n,this.head=n,n;{const r=(e==null?void 0:e.name)||e;return this.createBranch({name:r},{checkout:!0})}}commit(e,n={}){var c;let{all:r,amend:i}=n;const o=(c=this.currentBranch)==null?void 0:c.commit;if(Dt.isNode(e))i=!0,this.add(node);else if(e!=null&&e.objects)this[de].add(e.objects);else{r=!0;const u=this.getChanges();x.forEach(u.added,l=>this[de].add(l)),x.forEach(u.changed,l=>this[de].add(l)),x.forEach(u.removed,l=>this[de].add(l))}let a=this[de];const s=x.keyBy(a,"data.id");if(x.isEmpty(a))return null;if(o&&i)return o.amend(a);{const u={...e,objects:[]};Dt.isNode(e)||x.merge(u,e),!u.parents&&o&&(u.parents=[o]),x.forEach(u.parents,f=>{x.forEach(f.objects,h=>{s[h.data.id]||u.objects.push(h)})}),x.forEach(a,f=>{const h=this.get(f.data.id);h!=null&&h.$.removedAt||u.objects.push(f)});const l=new De(u);return x.forEach(l.objects,f=>{this.objects.add(f)}),this.commits.add(l),this.head.commit=l,this._createStagingArea(),l}}createBranch(e={},n={}){var a;let{checkout:r,commit:i}=n;if(!x.isEmpty(this.branches)){if(!e.name)throw new we("data.name");if(this.branches[e.name])throw new ValidationError(`A Branch with name '${e.name}' already exists. Use .checkout(branchName) to switch branches`);if(i||(i=((a=this.head)==null?void 0:a.commit)||this.head),!(i instanceof De))throw new ValidationError("head is not a commit");e={...e,commit:i}}const o=new Dn(e);return o.repository=this,o.repositoryId=this.id,this.branches.add(o),r===!0?this.checkout(o):o}createNode(...e){const n=super.createNode.apply(this,e);return x.forEach(x.castArray(n),r=>{r.$.getRevisions=function(){var i;(i=this.store.head)==null||i.commit}}),n}deleteBranch(e,n){const r=(e==null?void 0:e.name)||e,i=this.branches.get(r);if(!i)throw new ValidationError(`A Branch with name '${r}' doest not exist`);if(i.name==="main")throw new ValidationError("You cannot remove the 'main' branch");if(this.currentBranch===i){let{checkout:o}=n||{};(!o||o===i.name)&&(o="main"),this.checkout(o)}return this.branches.remove(i)}async fetch(e){let{all:n,remote:r="origin"}=e;if(n)for(const i of this.remotes)await i.fetch(x.omit(e,["all","remote"]));else{if(!(e!=null&&e.remote))throw new we("remote");const i=(r==null?void 0:r.name)||r;if(r=this.remotes[i],!r)throw new ValidationError(`Remote ${i} does not exist`);return r.fetch(x.omit(e,["remote"]))}}getChanges(){const e=[],n=[],r=[],i=this.head.commit;x.forEach(this.nodes,a=>{let s=i==null?void 0:i.getObjectById(a.id);if(s){const c=a.$.toChecksum();(i==null?void 0:i.getObjectByChecksum(c))?r.push(s):n.push(this._createObject(a))}else a.$.createdAt&&(s=this._createObject(a),e.push(s))});const o=x.filter(i==null?void 0:i.objects,a=>!this.objects.get(a.id));return{added:e.length?e:null,changed:n.length?n:null,removed:o.length?o:null,unchanged:r.length?r:null}}getStagingArea(){return this[de]}merge_OLD(e,n){if(x.isEmpty(e))throw new we("from");const r=this,{allowUnrelatedHistories:i=!1,fastForward:o=!0,noCommit:a=!1,into:s}=n;let c=this.branches.get((s==null?void 0:s.name)||s)||this.currentBranch;const u=x.map(x.castArray(e),p=>{const d=(p==null?void 0:p.name)||p,y=this.branches.get(d);if(!y)throw new On(`Branch with name '${d}' does not exists`);return y}),l=this._getCommonAncestor([c,...u]);function f({base:p,commit:d,source:y,target:_}){d||(d={objects:[],parents:[]});const w=[],g=[],E=[],v=[];return x.forEach(y.objects,b=>{const S=p.objects.getObjectById(b.id),k=_.objects.getObjectById(b.id);S?b.checksum===S.checksum?k?k.checksum===b.checksum?(v.push(S),d.objects.push(S)):(w.push(k),d.objects.push(k)):(v.push(S),d.objects.push(S)):k?k.checksum===S.checksum?(g.push(b),d.objects.push(b)):E.push({sourceObject:b,targetObject:k}):(g.push(b),d.objects.push(b)):d.objects.has(b)||d.objects.push(b)}),x.forEach(_.objects,b=>{const S=y.objects.getById(b.id);S?S.checksum===b.checksum?v.push(b):l.objects.getObjectByChecksum(b.checksum)||g.push(b):l.objects.getObjectById(b.id)||w.push(b)}),{commit:d,added:w,changed:g,conflicts:E,unchanged:v}}let h={objects:[],parents:[]},m={message:null,name:null,commit(p){return r.commit({...p,...h})}};return x.forEach(u,p=>{const d=this._getCommonAncestor([c,p]),{commit:y,added:_,changed:w,conflicts:g,unchanged:E}=f({base:d,commit:h,source:c.commit,target:p.commit});h=y,m.added=m.added?[...m.added,..._]:[..._],m.changed=m.changed?[...m.changed,...w]:[...w],m.conflicts=m.conflicts?[...m.conflicts,...g]:[...g],m.unchanged=m.unchanged?[...m.unchanged,...E]:[...E]}),m}merge(e,n){if(x.isEmpty(e))throw new we("from");const r=this,{allowUnrelatedHistories:i=!1,fastForward:o=!0,noCommit:a=!1,into:s}=n;let c=this.branches.get((s==null?void 0:s.name)||s)||this.currentBranch;const u=x.map(x.castArray(e),m=>{const p=(m==null?void 0:m.name)||m,d=this.branches.get(p);if(!d)throw new On(`Branch with name '${p}' does not exists`);return d});let l={objects:[...c.commit.objects],parents:[]},f={added:[],conflicts:[],message:null,name:null,commit(m){return r.commit({...m,...l})}};function h({base:m,source:p,target:d}){const y=[],_=new J({key:"checksum",type:Kn,unique:!0}),w=[];return x.forEach(d.objects,g=>{const E=p.objects.getById(g.id);E?g.checksum===E.checksum?w.push(g):_.push(new Kn({sourceObject:E,targetObject:g})):(y.push(g),l.objects.push(g))}),{added:y,conflicts:_,unchanged:w}}if(x.forEach(u,m=>{const p=this._getCommonAncestor([c,m]);if(p)if(source.commit===p&&n.fastForward)c.commit=m.commit;else{const{added:d,conflicts:y,unchanged:_}=h({base:p,source:c.commit,target:m.commit});f.added=[...f.added,...d],f.conflicts=[...f.conflicts,...y],l.parents.push(m.commit)}else n.allowUnrelatedHistories&&(l.objects=[...l.objects,...m.commit.objects],f.added=f.added?[...f.added,...m.commit.objects]:[...m.commit.objects],l.parents.push(m.commit))}),x.isEmpty(f.conflicts)){if(n.noCommit)return f;{const m=new De(l);c.commit=m}}else return f}async pull(e){let{remote:n="origin"}=e;const r=(n==null?void 0:n.name)||n;if(n=this.remotes[r],!n)throw new ValidationError(`Remote ${r} does not exist`);return n.pull(e)}async push(e){let{remote:n="origin"}=e;const r=(n==null?void 0:n.name)||n;if(n=this.remotes[r],!n)throw new ValidationError(`Remote ${r} does not exist`);return n.push(e)}remove(...e){const n=super.remove.apply(this,e),r=x.keyBy(x.castArray(n),"id");this.objects.remove(i=>r[i.data.id])}restore(){delete this.$.removedAt}setOrigin(e){const n=(e==null?void 0:e.name)||e;if(e=this.remotes[n],!e)throw ValidationError(`A Remote with name '${n}' does not exist. Use .addRemote to add a Remote`);this.origin=e}toGraphQL(){return`
      scalar Checksum

      type RepositoryNode implements Node {
        authorId: String @ownerId
        author: User @owner
        # repositoryId: String!
        # repository: Repository!
      }

      type Repository implements RepositoryNode @model {
        # date: DateTime! @createdAt
        branches: [Branch!] @composition @join(fk: "Branch.repositoryId")
        commits: [Commit!] @composition @join(fk: "Commit.repositoryId")
        headId: String
        head: Branch @composition @join(fk: "headId")
        # head: Branch @resolve(body: "return parent.branches?.find(o => o.name === 'main')", deps: ["branches"])
        name: String
        # originId: String
        # origin: Remote @composition @join(fk: "originId")
        # origin: Remote @resolve(body: "return parent.remotes?.find(o => o.name === 'origin')", deps: ["remotes"])
        remotes: [RepositoryRemote] @composition @join(fk: "RepositoryRemote.repositoryId") # @flatMap(in: "o", iteratee: "remote")
        # remotes: [Remote] @composition @join(fk: "RepositoryRemote.repositoryId") # @flatMap(in: "o", iteratee: "remote")
        schema: JSONObject @derived # Ophalen o.b.v. this.url
        url: URL # NB: Kan zijn http(s)://${host}:${port}/graphql?query=query+getSchema&auth=..."
      }

      # type Remote implements RepositoryNode {
        type RepositoryRemote implements Node {
        remotedId: String!
        remote: Repository
        repositoryId: String!
        repository: Repository
      }
    `}upsert(e,n){if(n||(n=this.nodes[e.id]),n){if(e instanceof Dt)return e===n||n.merge(e),n;n.merge(e)}else return this.createNode(e)}}function Tn(t){setTimeout(()=>{window.URL.revokeObjectURL(t.href)},1e4),t.remove()}function Tr(t,e,n={}){const{mimeType:r,byteOrderMark:i,encoding:o}=typeof n=="string"?{mimeType:n}:n,a=o!==void 0?new TextEncoder(o).encode([e]):e,s=i!==void 0?[i,a]:[a],c=new Blob(s,{type:r||"application/octet-stream"}),u=document.createElement("a");u.href=window.URL.createObjectURL(c),u.setAttribute("download",t),typeof u.download=="undefined"&&u.setAttribute("target","_blank"),u.classList.add("hidden"),u.style.position="fixed",document.body.appendChild(u);try{return u.click(),Tn(u),!0}catch(l){return Tn(u),l}}/*! *****************************************************************************
Copyright (c) Microsoft Corporation.
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */var K=function(){return K=Object.assign||function(e){for(var n,r=1,i=arguments.length;r<i;r++){n=arguments[r];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},K.apply(this,arguments)};function Nt(t,e,n){if(n||arguments.length===2)for(var r=0,i=e.length,o;r<i;r++)(o||!(r in e))&&(o||(o=Array.prototype.slice.call(e,0,r)),o[r]=e[r]);return t.concat(o||Array.prototype.slice.call(e))}var M=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:global,N=Object.keys,$=Array.isArray;typeof Promise!="undefined"&&!M.Promise&&(M.Promise=Promise);function W(t,e){return typeof e!="object"||N(e).forEach(function(n){t[n]=e[n]}),t}var He=Object.getPrototypeOf,Pr={}.hasOwnProperty;function Y(t,e){return Pr.call(t,e)}function Oe(t,e){typeof e=="function"&&(e=e(He(t))),(typeof Reflect=="undefined"?N:Reflect.ownKeys)(e).forEach(function(n){ce(t,n,e[n])})}var Qn=Object.defineProperty;function ce(t,e,n,r){Qn(t,e,W(n&&Y(n,"get")&&typeof n.get=="function"?{get:n.get,set:n.set,configurable:!0}:{value:n,configurable:!0,writable:!0},r))}function Te(t){return{from:function(e){return t.prototype=Object.create(e.prototype),ce(t.prototype,"constructor",t),{extend:Oe.bind(null,t.prototype)}}}}var jr=Object.getOwnPropertyDescriptor;function fn(t,e){var n=jr(t,e),r;return n||(r=He(t))&&fn(r,e)}var Mr=[].slice;function At(t,e,n){return Mr.call(t,e,n)}function Gn(t,e){return e(t)}function Ne(t){if(!t)throw new Error("Assertion Failed")}function Jn(t){M.setImmediate?setImmediate(t):setTimeout(t,0)}function qn(t,e){return t.reduce(function(n,r,i){var o=e(r,i);return o&&(n[o[0]]=o[1]),n},{})}function Fr(t,e,n){try{t.apply(null,n)}catch(r){e&&e(r)}}function ue(t,e){if(typeof e=="string"&&Y(t,e))return t[e];if(!e)return t;if(typeof e!="string"){for(var n=[],r=0,i=e.length;r<i;++r){var o=ue(t,e[r]);n.push(o)}return n}var a=e.indexOf(".");if(a!==-1){var s=t[e.substr(0,a)];return s===void 0?void 0:ue(s,e.substr(a+1))}}function Z(t,e,n){if(!(!t||e===void 0)&&!("isFrozen"in Object&&Object.isFrozen(t)))if(typeof e!="string"&&"length"in e){Ne(typeof n!="string"&&"length"in n);for(var r=0,i=e.length;r<i;++r)Z(t,e[r],n[r])}else{var o=e.indexOf(".");if(o!==-1){var a=e.substr(0,o),s=e.substr(o+1);if(s==="")n===void 0?$(t)&&!isNaN(parseInt(a))?t.splice(a,1):delete t[a]:t[a]=n;else{var c=t[a];(!c||!Y(t,a))&&(c=t[a]={}),Z(c,s,n)}}else n===void 0?$(t)&&!isNaN(parseInt(e))?t.splice(e,1):delete t[e]:t[e]=n}}function Nr(t,e){typeof e=="string"?Z(t,e,void 0):"length"in e&&[].map.call(e,function(n){Z(t,n,void 0)})}function Xn(t){var e={};for(var n in t)Y(t,n)&&(e[n]=t[n]);return e}var Lr=[].concat;function Zn(t){return Lr.apply([],t)}var er="BigUint64Array,BigInt64Array,Array,Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(Zn([8,16,32,64].map(function(t){return["Int","Uint","Float"].map(function(e){return e+t+"Array"})}))).filter(function(t){return M[t]}),Vr=er.map(function(t){return M[t]});qn(er,function(t){return[t,!0]});var me=null;function qe(t){me=typeof WeakMap!="undefined"&&new WeakMap;var e=Lt(t);return me=null,e}function Lt(t){if(!t||typeof t!="object")return t;var e=me&&me.get(t);if(e)return e;if($(t)){e=[],me&&me.set(t,e);for(var n=0,r=t.length;n<r;++n)e.push(Lt(t[n]))}else if(Vr.indexOf(t.constructor)>=0)e=t;else{var i=He(t);e=i===Object.prototype?{}:Object.create(i),me&&me.set(t,e);for(var o in t)Y(t,o)&&(e[o]=Lt(t[o]))}return e}var Ur={}.toString;function Vt(t){return Ur.call(t).slice(8,-1)}var Ut=typeof Symbol!="undefined"?Symbol.iterator:"@@iterator",$r=typeof Ut=="symbol"?function(t){var e;return t!=null&&(e=t[Ut])&&e.apply(t)}:function(){return null},Ie={};function ae(t){var e,n,r,i;if(arguments.length===1){if($(t))return t.slice();if(this===Ie&&typeof t=="string")return[t];if(i=$r(t)){for(n=[];r=i.next(),!r.done;)n.push(r.value);return n}if(t==null)return[t];if(e=t.length,typeof e=="number"){for(n=new Array(e);e--;)n[e]=t[e];return n}return[t]}for(e=arguments.length,n=new Array(e);e--;)n[e]=arguments[e];return n}var hn=typeof Symbol!="undefined"?function(t){return t[Symbol.toStringTag]==="AsyncFunction"}:function(){return!1},re=typeof location!="undefined"&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function tr(t,e){re=t,nr=e}var nr=function(){return!0},Hr=!new Error("").stack;function Ae(){if(Hr)try{throw Ae.arguments,new Error}catch(t){return t}return new Error}function $t(t,e){var n=t.stack;return n?(e=e||0,n.indexOf(t.name)===0&&(e+=(t.name+t.message).split(`
`).length),n.split(`
`).slice(e).filter(nr).map(function(r){return`
`+r}).join("")):""}var Wr=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"],rr=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],dn=Wr.concat(rr),zr={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed",MissingAPI:"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"};function Pe(t,e){this._e=Ae(),this.name=t,this.message=e}Te(Pe).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+$t(this._e,2))}},toString:function(){return this.name+": "+this.message}});function ir(t,e){return t+". Errors: "+Object.keys(e).map(function(n){return e[n].toString()}).filter(function(n,r,i){return i.indexOf(n)===r}).join(`
`)}function gt(t,e,n,r){this._e=Ae(),this.failures=e,this.failedKeys=r,this.successCount=n,this.message=ir(t,e)}Te(gt).from(Pe);function Ve(t,e){this._e=Ae(),this.name="BulkError",this.failures=Object.keys(e).map(function(n){return e[n]}),this.failuresByPos=e,this.message=ir(t,e)}Te(Ve).from(Pe);var pn=dn.reduce(function(t,e){return t[e]=e+"Error",t},{}),Yr=Pe,R=dn.reduce(function(t,e){var n=e+"Error";function r(i,o){this._e=Ae(),this.name=n,i?typeof i=="string"?(this.message=""+i+(o?`
 `+o:""),this.inner=o||null):typeof i=="object"&&(this.message=i.name+" "+i.message,this.inner=i):(this.message=zr[e]||n,this.inner=null)}return Te(r).from(Yr),t[e]=r,t},{});R.Syntax=SyntaxError;R.Type=TypeError;R.Range=RangeError;var Pn=rr.reduce(function(t,e){return t[e+"Error"]=R[e],t},{});function Qr(t,e){if(!t||t instanceof Pe||t instanceof TypeError||t instanceof SyntaxError||!t.name||!Pn[t.name])return t;var n=new Pn[t.name](e||t.message,t);return"stack"in t&&ce(n,"stack",{get:function(){return this.inner.stack}}),n}var Bt=dn.reduce(function(t,e){return["Syntax","Type","Range"].indexOf(e)===-1&&(t[e+"Error"]=R[e]),t},{});Bt.ModifyError=gt;Bt.DexieError=Pe;Bt.BulkError=Ve;function j(){}function Xe(t){return t}function Gr(t,e){return t==null||t===Xe?e:function(n){return e(t(n))}}function Ce(t,e){return function(){t.apply(this,arguments),e.apply(this,arguments)}}function Jr(t,e){return t===j?e:function(){var n=t.apply(this,arguments);n!==void 0&&(arguments[0]=n);var r=this.onsuccess,i=this.onerror;this.onsuccess=null,this.onerror=null;var o=e.apply(this,arguments);return r&&(this.onsuccess=this.onsuccess?Ce(r,this.onsuccess):r),i&&(this.onerror=this.onerror?Ce(i,this.onerror):i),o!==void 0?o:n}}function qr(t,e){return t===j?e:function(){t.apply(this,arguments);var n=this.onsuccess,r=this.onerror;this.onsuccess=this.onerror=null,e.apply(this,arguments),n&&(this.onsuccess=this.onsuccess?Ce(n,this.onsuccess):n),r&&(this.onerror=this.onerror?Ce(r,this.onerror):r)}}function Xr(t,e){return t===j?e:function(n){var r=t.apply(this,arguments);W(n,r);var i=this.onsuccess,o=this.onerror;this.onsuccess=null,this.onerror=null;var a=e.apply(this,arguments);return i&&(this.onsuccess=this.onsuccess?Ce(i,this.onsuccess):i),o&&(this.onerror=this.onerror?Ce(o,this.onerror):o),r===void 0?a===void 0?void 0:a:W(r,a)}}function Zr(t,e){return t===j?e:function(){return e.apply(this,arguments)===!1?!1:t.apply(this,arguments)}}function mn(t,e){return t===j?e:function(){var n=t.apply(this,arguments);if(n&&typeof n.then=="function"){for(var r=this,i=arguments.length,o=new Array(i);i--;)o[i]=arguments[i];return n.then(function(){return e.apply(r,o)})}return e.apply(this,arguments)}}var We={},ei=100,ti=20,or=100,yn=typeof Promise=="undefined"?[]:function(){var t=Promise.resolve();if(typeof crypto=="undefined"||!crypto.subtle)return[t,He(t),t];var e=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[e,He(e),t]}(),Ht=yn[0],bt=yn[1],Wt=yn[2],ar=bt&&bt.then,ht=Ht&&Ht.constructor,vn=!!Wt,zt=!1,ni=Wt?function(){Wt.then(it)}:M.setImmediate?setImmediate.bind(null,it):M.MutationObserver?function(){var t=document.createElement("div");new MutationObserver(function(){it(),t=null}).observe(t,{attributes:!0}),t.setAttribute("i","1")}:function(){setTimeout(it,0)},ze=function(t,e){Le.push([t,e]),wt&&(ni(),wt=!1)},Yt=!0,wt=!0,ke=[],dt=[],Qt=null,Gt=Xe,Ke={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:Fn,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach(function(t){try{Fn(t[0],t[1])}catch{}})}},A=Ke,Le=[],xe=0,pt=[];function C(t){if(typeof this!="object")throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=j,this._lib=!1;var e=this._PSD=A;if(re&&(this._stackHolder=Ae(),this._prev=null,this._numPrev=0),typeof t!="function"){if(t!==We)throw new TypeError("Not a function");this._state=arguments[1],this._value=arguments[2],this._state===!1&&qt(this,this._value);return}this._state=null,this._value=null,++e.ref,ur(this,t)}var Jt={get:function(){var t=A,e=_t;function n(r,i){var o=this,a=!t.global&&(t!==A||e!==_t),s=a&&!le(),c=new C(function(u,l){gn(o,new sr(kt(r,t,a,s),kt(i,t,a,s),u,l,t))});return re&&fr(c,this),c}return n.prototype=We,n},set:function(t){ce(this,"then",t&&t.prototype===We?Jt:{get:function(){return t},set:Jt.set})}};Oe(C.prototype,{then:Jt,_then:function(t,e){gn(this,new sr(null,null,t,e,A))},catch:function(t){if(arguments.length===1)return this.then(null,t);var e=arguments[0],n=arguments[1];return typeof e=="function"?this.then(null,function(r){return r instanceof e?n(r):mt(r)}):this.then(null,function(r){return r&&r.name===e?n(r):mt(r)})},finally:function(t){return this.then(function(e){return t(),e},function(e){return t(),mt(e)})},stack:{get:function(){if(this._stack)return this._stack;try{zt=!0;var t=lr(this,[],ti),e=t.join(`
From previous: `);return this._state!==null&&(this._stack=e),e}finally{zt=!1}}},timeout:function(t,e){var n=this;return t<1/0?new C(function(r,i){var o=setTimeout(function(){return i(new R.Timeout(e))},t);n.then(r,i).finally(clearTimeout.bind(null,o))}):this}});typeof Symbol!="undefined"&&Symbol.toStringTag&&ce(C.prototype,Symbol.toStringTag,"Dexie.Promise");Ke.env=hr();function sr(t,e,n,r,i){this.onFulfilled=typeof t=="function"?t:null,this.onRejected=typeof e=="function"?e:null,this.resolve=n,this.reject=r,this.psd=i}Oe(C,{all:function(){var t=ae.apply(null,arguments).map(Et);return new C(function(e,n){t.length===0&&e([]);var r=t.length;t.forEach(function(i,o){return C.resolve(i).then(function(a){t[o]=a,--r||e(t)},n)})})},resolve:function(t){if(t instanceof C)return t;if(t&&typeof t.then=="function")return new C(function(n,r){t.then(n,r)});var e=new C(We,!0,t);return fr(e,Qt),e},reject:mt,race:function(){var t=ae.apply(null,arguments).map(Et);return new C(function(e,n){t.map(function(r){return C.resolve(r).then(e,n)})})},PSD:{get:function(){return A},set:function(t){return A=t}},totalEchoes:{get:function(){return _t}},newPSD:ve,usePSD:Me,scheduler:{get:function(){return ze},set:function(t){ze=t}},rejectionMapper:{get:function(){return Gt},set:function(t){Gt=t}},follow:function(t,e){return new C(function(n,r){return ve(function(i,o){var a=A;a.unhandleds=[],a.onunhandled=o,a.finalize=Ce(function(){var s=this;ii(function(){s.unhandleds.length===0?i():o(s.unhandleds[0])})},a.finalize),t()},e,n,r)})}});ht&&(ht.allSettled&&ce(C,"allSettled",function(){var t=ae.apply(null,arguments).map(Et);return new C(function(e){t.length===0&&e([]);var n=t.length,r=new Array(n);t.forEach(function(i,o){return C.resolve(i).then(function(a){return r[o]={status:"fulfilled",value:a}},function(a){return r[o]={status:"rejected",reason:a}}).then(function(){return--n||e(r)})})})}),ht.any&&typeof AggregateError!="undefined"&&ce(C,"any",function(){var t=ae.apply(null,arguments).map(Et);return new C(function(e,n){t.length===0&&n(new AggregateError([]));var r=t.length,i=new Array(r);t.forEach(function(o,a){return C.resolve(o).then(function(s){return e(s)},function(s){i[a]=s,--r||n(new AggregateError(i))})})})}));function ur(t,e){try{e(function(n){if(t._state===null){if(n===t)throw new TypeError("A promise cannot be resolved with itself.");var r=t._lib&&Ze();n&&typeof n.then=="function"?ur(t,function(i,o){n instanceof C?n._then(i,o):n.then(i,o)}):(t._state=!0,t._value=n,cr(t)),r&&et()}},qt.bind(null,t))}catch(n){qt(t,n)}}function qt(t,e){if(dt.push(e),t._state===null){var n=t._lib&&Ze();e=Gt(e),t._state=!1,t._value=e,re&&e!==null&&typeof e=="object"&&!e._promise&&Fr(function(){var r=fn(e,"stack");e._promise=t,ce(e,"stack",{get:function(){return zt?r&&(r.get?r.get.apply(e):r.value):t.stack}})}),oi(t),cr(t),n&&et()}}function cr(t){var e=t._listeners;t._listeners=[];for(var n=0,r=e.length;n<r;++n)gn(t,e[n]);var i=t._PSD;--i.ref||i.finalize(),xe===0&&(++xe,ze(function(){--xe===0&&bn()},[]))}function gn(t,e){if(t._state===null){t._listeners.push(e);return}var n=t._state?e.onFulfilled:e.onRejected;if(n===null)return(t._state?e.resolve:e.reject)(t._value);++e.psd.ref,++xe,ze(ri,[n,t,e])}function ri(t,e,n){try{Qt=e;var r,i=e._value;e._state?r=t(i):(dt.length&&(dt=[]),r=t(i),dt.indexOf(i)===-1&&ai(e)),n.resolve(r)}catch(o){n.reject(o)}finally{Qt=null,--xe===0&&bn(),--n.psd.ref||n.psd.finalize()}}function lr(t,e,n){if(e.length===n)return e;var r="";if(t._state===!1){var i=t._value,o,a;i!=null?(o=i.name||"Error",a=i.message||i,r=$t(i,0)):(o=i,a=""),e.push(o+(a?": "+a:"")+r)}return re&&(r=$t(t._stackHolder,2),r&&e.indexOf(r)===-1&&e.push(r),t._prev&&lr(t._prev,e,n)),e}function fr(t,e){var n=e?e._numPrev+1:0;n<ei&&(t._prev=e,t._numPrev=n)}function it(){Ze()&&et()}function Ze(){var t=Yt;return Yt=!1,wt=!1,t}function et(){var t,e,n;do for(;Le.length>0;)for(t=Le,Le=[],n=t.length,e=0;e<n;++e){var r=t[e];r[0].apply(null,r[1])}while(Le.length>0);Yt=!0,wt=!0}function bn(){var t=ke;ke=[],t.forEach(function(r){r._PSD.onunhandled.call(null,r._value,r)});for(var e=pt.slice(0),n=e.length;n;)e[--n]()}function ii(t){function e(){t(),pt.splice(pt.indexOf(e),1)}pt.push(e),++xe,ze(function(){--xe===0&&bn()},[])}function oi(t){ke.some(function(e){return e._value===t._value})||ke.push(t)}function ai(t){for(var e=ke.length;e;)if(ke[--e]._value===t._value){ke.splice(e,1);return}}function mt(t){return new C(We,!1,t)}function F(t,e){var n=A;return function(){var r=Ze(),i=A;try{return ge(n,!0),t.apply(this,arguments)}catch(o){e&&e(o)}finally{ge(i,!1),r&&et()}}}var U={awaits:0,echoes:0,id:0},si=0,yt=[],Kt=0,_t=0,ui=0;function ve(t,e,n,r){var i=A,o=Object.create(i);o.parent=i,o.ref=0,o.global=!1,o.id=++ui;var a=Ke.env;o.env=vn?{Promise:C,PromiseProp:{value:C,configurable:!0,writable:!0},all:C.all,race:C.race,allSettled:C.allSettled,any:C.any,resolve:C.resolve,reject:C.reject,nthen:jn(a.nthen,o),gthen:jn(a.gthen,o)}:{},e&&W(o,e),++i.ref,o.finalize=function(){--this.parent.ref||this.parent.finalize()};var s=Me(o,t,n,r);return o.ref===0&&o.finalize(),s}function je(){return U.id||(U.id=++si),++U.awaits,U.echoes+=or,U.id}function le(){return U.awaits?(--U.awaits===0&&(U.id=0),U.echoes=U.awaits*or,!0):!1}(""+ar).indexOf("[native code]")===-1&&(je=le=j);function Et(t){return U.echoes&&t&&t.constructor===ht?(je(),t.then(function(e){return le(),e},function(e){return le(),L(e)})):t}function ci(t){++_t,(!U.echoes||--U.echoes===0)&&(U.echoes=U.id=0),yt.push(A),ge(t,!0)}function li(){var t=yt[yt.length-1];yt.pop(),ge(t,!1)}function ge(t,e){var n=A;if((e?U.echoes&&(!Kt++||t!==A):Kt&&(!--Kt||t!==A))&&dr(e?ci.bind(null,t):li),t!==A&&(A=t,n===Ke&&(Ke.env=hr()),vn)){var r=Ke.env.Promise,i=t.env;bt.then=i.nthen,r.prototype.then=i.gthen,(n.global||t.global)&&(Object.defineProperty(M,"Promise",i.PromiseProp),r.all=i.all,r.race=i.race,r.resolve=i.resolve,r.reject=i.reject,i.allSettled&&(r.allSettled=i.allSettled),i.any&&(r.any=i.any))}}function hr(){var t=M.Promise;return vn?{Promise:t,PromiseProp:Object.getOwnPropertyDescriptor(M,"Promise"),all:t.all,race:t.race,allSettled:t.allSettled,any:t.any,resolve:t.resolve,reject:t.reject,nthen:bt.then,gthen:t.prototype.then}:{}}function Me(t,e,n,r,i){var o=A;try{return ge(t,!0),e(n,r,i)}finally{ge(o,!1)}}function dr(t){ar.call(Ht,t)}function kt(t,e,n,r){return typeof t!="function"?t:function(){var i=A;n&&je(),ge(e,!0);try{return t.apply(this,arguments)}finally{ge(i,!1),r&&dr(le)}}}function jn(t,e){return function(n,r){return t.call(this,kt(n,e),kt(r,e))}}var Mn="unhandledrejection";function Fn(t,e){var n;try{n=e.onuncatched(t)}catch{}if(n!==!1)try{var r,i={promise:e,reason:t};if(M.document&&document.createEvent?(r=document.createEvent("Event"),r.initEvent(Mn,!0,!0),W(r,i)):M.CustomEvent&&(r=new CustomEvent(Mn,{detail:i}),W(r,i)),r&&M.dispatchEvent&&(dispatchEvent(r),!M.PromiseRejectionEvent&&M.onunhandledrejection))try{M.onunhandledrejection(r)}catch{}re&&r&&!r.defaultPrevented&&console.warn("Unhandled rejection: "+(t.stack||t))}catch{}}var L=C.reject;function Xt(t,e,n,r){if(!t.idbdb||!t._state.openComplete&&!A.letThrough&&!t._vip){if(t._state.openComplete)return L(new R.DatabaseClosed(t._state.dbOpenError));if(!t._state.isBeingOpened){if(!t._options.autoOpen)return L(new R.DatabaseClosed);t.open().catch(j)}return t._state.dbReadyPromise.then(function(){return Xt(t,e,n,r)})}else{var i=t._createTransaction(e,n,t._dbSchema);try{i.create(),t._state.PR1398_maxLoop=3}catch(o){return o.name===pn.InvalidState&&t.isOpen()&&--t._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),t._close(),t.open().then(function(){return Xt(t,e,n,r)})):L(o)}return i._promise(e,function(o,a){return ve(function(){return A.trans=i,r(o,a,i)})}).then(function(o){return i._completion.then(function(){return o})})}}var Nn="3.2.5",Ee=String.fromCharCode(65535),Zt=-1/0,ie="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",pr="String expected.",Ue=[],Rt=typeof navigator!="undefined"&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),fi=Rt,hi=Rt,mr=function(t){return!/(dexie\.js|dexie\.min\.js)/.test(t)},It="__dbnames",Ot="readonly",Tt="readwrite";function Se(t,e){return t?e?function(){return t.apply(this,arguments)&&e.apply(this,arguments)}:t:e}var yr={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function ot(t){return typeof t=="string"&&!/\./.test(t)?function(e){return e[t]===void 0&&t in e&&(e=qe(e),delete e[t]),e}:function(e){return e}}var di=function(){function t(){}return t.prototype._trans=function(e,n,r){var i=this._tx||A.trans,o=this.name;function a(c,u,l){if(!l.schema[o])throw new R.NotFound("Table "+o+" not part of transaction");return n(l.idbtrans,l)}var s=Ze();try{return i&&i.db===this.db?i===A.trans?i._promise(e,a,r):ve(function(){return i._promise(e,a,r)},{trans:i,transless:A.transless||A}):Xt(this.db,e,[this.name],a)}finally{s&&et()}},t.prototype.get=function(e,n){var r=this;return e&&e.constructor===Object?this.where(e).first(n):this._trans("readonly",function(i){return r.core.get({trans:i,key:e}).then(function(o){return r.hook.reading.fire(o)})}).then(n)},t.prototype.where=function(e){if(typeof e=="string")return new this.db.WhereClause(this,e);if($(e))return new this.db.WhereClause(this,"["+e.join("+")+"]");var n=N(e);if(n.length===1)return this.where(n[0]).equals(e[n[0]]);var r=this.schema.indexes.concat(this.schema.primKey).filter(function(f){if(f.compound&&n.every(function(m){return f.keyPath.indexOf(m)>=0})){for(var h=0;h<n.length;++h)if(n.indexOf(f.keyPath[h])===-1)return!1;return!0}return!1}).sort(function(f,h){return f.keyPath.length-h.keyPath.length})[0];if(r&&this.db._maxKey!==Ee){var i=r.keyPath.slice(0,n.length);return this.where(i).equals(i.map(function(f){return e[f]}))}!r&&re&&console.warn("The query "+JSON.stringify(e)+" on "+this.name+" would benefit of a "+("compound index ["+n.join("+")+"]"));var o=this.schema.idxByName,a=this.db._deps.indexedDB;function s(f,h){try{return a.cmp(f,h)===0}catch{return!1}}var c=n.reduce(function(f,h){var m=f[0],p=f[1],d=o[h],y=e[h];return[m||d,m||!d?Se(p,d&&d.multi?function(_){var w=ue(_,h);return $(w)&&w.some(function(g){return s(y,g)})}:function(_){return s(y,ue(_,h))}):p]},[null,null]),u=c[0],l=c[1];return u?this.where(u.name).equals(e[u.keyPath]).filter(l):r?this.filter(l):this.where(n).equals("")},t.prototype.filter=function(e){return this.toCollection().and(e)},t.prototype.count=function(e){return this.toCollection().count(e)},t.prototype.offset=function(e){return this.toCollection().offset(e)},t.prototype.limit=function(e){return this.toCollection().limit(e)},t.prototype.each=function(e){return this.toCollection().each(e)},t.prototype.toArray=function(e){return this.toCollection().toArray(e)},t.prototype.toCollection=function(){return new this.db.Collection(new this.db.WhereClause(this))},t.prototype.orderBy=function(e){return new this.db.Collection(new this.db.WhereClause(this,$(e)?"["+e.join("+")+"]":e))},t.prototype.reverse=function(){return this.toCollection().reverse()},t.prototype.mapToClass=function(e){this.schema.mappedClass=e;var n=function(r){if(!r)return r;var i=Object.create(e.prototype);for(var o in r)if(Y(r,o))try{i[o]=r[o]}catch{}return i};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=n,this.hook("reading",n),e},t.prototype.defineClass=function(){function e(n){W(this,n)}return this.mapToClass(e)},t.prototype.add=function(e,n){var r=this,i=this.schema.primKey,o=i.auto,a=i.keyPath,s=e;return a&&o&&(s=ot(a)(e)),this._trans("readwrite",function(c){return r.core.mutate({trans:c,type:"add",keys:n!=null?[n]:null,values:[s]})}).then(function(c){return c.numFailures?C.reject(c.failures[0]):c.lastResult}).then(function(c){if(a)try{Z(e,a,c)}catch{}return c})},t.prototype.update=function(e,n){if(typeof e=="object"&&!$(e)){var r=ue(e,this.schema.primKey.keyPath);if(r===void 0)return L(new R.InvalidArgument("Given object does not contain its primary key"));try{typeof n!="function"?N(n).forEach(function(i){Z(e,i,n[i])}):n(e,{value:e,primKey:r})}catch{}return this.where(":id").equals(r).modify(n)}else return this.where(":id").equals(e).modify(n)},t.prototype.put=function(e,n){var r=this,i=this.schema.primKey,o=i.auto,a=i.keyPath,s=e;return a&&o&&(s=ot(a)(e)),this._trans("readwrite",function(c){return r.core.mutate({trans:c,type:"put",values:[s],keys:n!=null?[n]:null})}).then(function(c){return c.numFailures?C.reject(c.failures[0]):c.lastResult}).then(function(c){if(a)try{Z(e,a,c)}catch{}return c})},t.prototype.delete=function(e){var n=this;return this._trans("readwrite",function(r){return n.core.mutate({trans:r,type:"delete",keys:[e]})}).then(function(r){return r.numFailures?C.reject(r.failures[0]):void 0})},t.prototype.clear=function(){var e=this;return this._trans("readwrite",function(n){return e.core.mutate({trans:n,type:"deleteRange",range:yr})}).then(function(n){return n.numFailures?C.reject(n.failures[0]):void 0})},t.prototype.bulkGet=function(e){var n=this;return this._trans("readonly",function(r){return n.core.getMany({keys:e,trans:r}).then(function(i){return i.map(function(o){return n.hook.reading.fire(o)})})})},t.prototype.bulkAdd=function(e,n,r){var i=this,o=Array.isArray(n)?n:void 0;r=r||(o?void 0:n);var a=r?r.allKeys:void 0;return this._trans("readwrite",function(s){var c=i.schema.primKey,u=c.auto,l=c.keyPath;if(l&&o)throw new R.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(o&&o.length!==e.length)throw new R.InvalidArgument("Arguments objects and keys must have the same length");var f=e.length,h=l&&u?e.map(ot(l)):e;return i.core.mutate({trans:s,type:"add",keys:o,values:h,wantResults:a}).then(function(m){var p=m.numFailures,d=m.results,y=m.lastResult,_=m.failures,w=a?d:y;if(p===0)return w;throw new Ve(i.name+".bulkAdd(): "+p+" of "+f+" operations failed",_)})})},t.prototype.bulkPut=function(e,n,r){var i=this,o=Array.isArray(n)?n:void 0;r=r||(o?void 0:n);var a=r?r.allKeys:void 0;return this._trans("readwrite",function(s){var c=i.schema.primKey,u=c.auto,l=c.keyPath;if(l&&o)throw new R.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(o&&o.length!==e.length)throw new R.InvalidArgument("Arguments objects and keys must have the same length");var f=e.length,h=l&&u?e.map(ot(l)):e;return i.core.mutate({trans:s,type:"put",keys:o,values:h,wantResults:a}).then(function(m){var p=m.numFailures,d=m.results,y=m.lastResult,_=m.failures,w=a?d:y;if(p===0)return w;throw new Ve(i.name+".bulkPut(): "+p+" of "+f+" operations failed",_)})})},t.prototype.bulkDelete=function(e){var n=this,r=e.length;return this._trans("readwrite",function(i){return n.core.mutate({trans:i,type:"delete",keys:e})}).then(function(i){var o=i.numFailures,a=i.lastResult,s=i.failures;if(o===0)return a;throw new Ve(n.name+".bulkDelete(): "+o+" of "+r+" operations failed",s)})},t}();function tt(t){var e={},n=function(s,c){if(c){for(var u=arguments.length,l=new Array(u-1);--u;)l[u-1]=arguments[u];return e[s].subscribe.apply(null,l),t}else if(typeof s=="string")return e[s]};n.addEventType=o;for(var r=1,i=arguments.length;r<i;++r)o(arguments[r]);return n;function o(s,c,u){if(typeof s=="object")return a(s);c||(c=Zr),u||(u=j);var l={subscribers:[],fire:u,subscribe:function(f){l.subscribers.indexOf(f)===-1&&(l.subscribers.push(f),l.fire=c(l.fire,f))},unsubscribe:function(f){l.subscribers=l.subscribers.filter(function(h){return h!==f}),l.fire=l.subscribers.reduce(c,u)}};return e[s]=n[s]=l,l}function a(s){N(s).forEach(function(c){var u=s[c];if($(u))o(c,s[c][0],s[c][1]);else if(u==="asap")var l=o(c,Xe,function(){for(var h=arguments.length,m=new Array(h);h--;)m[h]=arguments[h];l.subscribers.forEach(function(p){Jn(function(){p.apply(null,m)})})});else throw new R.InvalidArgument("Invalid event config")})}}function nt(t,e){return Te(e).from({prototype:t}),e}function pi(t){return nt(di.prototype,function(n,r,i){this.db=t,this._tx=i,this.name=n,this.schema=r,this.hook=t._allTables[n]?t._allTables[n].hook:tt(null,{creating:[Jr,j],reading:[Gr,Xe],updating:[Xr,j],deleting:[qr,j]})})}function Be(t,e){return!(t.filter||t.algorithm||t.or)&&(e?t.justLimit:!t.replayFilter)}function Pt(t,e){t.filter=Se(t.filter,e)}function jt(t,e,n){var r=t.replayFilter;t.replayFilter=r?function(){return Se(r(),e())}:e,t.justLimit=n&&!r}function mi(t,e){t.isMatch=Se(t.isMatch,e)}function vt(t,e){if(t.isPrimKey)return e.primaryKey;var n=e.getIndexByKeyPath(t.index);if(!n)throw new R.Schema("KeyPath "+t.index+" on object store "+e.name+" is not indexed");return n}function Ln(t,e,n){var r=vt(t,e.schema);return e.openCursor({trans:n,values:!t.keysOnly,reverse:t.dir==="prev",unique:!!t.unique,query:{index:r,range:t.range}})}function at(t,e,n,r){var i=t.replayFilter?Se(t.filter,t.replayFilter()):t.filter;if(t.or){var o={},a=function(s,c,u){if(!i||i(c,u,function(h){return c.stop(h)},function(h){return c.fail(h)})){var l=c.primaryKey,f=""+l;f==="[object ArrayBuffer]"&&(f=""+new Uint8Array(l)),Y(o,f)||(o[f]=!0,e(s,c,u))}};return Promise.all([t.or._iterate(a,n),Vn(Ln(t,r,n),t.algorithm,a,!t.keysOnly&&t.valueMapper)])}else return Vn(Ln(t,r,n),Se(t.algorithm,i),e,!t.keysOnly&&t.valueMapper)}function Vn(t,e,n,r){var i=r?function(a,s,c){return n(r(a),s,c)}:n,o=F(i);return t.then(function(a){if(a)return a.start(function(){var s=function(){return a.continue()};(!e||e(a,function(c){return s=c},function(c){a.stop(c),s=j},function(c){a.fail(c),s=j}))&&o(a.value,a,function(c){return s=c}),s()})})}function H(t,e){try{var n=Un(t),r=Un(e);if(n!==r)return n==="Array"?1:r==="Array"?-1:n==="binary"?1:r==="binary"?-1:n==="string"?1:r==="string"?-1:n==="Date"?1:r!=="Date"?NaN:-1;switch(n){case"number":case"Date":case"string":return t>e?1:t<e?-1:0;case"binary":return vi($n(t),$n(e));case"Array":return yi(t,e)}}catch{}return NaN}function yi(t,e){for(var n=t.length,r=e.length,i=n<r?n:r,o=0;o<i;++o){var a=H(t[o],e[o]);if(a!==0)return a}return n===r?0:n<r?-1:1}function vi(t,e){for(var n=t.length,r=e.length,i=n<r?n:r,o=0;o<i;++o)if(t[o]!==e[o])return t[o]<e[o]?-1:1;return n===r?0:n<r?-1:1}function Un(t){var e=typeof t;if(e!=="object")return e;if(ArrayBuffer.isView(t))return"binary";var n=Vt(t);return n==="ArrayBuffer"?"binary":n}function $n(t){return t instanceof Uint8Array?t:ArrayBuffer.isView(t)?new Uint8Array(t.buffer,t.byteOffset,t.byteLength):new Uint8Array(t)}var gi=function(){function t(){}return t.prototype._read=function(e,n){var r=this._ctx;return r.error?r.table._trans(null,L.bind(null,r.error)):r.table._trans("readonly",e).then(n)},t.prototype._write=function(e){var n=this._ctx;return n.error?n.table._trans(null,L.bind(null,n.error)):n.table._trans("readwrite",e,"locked")},t.prototype._addAlgorithm=function(e){var n=this._ctx;n.algorithm=Se(n.algorithm,e)},t.prototype._iterate=function(e,n){return at(this._ctx,e,n,this._ctx.table.core)},t.prototype.clone=function(e){var n=Object.create(this.constructor.prototype),r=Object.create(this._ctx);return e&&W(r,e),n._ctx=r,n},t.prototype.raw=function(){return this._ctx.valueMapper=null,this},t.prototype.each=function(e){var n=this._ctx;return this._read(function(r){return at(n,e,r,n.table.core)})},t.prototype.count=function(e){var n=this;return this._read(function(r){var i=n._ctx,o=i.table.core;if(Be(i,!0))return o.count({trans:r,query:{index:vt(i,o.schema),range:i.range}}).then(function(s){return Math.min(s,i.limit)});var a=0;return at(i,function(){return++a,!1},r,o).then(function(){return a})}).then(e)},t.prototype.sortBy=function(e,n){var r=e.split(".").reverse(),i=r[0],o=r.length-1;function a(u,l){return l?a(u[r[l]],l-1):u[i]}var s=this._ctx.dir==="next"?1:-1;function c(u,l){var f=a(u,o),h=a(l,o);return f<h?-s:f>h?s:0}return this.toArray(function(u){return u.sort(c)}).then(n)},t.prototype.toArray=function(e){var n=this;return this._read(function(r){var i=n._ctx;if(i.dir==="next"&&Be(i,!0)&&i.limit>0){var o=i.valueMapper,a=vt(i,i.table.core.schema);return i.table.core.query({trans:r,limit:i.limit,values:!0,query:{index:a,range:i.range}}).then(function(c){var u=c.result;return o?u.map(o):u})}else{var s=[];return at(i,function(c){return s.push(c)},r,i.table.core).then(function(){return s})}},e)},t.prototype.offset=function(e){var n=this._ctx;return e<=0?this:(n.offset+=e,Be(n)?jt(n,function(){var r=e;return function(i,o){return r===0?!0:r===1?(--r,!1):(o(function(){i.advance(r),r=0}),!1)}}):jt(n,function(){var r=e;return function(){return--r<0}}),this)},t.prototype.limit=function(e){return this._ctx.limit=Math.min(this._ctx.limit,e),jt(this._ctx,function(){var n=e;return function(r,i,o){return--n<=0&&i(o),n>=0}},!0),this},t.prototype.until=function(e,n){return Pt(this._ctx,function(r,i,o){return e(r.value)?(i(o),n):!0}),this},t.prototype.first=function(e){return this.limit(1).toArray(function(n){return n[0]}).then(e)},t.prototype.last=function(e){return this.reverse().first(e)},t.prototype.filter=function(e){return Pt(this._ctx,function(n){return e(n.value)}),mi(this._ctx,e),this},t.prototype.and=function(e){return this.filter(e)},t.prototype.or=function(e){return new this.db.WhereClause(this._ctx.table,e,this)},t.prototype.reverse=function(){return this._ctx.dir=this._ctx.dir==="prev"?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this},t.prototype.desc=function(){return this.reverse()},t.prototype.eachKey=function(e){var n=this._ctx;return n.keysOnly=!n.isMatch,this.each(function(r,i){e(i.key,i)})},t.prototype.eachUniqueKey=function(e){return this._ctx.unique="unique",this.eachKey(e)},t.prototype.eachPrimaryKey=function(e){var n=this._ctx;return n.keysOnly=!n.isMatch,this.each(function(r,i){e(i.primaryKey,i)})},t.prototype.keys=function(e){var n=this._ctx;n.keysOnly=!n.isMatch;var r=[];return this.each(function(i,o){r.push(o.key)}).then(function(){return r}).then(e)},t.prototype.primaryKeys=function(e){var n=this._ctx;if(n.dir==="next"&&Be(n,!0)&&n.limit>0)return this._read(function(i){var o=vt(n,n.table.core.schema);return n.table.core.query({trans:i,values:!1,limit:n.limit,query:{index:o,range:n.range}})}).then(function(i){var o=i.result;return o}).then(e);n.keysOnly=!n.isMatch;var r=[];return this.each(function(i,o){r.push(o.primaryKey)}).then(function(){return r}).then(e)},t.prototype.uniqueKeys=function(e){return this._ctx.unique="unique",this.keys(e)},t.prototype.firstKey=function(e){return this.limit(1).keys(function(n){return n[0]}).then(e)},t.prototype.lastKey=function(e){return this.reverse().firstKey(e)},t.prototype.distinct=function(){var e=this._ctx,n=e.index&&e.table.schema.idxByName[e.index];if(!n||!n.multi)return this;var r={};return Pt(this._ctx,function(i){var o=i.primaryKey.toString(),a=Y(r,o);return r[o]=!0,!a}),this},t.prototype.modify=function(e){var n=this,r=this._ctx;return this._write(function(i){var o;if(typeof e=="function")o=e;else{var a=N(e),s=a.length;o=function(_){for(var w=!1,g=0;g<s;++g){var E=a[g],v=e[E];ue(_,E)!==v&&(Z(_,E,v),w=!0)}return w}}var c=r.table.core,u=c.schema.primaryKey,l=u.outbound,f=u.extractKey,h=n.db._options.modifyChunkSize||200,m=[],p=0,d=[],y=function(_,w){var g=w.failures,E=w.numFailures;p+=_-E;for(var v=0,b=N(g);v<b.length;v++){var S=b[v];m.push(g[S])}};return n.clone().primaryKeys().then(function(_){var w=function(g){var E=Math.min(h,_.length-g);return c.getMany({trans:i,keys:_.slice(g,g+E),cache:"immutable"}).then(function(v){for(var b=[],S=[],k=l?[]:null,B=[],I=0;I<E;++I){var T=v[I],P={value:qe(T),primKey:_[g+I]};o.call(P,P.value,P)!==!1&&(P.value==null?B.push(_[g+I]):!l&&H(f(T),f(P.value))!==0?(B.push(_[g+I]),b.push(P.value)):(S.push(P.value),l&&k.push(_[g+I])))}var O=Be(r)&&r.limit===1/0&&(typeof e!="function"||e===Mt)&&{index:r.index,range:r.range};return Promise.resolve(b.length>0&&c.mutate({trans:i,type:"add",values:b}).then(function(V){for(var D in V.failures)B.splice(parseInt(D),1);y(b.length,V)})).then(function(){return(S.length>0||O&&typeof e=="object")&&c.mutate({trans:i,type:"put",keys:k,values:S,criteria:O,changeSpec:typeof e!="function"&&e}).then(function(V){return y(S.length,V)})}).then(function(){return(B.length>0||O&&e===Mt)&&c.mutate({trans:i,type:"delete",keys:B,criteria:O}).then(function(V){return y(B.length,V)})}).then(function(){return _.length>g+E&&w(g+h)})})};return w(0).then(function(){if(m.length>0)throw new gt("Error modifying one or more objects",m,p,d);return _.length})})})},t.prototype.delete=function(){var e=this._ctx,n=e.range;return Be(e)&&(e.isPrimKey&&!hi||n.type===3)?this._write(function(r){var i=e.table.core.schema.primaryKey,o=n;return e.table.core.count({trans:r,query:{index:i,range:o}}).then(function(a){return e.table.core.mutate({trans:r,type:"deleteRange",range:o}).then(function(s){var c=s.failures;s.lastResult,s.results;var u=s.numFailures;if(u)throw new gt("Could not delete some values",Object.keys(c).map(function(l){return c[l]}),a-u);return a-u})})}):this.modify(Mt)},t}(),Mt=function(t,e){return e.value=null};function bi(t){return nt(gi.prototype,function(n,r){this.db=t;var i=yr,o=null;if(r)try{i=r()}catch(u){o=u}var a=n._ctx,s=a.table,c=s.hook.reading.fire;this._ctx={table:s,index:a.index,isPrimKey:!a.index||s.schema.primKey.keyPath&&a.index===s.schema.primKey.name,range:i,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:o,or:a.or,valueMapper:c!==Xe?c:null}})}function wi(t,e){return t<e?-1:t===e?0:1}function _i(t,e){return t>e?-1:t===e?0:1}function z(t,e,n){var r=t instanceof gr?new t.Collection(t):t;return r._ctx.error=n?new n(e):new TypeError(e),r}function Re(t){return new t.Collection(t,function(){return vr("")}).limit(0)}function Ei(t){return t==="next"?function(e){return e.toUpperCase()}:function(e){return e.toLowerCase()}}function ki(t){return t==="next"?function(e){return e.toLowerCase()}:function(e){return e.toUpperCase()}}function xi(t,e,n,r,i,o){for(var a=Math.min(t.length,r.length),s=-1,c=0;c<a;++c){var u=e[c];if(u!==r[c])return i(t[c],n[c])<0?t.substr(0,c)+n[c]+n.substr(c+1):i(t[c],r[c])<0?t.substr(0,c)+r[c]+n.substr(c+1):s>=0?t.substr(0,s)+e[s]+n.substr(s+1):null;i(t[c],u)<0&&(s=c)}return a<r.length&&o==="next"?t+n.substr(t.length):a<t.length&&o==="prev"?t.substr(0,n.length):s<0?null:t.substr(0,s)+r[s]+n.substr(s+1)}function st(t,e,n,r){var i,o,a,s,c,u,l,f=n.length;if(!n.every(function(d){return typeof d=="string"}))return z(t,pr);function h(d){i=Ei(d),o=ki(d),a=d==="next"?wi:_i;var y=n.map(function(_){return{lower:o(_),upper:i(_)}}).sort(function(_,w){return a(_.lower,w.lower)});s=y.map(function(_){return _.upper}),c=y.map(function(_){return _.lower}),u=d,l=d==="next"?"":r}h("next");var m=new t.Collection(t,function(){return pe(s[0],c[f-1]+r)});m._ondirectionchange=function(d){h(d)};var p=0;return m._addAlgorithm(function(d,y,_){var w=d.key;if(typeof w!="string")return!1;var g=o(w);if(e(g,c,p))return!0;for(var E=null,v=p;v<f;++v){var b=xi(w,g,s[v],c[v],a,u);b===null&&E===null?p=v+1:(E===null||a(E,b)>0)&&(E=b)}return y(E!==null?function(){d.continue(E+l)}:_),!1}),m}function pe(t,e,n,r){return{type:2,lower:t,upper:e,lowerOpen:n,upperOpen:r}}function vr(t){return{type:1,lower:t,upper:t}}var gr=function(){function t(){}return Object.defineProperty(t.prototype,"Collection",{get:function(){return this._ctx.table.db.Collection},enumerable:!1,configurable:!0}),t.prototype.between=function(e,n,r,i){r=r!==!1,i=i===!0;try{return this._cmp(e,n)>0||this._cmp(e,n)===0&&(r||i)&&!(r&&i)?Re(this):new this.Collection(this,function(){return pe(e,n,!r,!i)})}catch{return z(this,ie)}},t.prototype.equals=function(e){return e==null?z(this,ie):new this.Collection(this,function(){return vr(e)})},t.prototype.above=function(e){return e==null?z(this,ie):new this.Collection(this,function(){return pe(e,void 0,!0)})},t.prototype.aboveOrEqual=function(e){return e==null?z(this,ie):new this.Collection(this,function(){return pe(e,void 0,!1)})},t.prototype.below=function(e){return e==null?z(this,ie):new this.Collection(this,function(){return pe(void 0,e,!1,!0)})},t.prototype.belowOrEqual=function(e){return e==null?z(this,ie):new this.Collection(this,function(){return pe(void 0,e)})},t.prototype.startsWith=function(e){return typeof e!="string"?z(this,pr):this.between(e,e+Ee,!0,!0)},t.prototype.startsWithIgnoreCase=function(e){return e===""?this.startsWith(e):st(this,function(n,r){return n.indexOf(r[0])===0},[e],Ee)},t.prototype.equalsIgnoreCase=function(e){return st(this,function(n,r){return n===r[0]},[e],"")},t.prototype.anyOfIgnoreCase=function(){var e=ae.apply(Ie,arguments);return e.length===0?Re(this):st(this,function(n,r){return r.indexOf(n)!==-1},e,"")},t.prototype.startsWithAnyOfIgnoreCase=function(){var e=ae.apply(Ie,arguments);return e.length===0?Re(this):st(this,function(n,r){return r.some(function(i){return n.indexOf(i)===0})},e,Ee)},t.prototype.anyOf=function(){var e=this,n=ae.apply(Ie,arguments),r=this._cmp;try{n.sort(r)}catch{return z(this,ie)}if(n.length===0)return Re(this);var i=new this.Collection(this,function(){return pe(n[0],n[n.length-1])});i._ondirectionchange=function(a){r=a==="next"?e._ascending:e._descending,n.sort(r)};var o=0;return i._addAlgorithm(function(a,s,c){for(var u=a.key;r(u,n[o])>0;)if(++o,o===n.length)return s(c),!1;return r(u,n[o])===0?!0:(s(function(){a.continue(n[o])}),!1)}),i},t.prototype.notEqual=function(e){return this.inAnyRange([[Zt,e],[e,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})},t.prototype.noneOf=function(){var e=ae.apply(Ie,arguments);if(e.length===0)return new this.Collection(this);try{e.sort(this._ascending)}catch{return z(this,ie)}var n=e.reduce(function(r,i){return r?r.concat([[r[r.length-1][1],i]]):[[Zt,i]]},null);return n.push([e[e.length-1],this.db._maxKey]),this.inAnyRange(n,{includeLowers:!1,includeUppers:!1})},t.prototype.inAnyRange=function(e,n){var r=this,i=this._cmp,o=this._ascending,a=this._descending,s=this._min,c=this._max;if(e.length===0)return Re(this);if(!e.every(function(v){return v[0]!==void 0&&v[1]!==void 0&&o(v[0],v[1])<=0}))return z(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",R.InvalidArgument);var u=!n||n.includeLowers!==!1,l=n&&n.includeUppers===!0;function f(v,b){for(var S=0,k=v.length;S<k;++S){var B=v[S];if(i(b[0],B[1])<0&&i(b[1],B[0])>0){B[0]=s(B[0],b[0]),B[1]=c(B[1],b[1]);break}}return S===k&&v.push(b),v}var h=o;function m(v,b){return h(v[0],b[0])}var p;try{p=e.reduce(f,[]),p.sort(m)}catch{return z(this,ie)}var d=0,y=l?function(v){return o(v,p[d][1])>0}:function(v){return o(v,p[d][1])>=0},_=u?function(v){return a(v,p[d][0])>0}:function(v){return a(v,p[d][0])>=0};function w(v){return!y(v)&&!_(v)}var g=y,E=new this.Collection(this,function(){return pe(p[0][0],p[p.length-1][1],!u,!l)});return E._ondirectionchange=function(v){v==="next"?(g=y,h=o):(g=_,h=a),p.sort(m)},E._addAlgorithm(function(v,b,S){for(var k=v.key;g(k);)if(++d,d===p.length)return b(S),!1;return w(k)?!0:(r._cmp(k,p[d][1])===0||r._cmp(k,p[d][0])===0||b(function(){h===o?v.continue(p[d][0]):v.continue(p[d][1])}),!1)}),E},t.prototype.startsWithAnyOf=function(){var e=ae.apply(Ie,arguments);return e.every(function(n){return typeof n=="string"})?e.length===0?Re(this):this.inAnyRange(e.map(function(n){return[n,n+Ee]})):z(this,"startsWithAnyOf() only works with strings")},t}();function Ci(t){return nt(gr.prototype,function(n,r,i){this.db=t,this._ctx={table:n,index:r===":id"?null:r,or:i};var o=t._deps.indexedDB;if(!o)throw new R.MissingAPI;this._cmp=this._ascending=o.cmp.bind(o),this._descending=function(a,s){return o.cmp(s,a)},this._max=function(a,s){return o.cmp(a,s)>0?a:s},this._min=function(a,s){return o.cmp(a,s)<0?a:s},this._IDBKeyRange=t._deps.IDBKeyRange})}function ne(t){return F(function(e){return Ye(e),t(e.target.error),!1})}function Ye(t){t.stopPropagation&&t.stopPropagation(),t.preventDefault&&t.preventDefault()}var Qe="storagemutated",ye="x-storagemutated-1",be=tt(null,Qe),Si=function(){function t(){}return t.prototype._lock=function(){return Ne(!A.global),++this._reculock,this._reculock===1&&!A.global&&(A.lockOwnerFor=this),this},t.prototype._unlock=function(){if(Ne(!A.global),--this._reculock===0)for(A.global||(A.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var e=this._blockedFuncs.shift();try{Me(e[1],e[0])}catch{}}return this},t.prototype._locked=function(){return this._reculock&&A.lockOwnerFor!==this},t.prototype.create=function(e){var n=this;if(!this.mode)return this;var r=this.db.idbdb,i=this.db._state.dbOpenError;if(Ne(!this.idbtrans),!e&&!r)switch(i&&i.name){case"DatabaseClosedError":throw new R.DatabaseClosed(i);case"MissingAPIError":throw new R.MissingAPI(i.message,i);default:throw new R.OpenFailed(i)}if(!this.active)throw new R.TransactionInactive;return Ne(this._completion._state===null),e=this.idbtrans=e||(this.db.core?this.db.core.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}):r.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability})),e.onerror=F(function(o){Ye(o),n._reject(e.error)}),e.onabort=F(function(o){Ye(o),n.active&&n._reject(new R.Abort(e.error)),n.active=!1,n.on("abort").fire(o)}),e.oncomplete=F(function(){n.active=!1,n._resolve(),"mutatedParts"in e&&be.storagemutated.fire(e.mutatedParts)}),this},t.prototype._promise=function(e,n,r){var i=this;if(e==="readwrite"&&this.mode!=="readwrite")return L(new R.ReadOnly("Transaction is readonly"));if(!this.active)return L(new R.TransactionInactive);if(this._locked())return new C(function(a,s){i._blockedFuncs.push([function(){i._promise(e,n,r).then(a,s)},A])});if(r)return ve(function(){var a=new C(function(s,c){i._lock();var u=n(s,c,i);u&&u.then&&u.then(s,c)});return a.finally(function(){return i._unlock()}),a._lib=!0,a});var o=new C(function(a,s){var c=n(a,s,i);c&&c.then&&c.then(a,s)});return o._lib=!0,o},t.prototype._root=function(){return this.parent?this.parent._root():this},t.prototype.waitFor=function(e){var n=this._root(),r=C.resolve(e);if(n._waitingFor)n._waitingFor=n._waitingFor.then(function(){return r});else{n._waitingFor=r,n._waitingQueue=[];var i=n.idbtrans.objectStore(n.storeNames[0]);(function a(){for(++n._spinCount;n._waitingQueue.length;)n._waitingQueue.shift()();n._waitingFor&&(i.get(-1/0).onsuccess=a)})()}var o=n._waitingFor;return new C(function(a,s){r.then(function(c){return n._waitingQueue.push(F(a.bind(null,c)))},function(c){return n._waitingQueue.push(F(s.bind(null,c)))}).finally(function(){n._waitingFor===o&&(n._waitingFor=null)})})},t.prototype.abort=function(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new R.Abort))},t.prototype.table=function(e){var n=this._memoizedTables||(this._memoizedTables={});if(Y(n,e))return n[e];var r=this.schema[e];if(!r)throw new R.NotFound("Table "+e+" not part of transaction");var i=new this.db.Table(e,r,this);return i.core=this.db.core.table(e),n[e]=i,i},t}();function Ai(t){return nt(Si.prototype,function(n,r,i,o,a){var s=this;this.db=t,this.mode=n,this.storeNames=r,this.schema=i,this.chromeTransactionDurability=o,this.idbtrans=null,this.on=tt(this,"complete","error","abort"),this.parent=a||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new C(function(c,u){s._resolve=c,s._reject=u}),this._completion.then(function(){s.active=!1,s.on.complete.fire()},function(c){var u=s.active;return s.active=!1,s.on.error.fire(c),s.parent?s.parent._reject(c):u&&s.idbtrans&&s.idbtrans.abort(),L(c)})})}function en(t,e,n,r,i,o,a){return{name:t,keyPath:e,unique:n,multi:r,auto:i,compound:o,src:(n&&!a?"&":"")+(r?"*":"")+(i?"++":"")+br(e)}}function br(t){return typeof t=="string"?t:t?"["+[].join.call(t,"+")+"]":""}function wr(t,e,n){return{name:t,primKey:e,indexes:n,mappedClass:null,idxByName:qn(n,function(r){return[r.name,r]})}}function Bi(t){return t.length===1?t[0]:t}var Ge=function(t){try{return t.only([[]]),Ge=function(){return[[]]},[[]]}catch{return Ge=function(){return Ee},Ee}};function tn(t){return t==null?function(){}:typeof t=="string"?Ri(t):function(e){return ue(e,t)}}function Ri(t){var e=t.split(".");return e.length===1?function(n){return n[t]}:function(n){return ue(n,t)}}function Hn(t){return[].slice.call(t)}var Ii=0;function $e(t){return t==null?":id":typeof t=="string"?t:"["+t.join("+")+"]"}function Di(t,e,n){function r(f,h){var m=Hn(f.objectStoreNames);return{schema:{name:f.name,tables:m.map(function(p){return h.objectStore(p)}).map(function(p){var d=p.keyPath,y=p.autoIncrement,_=$(d),w=d==null,g={},E={name:p.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:w,compound:_,keyPath:d,autoIncrement:y,unique:!0,extractKey:tn(d)},indexes:Hn(p.indexNames).map(function(v){return p.index(v)}).map(function(v){var b=v.name,S=v.unique,k=v.multiEntry,B=v.keyPath,I=$(B),T={name:b,compound:I,keyPath:B,unique:S,multiEntry:k,extractKey:tn(B)};return g[$e(B)]=T,T}),getIndexByKeyPath:function(v){return g[$e(v)]}};return g[":id"]=E.primaryKey,d!=null&&(g[$e(d)]=E.primaryKey),E})},hasGetAll:m.length>0&&"getAll"in h.objectStore(m[0])&&!(typeof navigator!="undefined"&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}function i(f){if(f.type===3)return null;if(f.type===4)throw new Error("Cannot convert never type to IDBKeyRange");var h=f.lower,m=f.upper,p=f.lowerOpen,d=f.upperOpen,y=h===void 0?m===void 0?null:e.upperBound(m,!!d):m===void 0?e.lowerBound(h,!!p):e.bound(h,m,!!p,!!d);return y}function o(f){var h=f.name;function m(y){var _=y.trans,w=y.type,g=y.keys,E=y.values,v=y.range;return new Promise(function(b,S){b=F(b);var k=_.objectStore(h),B=k.keyPath==null,I=w==="put"||w==="add";if(!I&&w!=="delete"&&w!=="deleteRange")throw new Error("Invalid operation type: "+w);var T=(g||E||{length:1}).length;if(g&&E&&g.length!==E.length)throw new Error("Given keys array must have same length as given values array.");if(T===0)return b({numFailures:0,failures:{},results:[],lastResult:void 0});var P,O=[],V=[],D=0,Q=function(te){++D,Ye(te)};if(w==="deleteRange"){if(v.type===4)return b({numFailures:D,failures:V,results:[],lastResult:void 0});v.type===3?O.push(P=k.clear()):O.push(P=k.delete(i(v)))}else{var q=I?B?[E,g]:[E,null]:[g,null],fe=q[0],ee=q[1];if(I)for(var G=0;G<T;++G)O.push(P=ee&&ee[G]!==void 0?k[w](fe[G],ee[G]):k[w](fe[G])),P.onerror=Q;else for(var G=0;G<T;++G)O.push(P=k[w](fe[G])),P.onerror=Q}var he=function(te){var Fe=te.target.result;O.forEach(function(X,rt){return X.error!=null&&(V[rt]=X.error)}),b({numFailures:D,failures:V,results:w==="delete"?g:O.map(function(X){return X.result}),lastResult:Fe})};P.onerror=function(te){Q(te),he(te)},P.onsuccess=he})}function p(y){var _=y.trans,w=y.values,g=y.query,E=y.reverse,v=y.unique;return new Promise(function(b,S){b=F(b);var k=g.index,B=g.range,I=_.objectStore(h),T=k.isPrimaryKey?I:I.index(k.name),P=E?v?"prevunique":"prev":v?"nextunique":"next",O=w||!("openKeyCursor"in T)?T.openCursor(i(B),P):T.openKeyCursor(i(B),P);O.onerror=ne(S),O.onsuccess=F(function(V){var D=O.result;if(!D){b(null);return}D.___id=++Ii,D.done=!1;var Q=D.continue.bind(D),q=D.continuePrimaryKey;q&&(q=q.bind(D));var fe=D.advance.bind(D),ee=function(){throw new Error("Cursor not started")},G=function(){throw new Error("Cursor not stopped")};D.trans=_,D.stop=D.continue=D.continuePrimaryKey=D.advance=ee,D.fail=F(S),D.next=function(){var he=this,te=1;return this.start(function(){return te--?he.continue():he.stop()}).then(function(){return he})},D.start=function(he){var te=new Promise(function(X,rt){X=F(X),O.onerror=ne(rt),D.fail=rt,D.stop=function(Sr){D.stop=D.continue=D.continuePrimaryKey=D.advance=G,X(Sr)}}),Fe=function(){if(O.result)try{he()}catch(X){D.fail(X)}else D.done=!0,D.start=function(){throw new Error("Cursor behind last entry")},D.stop()};return O.onsuccess=F(function(X){O.onsuccess=Fe,Fe()}),D.continue=Q,D.continuePrimaryKey=q,D.advance=fe,Fe(),te},b(D)},S)})}function d(y){return function(_){return new Promise(function(w,g){w=F(w);var E=_.trans,v=_.values,b=_.limit,S=_.query,k=b===1/0?void 0:b,B=S.index,I=S.range,T=E.objectStore(h),P=B.isPrimaryKey?T:T.index(B.name),O=i(I);if(b===0)return w({result:[]});if(y){var V=v?P.getAll(O,k):P.getAllKeys(O,k);V.onsuccess=function(fe){return w({result:fe.target.result})},V.onerror=ne(g)}else{var D=0,Q=v||!("openKeyCursor"in P)?P.openCursor(O):P.openKeyCursor(O),q=[];Q.onsuccess=function(fe){var ee=Q.result;if(!ee)return w({result:q});if(q.push(v?ee.value:ee.primaryKey),++D===b)return w({result:q});ee.continue()},Q.onerror=ne(g)}})}}return{name:h,schema:f,mutate:m,getMany:function(y){var _=y.trans,w=y.keys;return new Promise(function(g,E){g=F(g);for(var v=_.objectStore(h),b=w.length,S=new Array(b),k=0,B=0,I,T=function(D){var Q=D.target;(S[Q._pos]=Q.result)!=null,++B===k&&g(S)},P=ne(E),O=0;O<b;++O){var V=w[O];V!=null&&(I=v.get(w[O]),I._pos=O,I.onsuccess=T,I.onerror=P,++k)}k===0&&g(S)})},get:function(y){var _=y.trans,w=y.key;return new Promise(function(g,E){g=F(g);var v=_.objectStore(h),b=v.get(w);b.onsuccess=function(S){return g(S.target.result)},b.onerror=ne(E)})},query:d(c),openCursor:p,count:function(y){var _=y.query,w=y.trans,g=_.index,E=_.range;return new Promise(function(v,b){var S=w.objectStore(h),k=g.isPrimaryKey?S:S.index(g.name),B=i(E),I=B?k.count(B):k.count();I.onsuccess=F(function(T){return v(T.target.result)}),I.onerror=ne(b)})}}}var a=r(t,n),s=a.schema,c=a.hasGetAll,u=s.tables.map(function(f){return o(f)}),l={};return u.forEach(function(f){return l[f.name]=f}),{stack:"dbcore",transaction:t.transaction.bind(t),table:function(f){var h=l[f];if(!h)throw new Error("Table '"+f+"' not found");return l[f]},MIN_KEY:-1/0,MAX_KEY:Ge(e),schema:s}}function Ki(t,e){return e.reduce(function(n,r){var i=r.create;return K(K({},n),i(n))},t)}function Oi(t,e,n,r){var i=n.IDBKeyRange;n.indexedDB;var o=Ki(Di(e,i,r),t.dbcore);return{dbcore:o}}function wn(t,e){var n=t._novip,r=e.db,i=Oi(n._middlewares,r,n._deps,e);n.core=i.dbcore,n.tables.forEach(function(o){var a=o.name;n.core.schema.tables.some(function(s){return s.name===a})&&(o.core=n.core.table(a),n[a]instanceof n.Table&&(n[a].core=o.core))})}function xt(t,e,n,r){var i=t._novip;n.forEach(function(o){var a=r[o];e.forEach(function(s){var c=fn(s,o);(!c||"value"in c&&c.value===void 0)&&(s===i.Transaction.prototype||s instanceof i.Transaction?ce(s,o,{get:function(){return this.table(o)},set:function(u){Qn(this,o,{value:u,writable:!0,configurable:!0,enumerable:!0})}}):s[o]=new i.Table(o,a))})})}function nn(t,e){var n=t._novip;e.forEach(function(r){for(var i in r)r[i]instanceof n.Table&&delete r[i]})}function Ti(t,e){return t._cfg.version-e._cfg.version}function Pi(t,e,n,r){var i=t._dbSchema,o=t._createTransaction("readwrite",t._storeNames,i);o.create(n),o._completion.catch(r);var a=o._reject.bind(o),s=A.transless||A;ve(function(){A.trans=o,A.transless=s,e===0?(N(i).forEach(function(c){_n(n,c,i[c].primKey,i[c].indexes)}),wn(t,n),C.follow(function(){return t.on.populate.fire(o)}).catch(a)):ji(t,e,o,n).catch(a)})}function ji(t,e,n,r){var i=t._novip,o=[],a=i._versions,s=i._dbSchema=En(i,i.idbdb,r),c=!1,u=a.filter(function(f){return f._cfg.version>=e});u.forEach(function(f){o.push(function(){var h=s,m=f._cfg.dbschema;on(i,h,r),on(i,m,r),s=i._dbSchema=m;var p=_r(h,m);p.add.forEach(function(E){_n(r,E[0],E[1].primKey,E[1].indexes)}),p.change.forEach(function(E){if(E.recreate)throw new R.Upgrade("Not yet support for changing primary key");var v=r.objectStore(E.name);E.add.forEach(function(b){return rn(v,b)}),E.change.forEach(function(b){v.deleteIndex(b.name),rn(v,b)}),E.del.forEach(function(b){return v.deleteIndex(b)})});var d=f._cfg.contentUpgrade;if(d&&f._cfg.version>e){wn(i,r),n._memoizedTables={},c=!0;var y=Xn(m);p.del.forEach(function(E){y[E]=h[E]}),nn(i,[i.Transaction.prototype]),xt(i,[i.Transaction.prototype],N(y),y),n.schema=y;var _=hn(d);_&&je();var w,g=C.follow(function(){if(w=d(n),w&&_){var E=le.bind(null,null);w.then(E,E)}});return w&&typeof w.then=="function"?C.resolve(w):g.then(function(){return w})}}),o.push(function(h){if(!c||!fi){var m=f._cfg.dbschema;Fi(m,h)}nn(i,[i.Transaction.prototype]),xt(i,[i.Transaction.prototype],i._storeNames,i._dbSchema),n.schema=i._dbSchema})});function l(){return o.length?C.resolve(o.shift()(n.idbtrans)).then(l):C.resolve()}return l().then(function(){Mi(s,r)})}function _r(t,e){var n={del:[],add:[],change:[]},r;for(r in t)e[r]||n.del.push(r);for(r in e){var i=t[r],o=e[r];if(!i)n.add.push([r,o]);else{var a={name:r,def:o,recreate:!1,del:[],add:[],change:[]};if(""+(i.primKey.keyPath||"")!=""+(o.primKey.keyPath||"")||i.primKey.auto!==o.primKey.auto&&!Rt)a.recreate=!0,n.change.push(a);else{var s=i.idxByName,c=o.idxByName,u=void 0;for(u in s)c[u]||a.del.push(u);for(u in c){var l=s[u],f=c[u];l?l.src!==f.src&&a.change.push(f):a.add.push(f)}(a.del.length>0||a.add.length>0||a.change.length>0)&&n.change.push(a)}}}return n}function _n(t,e,n,r){var i=t.db.createObjectStore(e,n.keyPath?{keyPath:n.keyPath,autoIncrement:n.auto}:{autoIncrement:n.auto});return r.forEach(function(o){return rn(i,o)}),i}function Mi(t,e){N(t).forEach(function(n){e.db.objectStoreNames.contains(n)||_n(e,n,t[n].primKey,t[n].indexes)})}function Fi(t,e){[].slice.call(e.db.objectStoreNames).forEach(function(n){return t[n]==null&&e.db.deleteObjectStore(n)})}function rn(t,e){t.createIndex(e.name,e.keyPath,{unique:e.unique,multiEntry:e.multi})}function En(t,e,n){var r={},i=At(e.objectStoreNames,0);return i.forEach(function(o){for(var a=n.objectStore(o),s=a.keyPath,c=en(br(s),s||"",!1,!1,!!a.autoIncrement,s&&typeof s!="string",!0),u=[],l=0;l<a.indexNames.length;++l){var f=a.index(a.indexNames[l]);s=f.keyPath;var h=en(f.name,s,!!f.unique,!!f.multiEntry,!1,s&&typeof s!="string",!1);u.push(h)}r[o]=wr(o,c,u)}),r}function Ni(t,e,n){var r=t._novip;r.verno=e.version/10;var i=r._dbSchema=En(r,e,n);r._storeNames=At(e.objectStoreNames,0),xt(r,[r._allTables],N(i),i)}function Li(t,e){var n=En(t,t.idbdb,e),r=_r(n,t._dbSchema);return!(r.add.length||r.change.some(function(i){return i.add.length||i.change.length}))}function on(t,e,n){for(var r=t._novip,i=n.db.objectStoreNames,o=0;o<i.length;++o){var a=i[o],s=n.objectStore(a);r._hasGetAll="getAll"in s;for(var c=0;c<s.indexNames.length;++c){var u=s.indexNames[c],l=s.index(u).keyPath,f=typeof l=="string"?l:"["+At(l).join("+")+"]";if(e[a]){var h=e[a].idxByName[f];h&&(h.name=u,delete e[a].idxByName[f],e[a].idxByName[u]=h)}}}typeof navigator!="undefined"&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&M.WorkerGlobalScope&&M instanceof M.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(r._hasGetAll=!1)}function Vi(t){return t.split(",").map(function(e,n){e=e.trim();var r=e.replace(/([&*]|\+\+)/g,""),i=/^\[/.test(r)?r.match(/^\[(.*)\]$/)[1].split("+"):r;return en(r,i||null,/\&/.test(e),/\*/.test(e),/\+\+/.test(e),$(i),n===0)})}var Ui=function(){function t(){}return t.prototype._parseStoresSpec=function(e,n){N(e).forEach(function(r){if(e[r]!==null){var i=Vi(e[r]),o=i.shift();if(o.multi)throw new R.Schema("Primary key cannot be multi-valued");i.forEach(function(a){if(a.auto)throw new R.Schema("Only primary key can be marked as autoIncrement (++)");if(!a.keyPath)throw new R.Schema("Index must have a name and cannot be an empty string")}),n[r]=wr(r,o,i)}})},t.prototype.stores=function(e){var n=this.db;this._cfg.storesSource=this._cfg.storesSource?W(this._cfg.storesSource,e):e;var r=n._versions,i={},o={};return r.forEach(function(a){W(i,a._cfg.storesSource),o=a._cfg.dbschema={},a._parseStoresSpec(i,o)}),n._dbSchema=o,nn(n,[n._allTables,n,n.Transaction.prototype]),xt(n,[n._allTables,n,n.Transaction.prototype,this._cfg.tables],N(o),o),n._storeNames=N(o),this},t.prototype.upgrade=function(e){return this._cfg.contentUpgrade=mn(this._cfg.contentUpgrade||j,e),this},t}();function $i(t){return nt(Ui.prototype,function(n){this.db=t,this._cfg={version:n,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}})}function kn(t,e){var n=t._dbNamesDB;return n||(n=t._dbNamesDB=new An(It,{addons:[],indexedDB:t,IDBKeyRange:e}),n.version(1).stores({dbnames:"name"})),n.table("dbnames")}function xn(t){return t&&typeof t.databases=="function"}function Hi(t){var e=t.indexedDB,n=t.IDBKeyRange;return xn(e)?Promise.resolve(e.databases()).then(function(r){return r.map(function(i){return i.name}).filter(function(i){return i!==It})}):kn(e,n).toCollection().primaryKeys()}function Wi(t,e){var n=t.indexedDB,r=t.IDBKeyRange;!xn(n)&&e!==It&&kn(n,r).put({name:e}).catch(j)}function zi(t,e){var n=t.indexedDB,r=t.IDBKeyRange;!xn(n)&&e!==It&&kn(n,r).delete(e).catch(j)}function an(t){return ve(function(){return A.letThrough=!0,t()})}function Yi(){var t=!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent);if(!t||!indexedDB.databases)return Promise.resolve();var e;return new Promise(function(n){var r=function(){return indexedDB.databases().finally(n)};e=setInterval(r,100),r()}).finally(function(){return clearInterval(e)})}function Qi(t){var e=t._state,n=t._deps.indexedDB;if(e.isBeingOpened||t.idbdb)return e.dbReadyPromise.then(function(){return e.dbOpenError?L(e.dbOpenError):t});re&&(e.openCanceller._stackHolder=Ae()),e.isBeingOpened=!0,e.dbOpenError=null,e.openComplete=!1;var r=e.openCanceller;function i(){if(e.openCanceller!==r)throw new R.DatabaseClosed("db.open() was cancelled")}var o=e.dbReadyResolve,a=null,s=!1,c=function(){return new C(function(u,l){if(i(),!n)throw new R.MissingAPI;var f=t.name,h=e.autoSchema?n.open(f):n.open(f,Math.round(t.verno*10));if(!h)throw new R.MissingAPI;h.onerror=ne(l),h.onblocked=F(t._fireOnBlocked),h.onupgradeneeded=F(function(m){if(a=h.transaction,e.autoSchema&&!t._options.allowEmptyDB){h.onerror=Ye,a.abort(),h.result.close();var p=n.deleteDatabase(f);p.onsuccess=p.onerror=F(function(){l(new R.NoSuchDatabase("Database "+f+" doesnt exist"))})}else{a.onerror=ne(l);var d=m.oldVersion>Math.pow(2,62)?0:m.oldVersion;s=d<1,t._novip.idbdb=h.result,Pi(t,d/10,a,l)}},l),h.onsuccess=F(function(){a=null;var m=t._novip.idbdb=h.result,p=At(m.objectStoreNames);if(p.length>0)try{var d=m.transaction(Bi(p),"readonly");e.autoSchema?Ni(t,m,d):(on(t,t._dbSchema,d),Li(t,d)||console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.")),wn(t,d)}catch{}Ue.push(t),m.onversionchange=F(function(y){e.vcFired=!0,t.on("versionchange").fire(y)}),m.onclose=F(function(y){t.on("close").fire(y)}),s&&Wi(t._deps,f),u()},l)}).catch(function(u){return u&&u.name==="UnknownError"&&e.PR1398_maxLoop>0?(e.PR1398_maxLoop--,console.warn("Dexie: Workaround for Chrome UnknownError on open()"),c()):C.reject(u)})};return C.race([r,(typeof navigator=="undefined"?C.resolve():Yi()).then(c)]).then(function(){return i(),e.onReadyBeingFired=[],C.resolve(an(function(){return t.on.ready.fire(t.vip)})).then(function u(){if(e.onReadyBeingFired.length>0){var l=e.onReadyBeingFired.reduce(mn,j);return e.onReadyBeingFired=[],C.resolve(an(function(){return l(t.vip)})).then(u)}})}).finally(function(){e.onReadyBeingFired=null,e.isBeingOpened=!1}).then(function(){return t}).catch(function(u){e.dbOpenError=u;try{a&&a.abort()}catch{}return r===e.openCanceller&&t._close(),L(u)}).finally(function(){e.openComplete=!0,o()})}function sn(t){var e=function(a){return t.next(a)},n=function(a){return t.throw(a)},r=o(e),i=o(n);function o(a){return function(s){var c=a(s),u=c.value;return c.done?u:!u||typeof u.then!="function"?$(u)?Promise.all(u).then(r,i):r(u):u.then(r,i)}}return o(e)()}function Gi(t,e,n){var r=arguments.length;if(r<2)throw new R.InvalidArgument("Too few arguments");for(var i=new Array(r-1);--r;)i[r-1]=arguments[r];n=i.pop();var o=Zn(i);return[t,o,n]}function Er(t,e,n,r,i){return C.resolve().then(function(){var o=A.transless||A,a=t._createTransaction(e,n,t._dbSchema,r),s={trans:a,transless:o};if(r)a.idbtrans=r.idbtrans;else try{a.create(),t._state.PR1398_maxLoop=3}catch(f){return f.name===pn.InvalidState&&t.isOpen()&&--t._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),t._close(),t.open().then(function(){return Er(t,e,n,null,i)})):L(f)}var c=hn(i);c&&je();var u,l=C.follow(function(){if(u=i.call(a,a),u)if(c){var f=le.bind(null,null);u.then(f,f)}else typeof u.next=="function"&&typeof u.throw=="function"&&(u=sn(u))},s);return(u&&typeof u.then=="function"?C.resolve(u).then(function(f){return a.active?f:L(new R.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"))}):l.then(function(){return u})).then(function(f){return r&&a._resolve(),a._completion.then(function(){return f})}).catch(function(f){return a._reject(f),L(f)})})}function ut(t,e,n){for(var r=$(t)?t.slice():[t],i=0;i<n;++i)r.push(e);return r}function Ji(t){return K(K({},t),{table:function(e){var n=t.table(e),r=n.schema,i={},o=[];function a(d,y,_){var w=$e(d),g=i[w]=i[w]||[],E=d==null?0:typeof d=="string"?1:d.length,v=y>0,b=K(K({},_),{isVirtual:v,keyTail:y,keyLength:E,extractKey:tn(d),unique:!v&&_.unique});if(g.push(b),b.isPrimaryKey||o.push(b),E>1){var S=E===2?d[0]:d.slice(0,E-1);a(S,y+1,_)}return g.sort(function(k,B){return k.keyTail-B.keyTail}),b}var s=a(r.primaryKey.keyPath,0,r.primaryKey);i[":id"]=[s];for(var c=0,u=r.indexes;c<u.length;c++){var l=u[c];a(l.keyPath,0,l)}function f(d){var y=i[$e(d)];return y&&y[0]}function h(d,y){return{type:d.type===1?2:d.type,lower:ut(d.lower,d.lowerOpen?t.MAX_KEY:t.MIN_KEY,y),lowerOpen:!0,upper:ut(d.upper,d.upperOpen?t.MIN_KEY:t.MAX_KEY,y),upperOpen:!0}}function m(d){var y=d.query.index;return y.isVirtual?K(K({},d),{query:{index:y,range:h(d.query.range,y.keyTail)}}):d}var p=K(K({},n),{schema:K(K({},r),{primaryKey:s,indexes:o,getIndexByKeyPath:f}),count:function(d){return n.count(m(d))},query:function(d){return n.query(m(d))},openCursor:function(d){var y=d.query.index,_=y.keyTail,w=y.isVirtual,g=y.keyLength;if(!w)return n.openCursor(d);function E(v){function b(k){k!=null?v.continue(ut(k,d.reverse?t.MAX_KEY:t.MIN_KEY,_)):d.unique?v.continue(v.key.slice(0,g).concat(d.reverse?t.MIN_KEY:t.MAX_KEY,_)):v.continue()}var S=Object.create(v,{continue:{value:b},continuePrimaryKey:{value:function(k,B){v.continuePrimaryKey(ut(k,t.MAX_KEY,_),B)}},primaryKey:{get:function(){return v.primaryKey}},key:{get:function(){var k=v.key;return g===1?k[0]:k.slice(0,g)}},value:{get:function(){return v.value}}});return S}return n.openCursor(m(d)).then(function(v){return v&&E(v)})}});return p}})}var qi={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:Ji};function Cn(t,e,n,r){return n=n||{},r=r||"",N(t).forEach(function(i){if(!Y(e,i))n[r+i]=void 0;else{var o=t[i],a=e[i];if(typeof o=="object"&&typeof a=="object"&&o&&a){var s=Vt(o),c=Vt(a);s!==c?n[r+i]=e[i]:s==="Object"?Cn(o,a,n,r+i+"."):o!==a&&(n[r+i]=e[i])}else o!==a&&(n[r+i]=e[i])}}),N(e).forEach(function(i){Y(t,i)||(n[r+i]=e[i])}),n}function Xi(t,e){return e.type==="delete"?e.keys:e.keys||e.values.map(t.extractKey)}var Zi={stack:"dbcore",name:"HooksMiddleware",level:2,create:function(t){return K(K({},t),{table:function(e){var n=t.table(e),r=n.schema.primaryKey,i=K(K({},n),{mutate:function(o){var a=A.trans,s=a.table(e).hook,c=s.deleting,u=s.creating,l=s.updating;switch(o.type){case"add":if(u.fire===j)break;return a._promise("readwrite",function(){return f(o)},!0);case"put":if(u.fire===j&&l.fire===j)break;return a._promise("readwrite",function(){return f(o)},!0);case"delete":if(c.fire===j)break;return a._promise("readwrite",function(){return f(o)},!0);case"deleteRange":if(c.fire===j)break;return a._promise("readwrite",function(){return h(o)},!0)}return n.mutate(o);function f(p){var d=A.trans,y=p.keys||Xi(r,p);if(!y)throw new Error("Keys missing");return p=p.type==="add"||p.type==="put"?K(K({},p),{keys:y}):K({},p),p.type!=="delete"&&(p.values=Nt([],p.values,!0)),p.keys&&(p.keys=Nt([],p.keys,!0)),eo(n,p,y).then(function(_){var w=y.map(function(g,E){var v=_[E],b={onerror:null,onsuccess:null};if(p.type==="delete")c.fire.call(b,g,v,d);else if(p.type==="add"||v===void 0){var S=u.fire.call(b,g,p.values[E],d);g==null&&S!=null&&(g=S,p.keys[E]=g,r.outbound||Z(p.values[E],r.keyPath,g))}else{var k=Cn(v,p.values[E]),B=l.fire.call(b,k,g,v,d);if(B){var I=p.values[E];Object.keys(B).forEach(function(T){Y(I,T)?I[T]=B[T]:Z(I,T,B[T])})}}return b});return n.mutate(p).then(function(g){for(var E=g.failures,v=g.results,b=g.numFailures,S=g.lastResult,k=0;k<y.length;++k){var B=v?v[k]:y[k],I=w[k];B==null?I.onerror&&I.onerror(E[k]):I.onsuccess&&I.onsuccess(p.type==="put"&&_[k]?p.values[k]:B)}return{failures:E,results:v,numFailures:b,lastResult:S}}).catch(function(g){return w.forEach(function(E){return E.onerror&&E.onerror(g)}),Promise.reject(g)})})}function h(p){return m(p.trans,p.range,1e4)}function m(p,d,y){return n.query({trans:p,values:!1,query:{index:r,range:d},limit:y}).then(function(_){var w=_.result;return f({type:"delete",keys:w,trans:p}).then(function(g){return g.numFailures>0?Promise.reject(g.failures[0]):w.length<y?{failures:[],numFailures:0,lastResult:void 0}:m(p,K(K({},d),{lower:w[w.length-1],lowerOpen:!0}),y)})})}}});return i}})}};function eo(t,e,n){return e.type==="add"?Promise.resolve([]):t.getMany({trans:e.trans,keys:n,cache:"immutable"})}function kr(t,e,n){try{if(!e||e.keys.length<t.length)return null;for(var r=[],i=0,o=0;i<e.keys.length&&o<t.length;++i)H(e.keys[i],t[o])===0&&(r.push(n?qe(e.values[i]):e.values[i]),++o);return r.length===t.length?r:null}catch{return null}}var to={stack:"dbcore",level:-1,create:function(t){return{table:function(e){var n=t.table(e);return K(K({},n),{getMany:function(r){if(!r.cache)return n.getMany(r);var i=kr(r.keys,r.trans._cache,r.cache==="clone");return i?C.resolve(i):n.getMany(r).then(function(o){return r.trans._cache={keys:r.keys,values:r.cache==="clone"?qe(o):o},o})},mutate:function(r){return r.type!=="add"&&(r.trans._cache=null),n.mutate(r)}})}}}},Ft;function Sn(t){return!("from"in t)}var oe=function(t,e){if(this)W(this,arguments.length?{d:1,from:t,to:arguments.length>1?e:t}:{d:0});else{var n=new oe;return t&&"d"in t&&W(n,t),n}};Oe(oe.prototype,(Ft={add:function(t){return Ct(this,t),this},addKey:function(t){return Je(this,t,t),this},addKeys:function(t){var e=this;return t.forEach(function(n){return Je(e,n,n)}),this}},Ft[Ut]=function(){return un(this)},Ft));function Je(t,e,n){var r=H(e,n);if(!isNaN(r)){if(r>0)throw RangeError();if(Sn(t))return W(t,{from:e,to:n,d:1});var i=t.l,o=t.r;if(H(n,t.from)<0)return i?Je(i,e,n):t.l={from:e,to:n,d:1,l:null,r:null},Wn(t);if(H(e,t.to)>0)return o?Je(o,e,n):t.r={from:e,to:n,d:1,l:null,r:null},Wn(t);H(e,t.from)<0&&(t.from=e,t.l=null,t.d=o?o.d+1:1),H(n,t.to)>0&&(t.to=n,t.r=null,t.d=t.l?t.l.d+1:1);var a=!t.r;i&&!t.l&&Ct(t,i),o&&a&&Ct(t,o)}}function Ct(t,e){function n(r,i){var o=i.from,a=i.to,s=i.l,c=i.r;Je(r,o,a),s&&n(r,s),c&&n(r,c)}Sn(e)||n(t,e)}function no(t,e){var n=un(e),r=n.next();if(r.done)return!1;for(var i=r.value,o=un(t),a=o.next(i.from),s=a.value;!r.done&&!a.done;){if(H(s.from,i.to)<=0&&H(s.to,i.from)>=0)return!0;H(i.from,s.from)<0?i=(r=n.next(s.from)).value:s=(a=o.next(i.from)).value}return!1}function un(t){var e=Sn(t)?null:{s:0,n:t};return{next:function(n){for(var r=arguments.length>0;e;)switch(e.s){case 0:if(e.s=1,r)for(;e.n.l&&H(n,e.n.from)<0;)e={up:e,n:e.n.l,s:1};else for(;e.n.l;)e={up:e,n:e.n.l,s:1};case 1:if(e.s=2,!r||H(n,e.n.to)<=0)return{value:e.n,done:!1};case 2:if(e.n.r){e.s=3,e={up:e,n:e.n.r,s:0};continue}case 3:e=e.up}return{done:!0}}}}function Wn(t){var e,n,r=(((e=t.r)===null||e===void 0?void 0:e.d)||0)-(((n=t.l)===null||n===void 0?void 0:n.d)||0),i=r>1?"r":r<-1?"l":"";if(i){var o=i==="r"?"l":"r",a=K({},t),s=t[i];t.from=s.from,t.to=s.to,t[i]=s[i],a[i]=s[o],t[o]=a,a.d=zn(a)}t.d=zn(t)}function zn(t){var e=t.r,n=t.l;return(e?n?Math.max(e.d,n.d):e.d:n?n.d:0)+1}var ro={stack:"dbcore",level:0,create:function(t){var e=t.schema.name,n=new oe(t.MIN_KEY,t.MAX_KEY);return K(K({},t),{table:function(r){var i=t.table(r),o=i.schema,a=o.primaryKey,s=a.extractKey,c=a.outbound,u=K(K({},i),{mutate:function(h){var m=h.trans,p=m.mutatedParts||(m.mutatedParts={}),d=function(S){var k="idb://"+e+"/"+r+"/"+S;return p[k]||(p[k]=new oe)},y=d(""),_=d(":dels"),w=h.type,g=h.type==="deleteRange"?[h.range]:h.type==="delete"?[h.keys]:h.values.length<50?[[],h.values]:[],E=g[0],v=g[1],b=h.trans._cache;return i.mutate(h).then(function(S){if($(E)){w!=="delete"&&(E=S.results),y.addKeys(E);var k=kr(E,b);!k&&w!=="add"&&_.addKeys(E),(k||v)&&io(d,o,k,v)}else if(E){var B={from:E.lower,to:E.upper};_.add(B),y.add(B)}else y.add(n),_.add(n),o.indexes.forEach(function(I){return d(I.name).add(n)});return S})}}),l=function(h){var m,p,d=h.query,y=d.index,_=d.range;return[y,new oe((m=_.lower)!==null&&m!==void 0?m:t.MIN_KEY,(p=_.upper)!==null&&p!==void 0?p:t.MAX_KEY)]},f={get:function(h){return[a,new oe(h.key)]},getMany:function(h){return[a,new oe().addKeys(h.keys)]},count:l,query:l,openCursor:l};return N(f).forEach(function(h){u[h]=function(m){var p=A.subscr;if(p){var d=function(b){var S="idb://"+e+"/"+r+"/"+b;return p[S]||(p[S]=new oe)},y=d(""),_=d(":dels"),w=f[h](m),g=w[0],E=w[1];if(d(g.name||"").add(E),!g.isPrimaryKey)if(h==="count")_.add(n);else{var v=h==="query"&&c&&m.values&&i.query(K(K({},m),{values:!1}));return i[h].apply(this,arguments).then(function(b){if(h==="query"){if(c&&m.values)return v.then(function(I){var T=I.result;return y.addKeys(T),b});var S=m.values?b.result.map(s):b.result;m.values?y.addKeys(S):_.addKeys(S)}else if(h==="openCursor"){var k=b,B=m.values;return k&&Object.create(k,{key:{get:function(){return _.addKey(k.primaryKey),k.key}},primaryKey:{get:function(){var I=k.primaryKey;return _.addKey(I),I}},value:{get:function(){return B&&y.addKey(k.primaryKey),k.value}}})}return b})}}return i[h].apply(this,arguments)}}),u}})}};function io(t,e,n,r){function i(o){var a=t(o.name||"");function s(u){return u!=null?o.extractKey(u):null}var c=function(u){return o.multiEntry&&$(u)?u.forEach(function(l){return a.addKey(l)}):a.addKey(u)};(n||r).forEach(function(u,l){var f=n&&s(n[l]),h=r&&s(r[l]);H(f,h)!==0&&(f!=null&&c(f),h!=null&&c(h))})}e.indexes.forEach(i)}var An=function(){function t(e,n){var r=this;this._middlewares={},this.verno=0;var i=t.dependencies;this._options=n=K({addons:t.addons,autoOpen:!0,indexedDB:i.indexedDB,IDBKeyRange:i.IDBKeyRange},n),this._deps={indexedDB:n.indexedDB,IDBKeyRange:n.IDBKeyRange};var o=n.addons;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;var a={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:j,dbReadyPromise:null,cancelOpen:j,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3};a.dbReadyPromise=new C(function(s){a.dbReadyResolve=s}),a.openCanceller=new C(function(s,c){a.cancelOpen=c}),this._state=a,this.name=e,this.on=tt(this,"populate","blocked","versionchange","close",{ready:[mn,j]}),this.on.ready.subscribe=Gn(this.on.ready.subscribe,function(s){return function(c,u){t.vip(function(){var l=r._state;if(l.openComplete)l.dbOpenError||C.resolve().then(c),u&&s(c);else if(l.onReadyBeingFired)l.onReadyBeingFired.push(c),u&&s(c);else{s(c);var f=r;u||s(function h(){f.on.ready.unsubscribe(c),f.on.ready.unsubscribe(h)})}})}}),this.Collection=bi(this),this.Table=pi(this),this.Transaction=Ai(this),this.Version=$i(this),this.WhereClause=Ci(this),this.on("versionchange",function(s){s.newVersion>0?console.warn("Another connection wants to upgrade database '"+r.name+"'. Closing db now to resume the upgrade."):console.warn("Another connection wants to delete database '"+r.name+"'. Closing db now to resume the delete request."),r.close()}),this.on("blocked",function(s){!s.newVersion||s.newVersion<s.oldVersion?console.warn("Dexie.delete('"+r.name+"') was blocked"):console.warn("Upgrade '"+r.name+"' blocked by other connection holding version "+s.oldVersion/10)}),this._maxKey=Ge(n.IDBKeyRange),this._createTransaction=function(s,c,u,l){return new r.Transaction(s,c,u,r._options.chromeTransactionDurability,l)},this._fireOnBlocked=function(s){r.on("blocked").fire(s),Ue.filter(function(c){return c.name===r.name&&c!==r&&!c._state.vcFired}).map(function(c){return c.on("versionchange").fire(s)})},this.use(qi),this.use(Zi),this.use(ro),this.use(to),this.vip=Object.create(this,{_vip:{value:!0}}),o.forEach(function(s){return s(r)})}return t.prototype.version=function(e){if(isNaN(e)||e<.1)throw new R.Type("Given version is not a positive number");if(e=Math.round(e*10)/10,this.idbdb||this._state.isBeingOpened)throw new R.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,e);var n=this._versions,r=n.filter(function(i){return i._cfg.version===e})[0];return r||(r=new this.Version(e),n.push(r),n.sort(Ti),r.stores({}),this._state.autoSchema=!1,r)},t.prototype._whenReady=function(e){var n=this;return this.idbdb&&(this._state.openComplete||A.letThrough||this._vip)?e():new C(function(r,i){if(n._state.openComplete)return i(new R.DatabaseClosed(n._state.dbOpenError));if(!n._state.isBeingOpened){if(!n._options.autoOpen){i(new R.DatabaseClosed);return}n.open().catch(j)}n._state.dbReadyPromise.then(r,i)}).then(e)},t.prototype.use=function(e){var n=e.stack,r=e.create,i=e.level,o=e.name;o&&this.unuse({stack:n,name:o});var a=this._middlewares[n]||(this._middlewares[n]=[]);return a.push({stack:n,create:r,level:i==null?10:i,name:o}),a.sort(function(s,c){return s.level-c.level}),this},t.prototype.unuse=function(e){var n=e.stack,r=e.name,i=e.create;return n&&this._middlewares[n]&&(this._middlewares[n]=this._middlewares[n].filter(function(o){return i?o.create!==i:r?o.name!==r:!1})),this},t.prototype.open=function(){return Qi(this)},t.prototype._close=function(){var e=this._state,n=Ue.indexOf(this);if(n>=0&&Ue.splice(n,1),this.idbdb){try{this.idbdb.close()}catch{}this._novip.idbdb=null}e.dbReadyPromise=new C(function(r){e.dbReadyResolve=r}),e.openCanceller=new C(function(r,i){e.cancelOpen=i})},t.prototype.close=function(){this._close();var e=this._state;this._options.autoOpen=!1,e.dbOpenError=new R.DatabaseClosed,e.isBeingOpened&&e.cancelOpen(e.dbOpenError)},t.prototype.delete=function(){var e=this,n=arguments.length>0,r=this._state;return new C(function(i,o){var a=function(){e.close();var s=e._deps.indexedDB.deleteDatabase(e.name);s.onsuccess=F(function(){zi(e._deps,e.name),i()}),s.onerror=ne(o),s.onblocked=e._fireOnBlocked};if(n)throw new R.InvalidArgument("Arguments not allowed in db.delete()");r.isBeingOpened?r.dbReadyPromise.then(a):a()})},t.prototype.backendDB=function(){return this.idbdb},t.prototype.isOpen=function(){return this.idbdb!==null},t.prototype.hasBeenClosed=function(){var e=this._state.dbOpenError;return e&&e.name==="DatabaseClosed"},t.prototype.hasFailed=function(){return this._state.dbOpenError!==null},t.prototype.dynamicallyOpened=function(){return this._state.autoSchema},Object.defineProperty(t.prototype,"tables",{get:function(){var e=this;return N(this._allTables).map(function(n){return e._allTables[n]})},enumerable:!1,configurable:!0}),t.prototype.transaction=function(){var e=Gi.apply(this,arguments);return this._transaction.apply(this,e)},t.prototype._transaction=function(e,n,r){var i=this,o=A.trans;(!o||o.db!==this||e.indexOf("!")!==-1)&&(o=null);var a=e.indexOf("?")!==-1;e=e.replace("!","").replace("?","");var s,c;try{if(c=n.map(function(l){var f=l instanceof i.Table?l.name:l;if(typeof f!="string")throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return f}),e=="r"||e===Ot)s=Ot;else if(e=="rw"||e==Tt)s=Tt;else throw new R.InvalidArgument("Invalid transaction mode: "+e);if(o){if(o.mode===Ot&&s===Tt)if(a)o=null;else throw new R.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");o&&c.forEach(function(l){if(o&&o.storeNames.indexOf(l)===-1)if(a)o=null;else throw new R.SubTransaction("Table "+l+" not included in parent transaction.")}),a&&o&&!o.active&&(o=null)}}catch(l){return o?o._promise(null,function(f,h){h(l)}):L(l)}var u=Er.bind(null,this,s,c,o,r);return o?o._promise(s,u,"lock"):A.trans?Me(A.transless,function(){return i._whenReady(u)}):this._whenReady(u)},t.prototype.table=function(e){if(!Y(this._allTables,e))throw new R.InvalidTable("Table "+e+" does not exist");return this._allTables[e]},t}(),oo=typeof Symbol!="undefined"&&"observable"in Symbol?Symbol.observable:"@@observable",ao=function(){function t(e){this._subscribe=e}return t.prototype.subscribe=function(e,n,r){return this._subscribe(!e||typeof e=="function"?{next:e,error:n,complete:r}:e)},t.prototype[oo]=function(){return this},t}();function xr(t,e){return N(e).forEach(function(n){var r=t[n]||(t[n]=new oe);Ct(r,e[n])}),t}function Cr(t){var e=!1,n=void 0,r=new ao(function(i){var o=hn(t);function a(y){o&&je();var _=function(){return ve(t,{subscr:y,trans:null})},w=A.trans?Me(A.transless,_):_();return o&&w.then(le,le),w}var s=!1,c={},u={},l={get closed(){return s},unsubscribe:function(){s=!0,be.storagemutated.unsubscribe(p)}};i.start&&i.start(l);var f=!1,h=!1;function m(){return N(u).some(function(y){return c[y]&&no(c[y],u[y])})}var p=function(y){xr(c,y),m()&&d()},d=function(){if(!(f||s)){c={};var y={},_=a(y);h||(be(Qe,p),h=!0),f=!0,Promise.resolve(_).then(function(w){e=!0,n=w,f=!1,!s&&(m()?d():(c={},u=y,i.next&&i.next(w)))},function(w){f=!1,e=!1,i.error&&i.error(w),l.unsubscribe()})}};return d(),l});return r.hasValue=function(){return e},r.getValue=function(){return n},r}var cn;try{cn={indexedDB:M.indexedDB||M.mozIndexedDB||M.webkitIndexedDB||M.msIndexedDB,IDBKeyRange:M.IDBKeyRange||M.webkitIDBKeyRange}}catch{cn={indexedDB:null,IDBKeyRange:null}}var _e=An;Oe(_e,K(K({},Bt),{delete:function(t){var e=new _e(t,{addons:[]});return e.delete()},exists:function(t){return new _e(t,{addons:[]}).open().then(function(e){return e.close(),!0}).catch("NoSuchDatabaseError",function(){return!1})},getDatabaseNames:function(t){try{return Hi(_e.dependencies).then(t)}catch{return L(new R.MissingAPI)}},defineClass:function(){function t(e){W(this,e)}return t},ignoreTransaction:function(t){return A.trans?Me(A.transless,t):t()},vip:an,async:function(t){return function(){try{var e=sn(t.apply(this,arguments));return!e||typeof e.then!="function"?C.resolve(e):e}catch(n){return L(n)}}},spawn:function(t,e,n){try{var r=sn(t.apply(n,e||[]));return!r||typeof r.then!="function"?C.resolve(r):r}catch(i){return L(i)}},currentTransaction:{get:function(){return A.trans||null}},waitFor:function(t,e){var n=C.resolve(typeof t=="function"?_e.ignoreTransaction(t):t).timeout(e||6e4);return A.trans?A.trans.waitFor(n):n},Promise:C,debug:{get:function(){return re},set:function(t){tr(t,t==="dexie"?function(){return!0}:mr)}},derive:Te,extend:W,props:Oe,override:Gn,Events:tt,on:be,liveQuery:Cr,extendObservabilitySet:xr,getByKeyPath:ue,setByKeyPath:Z,delByKeyPath:Nr,shallowClone:Xn,deepClone:qe,getObjectDiff:Cn,cmp:H,asap:Jn,minKey:Zt,addons:[],connections:Ue,errnames:pn,dependencies:cn,semVer:Nn,version:Nn.split(".").map(function(t){return parseInt(t)}).reduce(function(t,e,n){return t+e/Math.pow(10,n*2)})}));_e.maxKey=Ge(_e.dependencies.IDBKeyRange);typeof dispatchEvent!="undefined"&&typeof addEventListener!="undefined"&&(be(Qe,function(t){if(!se){var e;Rt?(e=document.createEvent("CustomEvent"),e.initCustomEvent(ye,!0,!0,t)):e=new CustomEvent(ye,{detail:t}),se=!0,dispatchEvent(e),se=!1}}),addEventListener(ye,function(t){var e=t.detail;se||St(e)}));function St(t){var e=se;try{se=!0,be.storagemutated.fire(t)}finally{se=e}}var se=!1;if(typeof BroadcastChannel!="undefined"){var ct=new BroadcastChannel(ye);typeof ct.unref=="function"&&ct.unref(),be(Qe,function(t){se||ct.postMessage(t)}),ct.onmessage=function(t){t.data&&St(t.data)}}else if(typeof self!="undefined"&&typeof navigator!="undefined"){be(Qe,function(t){try{se||(typeof localStorage!="undefined"&&localStorage.setItem(ye,JSON.stringify({trig:Math.random(),changedParts:t})),typeof self.clients=="object"&&Nt([],self.clients.matchAll({includeUncontrolled:!0}),!0).forEach(function(e){return e.postMessage({type:ye,changedParts:t})}))}catch{}}),typeof addEventListener!="undefined"&&addEventListener("storage",function(t){if(t.key===ye){var e=JSON.parse(t.newValue);e&&St(e.changedParts)}});var Yn=self.document&&navigator.serviceWorker;Yn&&Yn.addEventListener("message",so)}function so(t){var e=t.data;e&&e.type===ye&&St(e.changedParts)}C.rejectionMapper=Qr;tr(re,mr);class uo extends An{constructor(e){super(e.name);const n=this,r=x.isString(e.version)?parseInt(e.version.replaceAll(".","")):e.version;this.schema=this.version(r).stores({_app:"id",nodes:"id, __typename",links:"id, __typename, sourceId, targetId, [__typename+sourceId]"}),Cr(async()=>await n._app.get(e.id)).subscribe({next:o=>{n.app=o},error:o=>{console.error(o)}}),this._init(e)}async _init(e){let n=await this._app.get(e.id);return n||(n=await this._app.add({...e,repo:{location:null}})),n}}function co(t={}){const{app:e}=t;let{id:n,name:r="obiwan-db",version:i="1.0.0"}=e.config.globalProperties.$app||{};return n||(n=x.hash(r)),new uo({id:n,name:r,version:i})}const lt=new WeakMap;function lo(t,e,n={context:null,ms:100}){let r=lt.get(e);r||(r=[],lt.set(e,r),Rr(()=>{const i=lt.get(e);e.call(n.context,i),lt.set(e,[])})),r.push(t)}function fo({actions:t,app:e,config:n={},getters:r,router:i,schema:o,state:a}={}){o&&(n.schema=o);const s=new Or(n);return Ar("store",{state:()=>({[".ignore"]:[u=>u.$.eRoot().ns!=="ecore"],repo:s,...a}),getters:{branches(u){return u.repo.branches},createConnection(){},currentBranch(u){return u.repo.currentBranch},commits(u){return u.repo.commits},head(u){return u.repo.head},indices(u){return u.repo.indices},nodes(u){return u.repo.nodes},remotes(u){return u.repo.remotes},resources(u){return x.groupBy(u.repo.nodes,"$.eResource")},...r},actions:{add(...u){return this.repo.add.apply(this.repo,u)},addNode(...u){return this.repo.addNode.apply(this.repo,u)},checkout(...u){return this.repo.checkout.apply(this.repo,u)},commit(...u){return this.repo.commit.apply(this.repo,u)},construct(...u){return this.repo.construct.apply(this.repo,u)},createBranch(...u){return this.repo.createBranch.apply(this.repo,u)},createNode(...u){return this.repo.createNode.apply(this.repo,u)},createStoreId(...u){return this.repo.createStoreId.apply(this.repo,u)},deleteBranch(...u){return this.repo.deleteBranch.apply(this.repo,u)},async ensureLink({source:u,target:l}){debugger;return new Promise((f,h)=>{debugger;let m=!1;Bn.create({title:"Alert",message:"Some message"}).onOk(()=>{f({ok:!0}),m=!0}).onCancel(()=>{h({cancel:!0}),m=!0}).onDismiss(()=>{m||h({dismiss:!0})})})},async ensureRequiredProperties(){return new Promise((u,l)=>{debugger;Bn.create({title:"Alert",message:"Some message"}).onOk(()=>{u({ok:!0})}).onCancel(()=>{l({cancel:!0})}).onDismiss(()=>{l({dismiss:!0})})})},emit(...u){return this.repo.emit.apply(this.repo,u)},exportData(u,l){return Tr(u,l)},get(...u){return this.repo.get.apply(this.repo,u)},getRootClasses(...u){const l=this.repo.getRootClasses.apply(this.repo,u),f=this.getType("ecore.EPackage");return l.indexOf(f)===-1&&l.push(f),console.log("TODO: Alleen nog maar store.getRootClasses gebruiken"),l},getType(...u){return this.repo.getType.apply(this.repo,u)},findOne(...u){return this.repo.findOne.apply(this.repo,u)},filter(...u){return this.repo.filter.apply(this.repo,u)},importData(){},on(...u){return this.repo.on.apply(this.repo,u)},once(...u){return this.repo.once.apply(this.repo,u)},query(...u){return this.repo.query.apply(this.repo,u)},registerComponents(u,l){var h;if(x.isString(u)&&(u=this.getType(u)),!u||x.isEmpty(l))return;this.getType("ecore.EClass").getEStructuralFeature("components")?u.components?x.forEach(l,m=>{u.components.push(m)}):u.components=l:(h=u.extensions)!=null&&h.components?x.forEach(l,m=>{var p;(p=u.extensions)==null||p.components.push(m)}):x.set(u,"extensions.components",l)},registerPackage(...u){return this.repo.registerPackage.apply(this.repo,u)},...t}})}function ho(t={}){let e=t.useDexie!==!1?co(t):null;t.state={changes:[],hasChanges:!1,objectsByState:{},useDexie:!1},t.getters={db(){return e}};const n=fo.call(null,t)();async function r(i){if(i){let o=await i.nodes.toArray();debugger;o=n.repo.stitch(o),x.forEach(o,a=>{a.__virtual||n.addNode({data:a})}),n.repo.on("added",async({node:a})=>{const s=a.$.decycle({containments:"asRefs"});try{await i.nodes.put(s)}catch{debugger}}),n.repo.on("removed",async({node:a})=>{await i.nodes.delete(a.id)}),n.repo.on("changed",a=>{function s(c){const u=x.groupBy(c,"node.id");x.forIn(u,async l=>{x.forEach(l,async({node:f})=>{if(f.__typename==="ecore.EPackage")debugger;const h=f.$.decycle({containments:"asRefs"});try{await i.nodes.put(h)}catch{debugger}})})}lo(a,s)})}Br(n.nodes,()=>{const o=n.repo.getChanges(),a=[];x.forEach(o.added,s=>a.push(s)),x.forEach(o.changed,s=>a.push(s)),x.forEach(o.removed,s=>a.push(s)),n.$patch(s=>{s.objectsByState=o,s.changes=a,s.hasChanges=!x.isEmpty(a)})})}return r(e),n}const po={install(t){const{app:e}=t,n=ho(t);return e.config.globalProperties.$store=n,e.provide("store",n),n}};var bo=({app:t,router:e})=>{const n=t.config.globalProperties.$bus,r=!0,i=po.install({app:t,eventBus:n,router:e,useDexie:r});Dr(i)};export{bo as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
