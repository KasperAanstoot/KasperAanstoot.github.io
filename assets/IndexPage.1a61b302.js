import{k as g,i as s,u as a,c,h as p,l as d,g as f,x as h,a5 as y,ao as m,ab as C,ac as x,ad as b,f as v,ae as _}from"./index.d4f7fe54.js";import"./index.64638d34.js";var Q=g({name:"QPage",props:{padding:Boolean,styleFn:Function},setup(o,{slots:r}){const{proxy:{$q:t}}=f(),e=s(h,a);if(e===a)return console.error("QPage needs to be a deep child of QLayout"),a;if(s(y,a)===a)return console.error("QPage needs to be child of QPageContainer"),a;const i=c(()=>{const n=(e.header.space===!0?e.header.size:0)+(e.footer.space===!0?e.footer.size:0);if(typeof o.styleFn=="function"){const l=e.isContainer.value===!0?e.containerHeight.value:t.screen.height;return o.styleFn(n,l)}return{minHeight:e.isContainer.value===!0?e.containerHeight.value-n+"px":t.screen.height===0?n!==0?`calc(100vh - ${n}px)`:"100vh":t.screen.height-n+"px"}}),u=c(()=>`q-page${o.padding===!0?" q-layout-padding":""}`);return()=>p("main",{class:u.value,style:i.value},d(r.default))}});function P(){return s(m)}const q={__name:"IndexPage",setup(o){P(),s("app");function r(){debugger;Dropbox.choose({success:function(t){debugger},cancel:function(){debugger},linkType:"direct",folderselect:!1})}return(t,e)=>(C(),x(Q,{class:"obiwan-landing-page"},{default:b(()=>[v(_,{color:"primary",dense:"",flat:"",label:"Choose",onClick:r})]),_:1}))}};export{q as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5kZXhQYWdlLjFhNjFiMzAyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb25lbnRzL3BhZ2UvUVBhZ2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcXVhc2FyL3NyYy9jb21wb3NhYmxlcy91c2UtcXVhc2FyLmpzIiwiLi4vLi4vLi4vc3JjL3BhZ2VzL0luZGV4UGFnZS52dWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaCwgY29tcHV0ZWQsIGluamVjdCwgZ2V0Q3VycmVudEluc3RhbmNlIH0gZnJvbSAndnVlJ1xuXG5pbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL2NyZWF0ZS5qcydcbmltcG9ydCB7IGhTbG90IH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJpdmF0ZS9yZW5kZXIuanMnXG5pbXBvcnQgeyBwYWdlQ29udGFpbmVyS2V5LCBsYXlvdXRLZXksIGVtcHR5UmVuZGVyRm4gfSBmcm9tICcuLi8uLi91dGlscy9wcml2YXRlL3N5bWJvbHMuanMnXG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdRUGFnZScsXG5cbiAgcHJvcHM6IHtcbiAgICBwYWRkaW5nOiBCb29sZWFuLFxuICAgIHN0eWxlRm46IEZ1bmN0aW9uXG4gIH0sXG5cbiAgc2V0dXAgKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCB7IHByb3h5OiB7ICRxIH0gfSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpXG5cbiAgICBjb25zdCAkbGF5b3V0ID0gaW5qZWN0KGxheW91dEtleSwgZW1wdHlSZW5kZXJGbilcbiAgICBpZiAoJGxheW91dCA9PT0gZW1wdHlSZW5kZXJGbikge1xuICAgICAgY29uc29sZS5lcnJvcignUVBhZ2UgbmVlZHMgdG8gYmUgYSBkZWVwIGNoaWxkIG9mIFFMYXlvdXQnKVxuICAgICAgcmV0dXJuIGVtcHR5UmVuZGVyRm5cbiAgICB9XG5cbiAgICBjb25zdCAkcGFnZUNvbnRhaW5lciA9IGluamVjdChwYWdlQ29udGFpbmVyS2V5LCBlbXB0eVJlbmRlckZuKVxuICAgIGlmICgkcGFnZUNvbnRhaW5lciA9PT0gZW1wdHlSZW5kZXJGbikge1xuICAgICAgY29uc29sZS5lcnJvcignUVBhZ2UgbmVlZHMgdG8gYmUgY2hpbGQgb2YgUVBhZ2VDb250YWluZXInKVxuICAgICAgcmV0dXJuIGVtcHR5UmVuZGVyRm5cbiAgICB9XG5cbiAgICBjb25zdCBzdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IG9mZnNldFxuICAgICAgICA9ICgkbGF5b3V0LmhlYWRlci5zcGFjZSA9PT0gdHJ1ZSA/ICRsYXlvdXQuaGVhZGVyLnNpemUgOiAwKVxuICAgICAgICArICgkbGF5b3V0LmZvb3Rlci5zcGFjZSA9PT0gdHJ1ZSA/ICRsYXlvdXQuZm9vdGVyLnNpemUgOiAwKVxuXG4gICAgICBpZiAodHlwZW9mIHByb3BzLnN0eWxlRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gJGxheW91dC5pc0NvbnRhaW5lci52YWx1ZSA9PT0gdHJ1ZVxuICAgICAgICAgID8gJGxheW91dC5jb250YWluZXJIZWlnaHQudmFsdWVcbiAgICAgICAgICA6ICRxLnNjcmVlbi5oZWlnaHRcblxuICAgICAgICByZXR1cm4gcHJvcHMuc3R5bGVGbihvZmZzZXQsIGhlaWdodClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWluSGVpZ2h0OiAkbGF5b3V0LmlzQ29udGFpbmVyLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgPyAoJGxheW91dC5jb250YWluZXJIZWlnaHQudmFsdWUgLSBvZmZzZXQpICsgJ3B4J1xuICAgICAgICAgIDogKFxuICAgICAgICAgICAgICAkcS5zY3JlZW4uaGVpZ2h0ID09PSAwXG4gICAgICAgICAgICAgICAgPyAob2Zmc2V0ICE9PSAwID8gYGNhbGMoMTAwdmggLSAkeyBvZmZzZXQgfXB4KWAgOiAnMTAwdmgnKVxuICAgICAgICAgICAgICAgIDogKCRxLnNjcmVlbi5oZWlnaHQgLSBvZmZzZXQpICsgJ3B4J1xuICAgICAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBjbGFzc2VzID0gY29tcHV0ZWQoKCkgPT5cbiAgICAgIGBxLXBhZ2UkeyBwcm9wcy5wYWRkaW5nID09PSB0cnVlID8gJyBxLWxheW91dC1wYWRkaW5nJyA6ICcnIH1gXG4gICAgKVxuXG4gICAgcmV0dXJuICgpID0+IGgoJ21haW4nLCB7XG4gICAgICBjbGFzczogY2xhc3Nlcy52YWx1ZSxcbiAgICAgIHN0eWxlOiBzdHlsZS52YWx1ZVxuICAgIH0sIGhTbG90KHNsb3RzLmRlZmF1bHQpKVxuICB9XG59KVxuIiwiaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgcXVhc2FyS2V5IH0gZnJvbSAnLi4vdXRpbHMvcHJpdmF0ZS9zeW1ib2xzLmpzJ1xuXG4vKipcbiAqIFJldHVybnMgdGhlICRxIGluc3RhbmNlLlxuICogRXF1aXZhbGVudCB0byBgdGhpcy4kcWAgaW5zaWRlIHRlbXBsYXRlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlUXVhc2FyICgpIHtcbiAgcmV0dXJuIGluamVjdChxdWFzYXJLZXkpXG59XG4iLCI8dGVtcGxhdGU+XHJcbiAgPHEtcGFnZSBjbGFzcz1cIm9iaXdhbi1sYW5kaW5nLXBhZ2VcIj5cclxuICAgIDxxLWJ0blxyXG4gICAgICBjb2xvcj1cInByaW1hcnlcIiAgICBcclxuICAgICAgZGVuc2VcclxuICAgICAgZmxhdFxyXG4gICAgICBsYWJlbD1cIkNob29zZVwiXHJcbiAgICAgIEBjbGljaz1cIm9uQ2hvb3NlXCJcclxuICAgIC8+XHJcbiAgPC9xLXBhZ2U+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG5cclxuPC9zdHlsZT5cclxuXHJcbjxzY3JpcHQgc2V0dXA+XHJcbmltcG9ydCBfIGZyb20gJ0BrYXNwZXItYWFuc3Rvb3QvbG9kYXNoLXgnO1xyXG5pbXBvcnQgeyBjb21wdXRlZCwgaW5qZWN0LCBwcm92aWRlLCByZWYsIHJlYWN0aXZlLCB1c2VBdHRycywgdXNlU2xvdHMsIHdhdGNoIH0gZnJvbSAndnVlJztcclxuaW1wb3J0IHsgdXNlUXVhc2FyIH0gZnJvbSAncXVhc2FyJztcclxuaW1wb3J0IHsgdXNlUm91dGVyLCB1c2VSb3V0ZSB9IGZyb20gJ3Z1ZS1yb3V0ZXInO1xyXG5cclxuLyogVE9ETydzOlxyXG4gIFsgXVxyXG4qL1xyXG5cclxuY29uc3QgJHEgPSB1c2VRdWFzYXIoKTtcclxuY29uc3QgYXBwID0gaW5qZWN0KCdhcHAnKTtcclxuXHJcbmZ1bmN0aW9uIG9uQ2hvb3NlKCkge1xyXG4gIGRlYnVnZ2VyO1xyXG4gIERyb3Bib3guY2hvb3NlKHtcclxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAgIGRlYnVnZ2VyO1xyXG4gICAgfSxcclxuICAgIC8vIE9wdGlvbmFsLiBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbG9zZXMgdGhlIGRpYWxvZyB3aXRob3V0IHNlbGVjdGluZyBhIGZpbGVcclxuICAgIC8vIGFuZCBkb2VzIG5vdCBpbmNsdWRlIGFueSBwYXJhbWV0ZXJzLlxyXG4gICAgY2FuY2VsOiBmdW5jdGlvbigpIHtcclxuICAgICAgZGVidWdnZXI7XHJcbiAgICB9LFxyXG4gICAgbGlua1R5cGU6IFwiZGlyZWN0XCIsXHJcbiAgICAvLyBleHRlbnNpb25zIChUT0RPOiBEb29yemV0dGVuIHZhbnVpdCBwcm9wcy5hY2NlcHQpXHJcbiAgICAvLyBleHRlbnNpb25zOiBbJy5qc29uJ10sXHJcbiAgICBmb2xkZXJzZWxlY3Q6IGZhbHNlLCAvLyBBIHZhbHVlIG9mIGZhbHNlIChkZWZhdWx0KSBsaW1pdHMgXHJcbiAgICAvLyBzZWxlY3Rpb24gdG8gZmlsZXMsIHdoaWxlIHRydWUgYWxsb3dzIHRoZSB1c2VyIHRvIHNlbGVjdCBib3RoXHJcbiAgICAvLyBmb2xkZXJzIGFuZCBmaWxlcy4gWW91IGNhbm5vdCBzcGVjaWZ5IGBsaW5rVHlwZTogXCJkaXJlY3RcImBcclxuICAgIC8vIHdoZW4gdXNpbmcgYGZvbGRlcnNlbGVjdDogdHJ1ZWAuXHJcbiAgfSk7XHJcbn1cclxuPC9zY3JpcHQ+XHJcbiJdLCJuYW1lcyI6WyJRUGFnZSIsImNyZWF0ZUNvbXBvbmVudCIsInByb3BzIiwic2xvdHMiLCIkcSIsImdldEN1cnJlbnRJbnN0YW5jZSIsIiRsYXlvdXQiLCJpbmplY3QiLCJsYXlvdXRLZXkiLCJlbXB0eVJlbmRlckZuIiwicGFnZUNvbnRhaW5lcktleSIsInN0eWxlIiwiY29tcHV0ZWQiLCJvZmZzZXQiLCJoZWlnaHQiLCJjbGFzc2VzIiwiaCIsImhTbG90IiwidXNlUXVhc2FyIiwicXVhc2FyS2V5Iiwib25DaG9vc2UiLCJmaWxlcyJdLCJtYXBwaW5ncyI6InVLQU1BLElBQUFBLEVBQWVDLEVBQWdCLENBQzdCLEtBQU0sUUFFTixNQUFPLENBQ0wsUUFBUyxRQUNULFFBQVMsUUFDVixFQUVELE1BQU9DLEVBQU8sQ0FBRSxNQUFBQyxHQUFTLENBQ3ZCLEtBQU0sQ0FBRSxNQUFPLENBQUUsR0FBQUMsQ0FBSSxDQUFBLEVBQUtDLEVBQW9CLEVBRXhDQyxFQUFVQyxFQUFPQyxFQUFXQyxDQUFhLEVBQy9DLEdBQUlILElBQVlHLEVBQ2QsZUFBUSxNQUFNLDJDQUEyQyxFQUNsREEsRUFJVCxHQUR1QkYsRUFBT0csRUFBa0JELENBQWEsSUFDdENBLEVBQ3JCLGVBQVEsTUFBTSwyQ0FBMkMsRUFDbERBLEVBR1QsTUFBTUUsRUFBUUMsRUFBUyxJQUFNLENBQzNCLE1BQU1DLEdBQ0RQLEVBQVEsT0FBTyxRQUFVLEdBQU9BLEVBQVEsT0FBTyxLQUFPLElBQ3REQSxFQUFRLE9BQU8sUUFBVSxHQUFPQSxFQUFRLE9BQU8sS0FBTyxHQUUzRCxHQUFJLE9BQU9KLEVBQU0sU0FBWSxXQUFZLENBQ3ZDLE1BQU1ZLEVBQVNSLEVBQVEsWUFBWSxRQUFVLEdBQ3pDQSxFQUFRLGdCQUFnQixNQUN4QkYsRUFBRyxPQUFPLE9BRWQsT0FBT0YsRUFBTSxRQUFRVyxFQUFRQyxDQUFNLENBQ3BDLENBRUQsTUFBTyxDQUNMLFVBQVdSLEVBQVEsWUFBWSxRQUFVLEdBQ3BDQSxFQUFRLGdCQUFnQixNQUFRTyxFQUFVLEtBRXpDVCxFQUFHLE9BQU8sU0FBVyxFQUNoQlMsSUFBVyxFQUFJLGdCQUFpQkEsT0FBZSxRQUMvQ1QsRUFBRyxPQUFPLE9BQVNTLEVBQVUsSUFFekMsQ0FDUCxDQUFLLEVBRUtFLEVBQVVILEVBQVMsSUFDdkIsU0FBVVYsRUFBTSxVQUFZLEdBQU8sb0JBQXNCLElBQzFELEVBRUQsTUFBTyxJQUFNYyxFQUFFLE9BQVEsQ0FDckIsTUFBT0QsRUFBUSxNQUNmLE1BQU9KLEVBQU0sS0FDbkIsRUFBT00sRUFBTWQsRUFBTSxPQUFPLENBQUMsQ0FDeEIsQ0FDSCxDQUFDLEVDdkRjLFNBQVNlLEdBQWEsQ0FDbkMsT0FBT1gsRUFBT1ksQ0FBUyxDQUN6QixzQ0NpQldELEVBQVksRUFDWFgsRUFBTyxLQUFLLEVBRXhCLFNBQVNhLEdBQVcsQ0FDbEIsU0FDQSxRQUFRLE9BQU8sQ0FDYixRQUFTLFNBQVNDLEVBQU8sQ0FDdkIsUUFDRCxFQUdELE9BQVEsVUFBVyxDQUNqQixRQUNELEVBQ0QsU0FBVSxTQUdWLGFBQWMsRUFJbEIsQ0FBRyxDQUNIIn0=
