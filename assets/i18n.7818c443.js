import{d as ot,h as jt,e as On,i as bn,o as hn,a as Cn,c as be,w as Ze,F as Bt,g as Jt,b as An,r as Sn,s as Pn,f as yn,T as Rn,j as kn}from"./index.4634898b.js";/*!
  * shared v9.10.1
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */const ve=typeof window!="undefined",ce=(e,t=!1)=>t?Symbol.for(e):Symbol(e),Dn=(e,t,n)=>Mn({l:e,k:t,s:n}),Mn=e=>JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029").replace(/\u0027/g,"\\u0027"),X=e=>typeof e=="number"&&isFinite(e),Fn=e=>qt(e)==="[object Date]",Ue=e=>qt(e)==="[object RegExp]",xe=e=>F(e)&&Object.keys(e).length===0,K=Object.assign;let Nt;const we=()=>Nt||(Nt=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:{});function gt(e){return e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}const vn=Object.prototype.hasOwnProperty;function We(e,t){return vn.call(e,t)}const Y=Array.isArray,x=e=>typeof e=="function",A=e=>typeof e=="string",V=e=>typeof e=="boolean",U=e=>e!==null&&typeof e=="object",Un=e=>U(e)&&x(e.then)&&x(e.catch),Qt=Object.prototype.toString,qt=e=>Qt.call(e),F=e=>{if(!U(e))return!1;const t=Object.getPrototypeOf(e);return t===null||t.constructor===Object},wn=e=>e==null?"":Y(e)||F(e)&&e.toString===Qt?JSON.stringify(e,null,2):String(e);function Wn(e,t=""){return e.reduce((n,r,a)=>a===0?n+r:n+t+r,"")}function it(e){let t=e;return()=>++t}function Vn(e,t){typeof console!="undefined"&&(console.warn("[intlify] "+e),t&&console.warn(t.stack))}const De=e=>!U(e)||Y(e);function Fe(e,t){if(De(e)||De(t))throw new Error("Invalid value");const n=[{src:e,des:t}];for(;n.length;){const{src:r,des:a}=n.pop();Object.keys(r).forEach(s=>{De(r[s])||De(a[s])?a[s]=r[s]:n.push({src:r[s],des:a[s]})})}}/*!
  * message-compiler v9.10.1
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */function xn(e,t,n){return{line:e,column:t,offset:n}}function ze(e,t,n){const r={start:e,end:t};return n!=null&&(r.source=n),r}const $n=/\{([0-9a-zA-Z]+)\}/g;function Yn(e,...t){return t.length===1&&Gn(t[0])&&(t=t[0]),(!t||!t.hasOwnProperty)&&(t={}),e.replace($n,(n,r)=>t.hasOwnProperty(r)?t[r]:"")}const Zt=Object.assign,Lt=e=>typeof e=="string",Gn=e=>e!==null&&typeof e=="object";function zt(e,t=""){return e.reduce((n,r,a)=>a===0?n+r:n+t+r,"")}const R={EXPECTED_TOKEN:1,INVALID_TOKEN_IN_PLACEHOLDER:2,UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER:3,UNKNOWN_ESCAPE_SEQUENCE:4,INVALID_UNICODE_ESCAPE_SEQUENCE:5,UNBALANCED_CLOSING_BRACE:6,UNTERMINATED_CLOSING_BRACE:7,EMPTY_PLACEHOLDER:8,NOT_ALLOW_NEST_PLACEHOLDER:9,INVALID_LINKED_FORMAT:10,MUST_HAVE_MESSAGES_IN_PLURAL:11,UNEXPECTED_EMPTY_LINKED_MODIFIER:12,UNEXPECTED_EMPTY_LINKED_KEY:13,UNEXPECTED_LEXICAL_ANALYSIS:14,UNHANDLED_CODEGEN_NODE_TYPE:15,UNHANDLED_MINIFIER_NODE_TYPE:16,__EXTEND_POINT__:17},Xn={[R.EXPECTED_TOKEN]:"Expected token: '{0}'",[R.INVALID_TOKEN_IN_PLACEHOLDER]:"Invalid token in placeholder: '{0}'",[R.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]:"Unterminated single quote in placeholder",[R.UNKNOWN_ESCAPE_SEQUENCE]:"Unknown escape sequence: \\{0}",[R.INVALID_UNICODE_ESCAPE_SEQUENCE]:"Invalid unicode escape sequence: {0}",[R.UNBALANCED_CLOSING_BRACE]:"Unbalanced closing brace",[R.UNTERMINATED_CLOSING_BRACE]:"Unterminated closing brace",[R.EMPTY_PLACEHOLDER]:"Empty placeholder",[R.NOT_ALLOW_NEST_PLACEHOLDER]:"Not allowed nest placeholder",[R.INVALID_LINKED_FORMAT]:"Invalid linked format",[R.MUST_HAVE_MESSAGES_IN_PLURAL]:"Plural must have messages",[R.UNEXPECTED_EMPTY_LINKED_MODIFIER]:"Unexpected empty linked modifier",[R.UNEXPECTED_EMPTY_LINKED_KEY]:"Unexpected empty linked key",[R.UNEXPECTED_LEXICAL_ANALYSIS]:"Unexpected lexical analysis in token: '{0}'",[R.UNHANDLED_CODEGEN_NODE_TYPE]:"unhandled codegen node type: '{0}'",[R.UNHANDLED_MINIFIER_NODE_TYPE]:"unhandled mimifier node type: '{0}'"};function Te(e,t,n={}){const{domain:r,messages:a,args:s}=n,c=Yn((a||Xn)[e]||"",...s||[]),f=new SyntaxError(String(c));return f.code=e,t&&(f.location=t),f.domain=r,f}function Hn(e){throw e}const re=" ",Kn="\r",H=`
`,jn=String.fromCharCode(8232),Bn=String.fromCharCode(8233);function Jn(e){const t=e;let n=0,r=1,a=1,s=0;const c=M=>t[M]===Kn&&t[M+1]===H,f=M=>t[M]===H,u=M=>t[M]===Bn,m=M=>t[M]===jn,p=M=>c(M)||f(M)||u(M)||m(M),T=()=>n,L=()=>r,C=()=>a,y=()=>s,k=M=>c(M)||u(M)||m(M)?H:t[M],S=()=>k(n),i=()=>k(n+s);function N(){return s=0,p(n)&&(r++,a=0),c(n)&&n++,n++,a++,t[n]}function I(){return c(n+s)&&s++,s++,t[n+s]}function E(){n=0,r=1,a=1,s=0}function b(M=0){s=M}function h(){const M=n+s;for(;M!==n;)N();s=0}return{index:T,line:L,column:C,peekOffset:y,charAt:k,currentChar:S,currentPeek:i,next:N,peek:I,reset:E,resetPeek:b,skipToPeek:h}}const ue=void 0,Qn=".",Tt="'",qn="tokenizer";function Zn(e,t={}){const n=t.location!==!1,r=Jn(e),a=()=>r.index(),s=()=>xn(r.line(),r.column(),r.index()),c=s(),f=a(),u={currentType:14,offset:f,startLoc:c,endLoc:c,lastType:14,lastOffset:f,lastStartLoc:c,lastEndLoc:c,braceNest:0,inLinked:!1,text:""},m=()=>u,{onError:p}=t;function T(l,o,d,...O){const D=m();if(o.column+=d,o.offset+=d,p){const v=n?ze(D.startLoc,o):null,Z=Te(l,v,{domain:qn,args:O});p(Z)}}function L(l,o,d){l.endLoc=s(),l.currentType=o;const O={type:o};return n&&(O.loc=ze(l.startLoc,l.endLoc)),d!=null&&(O.value=d),O}const C=l=>L(l,14);function y(l,o){return l.currentChar()===o?(l.next(),o):(T(R.EXPECTED_TOKEN,s(),0,o),"")}function k(l){let o="";for(;l.currentPeek()===re||l.currentPeek()===H;)o+=l.currentPeek(),l.peek();return o}function S(l){const o=k(l);return l.skipToPeek(),o}function i(l){if(l===ue)return!1;const o=l.charCodeAt(0);return o>=97&&o<=122||o>=65&&o<=90||o===95}function N(l){if(l===ue)return!1;const o=l.charCodeAt(0);return o>=48&&o<=57}function I(l,o){const{currentType:d}=o;if(d!==2)return!1;k(l);const O=i(l.currentPeek());return l.resetPeek(),O}function E(l,o){const{currentType:d}=o;if(d!==2)return!1;k(l);const O=l.currentPeek()==="-"?l.peek():l.currentPeek(),D=N(O);return l.resetPeek(),D}function b(l,o){const{currentType:d}=o;if(d!==2)return!1;k(l);const O=l.currentPeek()===Tt;return l.resetPeek(),O}function h(l,o){const{currentType:d}=o;if(d!==8)return!1;k(l);const O=l.currentPeek()===".";return l.resetPeek(),O}function M(l,o){const{currentType:d}=o;if(d!==9)return!1;k(l);const O=i(l.currentPeek());return l.resetPeek(),O}function W(l,o){const{currentType:d}=o;if(!(d===8||d===12))return!1;k(l);const O=l.currentPeek()===":";return l.resetPeek(),O}function P(l,o){const{currentType:d}=o;if(d!==10)return!1;const O=()=>{const v=l.currentPeek();return v==="{"?i(l.peek()):v==="@"||v==="%"||v==="|"||v===":"||v==="."||v===re||!v?!1:v===H?(l.peek(),O()):i(v)},D=O();return l.resetPeek(),D}function B(l){k(l);const o=l.currentPeek()==="|";return l.resetPeek(),o}function oe(l){const o=k(l),d=l.currentPeek()==="%"&&l.peek()==="{";return l.resetPeek(),{isModulo:d,hasSpace:o.length>0}}function J(l,o=!0){const d=(D=!1,v="",Z=!1)=>{const ne=l.currentPeek();return ne==="{"?v==="%"?!1:D:ne==="@"||!ne?v==="%"?!0:D:ne==="%"?(l.peek(),d(D,"%",!0)):ne==="|"?v==="%"||Z?!0:!(v===re||v===H):ne===re?(l.peek(),d(!0,re,Z)):ne===H?(l.peek(),d(!0,H,Z)):!0},O=d();return o&&l.resetPeek(),O}function _e(l,o){const d=l.currentChar();return d===ue?ue:o(d)?(l.next(),d):null}function Ae(l){return _e(l,d=>{const O=d.charCodeAt(0);return O>=97&&O<=122||O>=65&&O<=90||O>=48&&O<=57||O===95||O===36})}function Ye(l){return _e(l,d=>{const O=d.charCodeAt(0);return O>=48&&O<=57})}function Ge(l){return _e(l,d=>{const O=d.charCodeAt(0);return O>=48&&O<=57||O>=65&&O<=70||O>=97&&O<=102})}function Se(l){let o="",d="";for(;o=Ye(l);)d+=o;return d}function Xe(l){S(l);const o=l.currentChar();return o!=="%"&&T(R.EXPECTED_TOKEN,s(),0,o),l.next(),"%"}function Pe(l){let o="";for(;;){const d=l.currentChar();if(d==="{"||d==="}"||d==="@"||d==="|"||!d)break;if(d==="%")if(J(l))o+=d,l.next();else break;else if(d===re||d===H)if(J(l))o+=d,l.next();else{if(B(l))break;o+=d,l.next()}else o+=d,l.next()}return o}function He(l){S(l);let o="",d="";for(;o=Ae(l);)d+=o;return l.currentChar()===ue&&T(R.UNTERMINATED_CLOSING_BRACE,s(),0),d}function te(l){S(l);let o="";return l.currentChar()==="-"?(l.next(),o+=`-${Se(l)}`):o+=Se(l),l.currentChar()===ue&&T(R.UNTERMINATED_CLOSING_BRACE,s(),0),o}function ye(l){S(l),y(l,"'");let o="",d="";const O=v=>v!==Tt&&v!==H;for(;o=_e(l,O);)o==="\\"?d+=Ke(l):d+=o;const D=l.currentChar();return D===H||D===ue?(T(R.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER,s(),0),D===H&&(l.next(),y(l,"'")),d):(y(l,"'"),d)}function Ke(l){const o=l.currentChar();switch(o){case"\\":case"'":return l.next(),`\\${o}`;case"u":return Re(l,o,4);case"U":return Re(l,o,6);default:return T(R.UNKNOWN_ESCAPE_SEQUENCE,s(),0,o),""}}function Re(l,o,d){y(l,o);let O="";for(let D=0;D<d;D++){const v=Ge(l);if(!v){T(R.INVALID_UNICODE_ESCAPE_SEQUENCE,s(),0,`\\${o}${O}${l.currentChar()}`);break}O+=v}return`\\${o}${O}`}function je(l){S(l);let o="",d="";const O=D=>D!=="{"&&D!=="}"&&D!==re&&D!==H;for(;o=_e(l,O);)d+=o;return d}function Be(l){let o="",d="";for(;o=Ae(l);)d+=o;return d}function Et(l){const o=(d=!1,O)=>{const D=l.currentChar();return D==="{"||D==="%"||D==="@"||D==="|"||D==="("||D===")"||!D||D===re?O:D===H||D===Qn?(O+=D,l.next(),o(d,O)):(O+=D,l.next(),o(!0,O))};return o(!1,"")}function pe(l){S(l);const o=y(l,"|");return S(l),o}function Ie(l,o){let d=null;switch(l.currentChar()){case"{":return o.braceNest>=1&&T(R.NOT_ALLOW_NEST_PLACEHOLDER,s(),0),l.next(),d=L(o,2,"{"),S(l),o.braceNest++,d;case"}":return o.braceNest>0&&o.currentType===2&&T(R.EMPTY_PLACEHOLDER,s(),0),l.next(),d=L(o,3,"}"),o.braceNest--,o.braceNest>0&&S(l),o.inLinked&&o.braceNest===0&&(o.inLinked=!1),d;case"@":return o.braceNest>0&&T(R.UNTERMINATED_CLOSING_BRACE,s(),0),d=de(l,o)||C(o),o.braceNest=0,d;default:let D=!0,v=!0,Z=!0;if(B(l))return o.braceNest>0&&T(R.UNTERMINATED_CLOSING_BRACE,s(),0),d=L(o,1,pe(l)),o.braceNest=0,o.inLinked=!1,d;if(o.braceNest>0&&(o.currentType===5||o.currentType===6||o.currentType===7))return T(R.UNTERMINATED_CLOSING_BRACE,s(),0),o.braceNest=0,Oe(l,o);if(D=I(l,o))return d=L(o,5,He(l)),S(l),d;if(v=E(l,o))return d=L(o,6,te(l)),S(l),d;if(Z=b(l,o))return d=L(o,7,ye(l)),S(l),d;if(!D&&!v&&!Z)return d=L(o,13,je(l)),T(R.INVALID_TOKEN_IN_PLACEHOLDER,s(),0,d.value),S(l),d;break}return d}function de(l,o){const{currentType:d}=o;let O=null;const D=l.currentChar();switch((d===8||d===9||d===12||d===10)&&(D===H||D===re)&&T(R.INVALID_LINKED_FORMAT,s(),0),D){case"@":return l.next(),O=L(o,8,"@"),o.inLinked=!0,O;case".":return S(l),l.next(),L(o,9,".");case":":return S(l),l.next(),L(o,10,":");default:return B(l)?(O=L(o,1,pe(l)),o.braceNest=0,o.inLinked=!1,O):h(l,o)||W(l,o)?(S(l),de(l,o)):M(l,o)?(S(l),L(o,12,Be(l))):P(l,o)?(S(l),D==="{"?Ie(l,o)||O:L(o,11,Et(l))):(d===8&&T(R.INVALID_LINKED_FORMAT,s(),0),o.braceNest=0,o.inLinked=!1,Oe(l,o))}}function Oe(l,o){let d={type:14};if(o.braceNest>0)return Ie(l,o)||C(o);if(o.inLinked)return de(l,o)||C(o);switch(l.currentChar()){case"{":return Ie(l,o)||C(o);case"}":return T(R.UNBALANCED_CLOSING_BRACE,s(),0),l.next(),L(o,3,"}");case"@":return de(l,o)||C(o);default:if(B(l))return d=L(o,1,pe(l)),o.braceNest=0,o.inLinked=!1,d;const{isModulo:D,hasSpace:v}=oe(l);if(D)return v?L(o,0,Pe(l)):L(o,4,Xe(l));if(J(l))return L(o,0,Pe(l));break}return d}function Je(){const{currentType:l,offset:o,startLoc:d,endLoc:O}=u;return u.lastType=l,u.lastOffset=o,u.lastStartLoc=d,u.lastEndLoc=O,u.offset=a(),u.startLoc=s(),r.currentChar()===ue?L(u,14):Oe(r,u)}return{nextToken:Je,currentOffset:a,currentPosition:s,context:m}}const zn="parser",er=/(?:\\\\|\\'|\\u([0-9a-fA-F]{4})|\\U([0-9a-fA-F]{6}))/g;function tr(e,t,n){switch(e){case"\\\\":return"\\";case"\\'":return"'";default:{const r=parseInt(t||n,16);return r<=55295||r>=57344?String.fromCodePoint(r):"\uFFFD"}}}function nr(e={}){const t=e.location!==!1,{onError:n}=e;function r(i,N,I,E,...b){const h=i.currentPosition();if(h.offset+=E,h.column+=E,n){const M=t?ze(I,h):null,W=Te(N,M,{domain:zn,args:b});n(W)}}function a(i,N,I){const E={type:i};return t&&(E.start=N,E.end=N,E.loc={start:I,end:I}),E}function s(i,N,I,E){E&&(i.type=E),t&&(i.end=N,i.loc&&(i.loc.end=I))}function c(i,N){const I=i.context(),E=a(3,I.offset,I.startLoc);return E.value=N,s(E,i.currentOffset(),i.currentPosition()),E}function f(i,N){const I=i.context(),{lastOffset:E,lastStartLoc:b}=I,h=a(5,E,b);return h.index=parseInt(N,10),i.nextToken(),s(h,i.currentOffset(),i.currentPosition()),h}function u(i,N){const I=i.context(),{lastOffset:E,lastStartLoc:b}=I,h=a(4,E,b);return h.key=N,i.nextToken(),s(h,i.currentOffset(),i.currentPosition()),h}function m(i,N){const I=i.context(),{lastOffset:E,lastStartLoc:b}=I,h=a(9,E,b);return h.value=N.replace(er,tr),i.nextToken(),s(h,i.currentOffset(),i.currentPosition()),h}function p(i){const N=i.nextToken(),I=i.context(),{lastOffset:E,lastStartLoc:b}=I,h=a(8,E,b);return N.type!==12?(r(i,R.UNEXPECTED_EMPTY_LINKED_MODIFIER,I.lastStartLoc,0),h.value="",s(h,E,b),{nextConsumeToken:N,node:h}):(N.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,I.lastStartLoc,0,z(N)),h.value=N.value||"",s(h,i.currentOffset(),i.currentPosition()),{node:h})}function T(i,N){const I=i.context(),E=a(7,I.offset,I.startLoc);return E.value=N,s(E,i.currentOffset(),i.currentPosition()),E}function L(i){const N=i.context(),I=a(6,N.offset,N.startLoc);let E=i.nextToken();if(E.type===9){const b=p(i);I.modifier=b.node,E=b.nextConsumeToken||i.nextToken()}switch(E.type!==10&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(E)),E=i.nextToken(),E.type===2&&(E=i.nextToken()),E.type){case 11:E.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(E)),I.key=T(i,E.value||"");break;case 5:E.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(E)),I.key=u(i,E.value||"");break;case 6:E.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(E)),I.key=f(i,E.value||"");break;case 7:E.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(E)),I.key=m(i,E.value||"");break;default:r(i,R.UNEXPECTED_EMPTY_LINKED_KEY,N.lastStartLoc,0);const b=i.context(),h=a(7,b.offset,b.startLoc);return h.value="",s(h,b.offset,b.startLoc),I.key=h,s(I,b.offset,b.startLoc),{nextConsumeToken:E,node:I}}return s(I,i.currentOffset(),i.currentPosition()),{node:I}}function C(i){const N=i.context(),I=N.currentType===1?i.currentOffset():N.offset,E=N.currentType===1?N.endLoc:N.startLoc,b=a(2,I,E);b.items=[];let h=null;do{const P=h||i.nextToken();switch(h=null,P.type){case 0:P.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(P)),b.items.push(c(i,P.value||""));break;case 6:P.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(P)),b.items.push(f(i,P.value||""));break;case 5:P.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(P)),b.items.push(u(i,P.value||""));break;case 7:P.value==null&&r(i,R.UNEXPECTED_LEXICAL_ANALYSIS,N.lastStartLoc,0,z(P)),b.items.push(m(i,P.value||""));break;case 8:const B=L(i);b.items.push(B.node),h=B.nextConsumeToken||null;break}}while(N.currentType!==14&&N.currentType!==1);const M=N.currentType===1?N.lastOffset:i.currentOffset(),W=N.currentType===1?N.lastEndLoc:i.currentPosition();return s(b,M,W),b}function y(i,N,I,E){const b=i.context();let h=E.items.length===0;const M=a(1,N,I);M.cases=[],M.cases.push(E);do{const W=C(i);h||(h=W.items.length===0),M.cases.push(W)}while(b.currentType!==14);return h&&r(i,R.MUST_HAVE_MESSAGES_IN_PLURAL,I,0),s(M,i.currentOffset(),i.currentPosition()),M}function k(i){const N=i.context(),{offset:I,startLoc:E}=N,b=C(i);return N.currentType===14?b:y(i,I,E,b)}function S(i){const N=Zn(i,Zt({},e)),I=N.context(),E=a(0,I.offset,I.startLoc);return t&&E.loc&&(E.loc.source=i),E.body=k(N),e.onCacheKey&&(E.cacheKey=e.onCacheKey(i)),I.currentType!==14&&r(N,R.UNEXPECTED_LEXICAL_ANALYSIS,I.lastStartLoc,0,i[I.offset]||""),s(E,N.currentOffset(),N.currentPosition()),E}return{parse:S}}function z(e){if(e.type===14)return"EOF";const t=(e.value||"").replace(/\r?\n/gu,"\\n");return t.length>10?t.slice(0,9)+"\u2026":t}function rr(e,t={}){const n={ast:e,helpers:new Set};return{context:()=>n,helper:s=>(n.helpers.add(s),s)}}function pt(e,t){for(let n=0;n<e.length;n++)ut(e[n],t)}function ut(e,t){switch(e.type){case 1:pt(e.cases,t),t.helper("plural");break;case 2:pt(e.items,t);break;case 6:ut(e.key,t),t.helper("linked"),t.helper("type");break;case 5:t.helper("interpolate"),t.helper("list");break;case 4:t.helper("interpolate"),t.helper("named");break}}function ar(e,t={}){const n=rr(e);n.helper("normalize"),e.body&&ut(e.body,n);const r=n.context();e.helpers=Array.from(r.helpers)}function sr(e){const t=e.body;return t.type===2?It(t):t.cases.forEach(n=>It(n)),e}function It(e){if(e.items.length===1){const t=e.items[0];(t.type===3||t.type===9)&&(e.static=t.value,delete t.value)}else{const t=[];for(let n=0;n<e.items.length;n++){const r=e.items[n];if(!(r.type===3||r.type===9)||r.value==null)break;t.push(r.value)}if(t.length===e.items.length){e.static=zt(t);for(let n=0;n<e.items.length;n++){const r=e.items[n];(r.type===3||r.type===9)&&delete r.value}}}}const lr="minifier";function Ne(e){switch(e.t=e.type,e.type){case 0:const t=e;Ne(t.body),t.b=t.body,delete t.body;break;case 1:const n=e,r=n.cases;for(let p=0;p<r.length;p++)Ne(r[p]);n.c=r,delete n.cases;break;case 2:const a=e,s=a.items;for(let p=0;p<s.length;p++)Ne(s[p]);a.i=s,delete a.items,a.static&&(a.s=a.static,delete a.static);break;case 3:case 9:case 8:case 7:const c=e;c.value&&(c.v=c.value,delete c.value);break;case 6:const f=e;Ne(f.key),f.k=f.key,delete f.key,f.modifier&&(Ne(f.modifier),f.m=f.modifier,delete f.modifier);break;case 5:const u=e;u.i=u.index,delete u.index;break;case 4:const m=e;m.k=m.key,delete m.key;break;default:throw Te(R.UNHANDLED_MINIFIER_NODE_TYPE,null,{domain:lr,args:[e.type]})}delete e.type}const cr="parser";function or(e,t){const{sourceMap:n,filename:r,breakLineCode:a,needIndent:s}=t,c=t.location!==!1,f={filename:r,code:"",column:1,line:1,offset:0,map:void 0,breakLineCode:a,needIndent:s,indentLevel:0};c&&e.loc&&(f.source=e.loc.source);const u=()=>f;function m(S,i){f.code+=S}function p(S,i=!0){const N=i?a:"";m(s?N+"  ".repeat(S):N)}function T(S=!0){const i=++f.indentLevel;S&&p(i)}function L(S=!0){const i=--f.indentLevel;S&&p(i)}function C(){p(f.indentLevel)}return{context:u,push:m,indent:T,deindent:L,newline:C,helper:S=>`_${S}`,needIndent:()=>f.needIndent}}function ir(e,t){const{helper:n}=e;e.push(`${n("linked")}(`),ge(e,t.key),t.modifier?(e.push(", "),ge(e,t.modifier),e.push(", _type")):e.push(", undefined, _type"),e.push(")")}function ur(e,t){const{helper:n,needIndent:r}=e;e.push(`${n("normalize")}([`),e.indent(r());const a=t.items.length;for(let s=0;s<a&&(ge(e,t.items[s]),s!==a-1);s++)e.push(", ");e.deindent(r()),e.push("])")}function fr(e,t){const{helper:n,needIndent:r}=e;if(t.cases.length>1){e.push(`${n("plural")}([`),e.indent(r());const a=t.cases.length;for(let s=0;s<a&&(ge(e,t.cases[s]),s!==a-1);s++)e.push(", ");e.deindent(r()),e.push("])")}}function _r(e,t){t.body?ge(e,t.body):e.push("null")}function ge(e,t){const{helper:n}=e;switch(t.type){case 0:_r(e,t);break;case 1:fr(e,t);break;case 2:ur(e,t);break;case 6:ir(e,t);break;case 8:e.push(JSON.stringify(t.value),t);break;case 7:e.push(JSON.stringify(t.value),t);break;case 5:e.push(`${n("interpolate")}(${n("list")}(${t.index}))`,t);break;case 4:e.push(`${n("interpolate")}(${n("named")}(${JSON.stringify(t.key)}))`,t);break;case 9:e.push(JSON.stringify(t.value),t);break;case 3:e.push(JSON.stringify(t.value),t);break;default:throw Te(R.UNHANDLED_CODEGEN_NODE_TYPE,null,{domain:cr,args:[t.type]})}}const mr=(e,t={})=>{const n=Lt(t.mode)?t.mode:"normal",r=Lt(t.filename)?t.filename:"message.intl",a=!!t.sourceMap,s=t.breakLineCode!=null?t.breakLineCode:n==="arrow"?";":`
`,c=t.needIndent?t.needIndent:n!=="arrow",f=e.helpers||[],u=or(e,{mode:n,filename:r,sourceMap:a,breakLineCode:s,needIndent:c});u.push(n==="normal"?"function __msg__ (ctx) {":"(ctx) => {"),u.indent(c),f.length>0&&(u.push(`const { ${zt(f.map(T=>`${T}: _${T}`),", ")} } = ctx`),u.newline()),u.push("return "),ge(u,e),u.deindent(c),u.push("}"),delete e.helpers;const{code:m,map:p}=u.context();return{ast:e,code:m,map:p?p.toJSON():void 0}};function dr(e,t={}){const n=Zt({},t),r=!!n.jit,a=!!n.minify,s=n.optimize==null?!0:n.optimize,f=nr(n).parse(e);return r?(s&&sr(f),a&&Ne(f),{ast:f,code:""}):(ar(f,n),mr(f,n))}/*!
  * core-base v9.10.1
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */function Er(){typeof __INTLIFY_JIT_COMPILATION__!="boolean"&&(we().__INTLIFY_JIT_COMPILATION__=!1),typeof __INTLIFY_DROP_MESSAGE_COMPILER__!="boolean"&&(we().__INTLIFY_DROP_MESSAGE_COMPILER__=!1)}const fe=[];fe[0]={w:[0],i:[3,0],["["]:[4],o:[7]};fe[1]={w:[1],["."]:[2],["["]:[4],o:[7]};fe[2]={w:[2],i:[3,0],[0]:[3,0]};fe[3]={i:[3,0],[0]:[3,0],w:[1,1],["."]:[2,1],["["]:[4,1],o:[7,1]};fe[4]={["'"]:[5,0],['"']:[6,0],["["]:[4,2],["]"]:[1,3],o:8,l:[4,0]};fe[5]={["'"]:[4,0],o:8,l:[5,0]};fe[6]={['"']:[4,0],o:8,l:[6,0]};const Nr=/^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;function gr(e){return Nr.test(e)}function Lr(e){const t=e.charCodeAt(0),n=e.charCodeAt(e.length-1);return t===n&&(t===34||t===39)?e.slice(1,-1):e}function Tr(e){if(e==null)return"o";switch(e.charCodeAt(0)){case 91:case 93:case 46:case 34:case 39:return e;case 95:case 36:case 45:return"i";case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"w"}return"i"}function pr(e){const t=e.trim();return e.charAt(0)==="0"&&isNaN(parseInt(e))?!1:gr(t)?Lr(t):"*"+t}function Ir(e){const t=[];let n=-1,r=0,a=0,s,c,f,u,m,p,T;const L=[];L[0]=()=>{c===void 0?c=f:c+=f},L[1]=()=>{c!==void 0&&(t.push(c),c=void 0)},L[2]=()=>{L[0](),a++},L[3]=()=>{if(a>0)a--,r=4,L[0]();else{if(a=0,c===void 0||(c=pr(c),c===!1))return!1;L[1]()}};function C(){const y=e[n+1];if(r===5&&y==="'"||r===6&&y==='"')return n++,f="\\"+y,L[0](),!0}for(;r!==null;)if(n++,s=e[n],!(s==="\\"&&C())){if(u=Tr(s),T=fe[r],m=T[u]||T.l||8,m===8||(r=m[0],m[1]!==void 0&&(p=L[m[1]],p&&(f=s,p()===!1))))return;if(r===7)return t}}const Ot=new Map;function Or(e,t){return U(e)?e[t]:null}function br(e,t){if(!U(e))return null;let n=Ot.get(t);if(n||(n=Ir(t),n&&Ot.set(t,n)),!n)return null;const r=n.length;let a=e,s=0;for(;s<r;){const c=a[n[s]];if(c===void 0||x(a))return null;a=c,s++}return a}const hr=e=>e,Cr=e=>"",Ar="text",Sr=e=>e.length===0?"":Wn(e),Pr=wn;function bt(e,t){return e=Math.abs(e),t===2?e?e>1?1:0:1:e?Math.min(e,2):0}function yr(e){const t=X(e.pluralIndex)?e.pluralIndex:-1;return e.named&&(X(e.named.count)||X(e.named.n))?X(e.named.count)?e.named.count:X(e.named.n)?e.named.n:t:t}function Rr(e,t){t.count||(t.count=e),t.n||(t.n=e)}function kr(e={}){const t=e.locale,n=yr(e),r=U(e.pluralRules)&&A(t)&&x(e.pluralRules[t])?e.pluralRules[t]:bt,a=U(e.pluralRules)&&A(t)&&x(e.pluralRules[t])?bt:void 0,s=i=>i[r(n,i.length,a)],c=e.list||[],f=i=>c[i],u=e.named||{};X(e.pluralIndex)&&Rr(n,u);const m=i=>u[i];function p(i){const N=x(e.messages)?e.messages(i):U(e.messages)?e.messages[i]:!1;return N||(e.parent?e.parent.message(i):Cr)}const T=i=>e.modifiers?e.modifiers[i]:hr,L=F(e.processor)&&x(e.processor.normalize)?e.processor.normalize:Sr,C=F(e.processor)&&x(e.processor.interpolate)?e.processor.interpolate:Pr,y=F(e.processor)&&A(e.processor.type)?e.processor.type:Ar,S={list:f,named:m,plural:s,linked:(i,...N)=>{const[I,E]=N;let b="text",h="";N.length===1?U(I)?(h=I.modifier||h,b=I.type||b):A(I)&&(h=I||h):N.length===2&&(A(I)&&(h=I||h),A(E)&&(b=E||b));const M=p(i)(S),W=b==="vnode"&&Y(M)&&h?M[0]:M;return h?T(h)(W,b):W},message:p,type:y,interpolate:C,normalize:L,values:K({},c,u)};return S}const Dr={NOT_FOUND_KEY:1,FALLBACK_TO_TRANSLATE:2,CANNOT_FORMAT_NUMBER:3,FALLBACK_TO_NUMBER_FORMAT:4,CANNOT_FORMAT_DATE:5,FALLBACK_TO_DATE_FORMAT:6,EXPERIMENTAL_CUSTOM_MESSAGE_COMPILER:7,__EXTEND_POINT__:8},en=R.__EXTEND_POINT__,me=it(en),ee={INVALID_ARGUMENT:en,INVALID_DATE_ARGUMENT:me(),INVALID_ISO_DATE_ARGUMENT:me(),NOT_SUPPORT_NON_STRING_MESSAGE:me(),NOT_SUPPORT_LOCALE_PROMISE_VALUE:me(),NOT_SUPPORT_LOCALE_ASYNC_FUNCTION:me(),NOT_SUPPORT_LOCALE_TYPE:me(),__EXTEND_POINT__:me()};function se(e){return Te(e,null,void 0)}function ft(e,t){return t.locale!=null?ht(t.locale):ht(e.locale)}let Qe;function ht(e){if(A(e))return e;if(x(e)){if(e.resolvedOnce&&Qe!=null)return Qe;if(e.constructor.name==="Function"){const t=e();if(Un(t))throw se(ee.NOT_SUPPORT_LOCALE_PROMISE_VALUE);return Qe=t}else throw se(ee.NOT_SUPPORT_LOCALE_ASYNC_FUNCTION)}else throw se(ee.NOT_SUPPORT_LOCALE_TYPE)}function Mr(e,t,n){return[...new Set([n,...Y(t)?t:U(t)?Object.keys(t):A(t)?[t]:[n]])]}function tn(e,t,n){const r=A(n)?n:Ve,a=e;a.__localeChainCache||(a.__localeChainCache=new Map);let s=a.__localeChainCache.get(r);if(!s){s=[];let c=[n];for(;Y(c);)c=Ct(s,c,t);const f=Y(t)||!F(t)?t:t.default?t.default:null;c=A(f)?[f]:f,Y(c)&&Ct(s,c,!1),a.__localeChainCache.set(r,s)}return s}function Ct(e,t,n){let r=!0;for(let a=0;a<t.length&&V(r);a++){const s=t[a];A(s)&&(r=Fr(e,t[a],n))}return r}function Fr(e,t,n){let r;const a=t.split("-");do{const s=a.join("-");r=vr(e,s,n),a.splice(-1,1)}while(a.length&&r===!0);return r}function vr(e,t,n){let r=!1;if(!e.includes(t)&&(r=!0,t)){r=t[t.length-1]!=="!";const a=t.replace(/!/g,"");e.push(a),(Y(n)||F(n))&&n[a]&&(r=n[a])}return r}const Ur="9.10.1",$e=-1,Ve="en-US",At="",St=e=>`${e.charAt(0).toLocaleUpperCase()}${e.substr(1)}`;function wr(){return{upper:(e,t)=>t==="text"&&A(e)?e.toUpperCase():t==="vnode"&&U(e)&&"__v_isVNode"in e?e.children.toUpperCase():e,lower:(e,t)=>t==="text"&&A(e)?e.toLowerCase():t==="vnode"&&U(e)&&"__v_isVNode"in e?e.children.toLowerCase():e,capitalize:(e,t)=>t==="text"&&A(e)?St(e):t==="vnode"&&U(e)&&"__v_isVNode"in e?St(e.children):e}}let nn;function Wr(e){nn=e}let rn;function Vr(e){rn=e}let an;function xr(e){an=e}let sn=null;const Pt=e=>{sn=e},$r=()=>sn;let yt=0;function Yr(e={}){const t=x(e.onWarn)?e.onWarn:Vn,n=A(e.version)?e.version:Ur,r=A(e.locale)||x(e.locale)?e.locale:Ve,a=x(r)?Ve:r,s=Y(e.fallbackLocale)||F(e.fallbackLocale)||A(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:a,c=F(e.messages)?e.messages:{[a]:{}},f=F(e.datetimeFormats)?e.datetimeFormats:{[a]:{}},u=F(e.numberFormats)?e.numberFormats:{[a]:{}},m=K({},e.modifiers||{},wr()),p=e.pluralRules||{},T=x(e.missing)?e.missing:null,L=V(e.missingWarn)||Ue(e.missingWarn)?e.missingWarn:!0,C=V(e.fallbackWarn)||Ue(e.fallbackWarn)?e.fallbackWarn:!0,y=!!e.fallbackFormat,k=!!e.unresolving,S=x(e.postTranslation)?e.postTranslation:null,i=F(e.processor)?e.processor:null,N=V(e.warnHtmlMessage)?e.warnHtmlMessage:!0,I=!!e.escapeParameter,E=x(e.messageCompiler)?e.messageCompiler:nn,b=x(e.messageResolver)?e.messageResolver:rn||Or,h=x(e.localeFallbacker)?e.localeFallbacker:an||Mr,M=U(e.fallbackContext)?e.fallbackContext:void 0,W=e,P=U(W.__datetimeFormatters)?W.__datetimeFormatters:new Map,B=U(W.__numberFormatters)?W.__numberFormatters:new Map,oe=U(W.__meta)?W.__meta:{};yt++;const J={version:n,cid:yt,locale:r,fallbackLocale:s,messages:c,modifiers:m,pluralRules:p,missing:T,missingWarn:L,fallbackWarn:C,fallbackFormat:y,unresolving:k,postTranslation:S,processor:i,warnHtmlMessage:N,escapeParameter:I,messageCompiler:E,messageResolver:b,localeFallbacker:h,fallbackContext:M,onWarn:t,__meta:oe};return J.datetimeFormats=f,J.numberFormats=u,J.__datetimeFormatters=P,J.__numberFormatters=B,J}function _t(e,t,n,r,a){const{missing:s,onWarn:c}=e;if(s!==null){const f=s(e,n,t,a);return A(f)?f:t}else return t}function he(e,t,n){const r=e;r.__localeChainCache=new Map,e.localeFallbacker(e,n,t)}function qe(e){return n=>Gr(n,e)}function Gr(e,t){const n=t.b||t.body;if((n.t||n.type)===1){const r=n,a=r.c||r.cases;return e.plural(a.reduce((s,c)=>[...s,Rt(e,c)],[]))}else return Rt(e,n)}function Rt(e,t){const n=t.s||t.static;if(n)return e.type==="text"?n:e.normalize([n]);{const r=(t.i||t.items).reduce((a,s)=>[...a,et(e,s)],[]);return e.normalize(r)}}function et(e,t){const n=t.t||t.type;switch(n){case 3:const r=t;return r.v||r.value;case 9:const a=t;return a.v||a.value;case 4:const s=t;return e.interpolate(e.named(s.k||s.key));case 5:const c=t;return e.interpolate(e.list(c.i!=null?c.i:c.index));case 6:const f=t,u=f.m||f.modifier;return e.linked(et(e,f.k||f.key),u?et(e,u):void 0,e.type);case 7:const m=t;return m.v||m.value;case 8:const p=t;return p.v||p.value;default:throw new Error(`unhandled node type on format message part: ${n}`)}}const Xr=e=>e;let Me=Object.create(null);const Le=e=>U(e)&&(e.t===0||e.type===0)&&("b"in e||"body"in e);function Hr(e,t={}){let n=!1;const r=t.onError||Hn;return t.onError=a=>{n=!0,r(a)},{...dr(e,t),detectError:n}}function Kr(e,t){if(__INTLIFY_JIT_COMPILATION__&&!__INTLIFY_DROP_MESSAGE_COMPILER__&&A(e)){V(t.warnHtmlMessage)&&t.warnHtmlMessage;const r=(t.onCacheKey||Xr)(e),a=Me[r];if(a)return a;const{ast:s,detectError:c}=Hr(e,{...t,location:!1,jit:!0}),f=qe(s);return c?f:Me[r]=f}else{const n=e.cacheKey;if(n){const r=Me[n];return r||(Me[n]=qe(e))}else return qe(e)}}const kt=()=>"",le=e=>x(e);function Dt(e,...t){const{fallbackFormat:n,postTranslation:r,unresolving:a,messageCompiler:s,fallbackLocale:c,messages:f}=e,[u,m]=tt(...t),p=V(m.missingWarn)?m.missingWarn:e.missingWarn,T=V(m.fallbackWarn)?m.fallbackWarn:e.fallbackWarn,L=V(m.escapeParameter)?m.escapeParameter:e.escapeParameter,C=!!m.resolvedMessage,y=A(m.default)||V(m.default)?V(m.default)?s?u:()=>u:m.default:n?s?u:()=>u:"",k=n||y!=="",S=ft(e,m);L&&jr(m);let[i,N,I]=C?[u,S,f[S]||{}]:ln(e,u,S,c,T,p),E=i,b=u;if(!C&&!(A(E)||Le(E)||le(E))&&k&&(E=y,b=E),!C&&(!(A(E)||Le(E)||le(E))||!A(N)))return a?$e:u;let h=!1;const M=()=>{h=!0},W=le(E)?E:cn(e,u,N,E,b,M);if(h)return E;const P=Qr(e,N,I,m),B=kr(P),oe=Br(e,W,B);return r?r(oe,u):oe}function jr(e){Y(e.list)?e.list=e.list.map(t=>A(t)?gt(t):t):U(e.named)&&Object.keys(e.named).forEach(t=>{A(e.named[t])&&(e.named[t]=gt(e.named[t]))})}function ln(e,t,n,r,a,s){const{messages:c,onWarn:f,messageResolver:u,localeFallbacker:m}=e,p=m(e,r,n);let T={},L,C=null;const y="translate";for(let k=0;k<p.length&&(L=p[k],T=c[L]||{},(C=u(T,t))===null&&(C=T[t]),!(A(C)||Le(C)||le(C)));k++){const S=_t(e,t,L,s,y);S!==t&&(C=S)}return[C,L,T]}function cn(e,t,n,r,a,s){const{messageCompiler:c,warnHtmlMessage:f}=e;if(le(r)){const m=r;return m.locale=m.locale||n,m.key=m.key||t,m}if(c==null){const m=()=>r;return m.locale=n,m.key=t,m}const u=c(r,Jr(e,n,a,r,f,s));return u.locale=n,u.key=t,u.source=r,u}function Br(e,t,n){return t(n)}function tt(...e){const[t,n,r]=e,a={};if(!A(t)&&!X(t)&&!le(t)&&!Le(t))throw se(ee.INVALID_ARGUMENT);const s=X(t)?String(t):(le(t),t);return X(n)?a.plural=n:A(n)?a.default=n:F(n)&&!xe(n)?a.named=n:Y(n)&&(a.list=n),X(r)?a.plural=r:A(r)?a.default=r:F(r)&&K(a,r),[s,a]}function Jr(e,t,n,r,a,s){return{locale:t,key:n,warnHtmlMessage:a,onError:c=>{throw s&&s(c),c},onCacheKey:c=>Dn(t,n,c)}}function Qr(e,t,n,r){const{modifiers:a,pluralRules:s,messageResolver:c,fallbackLocale:f,fallbackWarn:u,missingWarn:m,fallbackContext:p}=e,L={locale:t,modifiers:a,pluralRules:s,messages:C=>{let y=c(n,C);if(y==null&&p){const[,,k]=ln(p,C,t,f,u,m);y=c(k,C)}if(A(y)||Le(y)){let k=!1;const i=cn(e,C,t,y,C,()=>{k=!0});return k?kt:i}else return le(y)?y:kt}};return e.processor&&(L.processor=e.processor),r.list&&(L.list=r.list),r.named&&(L.named=r.named),X(r.plural)&&(L.pluralIndex=r.plural),L}function Mt(e,...t){const{datetimeFormats:n,unresolving:r,fallbackLocale:a,onWarn:s,localeFallbacker:c}=e,{__datetimeFormatters:f}=e,[u,m,p,T]=nt(...t),L=V(p.missingWarn)?p.missingWarn:e.missingWarn;V(p.fallbackWarn)?p.fallbackWarn:e.fallbackWarn;const C=!!p.part,y=ft(e,p),k=c(e,a,y);if(!A(u)||u==="")return new Intl.DateTimeFormat(y,T).format(m);let S={},i,N=null;const I="datetime format";for(let h=0;h<k.length&&(i=k[h],S=n[i]||{},N=S[u],!F(N));h++)_t(e,u,i,L,I);if(!F(N)||!A(i))return r?$e:u;let E=`${i}__${u}`;xe(T)||(E=`${E}__${JSON.stringify(T)}`);let b=f.get(E);return b||(b=new Intl.DateTimeFormat(i,K({},N,T)),f.set(E,b)),C?b.formatToParts(m):b.format(m)}const on=["localeMatcher","weekday","era","year","month","day","hour","minute","second","timeZoneName","formatMatcher","hour12","timeZone","dateStyle","timeStyle","calendar","dayPeriod","numberingSystem","hourCycle","fractionalSecondDigits"];function nt(...e){const[t,n,r,a]=e,s={};let c={},f;if(A(t)){const u=t.match(/(\d{4}-\d{2}-\d{2})(T|\s)?(.*)/);if(!u)throw se(ee.INVALID_ISO_DATE_ARGUMENT);const m=u[3]?u[3].trim().startsWith("T")?`${u[1].trim()}${u[3].trim()}`:`${u[1].trim()}T${u[3].trim()}`:u[1].trim();f=new Date(m);try{f.toISOString()}catch{throw se(ee.INVALID_ISO_DATE_ARGUMENT)}}else if(Fn(t)){if(isNaN(t.getTime()))throw se(ee.INVALID_DATE_ARGUMENT);f=t}else if(X(t))f=t;else throw se(ee.INVALID_ARGUMENT);return A(n)?s.key=n:F(n)&&Object.keys(n).forEach(u=>{on.includes(u)?c[u]=n[u]:s[u]=n[u]}),A(r)?s.locale=r:F(r)&&(c=r),F(a)&&(c=a),[s.key||"",f,s,c]}function Ft(e,t,n){const r=e;for(const a in n){const s=`${t}__${a}`;!r.__datetimeFormatters.has(s)||r.__datetimeFormatters.delete(s)}}function vt(e,...t){const{numberFormats:n,unresolving:r,fallbackLocale:a,onWarn:s,localeFallbacker:c}=e,{__numberFormatters:f}=e,[u,m,p,T]=rt(...t),L=V(p.missingWarn)?p.missingWarn:e.missingWarn;V(p.fallbackWarn)?p.fallbackWarn:e.fallbackWarn;const C=!!p.part,y=ft(e,p),k=c(e,a,y);if(!A(u)||u==="")return new Intl.NumberFormat(y,T).format(m);let S={},i,N=null;const I="number format";for(let h=0;h<k.length&&(i=k[h],S=n[i]||{},N=S[u],!F(N));h++)_t(e,u,i,L,I);if(!F(N)||!A(i))return r?$e:u;let E=`${i}__${u}`;xe(T)||(E=`${E}__${JSON.stringify(T)}`);let b=f.get(E);return b||(b=new Intl.NumberFormat(i,K({},N,T)),f.set(E,b)),C?b.formatToParts(m):b.format(m)}const un=["localeMatcher","style","currency","currencyDisplay","currencySign","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","compactDisplay","notation","signDisplay","unit","unitDisplay","roundingMode","roundingPriority","roundingIncrement","trailingZeroDisplay"];function rt(...e){const[t,n,r,a]=e,s={};let c={};if(!X(t))throw se(ee.INVALID_ARGUMENT);const f=t;return A(n)?s.key=n:F(n)&&Object.keys(n).forEach(u=>{un.includes(u)?c[u]=n[u]:s[u]=n[u]}),A(r)?s.locale=r:F(r)&&(c=r),F(a)&&(c=a),[s.key||"",f,s,c]}function Ut(e,t,n){const r=e;for(const a in n){const s=`${t}__${a}`;!r.__numberFormatters.has(s)||r.__numberFormatters.delete(s)}}Er();/*!
  * vue-i18n v9.10.1
  * (c) 2024 kazuya kawaguchi
  * Released under the MIT License.
  */const qr="9.10.1";function Zr(){typeof __INTLIFY_JIT_COMPILATION__!="boolean"&&(we().__INTLIFY_JIT_COMPILATION__=!1),typeof __INTLIFY_DROP_MESSAGE_COMPILER__!="boolean"&&(we().__INTLIFY_DROP_MESSAGE_COMPILER__=!1)}const fn=Dr.__EXTEND_POINT__,ae=it(fn);ae(),ae(),ae(),ae(),ae(),ae(),ae(),ae(),ae();const _n=ee.__EXTEND_POINT__,j=it(_n),Q={UNEXPECTED_RETURN_TYPE:_n,INVALID_ARGUMENT:j(),MUST_BE_CALL_SETUP_TOP:j(),NOT_INSTALLED:j(),NOT_AVAILABLE_IN_LEGACY_MODE:j(),REQUIRED_VALUE:j(),INVALID_VALUE:j(),CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN:j(),NOT_INSTALLED_WITH_PROVIDE:j(),UNEXPECTED_ERROR:j(),NOT_COMPATIBLE_LEGACY_VUE_I18N:j(),BRIDGE_SUPPORT_VUE_2_ONLY:j(),MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION:j(),NOT_AVAILABLE_COMPOSITION_IN_LEGACY:j(),__EXTEND_POINT__:j()};function q(e,...t){return Te(e,null,void 0)}const at=ce("__translateVNode"),st=ce("__datetimeParts"),lt=ce("__numberParts"),zr=ce("__setPluralRules");ce("__intlifyMeta");const ea=ce("__injectWithOption"),ct=ce("__dispose");function Ce(e){if(!U(e))return e;for(const t in e)if(!!We(e,t))if(!t.includes("."))U(e[t])&&Ce(e[t]);else{const n=t.split("."),r=n.length-1;let a=e,s=!1;for(let c=0;c<r;c++){if(n[c]in a||(a[n[c]]={}),!U(a[n[c]])){s=!0;break}a=a[n[c]]}s||(a[n[r]]=e[t],delete e[t]),U(a[n[r]])&&Ce(a[n[r]])}return e}function mn(e,t){const{messages:n,__i18n:r,messageResolver:a,flatJson:s}=t,c=F(n)?n:Y(r)?{}:{[e]:{}};if(Y(r)&&r.forEach(f=>{if("locale"in f&&"resource"in f){const{locale:u,resource:m}=f;u?(c[u]=c[u]||{},Fe(m,c[u])):Fe(m,c)}else A(f)&&Fe(JSON.parse(f),c)}),a==null&&s)for(const f in c)We(c,f)&&Ce(c[f]);return c}function ta(e){return e.type}function na(e,t,n){let r=U(t.messages)?t.messages:{};"__i18nGlobal"in n&&(r=mn(e.locale.value,{messages:r,__i18n:n.__i18nGlobal}));const a=Object.keys(r);a.length&&a.forEach(s=>{e.mergeLocaleMessage(s,r[s])});{if(U(t.datetimeFormats)){const s=Object.keys(t.datetimeFormats);s.length&&s.forEach(c=>{e.mergeDateTimeFormat(c,t.datetimeFormats[c])})}if(U(t.numberFormats)){const s=Object.keys(t.numberFormats);s.length&&s.forEach(c=>{e.mergeNumberFormat(c,t.numberFormats[c])})}}}function wt(e){return yn(Rn,null,e,0)}const Wt=()=>[],ra=()=>!1;let Vt=0;function xt(e){return(t,n,r,a)=>e(n,r,Jt()||void 0,a)}function dn(e={},t){const{__root:n,__injectWithOption:r}=e,a=n===void 0,s=e.flatJson,c=ve?Sn:Pn,f=!!e.translateExistCompatible;let u=V(e.inheritLocale)?e.inheritLocale:!0;const m=c(n&&u?n.locale.value:A(e.locale)?e.locale:Ve),p=c(n&&u?n.fallbackLocale.value:A(e.fallbackLocale)||Y(e.fallbackLocale)||F(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:m.value),T=c(mn(m.value,e)),L=c(F(e.datetimeFormats)?e.datetimeFormats:{[m.value]:{}}),C=c(F(e.numberFormats)?e.numberFormats:{[m.value]:{}});let y=n?n.missingWarn:V(e.missingWarn)||Ue(e.missingWarn)?e.missingWarn:!0,k=n?n.fallbackWarn:V(e.fallbackWarn)||Ue(e.fallbackWarn)?e.fallbackWarn:!0,S=n?n.fallbackRoot:V(e.fallbackRoot)?e.fallbackRoot:!0,i=!!e.fallbackFormat,N=x(e.missing)?e.missing:null,I=x(e.missing)?xt(e.missing):null,E=x(e.postTranslation)?e.postTranslation:null,b=n?n.warnHtmlMessage:V(e.warnHtmlMessage)?e.warnHtmlMessage:!0,h=!!e.escapeParameter;const M=n?n.modifiers:F(e.modifiers)?e.modifiers:{};let W=e.pluralRules||n&&n.pluralRules,P;P=(()=>{a&&Pt(null);const _={version:qr,locale:m.value,fallbackLocale:p.value,messages:T.value,modifiers:M,pluralRules:W,missing:I===null?void 0:I,missingWarn:y,fallbackWarn:k,fallbackFormat:i,unresolving:!0,postTranslation:E===null?void 0:E,warnHtmlMessage:b,escapeParameter:h,messageResolver:e.messageResolver,messageCompiler:e.messageCompiler,__meta:{framework:"vue"}};_.datetimeFormats=L.value,_.numberFormats=C.value,_.__datetimeFormatters=F(P)?P.__datetimeFormatters:void 0,_.__numberFormatters=F(P)?P.__numberFormatters:void 0;const g=Yr(_);return a&&Pt(g),g})(),he(P,m.value,p.value);function oe(){return[m.value,p.value,T.value,L.value,C.value]}const J=be({get:()=>m.value,set:_=>{m.value=_,P.locale=m.value}}),_e=be({get:()=>p.value,set:_=>{p.value=_,P.fallbackLocale=p.value,he(P,m.value,_)}}),Ae=be(()=>T.value),Ye=be(()=>L.value),Ge=be(()=>C.value);function Se(){return x(E)?E:null}function Xe(_){E=_,P.postTranslation=_}function Pe(){return N}function He(_){_!==null&&(I=xt(_)),N=_,P.missing=I}const te=(_,g,w,$,ie,ke)=>{oe();let Ee;try{a||(P.fallbackContext=n?$r():void 0),Ee=_(P)}finally{a||(P.fallbackContext=void 0)}if(w!=="translate exists"&&X(Ee)&&Ee===$e||w==="translate exists"&&!Ee){const[In,Ca]=g();return n&&S?$(n):ie(In)}else{if(ke(Ee))return Ee;throw q(Q.UNEXPECTED_RETURN_TYPE)}};function ye(..._){return te(g=>Reflect.apply(Dt,null,[g,..._]),()=>tt(..._),"translate",g=>Reflect.apply(g.t,g,[..._]),g=>g,g=>A(g))}function Ke(..._){const[g,w,$]=_;if($&&!U($))throw q(Q.INVALID_ARGUMENT);return ye(g,w,K({resolvedMessage:!0},$||{}))}function Re(..._){return te(g=>Reflect.apply(Mt,null,[g,..._]),()=>nt(..._),"datetime format",g=>Reflect.apply(g.d,g,[..._]),()=>At,g=>A(g))}function je(..._){return te(g=>Reflect.apply(vt,null,[g,..._]),()=>rt(..._),"number format",g=>Reflect.apply(g.n,g,[..._]),()=>At,g=>A(g))}function Be(_){return _.map(g=>A(g)||X(g)||V(g)?wt(String(g)):g)}const pe={normalize:Be,interpolate:_=>_,type:"vnode"};function Ie(..._){return te(g=>{let w;const $=g;try{$.processor=pe,w=Reflect.apply(Dt,null,[$,..._])}finally{$.processor=null}return w},()=>tt(..._),"translate",g=>g[at](..._),g=>[wt(g)],g=>Y(g))}function de(..._){return te(g=>Reflect.apply(vt,null,[g,..._]),()=>rt(..._),"number format",g=>g[lt](..._),Wt,g=>A(g)||Y(g))}function Oe(..._){return te(g=>Reflect.apply(Mt,null,[g,..._]),()=>nt(..._),"datetime format",g=>g[st](..._),Wt,g=>A(g)||Y(g))}function Je(_){W=_,P.pluralRules=W}function l(_,g){return te(()=>{if(!_)return!1;const w=A(g)?g:m.value,$=O(w),ie=P.messageResolver($,_);return f?ie!=null:Le(ie)||le(ie)||A(ie)},()=>[_],"translate exists",w=>Reflect.apply(w.te,w,[_,g]),ra,w=>V(w))}function o(_){let g=null;const w=tn(P,p.value,m.value);for(let $=0;$<w.length;$++){const ie=T.value[w[$]]||{},ke=P.messageResolver(ie,_);if(ke!=null){g=ke;break}}return g}function d(_){const g=o(_);return g!=null?g:n?n.tm(_)||{}:{}}function O(_){return T.value[_]||{}}function D(_,g){if(s){const w={[_]:g};for(const $ in w)We(w,$)&&Ce(w[$]);g=w[_]}T.value[_]=g,P.messages=T.value}function v(_,g){T.value[_]=T.value[_]||{};const w={[_]:g};if(s)for(const $ in w)We(w,$)&&Ce(w[$]);g=w[_],Fe(g,T.value[_]),P.messages=T.value}function Z(_){return L.value[_]||{}}function ne(_,g){L.value[_]=g,P.datetimeFormats=L.value,Ft(P,_,g)}function gn(_,g){L.value[_]=K(L.value[_]||{},g),P.datetimeFormats=L.value,Ft(P,_,g)}function Ln(_){return C.value[_]||{}}function Tn(_,g){C.value[_]=g,P.numberFormats=C.value,Ut(P,_,g)}function pn(_,g){C.value[_]=K(C.value[_]||{},g),P.numberFormats=C.value,Ut(P,_,g)}Vt++,n&&ve&&(Ze(n.locale,_=>{u&&(m.value=_,P.locale=_,he(P,m.value,p.value))}),Ze(n.fallbackLocale,_=>{u&&(p.value=_,P.fallbackLocale=_,he(P,m.value,p.value))}));const G={id:Vt,locale:J,fallbackLocale:_e,get inheritLocale(){return u},set inheritLocale(_){u=_,_&&n&&(m.value=n.locale.value,p.value=n.fallbackLocale.value,he(P,m.value,p.value))},get availableLocales(){return Object.keys(T.value).sort()},messages:Ae,get modifiers(){return M},get pluralRules(){return W||{}},get isGlobal(){return a},get missingWarn(){return y},set missingWarn(_){y=_,P.missingWarn=y},get fallbackWarn(){return k},set fallbackWarn(_){k=_,P.fallbackWarn=k},get fallbackRoot(){return S},set fallbackRoot(_){S=_},get fallbackFormat(){return i},set fallbackFormat(_){i=_,P.fallbackFormat=i},get warnHtmlMessage(){return b},set warnHtmlMessage(_){b=_,P.warnHtmlMessage=_},get escapeParameter(){return h},set escapeParameter(_){h=_,P.escapeParameter=_},t:ye,getLocaleMessage:O,setLocaleMessage:D,mergeLocaleMessage:v,getPostTranslationHandler:Se,setPostTranslationHandler:Xe,getMissingHandler:Pe,setMissingHandler:He,[zr]:Je};return G.datetimeFormats=Ye,G.numberFormats=Ge,G.rt=Ke,G.te=l,G.tm=d,G.d=Re,G.n=je,G.getDateTimeFormat=Z,G.setDateTimeFormat=ne,G.mergeDateTimeFormat=gn,G.getNumberFormat=Ln,G.setNumberFormat=Tn,G.mergeNumberFormat=pn,G[ea]=r,G[at]=Ie,G[st]=Oe,G[lt]=de,G}const mt={tag:{type:[String,Object]},locale:{type:String},scope:{type:String,validator:e=>e==="parent"||e==="global",default:"parent"},i18n:{type:Object}};function aa({slots:e},t){return t.length===1&&t[0]==="default"?(e.default?e.default():[]).reduce((r,a)=>[...r,...a.type===Bt?a.children:[a]],[]):t.reduce((n,r)=>{const a=e[r];return a&&(n[r]=a()),n},{})}function En(e){return Bt}const sa=ot({name:"i18n-t",props:K({keypath:{type:String,required:!0},plural:{type:[Number,String],validator:e=>X(e)||!isNaN(e)}},mt),setup(e,t){const{slots:n,attrs:r}=t,a=e.i18n||dt({useScope:e.scope,__useComponent:!0});return()=>{const s=Object.keys(n).filter(T=>T!=="_"),c={};e.locale&&(c.locale=e.locale),e.plural!==void 0&&(c.plural=A(e.plural)?+e.plural:e.plural);const f=aa(t,s),u=a[at](e.keypath,f,c),m=K({},r),p=A(e.tag)||U(e.tag)?e.tag:En();return jt(p,m,u)}}}),$t=sa;function la(e){return Y(e)&&!A(e[0])}function Nn(e,t,n,r){const{slots:a,attrs:s}=t;return()=>{const c={part:!0};let f={};e.locale&&(c.locale=e.locale),A(e.format)?c.key=e.format:U(e.format)&&(A(e.format.key)&&(c.key=e.format.key),f=Object.keys(e.format).reduce((L,C)=>n.includes(C)?K({},L,{[C]:e.format[C]}):L,{}));const u=r(e.value,c,f);let m=[c.key];Y(u)?m=u.map((L,C)=>{const y=a[L.type],k=y?y({[L.type]:L.value,index:C,parts:u}):[L.value];return la(k)&&(k[0].key=`${L.type}-${C}`),k}):A(u)&&(m=[u]);const p=K({},s),T=A(e.tag)||U(e.tag)?e.tag:En();return jt(T,p,m)}}const ca=ot({name:"i18n-n",props:K({value:{type:Number,required:!0},format:{type:[String,Object]}},mt),setup(e,t){const n=e.i18n||dt({useScope:"parent",__useComponent:!0});return Nn(e,t,un,(...r)=>n[lt](...r))}}),Yt=ca,oa=ot({name:"i18n-d",props:K({value:{type:[Number,Date],required:!0},format:{type:[String,Object]}},mt),setup(e,t){const n=e.i18n||dt({useScope:"parent",__useComponent:!0});return Nn(e,t,on,(...r)=>n[st](...r))}}),Gt=oa;function ia(e,t){const n=e;if(e.mode==="composition")return n.__getInstance(t)||e.global;{const r=n.__getInstance(t);return r!=null?r.__composer:e.global.__composer}}function ua(e){const t=c=>{const{instance:f,modifiers:u,value:m}=c;if(!f||!f.$)throw q(Q.UNEXPECTED_ERROR);const p=ia(e,f.$),T=Xt(m);return[Reflect.apply(p.t,p,[...Ht(T)]),p]};return{created:(c,f)=>{const[u,m]=t(f);ve&&e.global===m&&(c.__i18nWatcher=Ze(m.locale,()=>{f.instance&&f.instance.$forceUpdate()})),c.__composer=m,c.textContent=u},unmounted:c=>{ve&&c.__i18nWatcher&&(c.__i18nWatcher(),c.__i18nWatcher=void 0,delete c.__i18nWatcher),c.__composer&&(c.__composer=void 0,delete c.__composer)},beforeUpdate:(c,{value:f})=>{if(c.__composer){const u=c.__composer,m=Xt(f);c.textContent=Reflect.apply(u.t,u,[...Ht(m)])}},getSSRProps:c=>{const[f]=t(c);return{textContent:f}}}}function Xt(e){if(A(e))return{path:e};if(F(e)){if(!("path"in e))throw q(Q.REQUIRED_VALUE,"path");return e}else throw q(Q.INVALID_VALUE)}function Ht(e){const{path:t,locale:n,args:r,choice:a,plural:s}=e,c={},f=r||{};return A(n)&&(c.locale=n),X(a)&&(c.plural=a),X(s)&&(c.plural=s),[t,f,c]}function fa(e,t,...n){const r=F(n[0])?n[0]:{},a=!!r.useI18nComponentName;(V(r.globalInstall)?r.globalInstall:!0)&&([a?"i18n":$t.name,"I18nT"].forEach(c=>e.component(c,$t)),[Yt.name,"I18nN"].forEach(c=>e.component(c,Yt)),[Gt.name,"I18nD"].forEach(c=>e.component(c,Gt))),e.directive("t",ua(t))}const _a=ce("global-vue-i18n");function ma(e={},t){const n=V(e.globalInjection)?e.globalInjection:!0,r=!0,a=new Map,[s,c]=da(e),f=ce("");function u(T){return a.get(T)||null}function m(T,L){a.set(T,L)}function p(T){a.delete(T)}{const T={get mode(){return"composition"},get allowComposition(){return r},async install(L,...C){if(L.__VUE_I18N_SYMBOL__=f,L.provide(L.__VUE_I18N_SYMBOL__,T),F(C[0])){const S=C[0];T.__composerExtend=S.__composerExtend,T.__vueI18nExtend=S.__vueI18nExtend}let y=null;n&&(y=Oa(L,T.global)),fa(L,T,...C);const k=L.unmount;L.unmount=()=>{y&&y(),T.dispose(),k()}},get global(){return c},dispose(){s.stop()},__instances:a,__getInstance:u,__setInstance:m,__deleteInstance:p};return T}}function dt(e={}){const t=Jt();if(t==null)throw q(Q.MUST_BE_CALL_SETUP_TOP);if(!t.isCE&&t.appContext.app!=null&&!t.appContext.app.__VUE_I18N_SYMBOL__)throw q(Q.NOT_INSTALLED);const n=Ea(t),r=ga(n),a=ta(t),s=Na(e,a);if(s==="global")return na(r,e,a),r;if(s==="parent"){let u=La(n,t,e.__useComponent);return u==null&&(u=r),u}const c=n;let f=c.__getInstance(t);if(f==null){const u=K({},e);"__i18n"in a&&(u.__i18n=a.__i18n),r&&(u.__root=r),f=dn(u),c.__composerExtend&&(f[ct]=c.__composerExtend(f)),pa(c,t,f),c.__setInstance(t,f)}return f}function da(e,t,n){const r=On();{const a=r.run(()=>dn(e));if(a==null)throw q(Q.UNEXPECTED_ERROR);return[r,a]}}function Ea(e){{const t=bn(e.isCE?_a:e.appContext.app.__VUE_I18N_SYMBOL__);if(!t)throw q(e.isCE?Q.NOT_INSTALLED_WITH_PROVIDE:Q.UNEXPECTED_ERROR);return t}}function Na(e,t){return xe(e)?"__i18n"in t?"local":"global":e.useScope?e.useScope:"local"}function ga(e){return e.mode==="composition"?e.global:e.global.__composer}function La(e,t,n=!1){let r=null;const a=t.root;let s=Ta(t,n);for(;s!=null;){const c=e;if(e.mode==="composition"&&(r=c.__getInstance(s)),r!=null||a===s)break;s=s.parent}return r}function Ta(e,t=!1){return e==null?null:t&&e.vnode.ctx||e.parent}function pa(e,t,n){hn(()=>{},t),Cn(()=>{const r=n;e.__deleteInstance(t);const a=r[ct];a&&(a(),delete r[ct])},t)}const Ia=["locale","fallbackLocale","availableLocales"],Kt=["t","rt","d","n","tm","te"];function Oa(e,t){const n=Object.create(null);return Ia.forEach(a=>{const s=Object.getOwnPropertyDescriptor(t,a);if(!s)throw q(Q.UNEXPECTED_ERROR);const c=An(s.value)?{get(){return s.value.value},set(f){s.value.value=f}}:{get(){return s.get&&s.get()}};Object.defineProperty(n,a,c)}),e.config.globalProperties.$i18n=n,Kt.forEach(a=>{const s=Object.getOwnPropertyDescriptor(t,a);if(!s||!s.value)throw q(Q.UNEXPECTED_ERROR);Object.defineProperty(e.config.globalProperties,`$${a}`,s)}),()=>{delete e.config.globalProperties.$i18n,Kt.forEach(a=>{delete e.config.globalProperties[`$${a}`]})}}Zr();__INTLIFY_JIT_COMPILATION__&&Wr(Kr);Vr(br);xr(tn);var ba={failed:"Action failed",success:"Action was successful"},ha={"en-US":ba},Sa=kn(({app:e})=>{const t=ma({locale:"en-US",globalInjection:!0,messages:ha});e.use(t)});export{Sa as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
